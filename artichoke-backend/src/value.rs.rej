diff a/artichoke-backend/src/value.rs b/artichoke-backend/src/value.rs	(rejected hunks)
@@ -157,6 +163,7 @@ impl Value {
     /// ```
     ///
     /// This function can never fail.
+    #[must_use]
     pub fn to_s_debug(&self) -> String {
         let inspect = self.inspect();
         format!(
@@ -362,21 +369,24 @@ impl ValueLike for Value {
     }
 
     fn freeze(&mut self) -> Result<(), ArtichokeError> {
-        self.funcall::<Self>("freeze", &[], None)?;
+        let _ = self.funcall::<Self>("freeze", &[], None)?;
         Ok(())
     }
 
+    #[must_use]
     fn is_frozen(&self) -> bool {
         let mrb = self.interp.0.borrow().mrb;
         let inner = self.inner();
         unsafe { sys::mrb_sys_obj_frozen(mrb, inner) }
     }
 
+    #[must_use]
     fn inspect(&self) -> Vec<u8> {
         self.funcall::<Vec<u8>>("inspect", &[], None)
             .unwrap_or_default()
     }
 
+    #[must_use]
     fn is_nil(&self) -> bool {
         unsafe { sys::mrb_sys_value_is_nil(self.inner()) }
     }
@@ -386,6 +396,7 @@ impl ValueLike for Value {
         self.funcall::<bool>("respond_to?", &[method], None)
     }
 
+    #[must_use]
     fn to_s(&self) -> Vec<u8> {
         self.funcall::<Vec<u8>>("to_s", &[], None)
             .unwrap_or_default()
