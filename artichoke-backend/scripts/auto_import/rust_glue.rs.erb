use artichoke_core::load::LoadSources;

use crate::{Artichoke, ArtichokeError};

pub fn init(interp: &Artichoke) -> Result<(), ArtichokeError> {
    <% constants.each do |(constant, klass)| %>
    <% if klass == "Class" %>
    let spec = crate::class::Spec::new("<%= constant %>", None, None);
    interp.0.borrow_mut().def_class::<<%= constant %>>(spec);
    <% elsif klass == "Module" %>
    let spec = crate::module::Spec::new("<%= constant %>", None);
    interp.0.borrow_mut().def_module::<<%= constant %>>(spec);
    <% else %>
    // Skipping constant <%= constant %> with class <%= klass %>
    <% end %>
    <% end %>
    <% sources.each do |(file, source)| %>
    interp.def_rb_source_file(
        b"<%= file.gsub('\\', '/') %>.rb",
        &include_bytes!(concat!(env!("OUT_DIR"), "/src/generated/<%= file.gsub('\\', '/') %>.rb"))[..]
    )?;
    <% end %>
    Ok(())
}
<% constants.each_with_index do |(constant, _), i| %>
pub struct <%= constant %>;
<% end %>
