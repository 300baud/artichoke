/* automatically generated by rust-bindgen */

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage, Align>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    storage: Storage,
    align: [Align; 0],
}

impl<Storage, Align> __BindgenBitfieldUnit<Storage, Align>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    pub fn new(storage: Storage) -> Self {
        Self { storage, align: [] }
    }

    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());

        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];

        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };

        let mask = 1 << bit_index;

        byte & mask == mask
    }

    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());

        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];

        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };

        let mask = 1 << bit_index;
        if val {
            *byte |= mask;
        } else {
            *byte &= !mask;
        }
    }

    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());

        let mut val = 0;

        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }

        val
    }

    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());

        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
}
#[repr(C)]
#[derive(Default)]
pub struct __IncompleteArrayField<T>(::std::marker::PhantomData<T>);
impl<T> __IncompleteArrayField<T> {
    #[inline]
    pub fn new() -> Self {
        __IncompleteArrayField(::std::marker::PhantomData)
    }
    #[inline]
    pub unsafe fn as_ptr(&self) -> *const T {
        ::std::mem::transmute(self)
    }
    #[inline]
    pub unsafe fn as_mut_ptr(&mut self) -> *mut T {
        ::std::mem::transmute(self)
    }
    #[inline]
    pub unsafe fn as_slice(&self, len: usize) -> &[T] {
        ::std::slice::from_raw_parts(self.as_ptr(), len)
    }
    #[inline]
    pub unsafe fn as_mut_slice(&mut self, len: usize) -> &mut [T] {
        ::std::slice::from_raw_parts_mut(self.as_mut_ptr(), len)
    }
}
impl<T> ::std::fmt::Debug for __IncompleteArrayField<T> {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.write_str("__IncompleteArrayField")
    }
}
impl<T> ::std::clone::Clone for __IncompleteArrayField<T> {
    #[inline]
    fn clone(&self) -> Self {
        Self::new()
    }
}
impl<T> ::std::marker::Copy for __IncompleteArrayField<T> {}
pub const __GNUC_VA_LIST: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __DARWIN_ONLY_64_BIT_INO_T: u32 = 0;
pub const __DARWIN_ONLY_VERS_1050: u32 = 0;
pub const __DARWIN_ONLY_UNIX_CONFORMANCE: u32 = 1;
pub const __DARWIN_UNIX03: u32 = 1;
pub const __DARWIN_64_BIT_INO_T: u32 = 1;
pub const __DARWIN_VERS_1050: u32 = 1;
pub const __DARWIN_NON_CANCELABLE: u32 = 0;
pub const __DARWIN_SUF_64_BIT_INO_T: &'static [u8; 9usize] = b"$INODE64\0";
pub const __DARWIN_SUF_1050: &'static [u8; 6usize] = b"$1050\0";
pub const __DARWIN_SUF_EXTSN: &'static [u8; 14usize] = b"$DARWIN_EXTSN\0";
pub const __DARWIN_C_ANSI: u32 = 4096;
pub const __DARWIN_C_FULL: u32 = 900000;
pub const __DARWIN_C_LEVEL: u32 = 900000;
pub const __STDC_WANT_LIB_EXT1__: u32 = 1;
pub const __DARWIN_NO_LONG_LONG: u32 = 0;
pub const _DARWIN_FEATURE_64_BIT_INODE: u32 = 1;
pub const _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE: u32 = 1;
pub const _DARWIN_FEATURE_UNIX_CONFORMANCE: u32 = 3;
pub const __PTHREAD_SIZE__: u32 = 8176;
pub const __PTHREAD_ATTR_SIZE__: u32 = 56;
pub const __PTHREAD_MUTEXATTR_SIZE__: u32 = 8;
pub const __PTHREAD_MUTEX_SIZE__: u32 = 56;
pub const __PTHREAD_CONDATTR_SIZE__: u32 = 8;
pub const __PTHREAD_COND_SIZE__: u32 = 40;
pub const __PTHREAD_ONCE_SIZE__: u32 = 8;
pub const __PTHREAD_RWLOCK_SIZE__: u32 = 192;
pub const __PTHREAD_RWLOCKATTR_SIZE__: u32 = 16;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const INT64_MAX: u64 = 9223372036854775807;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT64_MIN: i64 = -9223372036854775808;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const UINT64_MAX: i32 = -1;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST64_MIN: i64 = -9223372036854775808;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const INT_LEAST64_MAX: u64 = 9223372036854775807;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const UINT_LEAST64_MAX: i32 = -1;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i32 = -32768;
pub const INT_FAST32_MIN: i32 = -2147483648;
pub const INT_FAST64_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u32 = 32767;
pub const INT_FAST32_MAX: u32 = 2147483647;
pub const INT_FAST64_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: u32 = 65535;
pub const UINT_FAST32_MAX: u32 = 4294967295;
pub const UINT_FAST64_MAX: i32 = -1;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const UINTPTR_MAX: i32 = -1;
pub const INTMAX_MIN: i64 = -9223372036854775808;
pub const INTMAX_MAX: u64 = 9223372036854775807;
pub const UINTMAX_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIZE_MAX: i32 = -1;
pub const RSIZE_MAX: i32 = -1;
pub const WINT_MIN: i32 = -2147483648;
pub const WINT_MAX: u32 = 2147483647;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const __DARWIN_CLK_TCK: u32 = 100;
pub const CHAR_BIT: u32 = 8;
pub const MB_LEN_MAX: u32 = 6;
pub const CLK_TCK: u32 = 100;
pub const SCHAR_MAX: u32 = 127;
pub const SCHAR_MIN: i32 = -128;
pub const UCHAR_MAX: u32 = 255;
pub const CHAR_MAX: u32 = 127;
pub const CHAR_MIN: i32 = -128;
pub const USHRT_MAX: u32 = 65535;
pub const SHRT_MAX: u32 = 32767;
pub const SHRT_MIN: i32 = -32768;
pub const UINT_MAX: u32 = 4294967295;
pub const INT_MAX: u32 = 2147483647;
pub const INT_MIN: i32 = -2147483648;
pub const ULONG_MAX: i32 = -1;
pub const LONG_MAX: u64 = 9223372036854775807;
pub const LONG_MIN: i64 = -9223372036854775808;
pub const ULLONG_MAX: i32 = -1;
pub const LLONG_MAX: u64 = 9223372036854775807;
pub const LLONG_MIN: i64 = -9223372036854775808;
pub const LONG_BIT: u32 = 64;
pub const SSIZE_MAX: u64 = 9223372036854775807;
pub const WORD_BIT: u32 = 32;
pub const SIZE_T_MAX: i32 = -1;
pub const UQUAD_MAX: i32 = -1;
pub const QUAD_MAX: u64 = 9223372036854775807;
pub const QUAD_MIN: i64 = -9223372036854775808;
pub const ARG_MAX: u32 = 262144;
pub const CHILD_MAX: u32 = 266;
pub const GID_MAX: u32 = 2147483647;
pub const LINK_MAX: u32 = 32767;
pub const MAX_CANON: u32 = 1024;
pub const MAX_INPUT: u32 = 1024;
pub const NAME_MAX: u32 = 255;
pub const NGROUPS_MAX: u32 = 16;
pub const UID_MAX: u32 = 2147483647;
pub const OPEN_MAX: u32 = 10240;
pub const PATH_MAX: u32 = 1024;
pub const PIPE_BUF: u32 = 512;
pub const BC_BASE_MAX: u32 = 99;
pub const BC_DIM_MAX: u32 = 2048;
pub const BC_SCALE_MAX: u32 = 99;
pub const BC_STRING_MAX: u32 = 1000;
pub const CHARCLASS_NAME_MAX: u32 = 14;
pub const COLL_WEIGHTS_MAX: u32 = 2;
pub const EQUIV_CLASS_MAX: u32 = 2;
pub const EXPR_NEST_MAX: u32 = 32;
pub const LINE_MAX: u32 = 2048;
pub const RE_DUP_MAX: u32 = 255;
pub const NZERO: u32 = 20;
pub const _POSIX_ARG_MAX: u32 = 4096;
pub const _POSIX_CHILD_MAX: u32 = 25;
pub const _POSIX_LINK_MAX: u32 = 8;
pub const _POSIX_MAX_CANON: u32 = 255;
pub const _POSIX_MAX_INPUT: u32 = 255;
pub const _POSIX_NAME_MAX: u32 = 14;
pub const _POSIX_NGROUPS_MAX: u32 = 8;
pub const _POSIX_OPEN_MAX: u32 = 20;
pub const _POSIX_PATH_MAX: u32 = 256;
pub const _POSIX_PIPE_BUF: u32 = 512;
pub const _POSIX_SSIZE_MAX: u32 = 32767;
pub const _POSIX_STREAM_MAX: u32 = 8;
pub const _POSIX_TZNAME_MAX: u32 = 6;
pub const _POSIX2_BC_BASE_MAX: u32 = 99;
pub const _POSIX2_BC_DIM_MAX: u32 = 2048;
pub const _POSIX2_BC_SCALE_MAX: u32 = 99;
pub const _POSIX2_BC_STRING_MAX: u32 = 1000;
pub const _POSIX2_EQUIV_CLASS_MAX: u32 = 2;
pub const _POSIX2_EXPR_NEST_MAX: u32 = 32;
pub const _POSIX2_LINE_MAX: u32 = 2048;
pub const _POSIX2_RE_DUP_MAX: u32 = 255;
pub const _POSIX_AIO_LISTIO_MAX: u32 = 2;
pub const _POSIX_AIO_MAX: u32 = 1;
pub const _POSIX_DELAYTIMER_MAX: u32 = 32;
pub const _POSIX_MQ_OPEN_MAX: u32 = 8;
pub const _POSIX_MQ_PRIO_MAX: u32 = 32;
pub const _POSIX_RTSIG_MAX: u32 = 8;
pub const _POSIX_SEM_NSEMS_MAX: u32 = 256;
pub const _POSIX_SEM_VALUE_MAX: u32 = 32767;
pub const _POSIX_SIGQUEUE_MAX: u32 = 32;
pub const _POSIX_TIMER_MAX: u32 = 32;
pub const _POSIX_CLOCKRES_MIN: u32 = 20000000;
pub const _POSIX_THREAD_DESTRUCTOR_ITERATIONS: u32 = 4;
pub const _POSIX_THREAD_KEYS_MAX: u32 = 128;
pub const _POSIX_THREAD_THREADS_MAX: u32 = 64;
pub const PTHREAD_DESTRUCTOR_ITERATIONS: u32 = 4;
pub const PTHREAD_KEYS_MAX: u32 = 512;
pub const PTHREAD_STACK_MIN: u32 = 8192;
pub const _POSIX_HOST_NAME_MAX: u32 = 255;
pub const _POSIX_LOGIN_NAME_MAX: u32 = 9;
pub const _POSIX_SS_REPL_MAX: u32 = 4;
pub const _POSIX_SYMLINK_MAX: u32 = 255;
pub const _POSIX_SYMLOOP_MAX: u32 = 8;
pub const _POSIX_TRACE_EVENT_NAME_MAX: u32 = 30;
pub const _POSIX_TRACE_NAME_MAX: u32 = 8;
pub const _POSIX_TRACE_SYS_MAX: u32 = 8;
pub const _POSIX_TRACE_USER_EVENT_MAX: u32 = 32;
pub const _POSIX_TTY_NAME_MAX: u32 = 9;
pub const _POSIX2_CHARCLASS_NAME_MAX: u32 = 14;
pub const _POSIX2_COLL_WEIGHTS_MAX: u32 = 2;
pub const _POSIX_RE_DUP_MAX: u32 = 255;
pub const OFF_MIN: i64 = -9223372036854775808;
pub const OFF_MAX: u64 = 9223372036854775807;
pub const PASS_MAX: u32 = 128;
pub const NL_ARGMAX: u32 = 9;
pub const NL_LANGMAX: u32 = 14;
pub const NL_MSGMAX: u32 = 32767;
pub const NL_NMAX: u32 = 1;
pub const NL_SETMAX: u32 = 255;
pub const NL_TEXTMAX: u32 = 2048;
pub const _XOPEN_IOV_MAX: u32 = 16;
pub const IOV_MAX: u32 = 1024;
pub const _XOPEN_NAME_MAX: u32 = 255;
pub const _XOPEN_PATH_MAX: u32 = 1024;
pub const __API_TO_BE_DEPRECATED: u32 = 100000;
pub const __MAC_10_0: u32 = 1000;
pub const __MAC_10_1: u32 = 1010;
pub const __MAC_10_2: u32 = 1020;
pub const __MAC_10_3: u32 = 1030;
pub const __MAC_10_4: u32 = 1040;
pub const __MAC_10_5: u32 = 1050;
pub const __MAC_10_6: u32 = 1060;
pub const __MAC_10_7: u32 = 1070;
pub const __MAC_10_8: u32 = 1080;
pub const __MAC_10_9: u32 = 1090;
pub const __MAC_10_10: u32 = 101000;
pub const __MAC_10_10_2: u32 = 101002;
pub const __MAC_10_10_3: u32 = 101003;
pub const __MAC_10_11: u32 = 101100;
pub const __MAC_10_11_2: u32 = 101102;
pub const __MAC_10_11_3: u32 = 101103;
pub const __MAC_10_11_4: u32 = 101104;
pub const __MAC_10_12: u32 = 101200;
pub const __MAC_10_12_1: u32 = 101201;
pub const __MAC_10_12_2: u32 = 101202;
pub const __MAC_10_12_4: u32 = 101204;
pub const __MAC_10_13: u32 = 101300;
pub const __MAC_10_13_1: u32 = 101301;
pub const __MAC_10_13_2: u32 = 101302;
pub const __MAC_10_13_4: u32 = 101304;
pub const __MAC_10_14: u32 = 101400;
pub const __MAC_10_14_1: u32 = 101401;
pub const __MAC_10_14_4: u32 = 101404;
pub const __IPHONE_2_0: u32 = 20000;
pub const __IPHONE_2_1: u32 = 20100;
pub const __IPHONE_2_2: u32 = 20200;
pub const __IPHONE_3_0: u32 = 30000;
pub const __IPHONE_3_1: u32 = 30100;
pub const __IPHONE_3_2: u32 = 30200;
pub const __IPHONE_4_0: u32 = 40000;
pub const __IPHONE_4_1: u32 = 40100;
pub const __IPHONE_4_2: u32 = 40200;
pub const __IPHONE_4_3: u32 = 40300;
pub const __IPHONE_5_0: u32 = 50000;
pub const __IPHONE_5_1: u32 = 50100;
pub const __IPHONE_6_0: u32 = 60000;
pub const __IPHONE_6_1: u32 = 60100;
pub const __IPHONE_7_0: u32 = 70000;
pub const __IPHONE_7_1: u32 = 70100;
pub const __IPHONE_8_0: u32 = 80000;
pub const __IPHONE_8_1: u32 = 80100;
pub const __IPHONE_8_2: u32 = 80200;
pub const __IPHONE_8_3: u32 = 80300;
pub const __IPHONE_8_4: u32 = 80400;
pub const __IPHONE_9_0: u32 = 90000;
pub const __IPHONE_9_1: u32 = 90100;
pub const __IPHONE_9_2: u32 = 90200;
pub const __IPHONE_9_3: u32 = 90300;
pub const __IPHONE_10_0: u32 = 100000;
pub const __IPHONE_10_1: u32 = 100100;
pub const __IPHONE_10_2: u32 = 100200;
pub const __IPHONE_10_3: u32 = 100300;
pub const __IPHONE_11_0: u32 = 110000;
pub const __IPHONE_11_1: u32 = 110100;
pub const __IPHONE_11_2: u32 = 110200;
pub const __IPHONE_11_3: u32 = 110300;
pub const __IPHONE_11_4: u32 = 110400;
pub const __IPHONE_12_0: u32 = 120000;
pub const __IPHONE_12_1: u32 = 120100;
pub const __IPHONE_12_2: u32 = 120200;
pub const __TVOS_9_0: u32 = 90000;
pub const __TVOS_9_1: u32 = 90100;
pub const __TVOS_9_2: u32 = 90200;
pub const __TVOS_10_0: u32 = 100000;
pub const __TVOS_10_0_1: u32 = 100001;
pub const __TVOS_10_1: u32 = 100100;
pub const __TVOS_10_2: u32 = 100200;
pub const __TVOS_11_0: u32 = 110000;
pub const __TVOS_11_1: u32 = 110100;
pub const __TVOS_11_2: u32 = 110200;
pub const __TVOS_11_3: u32 = 110300;
pub const __TVOS_11_4: u32 = 110400;
pub const __TVOS_12_0: u32 = 120000;
pub const __TVOS_12_1: u32 = 120100;
pub const __TVOS_12_2: u32 = 120200;
pub const __WATCHOS_1_0: u32 = 10000;
pub const __WATCHOS_2_0: u32 = 20000;
pub const __WATCHOS_2_1: u32 = 20100;
pub const __WATCHOS_2_2: u32 = 20200;
pub const __WATCHOS_3_0: u32 = 30000;
pub const __WATCHOS_3_1: u32 = 30100;
pub const __WATCHOS_3_1_1: u32 = 30101;
pub const __WATCHOS_3_2: u32 = 30200;
pub const __WATCHOS_4_0: u32 = 40000;
pub const __WATCHOS_4_1: u32 = 40100;
pub const __WATCHOS_4_2: u32 = 40200;
pub const __WATCHOS_4_3: u32 = 40300;
pub const __WATCHOS_5_0: u32 = 50000;
pub const __WATCHOS_5_1: u32 = 50100;
pub const __WATCHOS_5_2: u32 = 50200;
pub const __MAC_OS_X_VERSION_MAX_ALLOWED: u32 = 101404;
pub const __DARWIN_WCHAR_MIN: i32 = -2147483648;
pub const _FORTIFY_SOURCE: u32 = 2;
pub const RENAME_SECLUDE: u32 = 1;
pub const RENAME_SWAP: u32 = 2;
pub const RENAME_EXCL: u32 = 4;
pub const __SLBF: u32 = 1;
pub const __SNBF: u32 = 2;
pub const __SRD: u32 = 4;
pub const __SWR: u32 = 8;
pub const __SRW: u32 = 16;
pub const __SEOF: u32 = 32;
pub const __SERR: u32 = 64;
pub const __SMBF: u32 = 128;
pub const __SAPP: u32 = 256;
pub const __SSTR: u32 = 512;
pub const __SOPT: u32 = 1024;
pub const __SNPT: u32 = 2048;
pub const __SOFF: u32 = 4096;
pub const __SMOD: u32 = 8192;
pub const __SALC: u32 = 16384;
pub const __SIGN: u32 = 32768;
pub const _IOFBF: u32 = 0;
pub const _IOLBF: u32 = 1;
pub const _IONBF: u32 = 2;
pub const BUFSIZ: u32 = 1024;
pub const EOF: i32 = -1;
pub const FOPEN_MAX: u32 = 20;
pub const FILENAME_MAX: u32 = 1024;
pub const P_tmpdir: &'static [u8; 10usize] = b"/var/tmp/\0";
pub const L_tmpnam: u32 = 1024;
pub const TMP_MAX: u32 = 308915776;
pub const SEEK_SET: u32 = 0;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const L_ctermid: u32 = 1024;
pub const __CTERMID_DEFINED: u32 = 1;
pub const _USE_FORTIFY_LEVEL: u32 = 2;
pub const FALSE: u32 = 0;
pub const TRUE: u32 = 1;
pub const TARGET_OS_MAC: u32 = 1;
pub const TARGET_OS_WIN32: u32 = 0;
pub const TARGET_OS_UNIX: u32 = 0;
pub const TARGET_OS_OSX: u32 = 1;
pub const TARGET_OS_IPHONE: u32 = 0;
pub const TARGET_OS_IOS: u32 = 0;
pub const TARGET_OS_WATCH: u32 = 0;
pub const TARGET_OS_TV: u32 = 0;
pub const TARGET_OS_SIMULATOR: u32 = 0;
pub const TARGET_OS_EMBEDDED: u32 = 0;
pub const TARGET_OS_RTKIT: u32 = 0;
pub const TARGET_IPHONE_SIMULATOR: u32 = 0;
pub const TARGET_OS_NANO: u32 = 0;
pub const TARGET_CPU_PPC: u32 = 0;
pub const TARGET_CPU_PPC64: u32 = 0;
pub const TARGET_CPU_68K: u32 = 0;
pub const TARGET_CPU_X86: u32 = 0;
pub const TARGET_CPU_X86_64: u32 = 1;
pub const TARGET_CPU_ARM: u32 = 0;
pub const TARGET_CPU_ARM64: u32 = 0;
pub const TARGET_CPU_MIPS: u32 = 0;
pub const TARGET_CPU_SPARC: u32 = 0;
pub const TARGET_CPU_ALPHA: u32 = 0;
pub const TARGET_RT_MAC_CFM: u32 = 0;
pub const TARGET_RT_MAC_MACHO: u32 = 1;
pub const TARGET_RT_LITTLE_ENDIAN: u32 = 1;
pub const TARGET_RT_BIG_ENDIAN: u32 = 0;
pub const TARGET_RT_64_BIT: u32 = 1;
pub const __PRI_8_LENGTH_MODIFIER__: &'static [u8; 3usize] = b"hh\0";
pub const __PRI_64_LENGTH_MODIFIER__: &'static [u8; 3usize] = b"ll\0";
pub const __SCN_64_LENGTH_MODIFIER__: &'static [u8; 3usize] = b"ll\0";
pub const __PRI_MAX_LENGTH_MODIFIER__: &'static [u8; 2usize] = b"j\0";
pub const __SCN_MAX_LENGTH_MODIFIER__: &'static [u8; 2usize] = b"j\0";
pub const PRId8: &'static [u8; 4usize] = b"hhd\0";
pub const PRIi8: &'static [u8; 4usize] = b"hhi\0";
pub const PRIo8: &'static [u8; 4usize] = b"hho\0";
pub const PRIu8: &'static [u8; 4usize] = b"hhu\0";
pub const PRIx8: &'static [u8; 4usize] = b"hhx\0";
pub const PRIX8: &'static [u8; 4usize] = b"hhX\0";
pub const PRId16: &'static [u8; 3usize] = b"hd\0";
pub const PRIi16: &'static [u8; 3usize] = b"hi\0";
pub const PRIo16: &'static [u8; 3usize] = b"ho\0";
pub const PRIu16: &'static [u8; 3usize] = b"hu\0";
pub const PRIx16: &'static [u8; 3usize] = b"hx\0";
pub const PRIX16: &'static [u8; 3usize] = b"hX\0";
pub const PRId32: &'static [u8; 2usize] = b"d\0";
pub const PRIi32: &'static [u8; 2usize] = b"i\0";
pub const PRIo32: &'static [u8; 2usize] = b"o\0";
pub const PRIu32: &'static [u8; 2usize] = b"u\0";
pub const PRIx32: &'static [u8; 2usize] = b"x\0";
pub const PRIX32: &'static [u8; 2usize] = b"X\0";
pub const PRId64: &'static [u8; 4usize] = b"lld\0";
pub const PRIi64: &'static [u8; 4usize] = b"lli\0";
pub const PRIo64: &'static [u8; 4usize] = b"llo\0";
pub const PRIu64: &'static [u8; 4usize] = b"llu\0";
pub const PRIx64: &'static [u8; 4usize] = b"llx\0";
pub const PRIX64: &'static [u8; 4usize] = b"llX\0";
pub const PRIdLEAST8: &'static [u8; 4usize] = b"hhd\0";
pub const PRIiLEAST8: &'static [u8; 4usize] = b"hhi\0";
pub const PRIoLEAST8: &'static [u8; 4usize] = b"hho\0";
pub const PRIuLEAST8: &'static [u8; 4usize] = b"hhu\0";
pub const PRIxLEAST8: &'static [u8; 4usize] = b"hhx\0";
pub const PRIXLEAST8: &'static [u8; 4usize] = b"hhX\0";
pub const PRIdLEAST16: &'static [u8; 3usize] = b"hd\0";
pub const PRIiLEAST16: &'static [u8; 3usize] = b"hi\0";
pub const PRIoLEAST16: &'static [u8; 3usize] = b"ho\0";
pub const PRIuLEAST16: &'static [u8; 3usize] = b"hu\0";
pub const PRIxLEAST16: &'static [u8; 3usize] = b"hx\0";
pub const PRIXLEAST16: &'static [u8; 3usize] = b"hX\0";
pub const PRIdLEAST32: &'static [u8; 2usize] = b"d\0";
pub const PRIiLEAST32: &'static [u8; 2usize] = b"i\0";
pub const PRIoLEAST32: &'static [u8; 2usize] = b"o\0";
pub const PRIuLEAST32: &'static [u8; 2usize] = b"u\0";
pub const PRIxLEAST32: &'static [u8; 2usize] = b"x\0";
pub const PRIXLEAST32: &'static [u8; 2usize] = b"X\0";
pub const PRIdLEAST64: &'static [u8; 4usize] = b"lld\0";
pub const PRIiLEAST64: &'static [u8; 4usize] = b"lli\0";
pub const PRIoLEAST64: &'static [u8; 4usize] = b"llo\0";
pub const PRIuLEAST64: &'static [u8; 4usize] = b"llu\0";
pub const PRIxLEAST64: &'static [u8; 4usize] = b"llx\0";
pub const PRIXLEAST64: &'static [u8; 4usize] = b"llX\0";
pub const PRIdFAST8: &'static [u8; 4usize] = b"hhd\0";
pub const PRIiFAST8: &'static [u8; 4usize] = b"hhi\0";
pub const PRIoFAST8: &'static [u8; 4usize] = b"hho\0";
pub const PRIuFAST8: &'static [u8; 4usize] = b"hhu\0";
pub const PRIxFAST8: &'static [u8; 4usize] = b"hhx\0";
pub const PRIXFAST8: &'static [u8; 4usize] = b"hhX\0";
pub const PRIdFAST16: &'static [u8; 3usize] = b"hd\0";
pub const PRIiFAST16: &'static [u8; 3usize] = b"hi\0";
pub const PRIoFAST16: &'static [u8; 3usize] = b"ho\0";
pub const PRIuFAST16: &'static [u8; 3usize] = b"hu\0";
pub const PRIxFAST16: &'static [u8; 3usize] = b"hx\0";
pub const PRIXFAST16: &'static [u8; 3usize] = b"hX\0";
pub const PRIdFAST32: &'static [u8; 2usize] = b"d\0";
pub const PRIiFAST32: &'static [u8; 2usize] = b"i\0";
pub const PRIoFAST32: &'static [u8; 2usize] = b"o\0";
pub const PRIuFAST32: &'static [u8; 2usize] = b"u\0";
pub const PRIxFAST32: &'static [u8; 2usize] = b"x\0";
pub const PRIXFAST32: &'static [u8; 2usize] = b"X\0";
pub const PRIdFAST64: &'static [u8; 4usize] = b"lld\0";
pub const PRIiFAST64: &'static [u8; 4usize] = b"lli\0";
pub const PRIoFAST64: &'static [u8; 4usize] = b"llo\0";
pub const PRIuFAST64: &'static [u8; 4usize] = b"llu\0";
pub const PRIxFAST64: &'static [u8; 4usize] = b"llx\0";
pub const PRIXFAST64: &'static [u8; 4usize] = b"llX\0";
pub const PRIdPTR: &'static [u8; 3usize] = b"ld\0";
pub const PRIiPTR: &'static [u8; 3usize] = b"li\0";
pub const PRIoPTR: &'static [u8; 3usize] = b"lo\0";
pub const PRIuPTR: &'static [u8; 3usize] = b"lu\0";
pub const PRIxPTR: &'static [u8; 3usize] = b"lx\0";
pub const PRIXPTR: &'static [u8; 3usize] = b"lX\0";
pub const PRIdMAX: &'static [u8; 3usize] = b"jd\0";
pub const PRIiMAX: &'static [u8; 3usize] = b"ji\0";
pub const PRIoMAX: &'static [u8; 3usize] = b"jo\0";
pub const PRIuMAX: &'static [u8; 3usize] = b"ju\0";
pub const PRIxMAX: &'static [u8; 3usize] = b"jx\0";
pub const PRIXMAX: &'static [u8; 3usize] = b"jX\0";
pub const SCNd8: &'static [u8; 4usize] = b"hhd\0";
pub const SCNi8: &'static [u8; 4usize] = b"hhi\0";
pub const SCNo8: &'static [u8; 4usize] = b"hho\0";
pub const SCNu8: &'static [u8; 4usize] = b"hhu\0";
pub const SCNx8: &'static [u8; 4usize] = b"hhx\0";
pub const SCNd16: &'static [u8; 3usize] = b"hd\0";
pub const SCNi16: &'static [u8; 3usize] = b"hi\0";
pub const SCNo16: &'static [u8; 3usize] = b"ho\0";
pub const SCNu16: &'static [u8; 3usize] = b"hu\0";
pub const SCNx16: &'static [u8; 3usize] = b"hx\0";
pub const SCNd32: &'static [u8; 2usize] = b"d\0";
pub const SCNi32: &'static [u8; 2usize] = b"i\0";
pub const SCNo32: &'static [u8; 2usize] = b"o\0";
pub const SCNu32: &'static [u8; 2usize] = b"u\0";
pub const SCNx32: &'static [u8; 2usize] = b"x\0";
pub const SCNd64: &'static [u8; 4usize] = b"lld\0";
pub const SCNi64: &'static [u8; 4usize] = b"lli\0";
pub const SCNo64: &'static [u8; 4usize] = b"llo\0";
pub const SCNu64: &'static [u8; 4usize] = b"llu\0";
pub const SCNx64: &'static [u8; 4usize] = b"llx\0";
pub const SCNdLEAST8: &'static [u8; 4usize] = b"hhd\0";
pub const SCNiLEAST8: &'static [u8; 4usize] = b"hhi\0";
pub const SCNoLEAST8: &'static [u8; 4usize] = b"hho\0";
pub const SCNuLEAST8: &'static [u8; 4usize] = b"hhu\0";
pub const SCNxLEAST8: &'static [u8; 4usize] = b"hhx\0";
pub const SCNdLEAST16: &'static [u8; 3usize] = b"hd\0";
pub const SCNiLEAST16: &'static [u8; 3usize] = b"hi\0";
pub const SCNoLEAST16: &'static [u8; 3usize] = b"ho\0";
pub const SCNuLEAST16: &'static [u8; 3usize] = b"hu\0";
pub const SCNxLEAST16: &'static [u8; 3usize] = b"hx\0";
pub const SCNdLEAST32: &'static [u8; 2usize] = b"d\0";
pub const SCNiLEAST32: &'static [u8; 2usize] = b"i\0";
pub const SCNoLEAST32: &'static [u8; 2usize] = b"o\0";
pub const SCNuLEAST32: &'static [u8; 2usize] = b"u\0";
pub const SCNxLEAST32: &'static [u8; 2usize] = b"x\0";
pub const SCNdLEAST64: &'static [u8; 4usize] = b"lld\0";
pub const SCNiLEAST64: &'static [u8; 4usize] = b"lli\0";
pub const SCNoLEAST64: &'static [u8; 4usize] = b"llo\0";
pub const SCNuLEAST64: &'static [u8; 4usize] = b"llu\0";
pub const SCNxLEAST64: &'static [u8; 4usize] = b"llx\0";
pub const SCNdFAST8: &'static [u8; 4usize] = b"hhd\0";
pub const SCNiFAST8: &'static [u8; 4usize] = b"hhi\0";
pub const SCNoFAST8: &'static [u8; 4usize] = b"hho\0";
pub const SCNuFAST8: &'static [u8; 4usize] = b"hhu\0";
pub const SCNxFAST8: &'static [u8; 4usize] = b"hhx\0";
pub const SCNdFAST16: &'static [u8; 3usize] = b"hd\0";
pub const SCNiFAST16: &'static [u8; 3usize] = b"hi\0";
pub const SCNoFAST16: &'static [u8; 3usize] = b"ho\0";
pub const SCNuFAST16: &'static [u8; 3usize] = b"hu\0";
pub const SCNxFAST16: &'static [u8; 3usize] = b"hx\0";
pub const SCNdFAST32: &'static [u8; 2usize] = b"d\0";
pub const SCNiFAST32: &'static [u8; 2usize] = b"i\0";
pub const SCNoFAST32: &'static [u8; 2usize] = b"o\0";
pub const SCNuFAST32: &'static [u8; 2usize] = b"u\0";
pub const SCNxFAST32: &'static [u8; 2usize] = b"x\0";
pub const SCNdFAST64: &'static [u8; 4usize] = b"lld\0";
pub const SCNiFAST64: &'static [u8; 4usize] = b"lli\0";
pub const SCNoFAST64: &'static [u8; 4usize] = b"llo\0";
pub const SCNuFAST64: &'static [u8; 4usize] = b"llu\0";
pub const SCNxFAST64: &'static [u8; 4usize] = b"llx\0";
pub const SCNdPTR: &'static [u8; 3usize] = b"ld\0";
pub const SCNiPTR: &'static [u8; 3usize] = b"li\0";
pub const SCNoPTR: &'static [u8; 3usize] = b"lo\0";
pub const SCNuPTR: &'static [u8; 3usize] = b"lu\0";
pub const SCNxPTR: &'static [u8; 3usize] = b"lx\0";
pub const SCNdMAX: &'static [u8; 3usize] = b"jd\0";
pub const SCNiMAX: &'static [u8; 3usize] = b"ji\0";
pub const SCNoMAX: &'static [u8; 3usize] = b"jo\0";
pub const SCNuMAX: &'static [u8; 3usize] = b"ju\0";
pub const SCNxMAX: &'static [u8; 3usize] = b"jx\0";
pub const MRB_INT_BIT: u32 = 64;
pub const MRB_PRIo: &'static [u8; 4usize] = b"llo\0";
pub const MRB_PRId: &'static [u8; 4usize] = b"lld\0";
pub const MRB_PRIx: &'static [u8; 4usize] = b"llx\0";
pub const MRB_FL_OBJ_IS_FROZEN: u32 = 1048576;
pub const MRB_FIXNUM_SHIFT: u32 = 0;
pub const MRB_SYMBOL_MAX: u32 = 4294967295;
pub const MRB_EACH_OBJ_OK: u32 = 0;
pub const MRB_EACH_OBJ_BREAK: u32 = 1;
pub const MRB_GC_ARENA_SIZE: u32 = 100;
pub const MRUBY_RUBY_VERSION: &'static [u8; 4usize] = b"2.0\0";
pub const MRUBY_RUBY_ENGINE: &'static [u8; 6usize] = b"mruby\0";
pub const MRUBY_RELEASE_MAJOR: u32 = 2;
pub const MRUBY_RELEASE_MINOR: u32 = 0;
pub const MRUBY_RELEASE_TEENY: u32 = 1;
pub const MRUBY_RELEASE_NO: u32 = 20001;
pub const MRUBY_RELEASE_YEAR: u32 = 2019;
pub const MRUBY_RELEASE_MONTH: u32 = 4;
pub const MRUBY_RELEASE_DAY: u32 = 4;
pub const MRUBY_BIRTH_YEAR: u32 = 2010;
pub const MRUBY_AUTHOR: &'static [u8; 17usize] = b"mruby developers\0";
pub const MRB_FIXED_STATE_ATEXIT_STACK_SIZE: u32 = 5;
pub const MRB_METHOD_CACHE_SIZE: u32 = 128;
pub const MRB_STATE_NO_REGEXP: u32 = 1;
pub const MRB_STATE_REGEXP: u32 = 2;
pub const MRB_ARY_EMBED_MASK: u32 = 7;
pub const MRB_ARY_SHARED: u32 = 256;
pub const MRB_FL_CLASS_IS_PREPENDED: u32 = 524288;
pub const MRB_FL_CLASS_IS_ORIGIN: u32 = 262144;
pub const MRB_FL_CLASS_IS_INHERITED: u32 = 131072;
pub const MRB_INSTANCE_TT_MASK: u32 = 255;
pub const STR_FUNC_PARSING: u32 = 1;
pub const STR_FUNC_EXPAND: u32 = 2;
pub const STR_FUNC_REGEXP: u32 = 4;
pub const STR_FUNC_WORD: u32 = 8;
pub const STR_FUNC_SYMBOL: u32 = 16;
pub const STR_FUNC_ARRAY: u32 = 32;
pub const STR_FUNC_HEREDOC: u32 = 64;
pub const STR_FUNC_XQUOTE: u32 = 128;
pub const MRB_PARSER_TOKBUF_MAX: u32 = 65536;
pub const MRB_PARSER_TOKBUF_SIZE: u32 = 256;
pub const MRB_ISEQ_NO_FREE: u32 = 1;
pub const DUMP_DEBUG_INFO: u32 = 1;
pub const DUMP_ENDIAN_BIG: u32 = 2;
pub const DUMP_ENDIAN_LIL: u32 = 4;
pub const DUMP_ENDIAN_NAT: u32 = 6;
pub const DUMP_ENDIAN_MASK: u32 = 6;
pub const MRB_DUMP_OK: u32 = 0;
pub const MRB_DUMP_GENERAL_FAILURE: i32 = -1;
pub const MRB_DUMP_WRITE_FAULT: i32 = -2;
pub const MRB_DUMP_READ_FAULT: i32 = -3;
pub const MRB_DUMP_CRC_ERROR: i32 = -4;
pub const MRB_DUMP_INVALID_FILE_HEADER: i32 = -5;
pub const MRB_DUMP_INVALID_IREP: i32 = -6;
pub const MRB_DUMP_INVALID_ARGUMENT: i32 = -7;
pub const MRB_DUMP_NULL_SYM_LEN: u32 = 65535;
pub const RITE_BINARY_IDENT: &'static [u8; 5usize] = b"RITE\0";
pub const RITE_BINARY_IDENT_LIL: &'static [u8; 5usize] = b"ETIR\0";
pub const RITE_BINARY_FORMAT_VER: &'static [u8; 5usize] = b"0006\0";
pub const RITE_COMPILER_NAME: &'static [u8; 5usize] = b"MATZ\0";
pub const RITE_COMPILER_VERSION: &'static [u8; 5usize] = b"0000\0";
pub const RITE_VM_VER: &'static [u8; 5usize] = b"0002\0";
pub const RITE_BINARY_EOF: &'static [u8; 5usize] = b"END\0\0";
pub const RITE_SECTION_IREP_IDENT: &'static [u8; 5usize] = b"IREP\0";
pub const RITE_SECTION_LINENO_IDENT: &'static [u8; 5usize] = b"LINE\0";
pub const RITE_SECTION_DEBUG_IDENT: &'static [u8; 5usize] = b"DBG\0\0";
pub const RITE_SECTION_LV_IDENT: &'static [u8; 5usize] = b"LVAR\0";
pub const MRB_DUMP_DEFAULT_STR_LEN: u32 = 128;
pub const RITE_LV_NULL_MARK: u32 = 65535;
pub const MRB_HASH_DEFAULT: u32 = 1;
pub const MRB_HASH_PROC_DEFAULT: u32 = 2;
pub const __HAS_FIXED_CHK_PROTOTYPES: u32 = 1;
pub const KHASH_DEFAULT_SIZE: u32 = 32;
pub const KHASH_MIN_SIZE: u32 = 8;
pub const OP_L_STRICT: u32 = 1;
pub const OP_L_CAPTURE: u32 = 2;
pub const OP_L_METHOD: u32 = 1;
pub const OP_L_LAMBDA: u32 = 3;
pub const OP_L_BLOCK: u32 = 2;
pub const OP_R_NORMAL: u32 = 0;
pub const OP_R_BREAK: u32 = 1;
pub const OP_R_RETURN: u32 = 2;
pub const MRB_ENV_STACK_UNSHARED: u32 = 1048576;
pub const MRB_PROC_CFUNC_FL: u32 = 128;
pub const MRB_PROC_STRICT: u32 = 256;
pub const MRB_PROC_ORPHAN: u32 = 512;
pub const MRB_PROC_ENVSET: u32 = 1024;
pub const MRB_PROC_SCOPE: u32 = 2048;
pub const REGEXP_CLASS: &'static [u8; 7usize] = b"Regexp\0";
pub const MRB_STR_SHARED: u32 = 1;
pub const MRB_STR_FSHARED: u32 = 2;
pub const MRB_STR_NOFREE: u32 = 4;
pub const MRB_STR_POOL: u32 = 8;
pub const MRB_STR_NO_UTF: u32 = 16;
pub const MRB_STR_EMBED: u32 = 32;
pub const MRB_STR_EMBED_LEN_MASK: u32 = 1984;
pub const MRB_STR_EMBED_LEN_SHIFT: u32 = 6;
pub const _JBLEN: u32 = 37;
pub type va_list = __builtin_va_list;
pub type __gnuc_va_list = __builtin_va_list;
pub type int_least8_t = i8;
pub type int_least16_t = i16;
pub type int_least32_t = i32;
pub type int_least64_t = i64;
pub type uint_least8_t = u8;
pub type uint_least16_t = u16;
pub type uint_least32_t = u32;
pub type uint_least64_t = u64;
pub type int_fast8_t = i8;
pub type int_fast16_t = i16;
pub type int_fast32_t = i32;
pub type int_fast64_t = i64;
pub type uint_fast8_t = u8;
pub type uint_fast16_t = u16;
pub type uint_fast32_t = u32;
pub type uint_fast64_t = u64;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_longlong;
pub type __uint64_t = ::std::os::raw::c_ulonglong;
pub type __darwin_intptr_t = ::std::os::raw::c_long;
pub type __darwin_natural_t = ::std::os::raw::c_uint;
pub type __darwin_ct_rune_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mbstate_t {
    pub __mbstate8: [::std::os::raw::c_char; 128usize],
    pub _mbstateL: ::std::os::raw::c_longlong,
    _bindgen_union_align: [u64; 16usize],
}
#[test]
fn bindgen_test_layout___mbstate_t() {
    assert_eq!(
        ::std::mem::size_of::<__mbstate_t>(),
        128usize,
        concat!("Size of: ", stringify!(__mbstate_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mbstate_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__mbstate_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mbstate_t>())).__mbstate8 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(__mbstate8)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mbstate_t>()))._mbstateL as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(_mbstateL)
        )
    );
}
pub type __darwin_mbstate_t = __mbstate_t;
pub type __darwin_ptrdiff_t = ::std::os::raw::c_long;
pub type __darwin_size_t = ::std::os::raw::c_ulong;
pub type __darwin_va_list = __builtin_va_list;
pub type __darwin_wchar_t = ::std::os::raw::c_int;
pub type __darwin_rune_t = __darwin_wchar_t;
pub type __darwin_wint_t = ::std::os::raw::c_int;
pub type __darwin_clock_t = ::std::os::raw::c_ulong;
pub type __darwin_socklen_t = __uint32_t;
pub type __darwin_ssize_t = ::std::os::raw::c_long;
pub type __darwin_time_t = ::std::os::raw::c_long;
pub type __darwin_blkcnt_t = __int64_t;
pub type __darwin_blksize_t = __int32_t;
pub type __darwin_dev_t = __int32_t;
pub type __darwin_fsblkcnt_t = ::std::os::raw::c_uint;
pub type __darwin_fsfilcnt_t = ::std::os::raw::c_uint;
pub type __darwin_gid_t = __uint32_t;
pub type __darwin_id_t = __uint32_t;
pub type __darwin_ino64_t = __uint64_t;
pub type __darwin_ino_t = __darwin_ino64_t;
pub type __darwin_mach_port_name_t = __darwin_natural_t;
pub type __darwin_mach_port_t = __darwin_mach_port_name_t;
pub type __darwin_mode_t = __uint16_t;
pub type __darwin_off_t = __int64_t;
pub type __darwin_pid_t = __int32_t;
pub type __darwin_sigset_t = __uint32_t;
pub type __darwin_suseconds_t = __int32_t;
pub type __darwin_uid_t = __uint32_t;
pub type __darwin_useconds_t = __uint32_t;
pub type __darwin_uuid_t = [::std::os::raw::c_uchar; 16usize];
pub type __darwin_uuid_string_t = [::std::os::raw::c_char; 37usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_pthread_handler_rec {
    pub __routine: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub __arg: *mut ::std::os::raw::c_void,
    pub __next: *mut __darwin_pthread_handler_rec,
}
#[test]
fn bindgen_test_layout___darwin_pthread_handler_rec() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_pthread_handler_rec>(),
        24usize,
        concat!("Size of: ", stringify!(__darwin_pthread_handler_rec))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_pthread_handler_rec>(),
        8usize,
        concat!("Alignment of ", stringify!(__darwin_pthread_handler_rec))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_pthread_handler_rec>())).__routine as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_pthread_handler_rec),
            "::",
            stringify!(__routine)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_pthread_handler_rec>())).__arg as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_pthread_handler_rec),
            "::",
            stringify!(__arg)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_pthread_handler_rec>())).__next as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_pthread_handler_rec),
            "::",
            stringify!(__next)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _opaque_pthread_attr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 56usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_attr_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_attr_t>(),
        64usize,
        concat!("Size of: ", stringify!(_opaque_pthread_attr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_attr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_attr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_attr_t>())).__sig as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_attr_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_attr_t>())).__opaque as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_attr_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _opaque_pthread_cond_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 40usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_cond_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_cond_t>(),
        48usize,
        concat!("Size of: ", stringify!(_opaque_pthread_cond_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_cond_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_cond_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_cond_t>())).__sig as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_cond_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_cond_t>())).__opaque as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_cond_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_condattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_condattr_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_condattr_t>(),
        16usize,
        concat!("Size of: ", stringify!(_opaque_pthread_condattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_condattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_condattr_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_condattr_t>())).__sig as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_condattr_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_condattr_t>())).__opaque as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_condattr_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _opaque_pthread_mutex_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 56usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_mutex_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_mutex_t>(),
        64usize,
        concat!("Size of: ", stringify!(_opaque_pthread_mutex_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_mutex_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_mutex_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_mutex_t>())).__sig as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_mutex_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_mutex_t>())).__opaque as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_mutex_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_mutexattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_mutexattr_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_mutexattr_t>(),
        16usize,
        concat!("Size of: ", stringify!(_opaque_pthread_mutexattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_mutexattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_mutexattr_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_mutexattr_t>())).__sig as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_mutexattr_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_mutexattr_t>())).__opaque as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_mutexattr_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_once_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_once_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_once_t>(),
        16usize,
        concat!("Size of: ", stringify!(_opaque_pthread_once_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_once_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_once_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_once_t>())).__sig as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_once_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_once_t>())).__opaque as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_once_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _opaque_pthread_rwlock_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 192usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_rwlock_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_rwlock_t>(),
        200usize,
        concat!("Size of: ", stringify!(_opaque_pthread_rwlock_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_rwlock_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_rwlock_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_rwlock_t>())).__sig as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_rwlock_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_rwlock_t>())).__opaque as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_rwlock_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_rwlockattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 16usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_rwlockattr_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_rwlockattr_t>(),
        24usize,
        concat!("Size of: ", stringify!(_opaque_pthread_rwlockattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_rwlockattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_rwlockattr_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_rwlockattr_t>())).__sig as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_rwlockattr_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_rwlockattr_t>())).__opaque as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_rwlockattr_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _opaque_pthread_t {
    pub __sig: ::std::os::raw::c_long,
    pub __cleanup_stack: *mut __darwin_pthread_handler_rec,
    pub __opaque: [::std::os::raw::c_char; 8176usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_t>(),
        8192usize,
        concat!("Size of: ", stringify!(_opaque_pthread_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_t>())).__sig as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_t>())).__cleanup_stack as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_t),
            "::",
            stringify!(__cleanup_stack)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_t>())).__opaque as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_t),
            "::",
            stringify!(__opaque)
        )
    );
}
pub type __darwin_pthread_attr_t = _opaque_pthread_attr_t;
pub type __darwin_pthread_cond_t = _opaque_pthread_cond_t;
pub type __darwin_pthread_condattr_t = _opaque_pthread_condattr_t;
pub type __darwin_pthread_key_t = ::std::os::raw::c_ulong;
pub type __darwin_pthread_mutex_t = _opaque_pthread_mutex_t;
pub type __darwin_pthread_mutexattr_t = _opaque_pthread_mutexattr_t;
pub type __darwin_pthread_once_t = _opaque_pthread_once_t;
pub type __darwin_pthread_rwlock_t = _opaque_pthread_rwlock_t;
pub type __darwin_pthread_rwlockattr_t = _opaque_pthread_rwlockattr_t;
pub type __darwin_pthread_t = *mut _opaque_pthread_t;
pub type u_int8_t = ::std::os::raw::c_uchar;
pub type u_int16_t = ::std::os::raw::c_ushort;
pub type u_int32_t = ::std::os::raw::c_uint;
pub type u_int64_t = ::std::os::raw::c_ulonglong;
pub type register_t = i64;
pub type user_addr_t = u_int64_t;
pub type user_size_t = u_int64_t;
pub type user_ssize_t = i64;
pub type user_long_t = i64;
pub type user_ulong_t = u_int64_t;
pub type user_time_t = i64;
pub type user_off_t = i64;
pub type syscall_arg_t = u_int64_t;
pub type intmax_t = ::std::os::raw::c_long;
pub type uintmax_t = ::std::os::raw::c_ulong;
pub type rsize_t = ::std::os::raw::c_ulong;
pub type wchar_t = ::std::os::raw::c_int;
pub type max_align_t = f64;
pub type __darwin_nl_item = ::std::os::raw::c_int;
pub type __darwin_wctrans_t = ::std::os::raw::c_int;
pub type __darwin_wctype_t = __uint32_t;
extern "C" {
    #[link_name = "\u{1}_renameat"]
    pub fn renameat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_renamex_np"]
    pub fn renamex_np(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_renameatx_np"]
    pub fn renameatx_np(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const ::std::os::raw::c_char,
        arg5: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
pub type fpos_t = __darwin_off_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sbuf {
    pub _base: *mut ::std::os::raw::c_uchar,
    pub _size: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___sbuf() {
    assert_eq!(
        ::std::mem::size_of::<__sbuf>(),
        16usize,
        concat!("Size of: ", stringify!(__sbuf))
    );
    assert_eq!(
        ::std::mem::align_of::<__sbuf>(),
        8usize,
        concat!("Alignment of ", stringify!(__sbuf))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sbuf>()))._base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__sbuf),
            "::",
            stringify!(_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sbuf>()))._size as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__sbuf),
            "::",
            stringify!(_size)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sFILEX {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sFILE {
    pub _p: *mut ::std::os::raw::c_uchar,
    pub _r: ::std::os::raw::c_int,
    pub _w: ::std::os::raw::c_int,
    pub _flags: ::std::os::raw::c_short,
    pub _file: ::std::os::raw::c_short,
    pub _bf: __sbuf,
    pub _lbfsize: ::std::os::raw::c_int,
    pub _cookie: *mut ::std::os::raw::c_void,
    pub _close: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
    >,
    pub _read: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: *mut ::std::os::raw::c_char,
            arg3: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub _seek: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: fpos_t,
            arg3: ::std::os::raw::c_int,
        ) -> fpos_t,
    >,
    pub _write: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: *const ::std::os::raw::c_char,
            arg3: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub _ub: __sbuf,
    pub _extra: *mut __sFILEX,
    pub _ur: ::std::os::raw::c_int,
    pub _ubuf: [::std::os::raw::c_uchar; 3usize],
    pub _nbuf: [::std::os::raw::c_uchar; 1usize],
    pub _lb: __sbuf,
    pub _blksize: ::std::os::raw::c_int,
    pub _offset: fpos_t,
}
#[test]
fn bindgen_test_layout___sFILE() {
    assert_eq!(
        ::std::mem::size_of::<__sFILE>(),
        152usize,
        concat!("Size of: ", stringify!(__sFILE))
    );
    assert_eq!(
        ::std::mem::align_of::<__sFILE>(),
        8usize,
        concat!("Alignment of ", stringify!(__sFILE))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._p as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_p)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._r as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_r)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._w as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_w)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._flags as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._file as *const _ as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_file)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._bf as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_bf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._lbfsize as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_lbfsize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._cookie as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_cookie)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._close as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_close)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._read as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_read)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._seek as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_seek)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._write as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_write)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._ub as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_ub)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._extra as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_extra)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._ur as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_ur)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._ubuf as *const _ as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_ubuf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._nbuf as *const _ as usize },
        119usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_nbuf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._lb as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_lb)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._blksize as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_blksize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._offset as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_offset)
        )
    );
}
pub type FILE = __sFILE;
extern "C" {
    #[link_name = "\u{1}___stdinp"]
    pub static mut __stdinp: *mut FILE;
}
extern "C" {
    #[link_name = "\u{1}___stdoutp"]
    pub static mut __stdoutp: *mut FILE;
}
extern "C" {
    #[link_name = "\u{1}___stderrp"]
    pub static mut __stderrp: *mut FILE;
}
extern "C" {
    #[link_name = "\u{1}_clearerr"]
    pub fn clearerr(arg1: *mut FILE);
}
extern "C" {
    #[link_name = "\u{1}_fclose"]
    pub fn fclose(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_feof"]
    pub fn feof(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ferror"]
    pub fn ferror(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_fflush"]
    pub fn fflush(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_fgetc"]
    pub fn fgetc(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_fgetpos"]
    pub fn fgetpos(arg1: *mut FILE, arg2: *mut fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_fgets"]
    pub fn fgets(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: *mut FILE,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_fopen"]
    pub fn fopen(
        __filename: *const ::std::os::raw::c_char,
        __mode: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    #[link_name = "\u{1}_fprintf"]
    pub fn fprintf(
        arg1: *mut FILE,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_fputc"]
    pub fn fputc(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_fputs"]
    pub fn fputs(arg1: *const ::std::os::raw::c_char, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_fread"]
    pub fn fread(
        __ptr: *mut ::std::os::raw::c_void,
        __size: usize,
        __nitems: usize,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    #[link_name = "\u{1}_freopen"]
    pub fn freopen(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut FILE,
    ) -> *mut FILE;
}
extern "C" {
    #[link_name = "\u{1}_fscanf"]
    pub fn fscanf(
        arg1: *mut FILE,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_fseek"]
    pub fn fseek(
        arg1: *mut FILE,
        arg2: ::std::os::raw::c_long,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_fsetpos"]
    pub fn fsetpos(arg1: *mut FILE, arg2: *const fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ftell"]
    pub fn ftell(arg1: *mut FILE) -> ::std::os::raw::c_long;
}
extern "C" {
    #[link_name = "\u{1}_fwrite"]
    pub fn fwrite(
        __ptr: *const ::std::os::raw::c_void,
        __size: usize,
        __nitems: usize,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    #[link_name = "\u{1}_getc"]
    pub fn getc(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_getchar"]
    pub fn getchar() -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_gets"]
    pub fn gets(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_perror"]
    pub fn perror(arg1: *const ::std::os::raw::c_char);
}
extern "C" {
    #[link_name = "\u{1}_printf"]
    pub fn printf(arg1: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_putc"]
    pub fn putc(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_putchar"]
    pub fn putchar(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_puts"]
    pub fn puts(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_remove"]
    pub fn remove(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_rename"]
    pub fn rename(
        __old: *const ::std::os::raw::c_char,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_rewind"]
    pub fn rewind(arg1: *mut FILE);
}
extern "C" {
    #[link_name = "\u{1}_scanf"]
    pub fn scanf(arg1: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_setbuf"]
    pub fn setbuf(arg1: *mut FILE, arg2: *mut ::std::os::raw::c_char);
}
extern "C" {
    #[link_name = "\u{1}_setvbuf"]
    pub fn setvbuf(
        arg1: *mut FILE,
        arg2: *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_sprintf"]
    pub fn sprintf(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_sscanf"]
    pub fn sscanf(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_tmpfile"]
    pub fn tmpfile() -> *mut FILE;
}
extern "C" {
    #[link_name = "\u{1}_tmpnam"]
    pub fn tmpnam(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_ungetc"]
    pub fn ungetc(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_vfprintf"]
    pub fn vfprintf(
        arg1: *mut FILE,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_vprintf"]
    pub fn vprintf(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_vsprintf"]
    pub fn vsprintf(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ctermid"]
    pub fn ctermid(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_fdopen"]
    pub fn fdopen(arg1: ::std::os::raw::c_int, arg2: *const ::std::os::raw::c_char) -> *mut FILE;
}
extern "C" {
    #[link_name = "\u{1}_fileno"]
    pub fn fileno(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_pclose"]
    pub fn pclose(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_popen"]
    pub fn popen(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    #[link_name = "\u{1}___srget"]
    pub fn __srget(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}___svfscanf"]
    pub fn __svfscanf(
        arg1: *mut FILE,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}___swbuf"]
    pub fn __swbuf(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_flockfile"]
    pub fn flockfile(arg1: *mut FILE);
}
extern "C" {
    #[link_name = "\u{1}_ftrylockfile"]
    pub fn ftrylockfile(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_funlockfile"]
    pub fn funlockfile(arg1: *mut FILE);
}
extern "C" {
    #[link_name = "\u{1}_getc_unlocked"]
    pub fn getc_unlocked(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_getchar_unlocked"]
    pub fn getchar_unlocked() -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_putc_unlocked"]
    pub fn putc_unlocked(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_putchar_unlocked"]
    pub fn putchar_unlocked(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_getw"]
    pub fn getw(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_putw"]
    pub fn putw(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_tempnam"]
    pub fn tempnam(
        __dir: *const ::std::os::raw::c_char,
        __prefix: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
pub type off_t = __darwin_off_t;
extern "C" {
    #[link_name = "\u{1}_fseeko"]
    pub fn fseeko(
        __stream: *mut FILE,
        __offset: off_t,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ftello"]
    pub fn ftello(__stream: *mut FILE) -> off_t;
}
extern "C" {
    #[link_name = "\u{1}_snprintf"]
    pub fn snprintf(
        __str: *mut ::std::os::raw::c_char,
        __size: usize,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_vfscanf"]
    pub fn vfscanf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        arg1: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_vscanf"]
    pub fn vscanf(
        __format: *const ::std::os::raw::c_char,
        arg1: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_vsnprintf"]
    pub fn vsnprintf(
        __str: *mut ::std::os::raw::c_char,
        __size: usize,
        __format: *const ::std::os::raw::c_char,
        arg1: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_vsscanf"]
    pub fn vsscanf(
        __str: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        arg1: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_dprintf"]
    pub fn dprintf(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_vdprintf"]
    pub fn vdprintf(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_getdelim"]
    pub fn getdelim(
        __linep: *mut *mut ::std::os::raw::c_char,
        __linecapp: *mut usize,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> isize;
}
extern "C" {
    #[link_name = "\u{1}_getline"]
    pub fn getline(
        __linep: *mut *mut ::std::os::raw::c_char,
        __linecapp: *mut usize,
        __stream: *mut FILE,
    ) -> isize;
}
extern "C" {
    #[link_name = "\u{1}_fmemopen"]
    pub fn fmemopen(
        __buf: *mut ::std::os::raw::c_void,
        __size: usize,
        __mode: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    #[link_name = "\u{1}_open_memstream"]
    pub fn open_memstream(
        __bufp: *mut *mut ::std::os::raw::c_char,
        __sizep: *mut usize,
    ) -> *mut FILE;
}
extern "C" {
    #[link_name = "\u{1}_sys_nerr"]
    pub static mut sys_nerr: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_sys_errlist"]
    pub static mut sys_errlist: [*const ::std::os::raw::c_char; 0usize];
}
extern "C" {
    #[link_name = "\u{1}_asprintf"]
    pub fn asprintf(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ctermid_r"]
    pub fn ctermid_r(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_fgetln"]
    pub fn fgetln(arg1: *mut FILE, arg2: *mut usize) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_fmtcheck"]
    pub fn fmtcheck(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_fpurge"]
    pub fn fpurge(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_setbuffer"]
    pub fn setbuffer(
        arg1: *mut FILE,
        arg2: *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_setlinebuf"]
    pub fn setlinebuf(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_vasprintf"]
    pub fn vasprintf(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_zopen"]
    pub fn zopen(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> *mut FILE;
}
extern "C" {
    #[link_name = "\u{1}_funopen"]
    pub fn funopen(
        arg1: *const ::std::os::raw::c_void,
        arg2: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *mut ::std::os::raw::c_char,
                arg3: ::std::os::raw::c_int,
            ) -> ::std::os::raw::c_int,
        >,
        arg3: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_char,
                arg3: ::std::os::raw::c_int,
            ) -> ::std::os::raw::c_int,
        >,
        arg4: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: fpos_t,
                arg3: ::std::os::raw::c_int,
            ) -> fpos_t,
        >,
        arg5: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
        >,
    ) -> *mut FILE;
}
extern "C" {
    #[link_name = "\u{1}___sprintf_chk"]
    pub fn __sprintf_chk(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: usize,
        arg4: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}___snprintf_chk"]
    pub fn __snprintf_chk(
        arg1: *mut ::std::os::raw::c_char,
        arg2: usize,
        arg3: ::std::os::raw::c_int,
        arg4: usize,
        arg5: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}___vsprintf_chk"]
    pub fn __vsprintf_chk(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: usize,
        arg4: *const ::std::os::raw::c_char,
        arg5: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}___vsnprintf_chk"]
    pub fn __vsnprintf_chk(
        arg1: *mut ::std::os::raw::c_char,
        arg2: usize,
        arg3: ::std::os::raw::c_int,
        arg4: usize,
        arg5: *const ::std::os::raw::c_char,
        arg6: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
/// MRuby Value definition functions and macros.
pub type mrb_sym = u32;
pub type mrb_bool = u8;
extern "C" {
    #[link_name = "\u{1}_imaxabs"]
    pub fn imaxabs(j: intmax_t) -> intmax_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct imaxdiv_t {
    pub quot: intmax_t,
    pub rem: intmax_t,
}
#[test]
fn bindgen_test_layout_imaxdiv_t() {
    assert_eq!(
        ::std::mem::size_of::<imaxdiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(imaxdiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<imaxdiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(imaxdiv_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<imaxdiv_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(imaxdiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<imaxdiv_t>())).rem as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(imaxdiv_t),
            "::",
            stringify!(rem)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}_imaxdiv"]
    pub fn imaxdiv(__numer: intmax_t, __denom: intmax_t) -> imaxdiv_t;
}
extern "C" {
    #[link_name = "\u{1}_strtoimax"]
    pub fn strtoimax(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> intmax_t;
}
extern "C" {
    #[link_name = "\u{1}_strtoumax"]
    pub fn strtoumax(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> uintmax_t;
}
extern "C" {
    #[link_name = "\u{1}_wcstoimax"]
    pub fn wcstoimax(
        __nptr: *const wchar_t,
        __endptr: *mut *mut wchar_t,
        __base: ::std::os::raw::c_int,
    ) -> intmax_t;
}
extern "C" {
    #[link_name = "\u{1}_wcstoumax"]
    pub fn wcstoumax(
        __nptr: *const wchar_t,
        __endptr: *mut *mut wchar_t,
        __base: ::std::os::raw::c_int,
    ) -> uintmax_t;
}
pub type mrb_int = i64;
extern "C" {
    #[link_name = "\u{1}_mrb_float_read"]
    pub fn mrb_float_read(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
    ) -> f64;
}
pub type mrb_float = f64;
pub const mrb_vtype_MRB_TT_FALSE: mrb_vtype = 0;
pub const mrb_vtype_MRB_TT_FREE: mrb_vtype = 1;
pub const mrb_vtype_MRB_TT_TRUE: mrb_vtype = 2;
pub const mrb_vtype_MRB_TT_FIXNUM: mrb_vtype = 3;
pub const mrb_vtype_MRB_TT_SYMBOL: mrb_vtype = 4;
pub const mrb_vtype_MRB_TT_UNDEF: mrb_vtype = 5;
pub const mrb_vtype_MRB_TT_FLOAT: mrb_vtype = 6;
pub const mrb_vtype_MRB_TT_CPTR: mrb_vtype = 7;
pub const mrb_vtype_MRB_TT_OBJECT: mrb_vtype = 8;
pub const mrb_vtype_MRB_TT_CLASS: mrb_vtype = 9;
pub const mrb_vtype_MRB_TT_MODULE: mrb_vtype = 10;
pub const mrb_vtype_MRB_TT_ICLASS: mrb_vtype = 11;
pub const mrb_vtype_MRB_TT_SCLASS: mrb_vtype = 12;
pub const mrb_vtype_MRB_TT_PROC: mrb_vtype = 13;
pub const mrb_vtype_MRB_TT_ARRAY: mrb_vtype = 14;
pub const mrb_vtype_MRB_TT_HASH: mrb_vtype = 15;
pub const mrb_vtype_MRB_TT_STRING: mrb_vtype = 16;
pub const mrb_vtype_MRB_TT_RANGE: mrb_vtype = 17;
pub const mrb_vtype_MRB_TT_EXCEPTION: mrb_vtype = 18;
pub const mrb_vtype_MRB_TT_FILE: mrb_vtype = 19;
pub const mrb_vtype_MRB_TT_ENV: mrb_vtype = 20;
pub const mrb_vtype_MRB_TT_DATA: mrb_vtype = 21;
pub const mrb_vtype_MRB_TT_FIBER: mrb_vtype = 22;
pub const mrb_vtype_MRB_TT_ISTRUCT: mrb_vtype = 23;
pub const mrb_vtype_MRB_TT_BREAK: mrb_vtype = 24;
pub const mrb_vtype_MRB_TT_MAXDEFINE: mrb_vtype = 25;
pub type mrb_vtype = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RBasic {
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize], u32>,
    pub c: *mut RClass,
    pub gcnext: *mut RBasic,
}
#[test]
fn bindgen_test_layout_RBasic() {
    assert_eq!(
        ::std::mem::size_of::<RBasic>(),
        24usize,
        concat!("Size of: ", stringify!(RBasic))
    );
    assert_eq!(
        ::std::mem::align_of::<RBasic>(),
        8usize,
        concat!("Alignment of ", stringify!(RBasic))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RBasic>())).c as *const _ as usize },
        8usize,
        concat!("Offset of field: ", stringify!(RBasic), "::", stringify!(c))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RBasic>())).gcnext as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(RBasic),
            "::",
            stringify!(gcnext)
        )
    );
}
impl RBasic {
    #[inline]
    pub fn tt(&self) -> mrb_vtype {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_tt(&mut self, val: mrb_vtype) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn color(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_color(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn flags(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 21u8) as u32) }
    }
    #[inline]
    pub fn set_flags(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(11usize, 21u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        tt: mrb_vtype,
        color: u32,
        flags: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize], u32> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize], u32> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let tt: u32 = unsafe { ::std::mem::transmute(tt) };
            tt as u64
        });
        __bindgen_bitfield_unit.set(8usize, 3u8, {
            let color: u32 = unsafe { ::std::mem::transmute(color) };
            color as u64
        });
        __bindgen_bitfield_unit.set(11usize, 21u8, {
            let flags: u32 = unsafe { ::std::mem::transmute(flags) };
            flags as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RObject {
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize], u32>,
    pub c: *mut RClass,
    pub gcnext: *mut RBasic,
    pub iv: *mut iv_tbl,
}
#[test]
fn bindgen_test_layout_RObject() {
    assert_eq!(
        ::std::mem::size_of::<RObject>(),
        32usize,
        concat!("Size of: ", stringify!(RObject))
    );
    assert_eq!(
        ::std::mem::align_of::<RObject>(),
        8usize,
        concat!("Alignment of ", stringify!(RObject))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RObject>())).c as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RObject),
            "::",
            stringify!(c)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RObject>())).gcnext as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(RObject),
            "::",
            stringify!(gcnext)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RObject>())).iv as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(RObject),
            "::",
            stringify!(iv)
        )
    );
}
impl RObject {
    #[inline]
    pub fn tt(&self) -> mrb_vtype {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_tt(&mut self, val: mrb_vtype) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn color(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_color(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn flags(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 21u8) as u32) }
    }
    #[inline]
    pub fn set_flags(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(11usize, 21u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        tt: mrb_vtype,
        color: u32,
        flags: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize], u32> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize], u32> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let tt: u32 = unsafe { ::std::mem::transmute(tt) };
            tt as u64
        });
        __bindgen_bitfield_unit.set(8usize, 3u8, {
            let color: u32 = unsafe { ::std::mem::transmute(color) };
            color as u64
        });
        __bindgen_bitfield_unit.set(11usize, 21u8, {
            let flags: u32 = unsafe { ::std::mem::transmute(flags) };
            flags as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RFiber {
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize], u32>,
    pub c: *mut RClass,
    pub gcnext: *mut RBasic,
    pub cxt: *mut mrb_context,
}
#[test]
fn bindgen_test_layout_RFiber() {
    assert_eq!(
        ::std::mem::size_of::<RFiber>(),
        32usize,
        concat!("Size of: ", stringify!(RFiber))
    );
    assert_eq!(
        ::std::mem::align_of::<RFiber>(),
        8usize,
        concat!("Alignment of ", stringify!(RFiber))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RFiber>())).c as *const _ as usize },
        8usize,
        concat!("Offset of field: ", stringify!(RFiber), "::", stringify!(c))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RFiber>())).gcnext as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(RFiber),
            "::",
            stringify!(gcnext)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RFiber>())).cxt as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(RFiber),
            "::",
            stringify!(cxt)
        )
    );
}
impl RFiber {
    #[inline]
    pub fn tt(&self) -> mrb_vtype {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_tt(&mut self, val: mrb_vtype) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn color(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_color(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn flags(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 21u8) as u32) }
    }
    #[inline]
    pub fn set_flags(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(11usize, 21u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        tt: mrb_vtype,
        color: u32,
        flags: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize], u32> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize], u32> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let tt: u32 = unsafe { ::std::mem::transmute(tt) };
            tt as u64
        });
        __bindgen_bitfield_unit.set(8usize, 3u8, {
            let color: u32 = unsafe { ::std::mem::transmute(color) };
            color as u64
        });
        __bindgen_bitfield_unit.set(11usize, 21u8, {
            let flags: u32 = unsafe { ::std::mem::transmute(flags) };
            flags as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct mrb_value {
    pub value: mrb_value__bindgen_ty_1,
    pub tt: mrb_vtype,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union mrb_value__bindgen_ty_1 {
    pub f: mrb_float,
    pub p: *mut ::std::os::raw::c_void,
    pub i: mrb_int,
    pub sym: mrb_sym,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_mrb_value__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<mrb_value__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(mrb_value__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<mrb_value__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(mrb_value__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_value__bindgen_ty_1>())).f as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_value__bindgen_ty_1),
            "::",
            stringify!(f)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_value__bindgen_ty_1>())).p as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_value__bindgen_ty_1),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_value__bindgen_ty_1>())).i as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_value__bindgen_ty_1),
            "::",
            stringify!(i)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_value__bindgen_ty_1>())).sym as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_value__bindgen_ty_1),
            "::",
            stringify!(sym)
        )
    );
}
#[test]
fn bindgen_test_layout_mrb_value() {
    assert_eq!(
        ::std::mem::size_of::<mrb_value>(),
        16usize,
        concat!("Size of: ", stringify!(mrb_value))
    );
    assert_eq!(
        ::std::mem::align_of::<mrb_value>(),
        8usize,
        concat!("Alignment of ", stringify!(mrb_value))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_value>())).value as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_value),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_value>())).tt as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_value),
            "::",
            stringify!(tt)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}_mrb_regexp_p"]
    pub fn mrb_regexp_p(arg1: *mut mrb_state, arg2: mrb_value) -> mrb_bool;
}
pub type mrb_each_object_callback = ::std::option::Option<
    unsafe extern "C" fn(
        mrb: *mut mrb_state,
        obj: *mut RBasic,
        data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    #[link_name = "\u{1}_mrb_objspace_each_objects"]
    pub fn mrb_objspace_each_objects(
        mrb: *mut mrb_state,
        callback: mrb_each_object_callback,
        data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    #[link_name = "\u{1}_mrb_free_context"]
    pub fn mrb_free_context(mrb: *mut mrb_state, c: *mut mrb_context);
}
pub const mrb_gc_state_MRB_GC_STATE_ROOT: mrb_gc_state = 0;
pub const mrb_gc_state_MRB_GC_STATE_MARK: mrb_gc_state = 1;
pub const mrb_gc_state_MRB_GC_STATE_SWEEP: mrb_gc_state = 2;
pub type mrb_gc_state = u32;
#[repr(C)]
#[derive(Debug)]
pub struct mrb_heap_page {
    pub freelist: *mut RBasic,
    pub prev: *mut mrb_heap_page,
    pub next: *mut mrb_heap_page,
    pub free_next: *mut mrb_heap_page,
    pub free_prev: *mut mrb_heap_page,
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize], u8>,
    pub objects: __IncompleteArrayField<*mut ::std::os::raw::c_void>,
    pub __bindgen_padding_0: [u8; 7usize],
}
#[test]
fn bindgen_test_layout_mrb_heap_page() {
    assert_eq!(
        ::std::mem::size_of::<mrb_heap_page>(),
        48usize,
        concat!("Size of: ", stringify!(mrb_heap_page))
    );
    assert_eq!(
        ::std::mem::align_of::<mrb_heap_page>(),
        8usize,
        concat!("Alignment of ", stringify!(mrb_heap_page))
    );
}
impl mrb_heap_page {
    #[inline]
    pub fn old(&self) -> mrb_bool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_old(&mut self, val: mrb_bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(old: mrb_bool) -> __BindgenBitfieldUnit<[u8; 1usize], u8> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize], u8> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let old: u8 = unsafe { ::std::mem::transmute(old) };
            old as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mrb_gc {
    pub heaps: *mut mrb_heap_page,
    pub sweeps: *mut mrb_heap_page,
    pub free_heaps: *mut mrb_heap_page,
    pub live: usize,
    pub arena: *mut *mut RBasic,
    pub arena_capa: ::std::os::raw::c_int,
    pub arena_idx: ::std::os::raw::c_int,
    pub state: mrb_gc_state,
    pub current_white_part: ::std::os::raw::c_int,
    pub gray_list: *mut RBasic,
    pub atomic_gray_list: *mut RBasic,
    pub live_after_mark: usize,
    pub threshold: usize,
    pub interval_ratio: ::std::os::raw::c_int,
    pub step_ratio: ::std::os::raw::c_int,
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize], u8>,
    pub majorgc_old_threshold: usize,
}
#[test]
fn bindgen_test_layout_mrb_gc() {
    assert_eq!(
        ::std::mem::size_of::<mrb_gc>(),
        112usize,
        concat!("Size of: ", stringify!(mrb_gc))
    );
    assert_eq!(
        ::std::mem::align_of::<mrb_gc>(),
        8usize,
        concat!("Alignment of ", stringify!(mrb_gc))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_gc>())).heaps as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_gc),
            "::",
            stringify!(heaps)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_gc>())).sweeps as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_gc),
            "::",
            stringify!(sweeps)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_gc>())).free_heaps as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_gc),
            "::",
            stringify!(free_heaps)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_gc>())).live as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_gc),
            "::",
            stringify!(live)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_gc>())).arena as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_gc),
            "::",
            stringify!(arena)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_gc>())).arena_capa as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_gc),
            "::",
            stringify!(arena_capa)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_gc>())).arena_idx as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_gc),
            "::",
            stringify!(arena_idx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_gc>())).state as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_gc),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_gc>())).current_white_part as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_gc),
            "::",
            stringify!(current_white_part)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_gc>())).gray_list as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_gc),
            "::",
            stringify!(gray_list)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_gc>())).atomic_gray_list as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_gc),
            "::",
            stringify!(atomic_gray_list)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_gc>())).live_after_mark as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_gc),
            "::",
            stringify!(live_after_mark)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_gc>())).threshold as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_gc),
            "::",
            stringify!(threshold)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_gc>())).interval_ratio as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_gc),
            "::",
            stringify!(interval_ratio)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_gc>())).step_ratio as *const _ as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_gc),
            "::",
            stringify!(step_ratio)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_gc>())).majorgc_old_threshold as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_gc),
            "::",
            stringify!(majorgc_old_threshold)
        )
    );
}
impl mrb_gc {
    #[inline]
    pub fn iterating(&self) -> mrb_bool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_iterating(&mut self, val: mrb_bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn disabled(&self) -> mrb_bool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_disabled(&mut self, val: mrb_bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn full(&self) -> mrb_bool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_full(&mut self, val: mrb_bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn generational(&self) -> mrb_bool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_generational(&mut self, val: mrb_bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn out_of_memory(&self) -> mrb_bool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_out_of_memory(&mut self, val: mrb_bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        iterating: mrb_bool,
        disabled: mrb_bool,
        full: mrb_bool,
        generational: mrb_bool,
        out_of_memory: mrb_bool,
    ) -> __BindgenBitfieldUnit<[u8; 1usize], u8> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize], u8> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let iterating: u8 = unsafe { ::std::mem::transmute(iterating) };
            iterating as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let disabled: u8 = unsafe { ::std::mem::transmute(disabled) };
            disabled as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let full: u8 = unsafe { ::std::mem::transmute(full) };
            full as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let generational: u8 = unsafe { ::std::mem::transmute(generational) };
            generational as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let out_of_memory: u8 = unsafe { ::std::mem::transmute(out_of_memory) };
            out_of_memory as u64
        });
        __bindgen_bitfield_unit
    }
}
extern "C" {
    #[link_name = "\u{1}_mrb_object_dead_p"]
    pub fn mrb_object_dead_p(mrb: *mut mrb_state, object: *mut RBasic) -> mrb_bool;
}
/// MRuby C API entry point
pub type mrb_code = u8;
/// Required arguments signature type.
pub type mrb_aspec = u32;
/// Function pointer type of custom allocator used in @see mrb_open_allocf.
///
/// The function pointing it must behave similarly as realloc except:
/// - If ptr is NULL it must allocate new space.
/// - If s is NULL, ptr must be freed.
///
/// See @see mrb_default_allocf for the default implementation.
pub type mrb_allocf = ::std::option::Option<
    unsafe extern "C" fn(
        mrb: *mut mrb_state,
        arg1: *mut ::std::os::raw::c_void,
        arg2: usize,
        ud: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mrb_callinfo {
    pub mid: mrb_sym,
    pub proc_: *mut RProc,
    pub stackent: *mut mrb_value,
    pub ridx: u16,
    pub epos: u16,
    pub env: *mut REnv,
    pub pc: *mut mrb_code,
    pub err: *mut mrb_code,
    pub argc: ::std::os::raw::c_int,
    pub acc: ::std::os::raw::c_int,
    pub target_class: *mut RClass,
}
#[test]
fn bindgen_test_layout_mrb_callinfo() {
    assert_eq!(
        ::std::mem::size_of::<mrb_callinfo>(),
        72usize,
        concat!("Size of: ", stringify!(mrb_callinfo))
    );
    assert_eq!(
        ::std::mem::align_of::<mrb_callinfo>(),
        8usize,
        concat!("Alignment of ", stringify!(mrb_callinfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_callinfo>())).mid as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_callinfo),
            "::",
            stringify!(mid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_callinfo>())).proc_ as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_callinfo),
            "::",
            stringify!(proc_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_callinfo>())).stackent as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_callinfo),
            "::",
            stringify!(stackent)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_callinfo>())).ridx as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_callinfo),
            "::",
            stringify!(ridx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_callinfo>())).epos as *const _ as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_callinfo),
            "::",
            stringify!(epos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_callinfo>())).env as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_callinfo),
            "::",
            stringify!(env)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_callinfo>())).pc as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_callinfo),
            "::",
            stringify!(pc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_callinfo>())).err as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_callinfo),
            "::",
            stringify!(err)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_callinfo>())).argc as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_callinfo),
            "::",
            stringify!(argc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_callinfo>())).acc as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_callinfo),
            "::",
            stringify!(acc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_callinfo>())).target_class as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_callinfo),
            "::",
            stringify!(target_class)
        )
    );
}
pub const mrb_fiber_state_MRB_FIBER_CREATED: mrb_fiber_state = 0;
pub const mrb_fiber_state_MRB_FIBER_RUNNING: mrb_fiber_state = 1;
pub const mrb_fiber_state_MRB_FIBER_RESUMED: mrb_fiber_state = 2;
pub const mrb_fiber_state_MRB_FIBER_SUSPENDED: mrb_fiber_state = 3;
pub const mrb_fiber_state_MRB_FIBER_TRANSFERRED: mrb_fiber_state = 4;
pub const mrb_fiber_state_MRB_FIBER_TERMINATED: mrb_fiber_state = 5;
pub type mrb_fiber_state = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mrb_context {
    pub prev: *mut mrb_context,
    pub stack: *mut mrb_value,
    pub stbase: *mut mrb_value,
    pub stend: *mut mrb_value,
    pub ci: *mut mrb_callinfo,
    pub cibase: *mut mrb_callinfo,
    pub ciend: *mut mrb_callinfo,
    pub rescue: *mut u16,
    pub rsize: u16,
    pub ensure: *mut *mut RProc,
    pub esize: u16,
    pub eidx: u16,
    pub status: mrb_fiber_state,
    pub vmexec: mrb_bool,
    pub fib: *mut RFiber,
}
#[test]
fn bindgen_test_layout_mrb_context() {
    assert_eq!(
        ::std::mem::size_of::<mrb_context>(),
        104usize,
        concat!("Size of: ", stringify!(mrb_context))
    );
    assert_eq!(
        ::std::mem::align_of::<mrb_context>(),
        8usize,
        concat!("Alignment of ", stringify!(mrb_context))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_context>())).prev as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_context),
            "::",
            stringify!(prev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_context>())).stack as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_context),
            "::",
            stringify!(stack)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_context>())).stbase as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_context),
            "::",
            stringify!(stbase)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_context>())).stend as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_context),
            "::",
            stringify!(stend)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_context>())).ci as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_context),
            "::",
            stringify!(ci)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_context>())).cibase as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_context),
            "::",
            stringify!(cibase)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_context>())).ciend as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_context),
            "::",
            stringify!(ciend)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_context>())).rescue as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_context),
            "::",
            stringify!(rescue)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_context>())).rsize as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_context),
            "::",
            stringify!(rsize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_context>())).ensure as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_context),
            "::",
            stringify!(ensure)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_context>())).esize as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_context),
            "::",
            stringify!(esize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_context>())).eidx as *const _ as usize },
        82usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_context),
            "::",
            stringify!(eidx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_context>())).status as *const _ as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_context),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_context>())).vmexec as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_context),
            "::",
            stringify!(vmexec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_context>())).fib as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_context),
            "::",
            stringify!(fib)
        )
    );
}
pub type mrb_func_t =
    ::std::option::Option<unsafe extern "C" fn(mrb: *mut mrb_state, arg1: mrb_value) -> mrb_value>;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct mrb_method_t {
    pub func_p: mrb_bool,
    pub __bindgen_anon_1: mrb_method_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union mrb_method_t__bindgen_ty_1 {
    pub proc_: *mut RProc,
    pub func: mrb_func_t,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_mrb_method_t__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<mrb_method_t__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(mrb_method_t__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<mrb_method_t__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(mrb_method_t__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mrb_method_t__bindgen_ty_1>())).proc_ as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_method_t__bindgen_ty_1),
            "::",
            stringify!(proc_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_method_t__bindgen_ty_1>())).func as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_method_t__bindgen_ty_1),
            "::",
            stringify!(func)
        )
    );
}
#[test]
fn bindgen_test_layout_mrb_method_t() {
    assert_eq!(
        ::std::mem::size_of::<mrb_method_t>(),
        16usize,
        concat!("Size of: ", stringify!(mrb_method_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mrb_method_t>(),
        8usize,
        concat!("Alignment of ", stringify!(mrb_method_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_method_t>())).func_p as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_method_t),
            "::",
            stringify!(func_p)
        )
    );
}
pub type mrb_atexit_func = ::std::option::Option<unsafe extern "C" fn(arg1: *mut mrb_state)>;
/// Uncommon memory management stuffs.
#[repr(C)]
#[derive(Copy, Clone)]
pub struct mrb_state {
    pub jmp: *mut mrb_jmpbuf,
    pub flags: u32,
    pub allocf: mrb_allocf,
    pub allocf_ud: *mut ::std::os::raw::c_void,
    pub c: *mut mrb_context,
    pub root_c: *mut mrb_context,
    pub globals: *mut iv_tbl,
    pub exc: *mut RObject,
    pub top_self: *mut RObject,
    pub object_class: *mut RClass,
    pub class_class: *mut RClass,
    pub module_class: *mut RClass,
    pub proc_class: *mut RClass,
    pub string_class: *mut RClass,
    pub array_class: *mut RClass,
    pub hash_class: *mut RClass,
    pub range_class: *mut RClass,
    pub float_class: *mut RClass,
    pub fixnum_class: *mut RClass,
    pub true_class: *mut RClass,
    pub false_class: *mut RClass,
    pub nil_class: *mut RClass,
    pub symbol_class: *mut RClass,
    pub kernel_module: *mut RClass,
    pub mems: *mut alloca_header,
    pub gc: mrb_gc,
    pub symidx: mrb_sym,
    pub symtbl: *mut symbol_name,
    pub symhash: [mrb_sym; 256usize],
    pub symcapa: usize,
    pub symbuf: [::std::os::raw::c_char; 8usize],
    pub eException_class: *mut RClass,
    pub eStandardError_class: *mut RClass,
    pub nomem_err: *mut RObject,
    pub stack_err: *mut RObject,
    pub ud: *mut ::std::os::raw::c_void,
    pub atexit_stack: *mut mrb_atexit_func,
    pub atexit_stack_len: u16,
    pub ecall_nest: u16,
}
#[test]
fn bindgen_test_layout_mrb_state() {
    assert_eq!(
        ::std::mem::size_of::<mrb_state>(),
        1424usize,
        concat!("Size of: ", stringify!(mrb_state))
    );
    assert_eq!(
        ::std::mem::align_of::<mrb_state>(),
        8usize,
        concat!("Alignment of ", stringify!(mrb_state))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_state>())).jmp as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_state),
            "::",
            stringify!(jmp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_state>())).flags as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_state),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_state>())).allocf as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_state),
            "::",
            stringify!(allocf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_state>())).allocf_ud as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_state),
            "::",
            stringify!(allocf_ud)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_state>())).c as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_state),
            "::",
            stringify!(c)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_state>())).root_c as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_state),
            "::",
            stringify!(root_c)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_state>())).globals as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_state),
            "::",
            stringify!(globals)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_state>())).exc as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_state),
            "::",
            stringify!(exc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_state>())).top_self as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_state),
            "::",
            stringify!(top_self)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_state>())).object_class as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_state),
            "::",
            stringify!(object_class)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_state>())).class_class as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_state),
            "::",
            stringify!(class_class)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_state>())).module_class as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_state),
            "::",
            stringify!(module_class)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_state>())).proc_class as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_state),
            "::",
            stringify!(proc_class)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_state>())).string_class as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_state),
            "::",
            stringify!(string_class)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_state>())).array_class as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_state),
            "::",
            stringify!(array_class)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_state>())).hash_class as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_state),
            "::",
            stringify!(hash_class)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_state>())).range_class as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_state),
            "::",
            stringify!(range_class)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_state>())).float_class as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_state),
            "::",
            stringify!(float_class)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_state>())).fixnum_class as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_state),
            "::",
            stringify!(fixnum_class)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_state>())).true_class as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_state),
            "::",
            stringify!(true_class)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_state>())).false_class as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_state),
            "::",
            stringify!(false_class)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_state>())).nil_class as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_state),
            "::",
            stringify!(nil_class)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_state>())).symbol_class as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_state),
            "::",
            stringify!(symbol_class)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_state>())).kernel_module as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_state),
            "::",
            stringify!(kernel_module)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_state>())).mems as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_state),
            "::",
            stringify!(mems)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_state>())).gc as *const _ as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_state),
            "::",
            stringify!(gc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_state>())).symidx as *const _ as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_state),
            "::",
            stringify!(symidx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_state>())).symtbl as *const _ as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_state),
            "::",
            stringify!(symtbl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_state>())).symhash as *const _ as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_state),
            "::",
            stringify!(symhash)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_state>())).symcapa as *const _ as usize },
        1352usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_state),
            "::",
            stringify!(symcapa)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_state>())).symbuf as *const _ as usize },
        1360usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_state),
            "::",
            stringify!(symbuf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_state>())).eException_class as *const _ as usize },
        1368usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_state),
            "::",
            stringify!(eException_class)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_state>())).eStandardError_class as *const _ as usize },
        1376usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_state),
            "::",
            stringify!(eStandardError_class)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_state>())).nomem_err as *const _ as usize },
        1384usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_state),
            "::",
            stringify!(nomem_err)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_state>())).stack_err as *const _ as usize },
        1392usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_state),
            "::",
            stringify!(stack_err)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_state>())).ud as *const _ as usize },
        1400usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_state),
            "::",
            stringify!(ud)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_state>())).atexit_stack as *const _ as usize },
        1408usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_state),
            "::",
            stringify!(atexit_stack)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_state>())).atexit_stack_len as *const _ as usize },
        1416usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_state),
            "::",
            stringify!(atexit_stack_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_state>())).ecall_nest as *const _ as usize },
        1418usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_state),
            "::",
            stringify!(ecall_nest)
        )
    );
}
extern "C" {
    /// Defines a new class.
    ///
    /// If you're creating a gem it may look something like this:
    ///
    ///      !!!c
    ///      void mrb_example_gem_init(mrb_state* mrb) {
    ///          struct RClass *example_class;
    ///          example_class = mrb_define_class(mrb, "Example_Class", mrb->object_class);
    ///      }
    ///
    ///      void mrb_example_gem_final(mrb_state* mrb) {
    ///          //free(TheAnimals);
    ///      }
    ///
    /// @param [mrb_state *] mrb The current mruby state.
    /// @param [const char *] name The name of the defined class.
    /// @param [struct RClass *] super The new class parent.
    /// @return [struct RClass *] Reference to the newly defined class.
    /// @see mrb_define_class_under
    #[link_name = "\u{1}_mrb_define_class"]
    pub fn mrb_define_class(
        mrb: *mut mrb_state,
        name: *const ::std::os::raw::c_char,
        super_: *mut RClass,
    ) -> *mut RClass;
}
extern "C" {
    /// Defines a new module.
    ///
    /// @param [mrb_state *] mrb_state* The current mruby state.
    /// @param [const char *] char* The name of the module.
    /// @return [struct RClass *] Reference to the newly defined module.
    #[link_name = "\u{1}_mrb_define_module"]
    pub fn mrb_define_module(
        arg1: *mut mrb_state,
        arg2: *const ::std::os::raw::c_char,
    ) -> *mut RClass;
}
extern "C" {
    #[link_name = "\u{1}_mrb_singleton_class"]
    pub fn mrb_singleton_class(arg1: *mut mrb_state, arg2: mrb_value) -> mrb_value;
}
extern "C" {
    /// Include a module in another class or module.
    /// Equivalent to:
    ///
    ///   module B
    ///     include A
    ///   end
    /// @param [mrb_state *] mrb_state* The current mruby state.
    /// @param [struct RClass *] RClass* A reference to module or a class.
    /// @param [struct RClass *] RClass* A reference to the module to be included.
    #[link_name = "\u{1}_mrb_include_module"]
    pub fn mrb_include_module(arg1: *mut mrb_state, arg2: *mut RClass, arg3: *mut RClass);
}
extern "C" {
    /// Prepends a module in another class or module.
    ///
    /// Equivalent to:
    ///  module B
    ///    prepend A
    ///  end
    /// @param [mrb_state *] mrb_state* The current mruby state.
    /// @param [struct RClass *] RClass* A reference to module or a class.
    /// @param [struct RClass *] RClass* A reference to the module to be prepended.
    #[link_name = "\u{1}_mrb_prepend_module"]
    pub fn mrb_prepend_module(arg1: *mut mrb_state, arg2: *mut RClass, arg3: *mut RClass);
}
extern "C" {
    /// Defines a global function in ruby.
    ///
    /// If you're creating a gem it may look something like this
    ///
    /// Example:
    ///
    ///     !!!c
    ///     mrb_value example_method(mrb_state* mrb, mrb_value self)
    ///     {
    ///          puts("Executing example command!");
    ///          return self;
    ///     }
    ///
    ///     void mrb_example_gem_init(mrb_state* mrb)
    ///     {
    ///           mrb_define_method(mrb, mrb->kernel_module, "example_method", example_method, MRB_ARGS_NONE());
    ///     }
    ///
    /// @param [mrb_state *] mrb The MRuby state reference.
    /// @param [struct RClass *] cla The class pointer where the method will be defined.
    /// @param [const char *] name The name of the method being defined.
    /// @param [mrb_func_t] func The function pointer to the method definition.
    /// @param [mrb_aspec] aspec The method parameters declaration.
    #[link_name = "\u{1}_mrb_define_method"]
    pub fn mrb_define_method(
        mrb: *mut mrb_state,
        cla: *mut RClass,
        name: *const ::std::os::raw::c_char,
        func: mrb_func_t,
        aspec: mrb_aspec,
    );
}
extern "C" {
    /// Defines a class method.
    ///
    /// Example:
    ///
    ///     # Ruby style
    ///     class Foo
    ///       def Foo.bar
    ///       end
    ///     end
    ///     // C style
    ///     mrb_value bar_method(mrb_state* mrb, mrb_value self){
    ///       return mrb_nil_value();
    ///     }
    ///     void mrb_example_gem_init(mrb_state* mrb){
    ///       struct RClass *foo;
    ///       foo = mrb_define_class(mrb, "Foo", mrb->object_class);
    ///       mrb_define_class_method(mrb, foo, "bar", bar_method, MRB_ARGS_NONE());
    ///     }
    /// @param [mrb_state *] mrb_state* The MRuby state reference.
    /// @param [struct RClass *] RClass* The class where the class method will be defined.
    /// @param [const char *] char* The name of the class method being defined.
    /// @param [mrb_func_t] mrb_func_t The function pointer to the class method definition.
    /// @param [mrb_aspec] mrb_aspec The method parameters declaration.
    #[link_name = "\u{1}_mrb_define_class_method"]
    pub fn mrb_define_class_method(
        arg1: *mut mrb_state,
        arg2: *mut RClass,
        arg3: *const ::std::os::raw::c_char,
        arg4: mrb_func_t,
        arg5: mrb_aspec,
    );
}
extern "C" {
    #[link_name = "\u{1}_mrb_define_singleton_method"]
    pub fn mrb_define_singleton_method(
        arg1: *mut mrb_state,
        arg2: *mut RObject,
        arg3: *const ::std::os::raw::c_char,
        arg4: mrb_func_t,
        arg5: mrb_aspec,
    );
}
extern "C" {
    ///  Defines a module function.
    ///
    /// Example:
    ///
    ///        # Ruby style
    ///        module Foo
    ///          def Foo.bar
    ///          end
    ///        end
    ///        // C style
    ///        mrb_value bar_method(mrb_state* mrb, mrb_value self){
    ///          return mrb_nil_value();
    ///        }
    ///        void mrb_example_gem_init(mrb_state* mrb){
    ///          struct RClass *foo;
    ///          foo = mrb_define_module(mrb, "Foo");
    ///          mrb_define_module_function(mrb, foo, "bar", bar_method, MRB_ARGS_NONE());
    ///        }
    ///  @param [mrb_state *] mrb_state* The MRuby state reference.
    ///  @param [struct RClass *] RClass* The module where the module function will be defined.
    ///  @param [const char *] char* The name of the module function being defined.
    ///  @param [mrb_func_t] mrb_func_t The function pointer to the module function definition.
    ///  @param [mrb_aspec] mrb_aspec The method parameters declaration.
    #[link_name = "\u{1}_mrb_define_module_function"]
    pub fn mrb_define_module_function(
        arg1: *mut mrb_state,
        arg2: *mut RClass,
        arg3: *const ::std::os::raw::c_char,
        arg4: mrb_func_t,
        arg5: mrb_aspec,
    );
}
extern "C" {
    ///  Defines a constant.
    ///
    /// Example:
    ///
    ///          # Ruby style
    ///          class ExampleClass
    ///            AGE = 22
    ///          end
    ///          // C style
    ///          #include <stdio.h>
    ///          #include <mruby.h>
    ///
    ///          void
    ///          mrb_example_gem_init(mrb_state* mrb){
    ///            mrb_define_const(mrb, mrb->kernel_module, "AGE", mrb_fixnum_value(22));
    ///          }
    ///
    ///          mrb_value
    ///          mrb_example_gem_final(mrb_state* mrb){
    ///          }
    ///  @param [mrb_state *] mrb_state* The MRuby state reference.
    ///  @param [struct RClass *] RClass* A class or module the constant is defined in.
    ///  @param [const char *] name The name of the constant being defined.
    ///  @param [mrb_value] mrb_value The value for the constant.
    #[link_name = "\u{1}_mrb_define_const"]
    pub fn mrb_define_const(
        arg1: *mut mrb_state,
        arg2: *mut RClass,
        name: *const ::std::os::raw::c_char,
        arg3: mrb_value,
    );
}
extern "C" {
    /// Undefines a method.
    ///
    /// Example:
    ///
    ///     # Ruby style
    ///
    ///     class ExampleClassA
    ///       def example_method
    ///         "example"
    ///       end
    ///     end
    ///     ExampleClassA.new.example_method # => example
    ///
    ///     class ExampleClassB < ExampleClassA
    ///       undef_method :example_method
    ///     end
    ///
    ///     ExampleClassB.new.example_method # => undefined method 'example_method' for ExampleClassB (NoMethodError)
    ///
    ///     // C style
    ///     #include <stdio.h>
    ///     #include <mruby.h>
    ///
    ///     mrb_value
    ///     mrb_example_method(mrb_state *mrb){
    ///       return mrb_str_new_lit(mrb, "example");
    ///     }
    ///
    ///     void
    ///     mrb_example_gem_init(mrb_state* mrb){
    ///       struct RClass *example_class_a;
    ///       struct RClass *example_class_b;
    ///       struct RClass *example_class_c;
    ///
    ///       example_class_a = mrb_define_class(mrb, "ExampleClassA", mrb->object_class);
    ///       mrb_define_method(mrb, example_class_a, "example_method", mrb_example_method, MRB_ARGS_NONE());
    ///       example_class_b = mrb_define_class(mrb, "ExampleClassB", example_class_a);
    ///       example_class_c = mrb_define_class(mrb, "ExampleClassC", example_class_b);
    ///       mrb_undef_method(mrb, example_class_c, "example_method");
    ///     }
    ///
    ///     mrb_example_gem_final(mrb_state* mrb){
    ///     }
    /// @param [mrb_state*] mrb_state* The mruby state reference.
    /// @param [struct RClass*] RClass* A class the method will be undefined from.
    /// @param [const char*] const char* The name of the method to be undefined.
    #[link_name = "\u{1}_mrb_undef_method"]
    pub fn mrb_undef_method(
        arg1: *mut mrb_state,
        arg2: *mut RClass,
        arg3: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    #[link_name = "\u{1}_mrb_undef_method_id"]
    pub fn mrb_undef_method_id(arg1: *mut mrb_state, arg2: *mut RClass, arg3: mrb_sym);
}
extern "C" {
    /// Undefine a class method.
    /// Example:
    ///
    ///      # Ruby style
    ///      class ExampleClass
    ///        def self.example_method
    ///          "example"
    ///        end
    ///      end
    ///
    ///     ExampleClass.example_method
    ///
    ///     // C style
    ///     #include <stdio.h>
    ///     #include <mruby.h>
    ///
    ///     mrb_value
    ///     mrb_example_method(mrb_state *mrb){
    ///       return mrb_str_new_lit(mrb, "example");
    ///     }
    ///
    ///     void
    ///     mrb_example_gem_init(mrb_state* mrb){
    ///       struct RClass *example_class;
    ///       example_class = mrb_define_class(mrb, "ExampleClass", mrb->object_class);
    ///       mrb_define_class_method(mrb, example_class, "example_method", mrb_example_method, MRB_ARGS_NONE());
    ///       mrb_undef_class_method(mrb, example_class, "example_method");
    ///      }
    ///
    ///      void
    ///      mrb_example_gem_final(mrb_state* mrb){
    ///      }
    /// @param [mrb_state*] mrb_state* The mruby state reference.
    /// @param [RClass*] RClass* A class the class method will be undefined from.
    /// @param [const char*] const char* The name of the class method to be undefined.
    #[link_name = "\u{1}_mrb_undef_class_method"]
    pub fn mrb_undef_class_method(
        arg1: *mut mrb_state,
        arg2: *mut RClass,
        arg3: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    /// Initialize a new object instance of c class.
    ///
    /// Example:
    ///
    ///     # Ruby style
    ///     class ExampleClass
    ///     end
    ///
    ///     p ExampleClass # => #<ExampleClass:0x9958588>
    ///     // C style
    ///     #include <stdio.h>
    ///     #include <mruby.h>
    ///
    ///     void
    ///     mrb_example_gem_init(mrb_state* mrb) {
    ///       struct RClass *example_class;
    ///       mrb_value obj;
    ///       example_class = mrb_define_class(mrb, "ExampleClass", mrb->object_class); # => class ExampleClass; end
    ///       obj = mrb_obj_new(mrb, example_class, 0, NULL); # => ExampleClass.new
    ///       mrb_p(mrb, obj); // => Kernel#p
    ///      }
    /// @param [mrb_state*] mrb The current mruby state.
    /// @param [RClass*] c Reference to the class of the new object.
    /// @param [mrb_int] argc Number of arguments in argv
    /// @param [const mrb_value *] argv Array of mrb_value to initialize the object
    /// @return [mrb_value] The newly initialized object
    #[link_name = "\u{1}_mrb_obj_new"]
    pub fn mrb_obj_new(
        mrb: *mut mrb_state,
        c: *mut RClass,
        argc: mrb_int,
        argv: *const mrb_value,
    ) -> mrb_value;
}
extern "C" {
    #[link_name = "\u{1}_mrb_instance_new"]
    pub fn mrb_instance_new(mrb: *mut mrb_state, cv: mrb_value) -> mrb_value;
}
extern "C" {
    /// Creates a new instance of Class, Class.
    ///
    /// Example:
    ///
    ///      void
    ///      mrb_example_gem_init(mrb_state* mrb) {
    ///        struct RClass *example_class;
    ///
    ///        mrb_value obj;
    ///        example_class = mrb_class_new(mrb, mrb->object_class);
    ///        obj = mrb_obj_new(mrb, example_class, 0, NULL); // => #<#<Class:0x9a945b8>:0x9a94588>
    ///        mrb_p(mrb, obj); // => Kernel#p
    ///       }
    ///
    /// @param [mrb_state*] mrb The current mruby state.
    /// @param [struct RClass *] super The super class or parent.
    /// @return [struct RClass *] Reference to the new class.
    #[link_name = "\u{1}_mrb_class_new"]
    pub fn mrb_class_new(mrb: *mut mrb_state, super_: *mut RClass) -> *mut RClass;
}
extern "C" {
    /// Creates a new module, Module.
    ///
    /// Example:
    ///      void
    ///      mrb_example_gem_init(mrb_state* mrb) {
    ///        struct RClass *example_module;
    ///
    ///        example_module = mrb_module_new(mrb);
    ///      }
    ///
    /// @param [mrb_state*] mrb The current mruby state.
    /// @return [struct RClass *] Reference to the new module.
    #[link_name = "\u{1}_mrb_module_new"]
    pub fn mrb_module_new(mrb: *mut mrb_state) -> *mut RClass;
}
extern "C" {
    /// Returns an mrb_bool. True if class was defined, and false if the class was not defined.
    ///
    /// Example:
    ///     void
    ///     mrb_example_gem_init(mrb_state* mrb) {
    ///       struct RClass *example_class;
    ///       mrb_bool cd;
    ///
    ///       example_class = mrb_define_class(mrb, "ExampleClass", mrb->object_class);
    ///       cd = mrb_class_defined(mrb, "ExampleClass");
    ///
    ///       // If mrb_class_defined returns 1 then puts "True"
    ///       // If mrb_class_defined returns 0 then puts "False"
    ///       if (cd == 1){
    ///         puts("True");
    ///       }
    ///       else {
    ///         puts("False");
    ///       }
    ///      }
    ///
    /// @param [mrb_state*] mrb The current mruby state.
    /// @param [const char *] name A string representing the name of the class.
    /// @return [mrb_bool] A boolean value.
    #[link_name = "\u{1}_mrb_class_defined"]
    pub fn mrb_class_defined(mrb: *mut mrb_state, name: *const ::std::os::raw::c_char) -> mrb_bool;
}
extern "C" {
    /// Gets a class.
    /// @param [mrb_state*] mrb The current mruby state.
    /// @param [const char *] name The name of the class.
    /// @return [struct RClass *] A reference to the class.
    #[link_name = "\u{1}_mrb_class_get"]
    pub fn mrb_class_get(mrb: *mut mrb_state, name: *const ::std::os::raw::c_char) -> *mut RClass;
}
extern "C" {
    /// Gets a exception class.
    /// @param [mrb_state*] mrb The current mruby state.
    /// @param [const char *] name The name of the class.
    /// @return [struct RClass *] A reference to the class.
    #[link_name = "\u{1}_mrb_exc_get"]
    pub fn mrb_exc_get(mrb: *mut mrb_state, name: *const ::std::os::raw::c_char) -> *mut RClass;
}
extern "C" {
    /// Returns an mrb_bool. True if inner class was defined, and false if the inner class was not defined.
    ///
    /// Example:
    ///     void
    ///     mrb_example_gem_init(mrb_state* mrb) {
    ///       struct RClass *example_outer, *example_inner;
    ///       mrb_bool cd;
    ///
    ///       example_outer = mrb_define_module(mrb, "ExampleOuter");
    ///
    ///       example_inner = mrb_define_class_under(mrb, example_outer, "ExampleInner", mrb->object_class);
    ///       cd = mrb_class_defined_under(mrb, example_outer, "ExampleInner");
    ///
    ///       // If mrb_class_defined_under returns 1 then puts "True"
    ///       // If mrb_class_defined_under returns 0 then puts "False"
    ///       if (cd == 1){
    ///         puts("True");
    ///       }
    ///       else {
    ///         puts("False");
    ///       }
    ///      }
    ///
    /// @param [mrb_state*] mrb The current mruby state.
    /// @param [struct RClass *] outer The name of the outer class.
    /// @param [const char *] name A string representing the name of the inner class.
    /// @return [mrb_bool] A boolean value.
    #[link_name = "\u{1}_mrb_class_defined_under"]
    pub fn mrb_class_defined_under(
        mrb: *mut mrb_state,
        outer: *mut RClass,
        name: *const ::std::os::raw::c_char,
    ) -> mrb_bool;
}
extern "C" {
    /// Gets a child class.
    /// @param [mrb_state*] mrb The current mruby state.
    /// @param [struct RClass *] outer The name of the parent class.
    /// @param [const char *] name The name of the class.
    /// @return [struct RClass *] A reference to the class.
    #[link_name = "\u{1}_mrb_class_get_under"]
    pub fn mrb_class_get_under(
        mrb: *mut mrb_state,
        outer: *mut RClass,
        name: *const ::std::os::raw::c_char,
    ) -> *mut RClass;
}
extern "C" {
    /// Gets a module.
    /// @param [mrb_state*] mrb The current mruby state.
    /// @param [const char *] name The name of the module.
    /// @return [struct RClass *] A reference to the module.
    #[link_name = "\u{1}_mrb_module_get"]
    pub fn mrb_module_get(mrb: *mut mrb_state, name: *const ::std::os::raw::c_char) -> *mut RClass;
}
extern "C" {
    /// Gets a module defined under another module.
    /// @param [mrb_state*] mrb The current mruby state.
    /// @param [struct RClass *] outer The name of the outer module.
    /// @param [const char *] name The name of the module.
    /// @return [struct RClass *] A reference to the module.
    #[link_name = "\u{1}_mrb_module_get_under"]
    pub fn mrb_module_get_under(
        mrb: *mut mrb_state,
        outer: *mut RClass,
        name: *const ::std::os::raw::c_char,
    ) -> *mut RClass;
}
extern "C" {
    #[link_name = "\u{1}_mrb_notimplement"]
    pub fn mrb_notimplement(arg1: *mut mrb_state);
}
extern "C" {
    #[link_name = "\u{1}_mrb_notimplement_m"]
    pub fn mrb_notimplement_m(arg1: *mut mrb_state, arg2: mrb_value) -> mrb_value;
}
extern "C" {
    /// Duplicate an object.
    ///
    /// Equivalent to:
    ///   Object#dup
    /// @param [mrb_state*] mrb The current mruby state.
    /// @param [mrb_value] obj Object to be duplicate.
    /// @return [mrb_value] The newly duplicated object.
    #[link_name = "\u{1}_mrb_obj_dup"]
    pub fn mrb_obj_dup(mrb: *mut mrb_state, obj: mrb_value) -> mrb_value;
}
extern "C" {
    /// Returns true if obj responds to the given method. If the method was defined for that
    /// class it returns true, it returns false otherwise.
    ///
    ///      Example:
    ///      # Ruby style
    ///      class ExampleClass
    ///        def example_method
    ///        end
    ///      end
    ///
    ///      ExampleClass.new.respond_to?(:example_method) # => true
    ///
    ///      // C style
    ///      void
    ///      mrb_example_gem_init(mrb_state* mrb) {
    ///        struct RClass *example_class;
    ///        mrb_sym mid;
    ///        mrb_bool obj_resp;
    ///
    ///        example_class = mrb_define_class(mrb, "ExampleClass", mrb->object_class);
    ///        mrb_define_method(mrb, example_class, "example_method", exampleMethod, MRB_ARGS_NONE());
    ///        mid = mrb_intern_str(mrb, mrb_str_new_lit(mrb, "example_method" ));
    ///        obj_resp = mrb_obj_respond_to(mrb, example_class, mid); // => 1(true in Ruby world)
    ///
    ///        // If mrb_obj_respond_to returns 1 then puts "True"
    ///        // If mrb_obj_respond_to returns 0 then puts "False"
    ///        if (obj_resp == 1) {
    ///          puts("True");
    ///        }
    ///        else if (obj_resp == 0) {
    ///          puts("False");
    ///        }
    ///      }
    ///
    /// @param [mrb_state*] mrb The current mruby state.
    /// @param [struct RClass *] c A reference to a class.
    /// @param [mrb_sym] mid A symbol referencing a method id.
    /// @return [mrb_bool] A boolean value.
    #[link_name = "\u{1}_mrb_obj_respond_to"]
    pub fn mrb_obj_respond_to(mrb: *mut mrb_state, c: *mut RClass, mid: mrb_sym) -> mrb_bool;
}
extern "C" {
    /// Defines a new class under a given module
    ///
    /// @param [mrb_state*] mrb The current mruby state.
    /// @param [struct RClass *] outer Reference to the module under which the new class will be defined
    /// @param [const char *] name The name of the defined class
    /// @param [struct RClass *] super The new class parent
    /// @return [struct RClass *] Reference to the newly defined class
    /// @see mrb_define_class
    #[link_name = "\u{1}_mrb_define_class_under"]
    pub fn mrb_define_class_under(
        mrb: *mut mrb_state,
        outer: *mut RClass,
        name: *const ::std::os::raw::c_char,
        super_: *mut RClass,
    ) -> *mut RClass;
}
extern "C" {
    #[link_name = "\u{1}_mrb_define_module_under"]
    pub fn mrb_define_module_under(
        mrb: *mut mrb_state,
        outer: *mut RClass,
        name: *const ::std::os::raw::c_char,
    ) -> *mut RClass;
}
/// Format specifiers for {mrb_get_args} function
///
/// Must be a C string composed of the following format specifiers:
///
/// | char | Ruby type      | C types           | Notes                                              |
/// |:----:|----------------|-------------------|----------------------------------------------------|
/// | `o`  | {Object}       | {mrb_value}       | Could be used to retrieve any type of argument     |
/// | `C`  | {Class}/{Module} | {mrb_value}     |                                                    |
/// | `S`  | {String}       | {mrb_value}       | when `!` follows, the value may be `nil`           |
/// | `A`  | {Array}        | {mrb_value}       | when `!` follows, the value may be `nil`           |
/// | `H`  | {Hash}         | {mrb_value}       | when `!` follows, the value may be `nil`           |
/// | `s`  | {String}       | char *, {mrb_int} | Receive two arguments; `s!` gives (`NULL`,`0`) for `nil`       |
/// | `z`  | {String}       | char *            | `NULL` terminated string; `z!` gives `NULL` for `nil`           |
/// | `a`  | {Array}        | {mrb_value} *, {mrb_int} | Receive two arguments; `a!` gives (`NULL`,`0`) for `nil` |
/// | `f`  | {Float}        | {mrb_float}       |                                                    |
/// | `i`  | {Integer}      | {mrb_int}         |                                                    |
/// | `b`  | boolean        | {mrb_bool}        |                                                    |
/// | `n`  | {Symbol}       | {mrb_sym}         |                                                    |
/// | `&`  | block          | {mrb_value}       | &! raises exception if no block given.             |
/// | `*`  | rest arguments | {mrb_value} *, {mrb_int} | Receive the rest of arguments as an array; *! avoid copy of the stack.  |
/// | &vert; | optional     |                   | After this spec following specs would be optional. |
/// | `?`  | optional given | {mrb_bool}        | `TRUE` if preceding argument is given. Used to check optional argument is given. |
///
/// @see mrb_get_args
pub type mrb_args_format = *const ::std::os::raw::c_char;
extern "C" {
    /// Retrieve arguments from mrb_state.
    ///
    /// @param mrb The current MRuby state.
    /// @param format [mrb_args_format] is a list of format specifiers
    /// @param ... The passing variadic arguments must be a pointer of retrieving type.
    /// @return the number of arguments retrieved.
    /// @see mrb_args_format
    #[link_name = "\u{1}_mrb_get_args"]
    pub fn mrb_get_args(mrb: *mut mrb_state, format: mrb_args_format, ...) -> mrb_int;
}
extern "C" {
    /// Retrieve number of arguments from mrb_state.
    ///
    /// Correctly handles *splat arguments.
    #[link_name = "\u{1}_mrb_get_argc"]
    pub fn mrb_get_argc(mrb: *mut mrb_state) -> mrb_int;
}
extern "C" {
    #[link_name = "\u{1}_mrb_get_argv"]
    pub fn mrb_get_argv(mrb: *mut mrb_state) -> *mut mrb_value;
}
extern "C" {
    /// Call existing ruby functions.
    ///
    ///      #include <stdio.h>
    ///      #include <mruby.h>
    ///      #include "mruby/compile.h"
    ///
    ///      int
    ///      main()
    ///      {
    ///        mrb_int i = 99;
    ///        mrb_state *mrb = mrb_open();
    ///
    ///        if (!mrb) { }
    ///        FILE *fp = fopen("test.rb","r");
    ///        mrb_value obj = mrb_load_file(mrb,fp);
    ///        mrb_funcall(mrb, obj, "method_name", 1, mrb_fixnum_value(i));
    ///        fclose(fp);
    ///        mrb_close(mrb);
    ///       }
    /// @param [mrb_state*] mrb_state* The current mruby state.
    /// @param [mrb_value] mrb_value A reference to an mruby value.
    /// @param [const char*] const char* The name of the method.
    /// @param [mrb_int] mrb_int The number of arguments the method has.
    /// @param [...] ... Variadic values(not type safe!).
    /// @return [mrb_value] mrb_value mruby function value.
    #[link_name = "\u{1}_mrb_funcall"]
    pub fn mrb_funcall(
        arg1: *mut mrb_state,
        arg2: mrb_value,
        arg3: *const ::std::os::raw::c_char,
        arg4: mrb_int,
        ...
    ) -> mrb_value;
}
extern "C" {
    /// Call existing ruby functions. This is basically the type safe version of mrb_funcall.
    ///
    ///      #include <stdio.h>
    ///      #include <mruby.h>
    ///      #include "mruby/compile.h"
    ///      int
    ///      main()
    ///      {
    ///        mrb_int i = 99;
    ///        mrb_state *mrb = mrb_open();
    ///
    ///        if (!mrb) { }
    ///        mrb_sym m_sym = mrb_intern_lit(mrb, "method_name"); // Symbol for method.
    ///
    ///        FILE *fp = fopen("test.rb","r");
    ///        mrb_value obj = mrb_load_file(mrb,fp);
    ///        mrb_funcall_argv(mrb, obj, m_sym, 1, &obj); // Calling ruby function from test.rb.
    ///        fclose(fp);
    ///        mrb_close(mrb);
    ///       }
    /// @param [mrb_state*] mrb_state* The current mruby state.
    /// @param [mrb_value] mrb_value A reference to an mruby value.
    /// @param [mrb_sym] mrb_sym The symbol representing the method.
    /// @param [mrb_int] mrb_int The number of arguments the method has.
    /// @param [const mrb_value*] mrb_value* Pointer to the object.
    /// @return [mrb_value] mrb_value mruby function value.
    /// @see mrb_funcall
    #[link_name = "\u{1}_mrb_funcall_argv"]
    pub fn mrb_funcall_argv(
        arg1: *mut mrb_state,
        arg2: mrb_value,
        arg3: mrb_sym,
        arg4: mrb_int,
        arg5: *const mrb_value,
    ) -> mrb_value;
}
extern "C" {
    /// Call existing ruby functions with a block.
    #[link_name = "\u{1}_mrb_funcall_with_block"]
    pub fn mrb_funcall_with_block(
        arg1: *mut mrb_state,
        arg2: mrb_value,
        arg3: mrb_sym,
        arg4: mrb_int,
        arg5: *const mrb_value,
        arg6: mrb_value,
    ) -> mrb_value;
}
extern "C" {
    /// Create a symbol
    ///
    ///     # Ruby style:
    ///     :pizza # => :pizza
    ///
    ///     // C style:
    ///     mrb_sym m_sym = mrb_intern_lit(mrb, "pizza"); //  => :pizza
    /// @param [mrb_state*] mrb_state* The current mruby state.
    /// @param [const char*] const char* The name of the method.
    /// @return [mrb_sym] mrb_sym A symbol.
    #[link_name = "\u{1}_mrb_intern_cstr"]
    pub fn mrb_intern_cstr(arg1: *mut mrb_state, arg2: *const ::std::os::raw::c_char) -> mrb_sym;
}
extern "C" {
    #[link_name = "\u{1}_mrb_intern"]
    pub fn mrb_intern(
        arg1: *mut mrb_state,
        arg2: *const ::std::os::raw::c_char,
        arg3: usize,
    ) -> mrb_sym;
}
extern "C" {
    #[link_name = "\u{1}_mrb_intern_static"]
    pub fn mrb_intern_static(
        arg1: *mut mrb_state,
        arg2: *const ::std::os::raw::c_char,
        arg3: usize,
    ) -> mrb_sym;
}
extern "C" {
    #[link_name = "\u{1}_mrb_intern_str"]
    pub fn mrb_intern_str(arg1: *mut mrb_state, arg2: mrb_value) -> mrb_sym;
}
extern "C" {
    #[link_name = "\u{1}_mrb_check_intern_cstr"]
    pub fn mrb_check_intern_cstr(
        arg1: *mut mrb_state,
        arg2: *const ::std::os::raw::c_char,
    ) -> mrb_value;
}
extern "C" {
    #[link_name = "\u{1}_mrb_check_intern"]
    pub fn mrb_check_intern(
        arg1: *mut mrb_state,
        arg2: *const ::std::os::raw::c_char,
        arg3: usize,
    ) -> mrb_value;
}
extern "C" {
    #[link_name = "\u{1}_mrb_check_intern_str"]
    pub fn mrb_check_intern_str(arg1: *mut mrb_state, arg2: mrb_value) -> mrb_value;
}
extern "C" {
    #[link_name = "\u{1}_mrb_sym2name"]
    pub fn mrb_sym2name(arg1: *mut mrb_state, arg2: mrb_sym) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_mrb_sym2name_len"]
    pub fn mrb_sym2name_len(
        arg1: *mut mrb_state,
        arg2: mrb_sym,
        arg3: *mut mrb_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_mrb_sym2str"]
    pub fn mrb_sym2str(arg1: *mut mrb_state, arg2: mrb_sym) -> mrb_value;
}
extern "C" {
    #[link_name = "\u{1}_mrb_malloc"]
    pub fn mrb_malloc(arg1: *mut mrb_state, arg2: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}_mrb_calloc"]
    pub fn mrb_calloc(
        arg1: *mut mrb_state,
        arg2: usize,
        arg3: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}_mrb_realloc"]
    pub fn mrb_realloc(
        arg1: *mut mrb_state,
        arg2: *mut ::std::os::raw::c_void,
        arg3: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}_mrb_realloc_simple"]
    pub fn mrb_realloc_simple(
        arg1: *mut mrb_state,
        arg2: *mut ::std::os::raw::c_void,
        arg3: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}_mrb_malloc_simple"]
    pub fn mrb_malloc_simple(arg1: *mut mrb_state, arg2: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}_mrb_obj_alloc"]
    pub fn mrb_obj_alloc(arg1: *mut mrb_state, arg2: mrb_vtype, arg3: *mut RClass) -> *mut RBasic;
}
extern "C" {
    #[link_name = "\u{1}_mrb_free"]
    pub fn mrb_free(arg1: *mut mrb_state, arg2: *mut ::std::os::raw::c_void);
}
extern "C" {
    #[link_name = "\u{1}_mrb_str_new"]
    pub fn mrb_str_new(
        mrb: *mut mrb_state,
        p: *const ::std::os::raw::c_char,
        len: usize,
    ) -> mrb_value;
}
extern "C" {
    /// Turns a C string into a Ruby string value.
    #[link_name = "\u{1}_mrb_str_new_cstr"]
    pub fn mrb_str_new_cstr(arg1: *mut mrb_state, arg2: *const ::std::os::raw::c_char)
        -> mrb_value;
}
extern "C" {
    #[link_name = "\u{1}_mrb_str_new_static"]
    pub fn mrb_str_new_static(
        mrb: *mut mrb_state,
        p: *const ::std::os::raw::c_char,
        len: usize,
    ) -> mrb_value;
}
extern "C" {
    /// Creates new mrb_state.
    ///
    /// @return
    ///      Pointer to the newly created mrb_state.
    #[link_name = "\u{1}_mrb_open"]
    pub fn mrb_open() -> *mut mrb_state;
}
extern "C" {
    /// Create new mrb_state with custom allocators.
    ///
    /// @param f
    ///      Reference to the allocation function.
    /// @param ud
    ///      User data will be passed to custom allocator f.
    ///      If user data isn't required just pass NULL.
    /// @return
    ///      Pointer to the newly created mrb_state.
    #[link_name = "\u{1}_mrb_open_allocf"]
    pub fn mrb_open_allocf(f: mrb_allocf, ud: *mut ::std::os::raw::c_void) -> *mut mrb_state;
}
extern "C" {
    /// Create new mrb_state with just the MRuby core
    ///
    /// @param f
    ///      Reference to the allocation function.
    ///      Use mrb_default_allocf for the default
    /// @param ud
    ///      User data will be passed to custom allocator f.
    ///      If user data isn't required just pass NULL.
    /// @return
    ///      Pointer to the newly created mrb_state.
    #[link_name = "\u{1}_mrb_open_core"]
    pub fn mrb_open_core(f: mrb_allocf, ud: *mut ::std::os::raw::c_void) -> *mut mrb_state;
}
extern "C" {
    /// Closes and frees a mrb_state.
    ///
    /// @param mrb
    ///      Pointer to the mrb_state to be closed.
    #[link_name = "\u{1}_mrb_close"]
    pub fn mrb_close(mrb: *mut mrb_state);
}
extern "C" {
    /// The default allocation function.
    ///
    /// @see mrb_allocf
    #[link_name = "\u{1}_mrb_default_allocf"]
    pub fn mrb_default_allocf(
        arg1: *mut mrb_state,
        arg2: *mut ::std::os::raw::c_void,
        arg3: usize,
        arg4: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}_mrb_top_self"]
    pub fn mrb_top_self(arg1: *mut mrb_state) -> mrb_value;
}
extern "C" {
    #[link_name = "\u{1}_mrb_run"]
    pub fn mrb_run(arg1: *mut mrb_state, arg2: *mut RProc, arg3: mrb_value) -> mrb_value;
}
extern "C" {
    #[link_name = "\u{1}_mrb_top_run"]
    pub fn mrb_top_run(
        arg1: *mut mrb_state,
        arg2: *mut RProc,
        arg3: mrb_value,
        arg4: ::std::os::raw::c_uint,
    ) -> mrb_value;
}
extern "C" {
    #[link_name = "\u{1}_mrb_vm_run"]
    pub fn mrb_vm_run(
        arg1: *mut mrb_state,
        arg2: *mut RProc,
        arg3: mrb_value,
        arg4: ::std::os::raw::c_uint,
    ) -> mrb_value;
}
extern "C" {
    #[link_name = "\u{1}_mrb_vm_exec"]
    pub fn mrb_vm_exec(arg1: *mut mrb_state, arg2: *mut RProc, arg3: *mut mrb_code) -> mrb_value;
}
extern "C" {
    #[link_name = "\u{1}_mrb_p"]
    pub fn mrb_p(arg1: *mut mrb_state, arg2: mrb_value);
}
extern "C" {
    #[link_name = "\u{1}_mrb_obj_id"]
    pub fn mrb_obj_id(obj: mrb_value) -> mrb_int;
}
extern "C" {
    #[link_name = "\u{1}_mrb_obj_to_sym"]
    pub fn mrb_obj_to_sym(mrb: *mut mrb_state, name: mrb_value) -> mrb_sym;
}
extern "C" {
    #[link_name = "\u{1}_mrb_obj_eq"]
    pub fn mrb_obj_eq(arg1: *mut mrb_state, arg2: mrb_value, arg3: mrb_value) -> mrb_bool;
}
extern "C" {
    #[link_name = "\u{1}_mrb_obj_equal"]
    pub fn mrb_obj_equal(arg1: *mut mrb_state, arg2: mrb_value, arg3: mrb_value) -> mrb_bool;
}
extern "C" {
    #[link_name = "\u{1}_mrb_equal"]
    pub fn mrb_equal(mrb: *mut mrb_state, obj1: mrb_value, obj2: mrb_value) -> mrb_bool;
}
extern "C" {
    #[link_name = "\u{1}_mrb_convert_to_integer"]
    pub fn mrb_convert_to_integer(mrb: *mut mrb_state, val: mrb_value, base: mrb_int) -> mrb_value;
}
extern "C" {
    #[link_name = "\u{1}_mrb_Integer"]
    pub fn mrb_Integer(mrb: *mut mrb_state, val: mrb_value) -> mrb_value;
}
extern "C" {
    #[link_name = "\u{1}_mrb_Float"]
    pub fn mrb_Float(mrb: *mut mrb_state, val: mrb_value) -> mrb_value;
}
extern "C" {
    #[link_name = "\u{1}_mrb_inspect"]
    pub fn mrb_inspect(mrb: *mut mrb_state, obj: mrb_value) -> mrb_value;
}
extern "C" {
    #[link_name = "\u{1}_mrb_eql"]
    pub fn mrb_eql(mrb: *mut mrb_state, obj1: mrb_value, obj2: mrb_value) -> mrb_bool;
}
extern "C" {
    #[link_name = "\u{1}_mrb_garbage_collect"]
    pub fn mrb_garbage_collect(arg1: *mut mrb_state);
}
extern "C" {
    #[link_name = "\u{1}_mrb_full_gc"]
    pub fn mrb_full_gc(arg1: *mut mrb_state);
}
extern "C" {
    #[link_name = "\u{1}_mrb_incremental_gc"]
    pub fn mrb_incremental_gc(arg1: *mut mrb_state);
}
extern "C" {
    #[link_name = "\u{1}_mrb_gc_mark"]
    pub fn mrb_gc_mark(arg1: *mut mrb_state, arg2: *mut RBasic);
}
extern "C" {
    #[link_name = "\u{1}_mrb_field_write_barrier"]
    pub fn mrb_field_write_barrier(arg1: *mut mrb_state, arg2: *mut RBasic, arg3: *mut RBasic);
}
extern "C" {
    #[link_name = "\u{1}_mrb_write_barrier"]
    pub fn mrb_write_barrier(arg1: *mut mrb_state, arg2: *mut RBasic);
}
extern "C" {
    #[link_name = "\u{1}_mrb_check_convert_type"]
    pub fn mrb_check_convert_type(
        mrb: *mut mrb_state,
        val: mrb_value,
        type_: mrb_vtype,
        tname: *const ::std::os::raw::c_char,
        method: *const ::std::os::raw::c_char,
    ) -> mrb_value;
}
extern "C" {
    #[link_name = "\u{1}_mrb_any_to_s"]
    pub fn mrb_any_to_s(mrb: *mut mrb_state, obj: mrb_value) -> mrb_value;
}
extern "C" {
    #[link_name = "\u{1}_mrb_obj_classname"]
    pub fn mrb_obj_classname(mrb: *mut mrb_state, obj: mrb_value) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_mrb_obj_class"]
    pub fn mrb_obj_class(mrb: *mut mrb_state, obj: mrb_value) -> *mut RClass;
}
extern "C" {
    #[link_name = "\u{1}_mrb_class_path"]
    pub fn mrb_class_path(mrb: *mut mrb_state, c: *mut RClass) -> mrb_value;
}
extern "C" {
    #[link_name = "\u{1}_mrb_convert_type"]
    pub fn mrb_convert_type(
        mrb: *mut mrb_state,
        val: mrb_value,
        type_: mrb_vtype,
        tname: *const ::std::os::raw::c_char,
        method: *const ::std::os::raw::c_char,
    ) -> mrb_value;
}
extern "C" {
    #[link_name = "\u{1}_mrb_obj_is_kind_of"]
    pub fn mrb_obj_is_kind_of(mrb: *mut mrb_state, obj: mrb_value, c: *mut RClass) -> mrb_bool;
}
extern "C" {
    #[link_name = "\u{1}_mrb_obj_inspect"]
    pub fn mrb_obj_inspect(mrb: *mut mrb_state, self_: mrb_value) -> mrb_value;
}
extern "C" {
    #[link_name = "\u{1}_mrb_obj_clone"]
    pub fn mrb_obj_clone(mrb: *mut mrb_state, self_: mrb_value) -> mrb_value;
}
extern "C" {
    #[link_name = "\u{1}_mrb_exc_new"]
    pub fn mrb_exc_new(
        mrb: *mut mrb_state,
        c: *mut RClass,
        ptr: *const ::std::os::raw::c_char,
        len: usize,
    ) -> mrb_value;
}
extern "C" {
    #[link_name = "\u{1}_mrb_exc_raise"]
    pub fn mrb_exc_raise(mrb: *mut mrb_state, exc: mrb_value);
}
extern "C" {
    #[link_name = "\u{1}_mrb_raise"]
    pub fn mrb_raise(mrb: *mut mrb_state, c: *mut RClass, msg: *const ::std::os::raw::c_char);
}
extern "C" {
    #[link_name = "\u{1}_mrb_raisef"]
    pub fn mrb_raisef(mrb: *mut mrb_state, c: *mut RClass, fmt: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    #[link_name = "\u{1}_mrb_name_error"]
    pub fn mrb_name_error(
        mrb: *mut mrb_state,
        id: mrb_sym,
        fmt: *const ::std::os::raw::c_char,
        ...
    );
}
extern "C" {
    #[link_name = "\u{1}_mrb_warn"]
    pub fn mrb_warn(mrb: *mut mrb_state, fmt: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    #[link_name = "\u{1}_mrb_bug"]
    pub fn mrb_bug(mrb: *mut mrb_state, fmt: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    #[link_name = "\u{1}_mrb_print_backtrace"]
    pub fn mrb_print_backtrace(mrb: *mut mrb_state);
}
extern "C" {
    #[link_name = "\u{1}_mrb_print_error"]
    pub fn mrb_print_error(mrb: *mut mrb_state);
}
extern "C" {
    #[link_name = "\u{1}_mrb_vformat"]
    pub fn mrb_vformat(
        mrb: *mut mrb_state,
        format: *const ::std::os::raw::c_char,
        ap: *mut __va_list_tag,
    ) -> mrb_value;
}
extern "C" {
    #[link_name = "\u{1}_mrb_yield"]
    pub fn mrb_yield(mrb: *mut mrb_state, b: mrb_value, arg: mrb_value) -> mrb_value;
}
extern "C" {
    #[link_name = "\u{1}_mrb_yield_argv"]
    pub fn mrb_yield_argv(
        mrb: *mut mrb_state,
        b: mrb_value,
        argc: mrb_int,
        argv: *const mrb_value,
    ) -> mrb_value;
}
extern "C" {
    #[link_name = "\u{1}_mrb_yield_with_class"]
    pub fn mrb_yield_with_class(
        mrb: *mut mrb_state,
        b: mrb_value,
        argc: mrb_int,
        argv: *const mrb_value,
        self_: mrb_value,
        c: *mut RClass,
    ) -> mrb_value;
}
extern "C" {
    #[link_name = "\u{1}_mrb_yield_cont"]
    pub fn mrb_yield_cont(
        mrb: *mut mrb_state,
        b: mrb_value,
        self_: mrb_value,
        argc: mrb_int,
        argv: *const mrb_value,
    ) -> mrb_value;
}
extern "C" {
    #[link_name = "\u{1}_mrb_gc_protect"]
    pub fn mrb_gc_protect(mrb: *mut mrb_state, obj: mrb_value);
}
extern "C" {
    #[link_name = "\u{1}_mrb_gc_register"]
    pub fn mrb_gc_register(mrb: *mut mrb_state, obj: mrb_value);
}
extern "C" {
    #[link_name = "\u{1}_mrb_gc_unregister"]
    pub fn mrb_gc_unregister(mrb: *mut mrb_state, obj: mrb_value);
}
extern "C" {
    #[link_name = "\u{1}_mrb_to_int"]
    pub fn mrb_to_int(mrb: *mut mrb_state, val: mrb_value) -> mrb_value;
}
extern "C" {
    #[link_name = "\u{1}_mrb_to_str"]
    pub fn mrb_to_str(mrb: *mut mrb_state, val: mrb_value) -> mrb_value;
}
extern "C" {
    #[link_name = "\u{1}_mrb_check_type"]
    pub fn mrb_check_type(mrb: *mut mrb_state, x: mrb_value, t: mrb_vtype);
}
pub const call_type_CALL_PUBLIC: call_type = 0;
pub const call_type_CALL_FCALL: call_type = 1;
pub const call_type_CALL_VCALL: call_type = 2;
pub const call_type_CALL_TYPE_MAX: call_type = 3;
pub type call_type = u32;
extern "C" {
    #[link_name = "\u{1}_mrb_define_alias"]
    pub fn mrb_define_alias(
        mrb: *mut mrb_state,
        c: *mut RClass,
        a: *const ::std::os::raw::c_char,
        b: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    #[link_name = "\u{1}_mrb_class_name"]
    pub fn mrb_class_name(mrb: *mut mrb_state, klass: *mut RClass)
        -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_mrb_define_global_const"]
    pub fn mrb_define_global_const(
        mrb: *mut mrb_state,
        name: *const ::std::os::raw::c_char,
        val: mrb_value,
    );
}
extern "C" {
    #[link_name = "\u{1}_mrb_attr_get"]
    pub fn mrb_attr_get(mrb: *mut mrb_state, obj: mrb_value, id: mrb_sym) -> mrb_value;
}
extern "C" {
    #[link_name = "\u{1}_mrb_respond_to"]
    pub fn mrb_respond_to(mrb: *mut mrb_state, obj: mrb_value, mid: mrb_sym) -> mrb_bool;
}
extern "C" {
    #[link_name = "\u{1}_mrb_obj_is_instance_of"]
    pub fn mrb_obj_is_instance_of(mrb: *mut mrb_state, obj: mrb_value, c: *mut RClass) -> mrb_bool;
}
extern "C" {
    #[link_name = "\u{1}_mrb_func_basic_p"]
    pub fn mrb_func_basic_p(
        mrb: *mut mrb_state,
        obj: mrb_value,
        mid: mrb_sym,
        func: mrb_func_t,
    ) -> mrb_bool;
}
extern "C" {
    #[link_name = "\u{1}_mrb_fiber_resume"]
    pub fn mrb_fiber_resume(
        mrb: *mut mrb_state,
        fib: mrb_value,
        argc: mrb_int,
        argv: *const mrb_value,
    ) -> mrb_value;
}
extern "C" {
    #[link_name = "\u{1}_mrb_fiber_yield"]
    pub fn mrb_fiber_yield(mrb: *mut mrb_state, argc: mrb_int, argv: *const mrb_value)
        -> mrb_value;
}
extern "C" {
    #[link_name = "\u{1}_mrb_fiber_alive_p"]
    pub fn mrb_fiber_alive_p(mrb: *mut mrb_state, fib: mrb_value) -> mrb_value;
}
extern "C" {
    #[link_name = "\u{1}_mrb_stack_extend"]
    pub fn mrb_stack_extend(arg1: *mut mrb_state, arg2: mrb_int);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mrb_pool {
    _unused: [u8; 0],
}
extern "C" {
    #[link_name = "\u{1}_mrb_pool_open"]
    pub fn mrb_pool_open(arg1: *mut mrb_state) -> *mut mrb_pool;
}
extern "C" {
    #[link_name = "\u{1}_mrb_pool_close"]
    pub fn mrb_pool_close(arg1: *mut mrb_pool);
}
extern "C" {
    #[link_name = "\u{1}_mrb_pool_alloc"]
    pub fn mrb_pool_alloc(arg1: *mut mrb_pool, arg2: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}_mrb_pool_realloc"]
    pub fn mrb_pool_realloc(
        arg1: *mut mrb_pool,
        arg2: *mut ::std::os::raw::c_void,
        oldlen: usize,
        newlen: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}_mrb_pool_can_realloc"]
    pub fn mrb_pool_can_realloc(
        arg1: *mut mrb_pool,
        arg2: *mut ::std::os::raw::c_void,
        arg3: usize,
    ) -> mrb_bool;
}
extern "C" {
    #[link_name = "\u{1}_mrb_alloca"]
    pub fn mrb_alloca(mrb: *mut mrb_state, arg1: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}_mrb_state_atexit"]
    pub fn mrb_state_atexit(mrb: *mut mrb_state, func: mrb_atexit_func);
}
extern "C" {
    #[link_name = "\u{1}_mrb_show_version"]
    pub fn mrb_show_version(mrb: *mut mrb_state);
}
extern "C" {
    #[link_name = "\u{1}_mrb_show_copyright"]
    pub fn mrb_show_copyright(mrb: *mut mrb_state);
}
extern "C" {
    #[link_name = "\u{1}_mrb_format"]
    pub fn mrb_format(mrb: *mut mrb_state, format: *const ::std::os::raw::c_char, ...)
        -> mrb_value;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mrb_shared_array {
    pub refcnt: ::std::os::raw::c_int,
    pub len: mrb_int,
    pub ptr: *mut mrb_value,
}
#[test]
fn bindgen_test_layout_mrb_shared_array() {
    assert_eq!(
        ::std::mem::size_of::<mrb_shared_array>(),
        24usize,
        concat!("Size of: ", stringify!(mrb_shared_array))
    );
    assert_eq!(
        ::std::mem::align_of::<mrb_shared_array>(),
        8usize,
        concat!("Alignment of ", stringify!(mrb_shared_array))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_shared_array>())).refcnt as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_shared_array),
            "::",
            stringify!(refcnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_shared_array>())).len as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_shared_array),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_shared_array>())).ptr as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_shared_array),
            "::",
            stringify!(ptr)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct RArray {
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize], u32>,
    pub c: *mut RClass,
    pub gcnext: *mut RBasic,
    pub as_: RArray__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union RArray__bindgen_ty_1 {
    pub heap: RArray__bindgen_ty_1__bindgen_ty_1,
    pub embed: [mrb_value; 1usize],
    _bindgen_union_align: [u64; 3usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct RArray__bindgen_ty_1__bindgen_ty_1 {
    pub len: mrb_int,
    pub aux: RArray__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
    pub ptr: *mut mrb_value,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union RArray__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1 {
    pub capa: mrb_int,
    pub shared: *mut mrb_shared_array,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_RArray__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<RArray__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(RArray__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<RArray__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(RArray__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<RArray__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1>())).capa
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RArray__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(capa)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<RArray__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1>())).shared
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RArray__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(shared)
        )
    );
}
#[test]
fn bindgen_test_layout_RArray__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<RArray__bindgen_ty_1__bindgen_ty_1>(),
        24usize,
        concat!("Size of: ", stringify!(RArray__bindgen_ty_1__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<RArray__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(RArray__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<RArray__bindgen_ty_1__bindgen_ty_1>())).len as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RArray__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<RArray__bindgen_ty_1__bindgen_ty_1>())).aux as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RArray__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(aux)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<RArray__bindgen_ty_1__bindgen_ty_1>())).ptr as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(RArray__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(ptr)
        )
    );
}
#[test]
fn bindgen_test_layout_RArray__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<RArray__bindgen_ty_1>(),
        24usize,
        concat!("Size of: ", stringify!(RArray__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<RArray__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(RArray__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RArray__bindgen_ty_1>())).heap as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RArray__bindgen_ty_1),
            "::",
            stringify!(heap)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RArray__bindgen_ty_1>())).embed as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RArray__bindgen_ty_1),
            "::",
            stringify!(embed)
        )
    );
}
#[test]
fn bindgen_test_layout_RArray() {
    assert_eq!(
        ::std::mem::size_of::<RArray>(),
        48usize,
        concat!("Size of: ", stringify!(RArray))
    );
    assert_eq!(
        ::std::mem::align_of::<RArray>(),
        8usize,
        concat!("Alignment of ", stringify!(RArray))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RArray>())).c as *const _ as usize },
        8usize,
        concat!("Offset of field: ", stringify!(RArray), "::", stringify!(c))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RArray>())).gcnext as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(RArray),
            "::",
            stringify!(gcnext)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RArray>())).as_ as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(RArray),
            "::",
            stringify!(as_)
        )
    );
}
impl RArray {
    #[inline]
    pub fn tt(&self) -> mrb_vtype {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_tt(&mut self, val: mrb_vtype) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn color(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_color(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn flags(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 21u8) as u32) }
    }
    #[inline]
    pub fn set_flags(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(11usize, 21u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        tt: mrb_vtype,
        color: u32,
        flags: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize], u32> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize], u32> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let tt: u32 = unsafe { ::std::mem::transmute(tt) };
            tt as u64
        });
        __bindgen_bitfield_unit.set(8usize, 3u8, {
            let color: u32 = unsafe { ::std::mem::transmute(color) };
            color as u64
        });
        __bindgen_bitfield_unit.set(11usize, 21u8, {
            let flags: u32 = unsafe { ::std::mem::transmute(flags) };
            flags as u64
        });
        __bindgen_bitfield_unit
    }
}
extern "C" {
    #[link_name = "\u{1}_mrb_ary_decref"]
    pub fn mrb_ary_decref(arg1: *mut mrb_state, arg2: *mut mrb_shared_array);
}
extern "C" {
    #[link_name = "\u{1}_mrb_ary_modify"]
    pub fn mrb_ary_modify(arg1: *mut mrb_state, arg2: *mut RArray);
}
extern "C" {
    #[link_name = "\u{1}_mrb_ary_new_capa"]
    pub fn mrb_ary_new_capa(arg1: *mut mrb_state, arg2: mrb_int) -> mrb_value;
}
extern "C" {
    #[link_name = "\u{1}_mrb_ary_new"]
    pub fn mrb_ary_new(mrb: *mut mrb_state) -> mrb_value;
}
extern "C" {
    #[link_name = "\u{1}_mrb_ary_new_from_values"]
    pub fn mrb_ary_new_from_values(
        mrb: *mut mrb_state,
        size: mrb_int,
        vals: *const mrb_value,
    ) -> mrb_value;
}
extern "C" {
    #[link_name = "\u{1}_mrb_assoc_new"]
    pub fn mrb_assoc_new(mrb: *mut mrb_state, car: mrb_value, cdr: mrb_value) -> mrb_value;
}
extern "C" {
    #[link_name = "\u{1}_mrb_ary_concat"]
    pub fn mrb_ary_concat(mrb: *mut mrb_state, self_: mrb_value, other: mrb_value);
}
extern "C" {
    #[link_name = "\u{1}_mrb_ary_splat"]
    pub fn mrb_ary_splat(mrb: *mut mrb_state, value: mrb_value) -> mrb_value;
}
extern "C" {
    #[link_name = "\u{1}_mrb_ary_push"]
    pub fn mrb_ary_push(mrb: *mut mrb_state, array: mrb_value, value: mrb_value);
}
extern "C" {
    #[link_name = "\u{1}_mrb_ary_pop"]
    pub fn mrb_ary_pop(mrb: *mut mrb_state, ary: mrb_value) -> mrb_value;
}
extern "C" {
    #[link_name = "\u{1}_mrb_ary_ref"]
    pub fn mrb_ary_ref(mrb: *mut mrb_state, ary: mrb_value, n: mrb_int) -> mrb_value;
}
extern "C" {
    #[link_name = "\u{1}_mrb_ary_set"]
    pub fn mrb_ary_set(mrb: *mut mrb_state, ary: mrb_value, n: mrb_int, val: mrb_value);
}
extern "C" {
    #[link_name = "\u{1}_mrb_ary_replace"]
    pub fn mrb_ary_replace(mrb: *mut mrb_state, self_: mrb_value, other: mrb_value);
}
extern "C" {
    #[link_name = "\u{1}_mrb_ensure_array_type"]
    pub fn mrb_ensure_array_type(mrb: *mut mrb_state, self_: mrb_value) -> mrb_value;
}
extern "C" {
    #[link_name = "\u{1}_mrb_check_array_type"]
    pub fn mrb_check_array_type(mrb: *mut mrb_state, self_: mrb_value) -> mrb_value;
}
extern "C" {
    #[link_name = "\u{1}_mrb_ary_unshift"]
    pub fn mrb_ary_unshift(mrb: *mut mrb_state, self_: mrb_value, item: mrb_value) -> mrb_value;
}
extern "C" {
    #[link_name = "\u{1}_mrb_ary_entry"]
    pub fn mrb_ary_entry(ary: mrb_value, offset: mrb_int) -> mrb_value;
}
extern "C" {
    #[link_name = "\u{1}_mrb_ary_splice"]
    pub fn mrb_ary_splice(
        mrb: *mut mrb_state,
        self_: mrb_value,
        head: mrb_int,
        len: mrb_int,
        rpl: mrb_value,
    ) -> mrb_value;
}
extern "C" {
    #[link_name = "\u{1}_mrb_ary_shift"]
    pub fn mrb_ary_shift(mrb: *mut mrb_state, self_: mrb_value) -> mrb_value;
}
extern "C" {
    #[link_name = "\u{1}_mrb_ary_clear"]
    pub fn mrb_ary_clear(mrb: *mut mrb_state, self_: mrb_value) -> mrb_value;
}
extern "C" {
    #[link_name = "\u{1}_mrb_ary_join"]
    pub fn mrb_ary_join(mrb: *mut mrb_state, ary: mrb_value, sep: mrb_value) -> mrb_value;
}
extern "C" {
    #[link_name = "\u{1}_mrb_ary_resize"]
    pub fn mrb_ary_resize(mrb: *mut mrb_state, ary: mrb_value, new_len: mrb_int) -> mrb_value;
}
/// Class class
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RClass {
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize], u32>,
    pub c: *mut RClass,
    pub gcnext: *mut RBasic,
    pub iv: *mut iv_tbl,
    pub mt: *mut kh_mt,
    pub super_: *mut RClass,
}
#[test]
fn bindgen_test_layout_RClass() {
    assert_eq!(
        ::std::mem::size_of::<RClass>(),
        48usize,
        concat!("Size of: ", stringify!(RClass))
    );
    assert_eq!(
        ::std::mem::align_of::<RClass>(),
        8usize,
        concat!("Alignment of ", stringify!(RClass))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RClass>())).c as *const _ as usize },
        8usize,
        concat!("Offset of field: ", stringify!(RClass), "::", stringify!(c))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RClass>())).gcnext as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(RClass),
            "::",
            stringify!(gcnext)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RClass>())).iv as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(RClass),
            "::",
            stringify!(iv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RClass>())).mt as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(RClass),
            "::",
            stringify!(mt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RClass>())).super_ as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(RClass),
            "::",
            stringify!(super_)
        )
    );
}
impl RClass {
    #[inline]
    pub fn tt(&self) -> mrb_vtype {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_tt(&mut self, val: mrb_vtype) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn color(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_color(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn flags(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 21u8) as u32) }
    }
    #[inline]
    pub fn set_flags(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(11usize, 21u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        tt: mrb_vtype,
        color: u32,
        flags: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize], u32> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize], u32> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let tt: u32 = unsafe { ::std::mem::transmute(tt) };
            tt as u64
        });
        __bindgen_bitfield_unit.set(8usize, 3u8, {
            let color: u32 = unsafe { ::std::mem::transmute(color) };
            color as u64
        });
        __bindgen_bitfield_unit.set(11usize, 21u8, {
            let flags: u32 = unsafe { ::std::mem::transmute(flags) };
            flags as u64
        });
        __bindgen_bitfield_unit
    }
}
extern "C" {
    #[link_name = "\u{1}_mrb_define_class_id"]
    pub fn mrb_define_class_id(
        arg1: *mut mrb_state,
        arg2: mrb_sym,
        arg3: *mut RClass,
    ) -> *mut RClass;
}
extern "C" {
    #[link_name = "\u{1}_mrb_define_module_id"]
    pub fn mrb_define_module_id(arg1: *mut mrb_state, arg2: mrb_sym) -> *mut RClass;
}
extern "C" {
    #[link_name = "\u{1}_mrb_vm_define_class"]
    pub fn mrb_vm_define_class(
        arg1: *mut mrb_state,
        arg2: mrb_value,
        arg3: mrb_value,
        arg4: mrb_sym,
    ) -> *mut RClass;
}
extern "C" {
    #[link_name = "\u{1}_mrb_vm_define_module"]
    pub fn mrb_vm_define_module(
        arg1: *mut mrb_state,
        arg2: mrb_value,
        arg3: mrb_sym,
    ) -> *mut RClass;
}
extern "C" {
    #[link_name = "\u{1}_mrb_define_method_raw"]
    pub fn mrb_define_method_raw(
        arg1: *mut mrb_state,
        arg2: *mut RClass,
        arg3: mrb_sym,
        arg4: mrb_method_t,
    );
}
extern "C" {
    #[link_name = "\u{1}_mrb_define_method_id"]
    pub fn mrb_define_method_id(
        mrb: *mut mrb_state,
        c: *mut RClass,
        mid: mrb_sym,
        func: mrb_func_t,
        aspec: mrb_aspec,
    );
}
extern "C" {
    #[link_name = "\u{1}_mrb_alias_method"]
    pub fn mrb_alias_method(arg1: *mut mrb_state, c: *mut RClass, a: mrb_sym, b: mrb_sym);
}
extern "C" {
    #[link_name = "\u{1}_mrb_method_search_vm"]
    pub fn mrb_method_search_vm(
        arg1: *mut mrb_state,
        arg2: *mut *mut RClass,
        arg3: mrb_sym,
    ) -> mrb_method_t;
}
extern "C" {
    #[link_name = "\u{1}_mrb_method_search"]
    pub fn mrb_method_search(
        arg1: *mut mrb_state,
        arg2: *mut RClass,
        arg3: mrb_sym,
    ) -> mrb_method_t;
}
extern "C" {
    #[link_name = "\u{1}_mrb_class_real"]
    pub fn mrb_class_real(cl: *mut RClass) -> *mut RClass;
}
extern "C" {
    #[link_name = "\u{1}_mrb_class_name_class"]
    pub fn mrb_class_name_class(
        arg1: *mut mrb_state,
        arg2: *mut RClass,
        arg3: *mut RClass,
        arg4: mrb_sym,
    );
}
extern "C" {
    #[link_name = "\u{1}_mrb_class_find_path"]
    pub fn mrb_class_find_path(arg1: *mut mrb_state, arg2: *mut RClass) -> mrb_value;
}
extern "C" {
    #[link_name = "\u{1}_mrb_gc_mark_mt"]
    pub fn mrb_gc_mark_mt(arg1: *mut mrb_state, arg2: *mut RClass);
}
extern "C" {
    #[link_name = "\u{1}_mrb_gc_mark_mt_size"]
    pub fn mrb_gc_mark_mt_size(arg1: *mut mrb_state, arg2: *mut RClass) -> usize;
}
extern "C" {
    #[link_name = "\u{1}_mrb_gc_free_mt"]
    pub fn mrb_gc_free_mt(arg1: *mut mrb_state, arg2: *mut RClass);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mrbc_context {
    pub syms: *mut mrb_sym,
    pub slen: ::std::os::raw::c_int,
    pub filename: *mut ::std::os::raw::c_char,
    pub lineno: ::std::os::raw::c_short,
    pub partial_hook: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut mrb_parser_state) -> ::std::os::raw::c_int,
    >,
    pub partial_data: *mut ::std::os::raw::c_void,
    pub target_class: *mut RClass,
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize], u8>,
    pub parser_nerr: usize,
}
#[test]
fn bindgen_test_layout_mrbc_context() {
    assert_eq!(
        ::std::mem::size_of::<mrbc_context>(),
        72usize,
        concat!("Size of: ", stringify!(mrbc_context))
    );
    assert_eq!(
        ::std::mem::align_of::<mrbc_context>(),
        8usize,
        concat!("Alignment of ", stringify!(mrbc_context))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrbc_context>())).syms as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mrbc_context),
            "::",
            stringify!(syms)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrbc_context>())).slen as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mrbc_context),
            "::",
            stringify!(slen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrbc_context>())).filename as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mrbc_context),
            "::",
            stringify!(filename)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrbc_context>())).lineno as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(mrbc_context),
            "::",
            stringify!(lineno)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrbc_context>())).partial_hook as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(mrbc_context),
            "::",
            stringify!(partial_hook)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrbc_context>())).partial_data as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(mrbc_context),
            "::",
            stringify!(partial_data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrbc_context>())).target_class as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(mrbc_context),
            "::",
            stringify!(target_class)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrbc_context>())).parser_nerr as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(mrbc_context),
            "::",
            stringify!(parser_nerr)
        )
    );
}
impl mrbc_context {
    #[inline]
    pub fn capture_errors(&self) -> mrb_bool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_capture_errors(&mut self, val: mrb_bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn dump_result(&self) -> mrb_bool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_dump_result(&mut self, val: mrb_bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn no_exec(&self) -> mrb_bool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_no_exec(&mut self, val: mrb_bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn keep_lv(&self) -> mrb_bool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_keep_lv(&mut self, val: mrb_bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn no_optimize(&self) -> mrb_bool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_no_optimize(&mut self, val: mrb_bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn on_eval(&self) -> mrb_bool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_on_eval(&mut self, val: mrb_bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        capture_errors: mrb_bool,
        dump_result: mrb_bool,
        no_exec: mrb_bool,
        keep_lv: mrb_bool,
        no_optimize: mrb_bool,
        on_eval: mrb_bool,
    ) -> __BindgenBitfieldUnit<[u8; 1usize], u8> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize], u8> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let capture_errors: u8 = unsafe { ::std::mem::transmute(capture_errors) };
            capture_errors as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let dump_result: u8 = unsafe { ::std::mem::transmute(dump_result) };
            dump_result as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let no_exec: u8 = unsafe { ::std::mem::transmute(no_exec) };
            no_exec as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let keep_lv: u8 = unsafe { ::std::mem::transmute(keep_lv) };
            keep_lv as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let no_optimize: u8 = unsafe { ::std::mem::transmute(no_optimize) };
            no_optimize as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let on_eval: u8 = unsafe { ::std::mem::transmute(on_eval) };
            on_eval as u64
        });
        __bindgen_bitfield_unit
    }
}
extern "C" {
    #[link_name = "\u{1}_mrbc_context_new"]
    pub fn mrbc_context_new(mrb: *mut mrb_state) -> *mut mrbc_context;
}
extern "C" {
    #[link_name = "\u{1}_mrbc_context_free"]
    pub fn mrbc_context_free(mrb: *mut mrb_state, cxt: *mut mrbc_context);
}
extern "C" {
    #[link_name = "\u{1}_mrbc_filename"]
    pub fn mrbc_filename(
        mrb: *mut mrb_state,
        c: *mut mrbc_context,
        s: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_mrbc_partial_hook"]
    pub fn mrbc_partial_hook(
        mrb: *mut mrb_state,
        c: *mut mrbc_context,
        partial_hook: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut mrb_parser_state) -> ::std::os::raw::c_int,
        >,
        data: *mut ::std::os::raw::c_void,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mrb_ast_node {
    pub car: *mut mrb_ast_node,
    pub cdr: *mut mrb_ast_node,
    pub lineno: u16,
    pub filename_index: u16,
}
#[test]
fn bindgen_test_layout_mrb_ast_node() {
    assert_eq!(
        ::std::mem::size_of::<mrb_ast_node>(),
        24usize,
        concat!("Size of: ", stringify!(mrb_ast_node))
    );
    assert_eq!(
        ::std::mem::align_of::<mrb_ast_node>(),
        8usize,
        concat!("Alignment of ", stringify!(mrb_ast_node))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_ast_node>())).car as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_ast_node),
            "::",
            stringify!(car)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_ast_node>())).cdr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_ast_node),
            "::",
            stringify!(cdr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_ast_node>())).lineno as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_ast_node),
            "::",
            stringify!(lineno)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_ast_node>())).filename_index as *const _ as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_ast_node),
            "::",
            stringify!(filename_index)
        )
    );
}
pub const mrb_lex_state_enum_EXPR_BEG: mrb_lex_state_enum = 0;
pub const mrb_lex_state_enum_EXPR_END: mrb_lex_state_enum = 1;
pub const mrb_lex_state_enum_EXPR_ENDARG: mrb_lex_state_enum = 2;
pub const mrb_lex_state_enum_EXPR_ENDFN: mrb_lex_state_enum = 3;
pub const mrb_lex_state_enum_EXPR_ARG: mrb_lex_state_enum = 4;
pub const mrb_lex_state_enum_EXPR_CMDARG: mrb_lex_state_enum = 5;
pub const mrb_lex_state_enum_EXPR_MID: mrb_lex_state_enum = 6;
pub const mrb_lex_state_enum_EXPR_FNAME: mrb_lex_state_enum = 7;
pub const mrb_lex_state_enum_EXPR_DOT: mrb_lex_state_enum = 8;
pub const mrb_lex_state_enum_EXPR_CLASS: mrb_lex_state_enum = 9;
pub const mrb_lex_state_enum_EXPR_VALUE: mrb_lex_state_enum = 10;
pub const mrb_lex_state_enum_EXPR_MAX_STATE: mrb_lex_state_enum = 11;
pub type mrb_lex_state_enum = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mrb_parser_message {
    pub lineno: ::std::os::raw::c_int,
    pub column: ::std::os::raw::c_int,
    pub message: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_mrb_parser_message() {
    assert_eq!(
        ::std::mem::size_of::<mrb_parser_message>(),
        16usize,
        concat!("Size of: ", stringify!(mrb_parser_message))
    );
    assert_eq!(
        ::std::mem::align_of::<mrb_parser_message>(),
        8usize,
        concat!("Alignment of ", stringify!(mrb_parser_message))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_parser_message>())).lineno as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_parser_message),
            "::",
            stringify!(lineno)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_parser_message>())).column as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_parser_message),
            "::",
            stringify!(column)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_parser_message>())).message as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_parser_message),
            "::",
            stringify!(message)
        )
    );
}
pub const mrb_string_type_str_not_parsing: mrb_string_type = 0;
pub const mrb_string_type_str_squote: mrb_string_type = 1;
pub const mrb_string_type_str_dquote: mrb_string_type = 3;
pub const mrb_string_type_str_regexp: mrb_string_type = 7;
pub const mrb_string_type_str_sword: mrb_string_type = 41;
pub const mrb_string_type_str_dword: mrb_string_type = 43;
pub const mrb_string_type_str_ssym: mrb_string_type = 17;
pub const mrb_string_type_str_ssymbols: mrb_string_type = 49;
pub const mrb_string_type_str_dsymbols: mrb_string_type = 51;
pub const mrb_string_type_str_heredoc: mrb_string_type = 65;
pub const mrb_string_type_str_xquote: mrb_string_type = 131;
pub type mrb_string_type = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mrb_parser_heredoc_info {
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize], u8>,
    pub type_: mrb_string_type,
    pub term: *const ::std::os::raw::c_char,
    pub term_len: ::std::os::raw::c_int,
    pub doc: *mut mrb_ast_node,
}
#[test]
fn bindgen_test_layout_mrb_parser_heredoc_info() {
    assert_eq!(
        ::std::mem::size_of::<mrb_parser_heredoc_info>(),
        32usize,
        concat!("Size of: ", stringify!(mrb_parser_heredoc_info))
    );
    assert_eq!(
        ::std::mem::align_of::<mrb_parser_heredoc_info>(),
        8usize,
        concat!("Alignment of ", stringify!(mrb_parser_heredoc_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_parser_heredoc_info>())).type_ as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_parser_heredoc_info),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_parser_heredoc_info>())).term as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_parser_heredoc_info),
            "::",
            stringify!(term)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mrb_parser_heredoc_info>())).term_len as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_parser_heredoc_info),
            "::",
            stringify!(term_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_parser_heredoc_info>())).doc as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_parser_heredoc_info),
            "::",
            stringify!(doc)
        )
    );
}
impl mrb_parser_heredoc_info {
    #[inline]
    pub fn allow_indent(&self) -> mrb_bool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_allow_indent(&mut self, val: mrb_bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn line_head(&self) -> mrb_bool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_line_head(&mut self, val: mrb_bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        allow_indent: mrb_bool,
        line_head: mrb_bool,
    ) -> __BindgenBitfieldUnit<[u8; 1usize], u8> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize], u8> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let allow_indent: u8 = unsafe { ::std::mem::transmute(allow_indent) };
            allow_indent as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let line_head: u8 = unsafe { ::std::mem::transmute(line_head) };
            line_head as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct mrb_parser_state {
    pub mrb: *mut mrb_state,
    pub pool: *mut mrb_pool,
    pub cells: *mut mrb_ast_node,
    pub s: *const ::std::os::raw::c_char,
    pub send: *const ::std::os::raw::c_char,
    pub f: *mut FILE,
    pub cxt: *mut mrbc_context,
    pub filename_sym: mrb_sym,
    pub lineno: ::std::os::raw::c_int,
    pub column: ::std::os::raw::c_int,
    pub lstate: mrb_lex_state_enum,
    pub lex_strterm: *mut mrb_ast_node,
    pub cond_stack: ::std::os::raw::c_uint,
    pub cmdarg_stack: ::std::os::raw::c_uint,
    pub paren_nest: ::std::os::raw::c_int,
    pub lpar_beg: ::std::os::raw::c_int,
    pub in_def: ::std::os::raw::c_int,
    pub in_single: ::std::os::raw::c_int,
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize], u8>,
    pub locals: *mut mrb_ast_node,
    pub pb: *mut mrb_ast_node,
    pub tokbuf: *mut ::std::os::raw::c_char,
    pub buf: [::std::os::raw::c_char; 256usize],
    pub tidx: ::std::os::raw::c_int,
    pub tsiz: ::std::os::raw::c_int,
    pub all_heredocs: *mut mrb_ast_node,
    pub heredocs_from_nextline: *mut mrb_ast_node,
    pub parsing_heredoc: *mut mrb_ast_node,
    pub lex_strterm_before_heredoc: *mut mrb_ast_node,
    pub ylval: *mut ::std::os::raw::c_void,
    pub nerr: usize,
    pub nwarn: usize,
    pub tree: *mut mrb_ast_node,
    pub _bitfield_2: __BindgenBitfieldUnit<[u8; 1usize], u8>,
    pub error_buffer: [mrb_parser_message; 10usize],
    pub warn_buffer: [mrb_parser_message; 10usize],
    pub filename_table: *mut mrb_sym,
    pub filename_table_length: u16,
    pub current_filename_index: u16,
    pub jmp: *mut mrb_jmpbuf,
}
#[test]
fn bindgen_test_layout_mrb_parser_state() {
    assert_eq!(
        ::std::mem::size_of::<mrb_parser_state>(),
        816usize,
        concat!("Size of: ", stringify!(mrb_parser_state))
    );
    assert_eq!(
        ::std::mem::align_of::<mrb_parser_state>(),
        8usize,
        concat!("Alignment of ", stringify!(mrb_parser_state))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_parser_state>())).mrb as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_parser_state),
            "::",
            stringify!(mrb)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_parser_state>())).pool as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_parser_state),
            "::",
            stringify!(pool)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_parser_state>())).cells as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_parser_state),
            "::",
            stringify!(cells)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_parser_state>())).s as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_parser_state),
            "::",
            stringify!(s)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_parser_state>())).send as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_parser_state),
            "::",
            stringify!(send)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_parser_state>())).f as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_parser_state),
            "::",
            stringify!(f)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_parser_state>())).cxt as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_parser_state),
            "::",
            stringify!(cxt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_parser_state>())).filename_sym as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_parser_state),
            "::",
            stringify!(filename_sym)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_parser_state>())).lineno as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_parser_state),
            "::",
            stringify!(lineno)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_parser_state>())).column as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_parser_state),
            "::",
            stringify!(column)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_parser_state>())).lstate as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_parser_state),
            "::",
            stringify!(lstate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_parser_state>())).lex_strterm as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_parser_state),
            "::",
            stringify!(lex_strterm)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_parser_state>())).cond_stack as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_parser_state),
            "::",
            stringify!(cond_stack)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_parser_state>())).cmdarg_stack as *const _ as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_parser_state),
            "::",
            stringify!(cmdarg_stack)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_parser_state>())).paren_nest as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_parser_state),
            "::",
            stringify!(paren_nest)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_parser_state>())).lpar_beg as *const _ as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_parser_state),
            "::",
            stringify!(lpar_beg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_parser_state>())).in_def as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_parser_state),
            "::",
            stringify!(in_def)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_parser_state>())).in_single as *const _ as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_parser_state),
            "::",
            stringify!(in_single)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_parser_state>())).locals as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_parser_state),
            "::",
            stringify!(locals)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_parser_state>())).pb as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_parser_state),
            "::",
            stringify!(pb)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_parser_state>())).tokbuf as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_parser_state),
            "::",
            stringify!(tokbuf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_parser_state>())).buf as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_parser_state),
            "::",
            stringify!(buf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_parser_state>())).tidx as *const _ as usize },
        392usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_parser_state),
            "::",
            stringify!(tidx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_parser_state>())).tsiz as *const _ as usize },
        396usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_parser_state),
            "::",
            stringify!(tsiz)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_parser_state>())).all_heredocs as *const _ as usize },
        400usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_parser_state),
            "::",
            stringify!(all_heredocs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mrb_parser_state>())).heredocs_from_nextline as *const _ as usize
        },
        408usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_parser_state),
            "::",
            stringify!(heredocs_from_nextline)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mrb_parser_state>())).parsing_heredoc as *const _ as usize
        },
        416usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_parser_state),
            "::",
            stringify!(parsing_heredoc)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mrb_parser_state>())).lex_strterm_before_heredoc as *const _
                as usize
        },
        424usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_parser_state),
            "::",
            stringify!(lex_strterm_before_heredoc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_parser_state>())).ylval as *const _ as usize },
        432usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_parser_state),
            "::",
            stringify!(ylval)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_parser_state>())).nerr as *const _ as usize },
        440usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_parser_state),
            "::",
            stringify!(nerr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_parser_state>())).nwarn as *const _ as usize },
        448usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_parser_state),
            "::",
            stringify!(nwarn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_parser_state>())).tree as *const _ as usize },
        456usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_parser_state),
            "::",
            stringify!(tree)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_parser_state>())).error_buffer as *const _ as usize },
        472usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_parser_state),
            "::",
            stringify!(error_buffer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_parser_state>())).warn_buffer as *const _ as usize },
        632usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_parser_state),
            "::",
            stringify!(warn_buffer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_parser_state>())).filename_table as *const _ as usize },
        792usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_parser_state),
            "::",
            stringify!(filename_table)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mrb_parser_state>())).filename_table_length as *const _ as usize
        },
        800usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_parser_state),
            "::",
            stringify!(filename_table_length)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mrb_parser_state>())).current_filename_index as *const _ as usize
        },
        802usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_parser_state),
            "::",
            stringify!(current_filename_index)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_parser_state>())).jmp as *const _ as usize },
        808usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_parser_state),
            "::",
            stringify!(jmp)
        )
    );
}
impl mrb_parser_state {
    #[inline]
    pub fn cmd_start(&self) -> mrb_bool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_cmd_start(&mut self, val: mrb_bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(cmd_start: mrb_bool) -> __BindgenBitfieldUnit<[u8; 1usize], u8> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize], u8> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let cmd_start: u8 = unsafe { ::std::mem::transmute(cmd_start) };
            cmd_start as u64
        });
        __bindgen_bitfield_unit
    }
    #[inline]
    pub fn no_optimize(&self) -> mrb_bool {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_no_optimize(&mut self, val: mrb_bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_2.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn on_eval(&self) -> mrb_bool {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_on_eval(&mut self, val: mrb_bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_2.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn capture_errors(&self) -> mrb_bool {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_capture_errors(&mut self, val: mrb_bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_2.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_2(
        no_optimize: mrb_bool,
        on_eval: mrb_bool,
        capture_errors: mrb_bool,
    ) -> __BindgenBitfieldUnit<[u8; 1usize], u8> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize], u8> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let no_optimize: u8 = unsafe { ::std::mem::transmute(no_optimize) };
            no_optimize as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let on_eval: u8 = unsafe { ::std::mem::transmute(on_eval) };
            on_eval as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let capture_errors: u8 = unsafe { ::std::mem::transmute(capture_errors) };
            capture_errors as u64
        });
        __bindgen_bitfield_unit
    }
}
extern "C" {
    #[link_name = "\u{1}_mrb_parser_new"]
    pub fn mrb_parser_new(arg1: *mut mrb_state) -> *mut mrb_parser_state;
}
extern "C" {
    #[link_name = "\u{1}_mrb_parser_free"]
    pub fn mrb_parser_free(arg1: *mut mrb_parser_state);
}
extern "C" {
    #[link_name = "\u{1}_mrb_parser_parse"]
    pub fn mrb_parser_parse(arg1: *mut mrb_parser_state, arg2: *mut mrbc_context);
}
extern "C" {
    #[link_name = "\u{1}_mrb_parser_set_filename"]
    pub fn mrb_parser_set_filename(
        arg1: *mut mrb_parser_state,
        arg2: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    #[link_name = "\u{1}_mrb_parser_get_filename"]
    pub fn mrb_parser_get_filename(arg1: *mut mrb_parser_state, idx: u16) -> mrb_sym;
}
extern "C" {
    #[link_name = "\u{1}_mrb_parse_file"]
    pub fn mrb_parse_file(
        arg1: *mut mrb_state,
        arg2: *mut FILE,
        arg3: *mut mrbc_context,
    ) -> *mut mrb_parser_state;
}
extern "C" {
    #[link_name = "\u{1}_mrb_parse_string"]
    pub fn mrb_parse_string(
        arg1: *mut mrb_state,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut mrbc_context,
    ) -> *mut mrb_parser_state;
}
extern "C" {
    #[link_name = "\u{1}_mrb_parse_nstring"]
    pub fn mrb_parse_nstring(
        arg1: *mut mrb_state,
        arg2: *const ::std::os::raw::c_char,
        arg3: usize,
        arg4: *mut mrbc_context,
    ) -> *mut mrb_parser_state;
}
extern "C" {
    #[link_name = "\u{1}_mrb_generate_code"]
    pub fn mrb_generate_code(arg1: *mut mrb_state, arg2: *mut mrb_parser_state) -> *mut RProc;
}
extern "C" {
    #[link_name = "\u{1}_mrb_load_exec"]
    pub fn mrb_load_exec(
        mrb: *mut mrb_state,
        p: *mut mrb_parser_state,
        c: *mut mrbc_context,
    ) -> mrb_value;
}
extern "C" {
    #[link_name = "\u{1}_mrb_load_file"]
    pub fn mrb_load_file(arg1: *mut mrb_state, arg2: *mut FILE) -> mrb_value;
}
extern "C" {
    #[link_name = "\u{1}_mrb_load_file_cxt"]
    pub fn mrb_load_file_cxt(
        arg1: *mut mrb_state,
        arg2: *mut FILE,
        cxt: *mut mrbc_context,
    ) -> mrb_value;
}
extern "C" {
    #[link_name = "\u{1}_mrb_load_string"]
    pub fn mrb_load_string(mrb: *mut mrb_state, s: *const ::std::os::raw::c_char) -> mrb_value;
}
extern "C" {
    #[link_name = "\u{1}_mrb_load_nstring"]
    pub fn mrb_load_nstring(
        mrb: *mut mrb_state,
        s: *const ::std::os::raw::c_char,
        len: usize,
    ) -> mrb_value;
}
extern "C" {
    #[link_name = "\u{1}_mrb_load_string_cxt"]
    pub fn mrb_load_string_cxt(
        mrb: *mut mrb_state,
        s: *const ::std::os::raw::c_char,
        cxt: *mut mrbc_context,
    ) -> mrb_value;
}
extern "C" {
    #[link_name = "\u{1}_mrb_load_nstring_cxt"]
    pub fn mrb_load_nstring_cxt(
        mrb: *mut mrb_state,
        s: *const ::std::os::raw::c_char,
        len: usize,
        cxt: *mut mrbc_context,
    ) -> mrb_value;
}
/// Custom data type description.
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mrb_data_type {
    /// data type name
    pub struct_name: *const ::std::os::raw::c_char,
    /// data type release function pointer
    pub dfree: ::std::option::Option<
        unsafe extern "C" fn(mrb: *mut mrb_state, arg1: *mut ::std::os::raw::c_void),
    >,
}
#[test]
fn bindgen_test_layout_mrb_data_type() {
    assert_eq!(
        ::std::mem::size_of::<mrb_data_type>(),
        16usize,
        concat!("Size of: ", stringify!(mrb_data_type))
    );
    assert_eq!(
        ::std::mem::align_of::<mrb_data_type>(),
        8usize,
        concat!("Alignment of ", stringify!(mrb_data_type))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_data_type>())).struct_name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_data_type),
            "::",
            stringify!(struct_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_data_type>())).dfree as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_data_type),
            "::",
            stringify!(dfree)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RData {
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize], u32>,
    pub c: *mut RClass,
    pub gcnext: *mut RBasic,
    pub iv: *mut iv_tbl,
    pub type_: *const mrb_data_type,
    pub data: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_RData() {
    assert_eq!(
        ::std::mem::size_of::<RData>(),
        48usize,
        concat!("Size of: ", stringify!(RData))
    );
    assert_eq!(
        ::std::mem::align_of::<RData>(),
        8usize,
        concat!("Alignment of ", stringify!(RData))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RData>())).c as *const _ as usize },
        8usize,
        concat!("Offset of field: ", stringify!(RData), "::", stringify!(c))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RData>())).gcnext as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(RData),
            "::",
            stringify!(gcnext)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RData>())).iv as *const _ as usize },
        24usize,
        concat!("Offset of field: ", stringify!(RData), "::", stringify!(iv))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RData>())).type_ as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(RData),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RData>())).data as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(RData),
            "::",
            stringify!(data)
        )
    );
}
impl RData {
    #[inline]
    pub fn tt(&self) -> mrb_vtype {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_tt(&mut self, val: mrb_vtype) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn color(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_color(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn flags(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 21u8) as u32) }
    }
    #[inline]
    pub fn set_flags(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(11usize, 21u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        tt: mrb_vtype,
        color: u32,
        flags: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize], u32> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize], u32> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let tt: u32 = unsafe { ::std::mem::transmute(tt) };
            tt as u64
        });
        __bindgen_bitfield_unit.set(8usize, 3u8, {
            let color: u32 = unsafe { ::std::mem::transmute(color) };
            color as u64
        });
        __bindgen_bitfield_unit.set(11usize, 21u8, {
            let flags: u32 = unsafe { ::std::mem::transmute(flags) };
            flags as u64
        });
        __bindgen_bitfield_unit
    }
}
extern "C" {
    #[link_name = "\u{1}_mrb_data_object_alloc"]
    pub fn mrb_data_object_alloc(
        mrb: *mut mrb_state,
        klass: *mut RClass,
        datap: *mut ::std::os::raw::c_void,
        type_: *const mrb_data_type,
    ) -> *mut RData;
}
extern "C" {
    #[link_name = "\u{1}_mrb_data_check_type"]
    pub fn mrb_data_check_type(mrb: *mut mrb_state, arg1: mrb_value, arg2: *const mrb_data_type);
}
extern "C" {
    #[link_name = "\u{1}_mrb_data_get_ptr"]
    pub fn mrb_data_get_ptr(
        mrb: *mut mrb_state,
        arg1: mrb_value,
        arg2: *const mrb_data_type,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}_mrb_data_check_get_ptr"]
    pub fn mrb_data_check_get_ptr(
        mrb: *mut mrb_state,
        arg1: mrb_value,
        arg2: *const mrb_data_type,
    ) -> *mut ::std::os::raw::c_void;
}
pub const irep_pool_type_IREP_TT_STRING: irep_pool_type = 0;
pub const irep_pool_type_IREP_TT_FIXNUM: irep_pool_type = 1;
pub const irep_pool_type_IREP_TT_FLOAT: irep_pool_type = 2;
/// Compiled mruby scripts.
pub type irep_pool_type = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mrb_locals {
    pub name: mrb_sym,
    pub r: u16,
}
#[test]
fn bindgen_test_layout_mrb_locals() {
    assert_eq!(
        ::std::mem::size_of::<mrb_locals>(),
        8usize,
        concat!("Size of: ", stringify!(mrb_locals))
    );
    assert_eq!(
        ::std::mem::align_of::<mrb_locals>(),
        4usize,
        concat!("Alignment of ", stringify!(mrb_locals))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_locals>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_locals),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_locals>())).r as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_locals),
            "::",
            stringify!(r)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mrb_irep {
    pub nlocals: u16,
    pub nregs: u16,
    pub flags: u8,
    pub iseq: *mut mrb_code,
    pub pool: *mut mrb_value,
    pub syms: *mut mrb_sym,
    pub reps: *mut *mut mrb_irep,
    pub lv: *mut mrb_locals,
    pub debug_info: *mut mrb_irep_debug_info,
    pub ilen: u16,
    pub plen: u16,
    pub slen: u16,
    pub rlen: u16,
    pub refcnt: u32,
}
#[test]
fn bindgen_test_layout_mrb_irep() {
    assert_eq!(
        ::std::mem::size_of::<mrb_irep>(),
        72usize,
        concat!("Size of: ", stringify!(mrb_irep))
    );
    assert_eq!(
        ::std::mem::align_of::<mrb_irep>(),
        8usize,
        concat!("Alignment of ", stringify!(mrb_irep))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_irep>())).nlocals as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_irep),
            "::",
            stringify!(nlocals)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_irep>())).nregs as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_irep),
            "::",
            stringify!(nregs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_irep>())).flags as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_irep),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_irep>())).iseq as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_irep),
            "::",
            stringify!(iseq)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_irep>())).pool as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_irep),
            "::",
            stringify!(pool)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_irep>())).syms as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_irep),
            "::",
            stringify!(syms)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_irep>())).reps as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_irep),
            "::",
            stringify!(reps)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_irep>())).lv as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_irep),
            "::",
            stringify!(lv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_irep>())).debug_info as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_irep),
            "::",
            stringify!(debug_info)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_irep>())).ilen as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_irep),
            "::",
            stringify!(ilen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_irep>())).plen as *const _ as usize },
        58usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_irep),
            "::",
            stringify!(plen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_irep>())).slen as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_irep),
            "::",
            stringify!(slen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_irep>())).rlen as *const _ as usize },
        62usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_irep),
            "::",
            stringify!(rlen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_irep>())).refcnt as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_irep),
            "::",
            stringify!(refcnt)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}_mrb_add_irep"]
    pub fn mrb_add_irep(mrb: *mut mrb_state) -> *mut mrb_irep;
}
extern "C" {
    #[link_name = "\u{1}_mrb_load_irep"]
    pub fn mrb_load_irep(arg1: *mut mrb_state, arg2: *const u8) -> mrb_value;
}
extern "C" {
    #[link_name = "\u{1}_mrb_load_irep_cxt"]
    pub fn mrb_load_irep_cxt(
        arg1: *mut mrb_state,
        arg2: *const u8,
        arg3: *mut mrbc_context,
    ) -> mrb_value;
}
extern "C" {
    #[link_name = "\u{1}_mrb_irep_free"]
    pub fn mrb_irep_free(arg1: *mut mrb_state, arg2: *mut mrb_irep);
}
extern "C" {
    #[link_name = "\u{1}_mrb_irep_incref"]
    pub fn mrb_irep_incref(arg1: *mut mrb_state, arg2: *mut mrb_irep);
}
extern "C" {
    #[link_name = "\u{1}_mrb_irep_decref"]
    pub fn mrb_irep_decref(arg1: *mut mrb_state, arg2: *mut mrb_irep);
}
extern "C" {
    #[link_name = "\u{1}_mrb_irep_cutref"]
    pub fn mrb_irep_cutref(arg1: *mut mrb_state, arg2: *mut mrb_irep);
}
extern "C" {
    #[link_name = "\u{1}_mrb_irep_remove_lv"]
    pub fn mrb_irep_remove_lv(mrb: *mut mrb_state, irep: *mut mrb_irep);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mrb_insn_data {
    pub insn: u8,
    pub a: u16,
    pub b: u16,
    pub c: u8,
}
#[test]
fn bindgen_test_layout_mrb_insn_data() {
    assert_eq!(
        ::std::mem::size_of::<mrb_insn_data>(),
        8usize,
        concat!("Size of: ", stringify!(mrb_insn_data))
    );
    assert_eq!(
        ::std::mem::align_of::<mrb_insn_data>(),
        2usize,
        concat!("Alignment of ", stringify!(mrb_insn_data))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_insn_data>())).insn as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_insn_data),
            "::",
            stringify!(insn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_insn_data>())).a as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_insn_data),
            "::",
            stringify!(a)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_insn_data>())).b as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_insn_data),
            "::",
            stringify!(b)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_insn_data>())).c as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_insn_data),
            "::",
            stringify!(c)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}_mrb_decode_insn"]
    pub fn mrb_decode_insn(pc: *mut mrb_code) -> mrb_insn_data;
}
extern "C" {
    #[link_name = "\u{1}_mrb_dump_irep"]
    pub fn mrb_dump_irep(
        mrb: *mut mrb_state,
        irep: *mut mrb_irep,
        flags: u8,
        bin: *mut *mut u8,
        bin_size: *mut usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_mrb_dump_irep_binary"]
    pub fn mrb_dump_irep_binary(
        arg1: *mut mrb_state,
        arg2: *mut mrb_irep,
        arg3: u8,
        arg4: *mut FILE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_mrb_dump_irep_cfunc"]
    pub fn mrb_dump_irep_cfunc(
        mrb: *mut mrb_state,
        arg1: *mut mrb_irep,
        flags: u8,
        f: *mut FILE,
        initname: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_mrb_read_irep_file"]
    pub fn mrb_read_irep_file(arg1: *mut mrb_state, arg2: *mut FILE) -> *mut mrb_irep;
}
extern "C" {
    #[link_name = "\u{1}_mrb_load_irep_file"]
    pub fn mrb_load_irep_file(arg1: *mut mrb_state, arg2: *mut FILE) -> mrb_value;
}
extern "C" {
    #[link_name = "\u{1}_mrb_load_irep_file_cxt"]
    pub fn mrb_load_irep_file_cxt(
        arg1: *mut mrb_state,
        arg2: *mut FILE,
        arg3: *mut mrbc_context,
    ) -> mrb_value;
}
extern "C" {
    #[link_name = "\u{1}_mrb_read_irep"]
    pub fn mrb_read_irep(arg1: *mut mrb_state, arg2: *const u8) -> *mut mrb_irep;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rite_binary_header {
    pub binary_ident: [u8; 4usize],
    pub binary_version: [u8; 4usize],
    pub binary_crc: [u8; 2usize],
    pub binary_size: [u8; 4usize],
    pub compiler_name: [u8; 4usize],
    pub compiler_version: [u8; 4usize],
}
#[test]
fn bindgen_test_layout_rite_binary_header() {
    assert_eq!(
        ::std::mem::size_of::<rite_binary_header>(),
        22usize,
        concat!("Size of: ", stringify!(rite_binary_header))
    );
    assert_eq!(
        ::std::mem::align_of::<rite_binary_header>(),
        1usize,
        concat!("Alignment of ", stringify!(rite_binary_header))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rite_binary_header>())).binary_ident as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rite_binary_header),
            "::",
            stringify!(binary_ident)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rite_binary_header>())).binary_version as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(rite_binary_header),
            "::",
            stringify!(binary_version)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rite_binary_header>())).binary_crc as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rite_binary_header),
            "::",
            stringify!(binary_crc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rite_binary_header>())).binary_size as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(rite_binary_header),
            "::",
            stringify!(binary_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rite_binary_header>())).compiler_name as *const _ as usize
        },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(rite_binary_header),
            "::",
            stringify!(compiler_name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rite_binary_header>())).compiler_version as *const _ as usize
        },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(rite_binary_header),
            "::",
            stringify!(compiler_version)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rite_section_header {
    pub section_ident: [u8; 4usize],
    pub section_size: [u8; 4usize],
}
#[test]
fn bindgen_test_layout_rite_section_header() {
    assert_eq!(
        ::std::mem::size_of::<rite_section_header>(),
        8usize,
        concat!("Size of: ", stringify!(rite_section_header))
    );
    assert_eq!(
        ::std::mem::align_of::<rite_section_header>(),
        1usize,
        concat!("Alignment of ", stringify!(rite_section_header))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rite_section_header>())).section_ident as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rite_section_header),
            "::",
            stringify!(section_ident)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rite_section_header>())).section_size as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(rite_section_header),
            "::",
            stringify!(section_size)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rite_section_irep_header {
    pub section_ident: [u8; 4usize],
    pub section_size: [u8; 4usize],
    pub rite_version: [u8; 4usize],
}
#[test]
fn bindgen_test_layout_rite_section_irep_header() {
    assert_eq!(
        ::std::mem::size_of::<rite_section_irep_header>(),
        12usize,
        concat!("Size of: ", stringify!(rite_section_irep_header))
    );
    assert_eq!(
        ::std::mem::align_of::<rite_section_irep_header>(),
        1usize,
        concat!("Alignment of ", stringify!(rite_section_irep_header))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rite_section_irep_header>())).section_ident as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rite_section_irep_header),
            "::",
            stringify!(section_ident)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rite_section_irep_header>())).section_size as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(rite_section_irep_header),
            "::",
            stringify!(section_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rite_section_irep_header>())).rite_version as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rite_section_irep_header),
            "::",
            stringify!(rite_version)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rite_section_lineno_header {
    pub section_ident: [u8; 4usize],
    pub section_size: [u8; 4usize],
}
#[test]
fn bindgen_test_layout_rite_section_lineno_header() {
    assert_eq!(
        ::std::mem::size_of::<rite_section_lineno_header>(),
        8usize,
        concat!("Size of: ", stringify!(rite_section_lineno_header))
    );
    assert_eq!(
        ::std::mem::align_of::<rite_section_lineno_header>(),
        1usize,
        concat!("Alignment of ", stringify!(rite_section_lineno_header))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rite_section_lineno_header>())).section_ident as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rite_section_lineno_header),
            "::",
            stringify!(section_ident)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rite_section_lineno_header>())).section_size as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(rite_section_lineno_header),
            "::",
            stringify!(section_size)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rite_section_debug_header {
    pub section_ident: [u8; 4usize],
    pub section_size: [u8; 4usize],
}
#[test]
fn bindgen_test_layout_rite_section_debug_header() {
    assert_eq!(
        ::std::mem::size_of::<rite_section_debug_header>(),
        8usize,
        concat!("Size of: ", stringify!(rite_section_debug_header))
    );
    assert_eq!(
        ::std::mem::align_of::<rite_section_debug_header>(),
        1usize,
        concat!("Alignment of ", stringify!(rite_section_debug_header))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rite_section_debug_header>())).section_ident as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rite_section_debug_header),
            "::",
            stringify!(section_ident)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rite_section_debug_header>())).section_size as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(rite_section_debug_header),
            "::",
            stringify!(section_size)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rite_section_lv_header {
    pub section_ident: [u8; 4usize],
    pub section_size: [u8; 4usize],
}
#[test]
fn bindgen_test_layout_rite_section_lv_header() {
    assert_eq!(
        ::std::mem::size_of::<rite_section_lv_header>(),
        8usize,
        concat!("Size of: ", stringify!(rite_section_lv_header))
    );
    assert_eq!(
        ::std::mem::align_of::<rite_section_lv_header>(),
        1usize,
        concat!("Alignment of ", stringify!(rite_section_lv_header))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rite_section_lv_header>())).section_ident as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rite_section_lv_header),
            "::",
            stringify!(section_ident)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rite_section_lv_header>())).section_size as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(rite_section_lv_header),
            "::",
            stringify!(section_size)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rite_binary_footer {
    pub section_ident: [u8; 4usize],
    pub section_size: [u8; 4usize],
}
#[test]
fn bindgen_test_layout_rite_binary_footer() {
    assert_eq!(
        ::std::mem::size_of::<rite_binary_footer>(),
        8usize,
        concat!("Size of: ", stringify!(rite_binary_footer))
    );
    assert_eq!(
        ::std::mem::align_of::<rite_binary_footer>(),
        1usize,
        concat!("Alignment of ", stringify!(rite_binary_footer))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rite_binary_footer>())).section_ident as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rite_binary_footer),
            "::",
            stringify!(section_ident)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rite_binary_footer>())).section_size as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(rite_binary_footer),
            "::",
            stringify!(section_size)
        )
    );
}
extern "C" {
    /// @internal crc.c
    #[link_name = "\u{1}_calc_crc_16_ccitt"]
    pub fn calc_crc_16_ccitt(src: *const u8, nbytes: usize, crc: u16) -> u16;
}
/// MRuby error handling.
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RException {
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize], u32>,
    pub c: *mut RClass,
    pub gcnext: *mut RBasic,
    pub iv: *mut iv_tbl,
}
#[test]
fn bindgen_test_layout_RException() {
    assert_eq!(
        ::std::mem::size_of::<RException>(),
        32usize,
        concat!("Size of: ", stringify!(RException))
    );
    assert_eq!(
        ::std::mem::align_of::<RException>(),
        8usize,
        concat!("Alignment of ", stringify!(RException))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RException>())).c as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RException),
            "::",
            stringify!(c)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RException>())).gcnext as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(RException),
            "::",
            stringify!(gcnext)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RException>())).iv as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(RException),
            "::",
            stringify!(iv)
        )
    );
}
impl RException {
    #[inline]
    pub fn tt(&self) -> mrb_vtype {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_tt(&mut self, val: mrb_vtype) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn color(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_color(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn flags(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 21u8) as u32) }
    }
    #[inline]
    pub fn set_flags(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(11usize, 21u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        tt: mrb_vtype,
        color: u32,
        flags: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize], u32> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize], u32> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let tt: u32 = unsafe { ::std::mem::transmute(tt) };
            tt as u64
        });
        __bindgen_bitfield_unit.set(8usize, 3u8, {
            let color: u32 = unsafe { ::std::mem::transmute(color) };
            color as u64
        });
        __bindgen_bitfield_unit.set(11usize, 21u8, {
            let flags: u32 = unsafe { ::std::mem::transmute(flags) };
            flags as u64
        });
        __bindgen_bitfield_unit
    }
}
extern "C" {
    #[link_name = "\u{1}_mrb_sys_fail"]
    pub fn mrb_sys_fail(mrb: *mut mrb_state, mesg: *const ::std::os::raw::c_char);
}
extern "C" {
    #[link_name = "\u{1}_mrb_exc_new_str"]
    pub fn mrb_exc_new_str(mrb: *mut mrb_state, c: *mut RClass, str: mrb_value) -> mrb_value;
}
extern "C" {
    #[link_name = "\u{1}_mrb_make_exception"]
    pub fn mrb_make_exception(
        mrb: *mut mrb_state,
        argc: mrb_int,
        argv: *const mrb_value,
    ) -> mrb_value;
}
extern "C" {
    #[link_name = "\u{1}_mrb_exc_backtrace"]
    pub fn mrb_exc_backtrace(mrb: *mut mrb_state, exc: mrb_value) -> mrb_value;
}
extern "C" {
    #[link_name = "\u{1}_mrb_get_backtrace"]
    pub fn mrb_get_backtrace(mrb: *mut mrb_state) -> mrb_value;
}
extern "C" {
    #[link_name = "\u{1}_mrb_no_method_error"]
    pub fn mrb_no_method_error(
        mrb: *mut mrb_state,
        id: mrb_sym,
        args: mrb_value,
        fmt: *const ::std::os::raw::c_char,
        ...
    );
}
extern "C" {
    #[link_name = "\u{1}_mrb_f_raise"]
    pub fn mrb_f_raise(arg1: *mut mrb_state, arg2: mrb_value) -> mrb_value;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct RBreak {
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize], u32>,
    pub c: *mut RClass,
    pub gcnext: *mut RBasic,
    pub proc_: *mut RProc,
    pub val: mrb_value,
}
#[test]
fn bindgen_test_layout_RBreak() {
    assert_eq!(
        ::std::mem::size_of::<RBreak>(),
        48usize,
        concat!("Size of: ", stringify!(RBreak))
    );
    assert_eq!(
        ::std::mem::align_of::<RBreak>(),
        8usize,
        concat!("Alignment of ", stringify!(RBreak))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RBreak>())).c as *const _ as usize },
        8usize,
        concat!("Offset of field: ", stringify!(RBreak), "::", stringify!(c))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RBreak>())).gcnext as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(RBreak),
            "::",
            stringify!(gcnext)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RBreak>())).proc_ as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(RBreak),
            "::",
            stringify!(proc_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RBreak>())).val as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(RBreak),
            "::",
            stringify!(val)
        )
    );
}
impl RBreak {
    #[inline]
    pub fn tt(&self) -> mrb_vtype {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_tt(&mut self, val: mrb_vtype) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn color(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_color(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn flags(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 21u8) as u32) }
    }
    #[inline]
    pub fn set_flags(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(11usize, 21u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        tt: mrb_vtype,
        color: u32,
        flags: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize], u32> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize], u32> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let tt: u32 = unsafe { ::std::mem::transmute(tt) };
            tt as u64
        });
        __bindgen_bitfield_unit.set(8usize, 3u8, {
            let color: u32 = unsafe { ::std::mem::transmute(color) };
            color as u64
        });
        __bindgen_bitfield_unit.set(11usize, 21u8, {
            let flags: u32 = unsafe { ::std::mem::transmute(flags) };
            flags as u64
        });
        __bindgen_bitfield_unit
    }
}
extern "C" {
    /// Protect
    ///
    /// @mrbgem mruby-error
    #[link_name = "\u{1}_mrb_protect"]
    pub fn mrb_protect(
        mrb: *mut mrb_state,
        body: mrb_func_t,
        data: mrb_value,
        state: *mut mrb_bool,
    ) -> mrb_value;
}
extern "C" {
    /// Ensure
    ///
    /// @mrbgem mruby-error
    #[link_name = "\u{1}_mrb_ensure"]
    pub fn mrb_ensure(
        mrb: *mut mrb_state,
        body: mrb_func_t,
        b_data: mrb_value,
        ensure: mrb_func_t,
        e_data: mrb_value,
    ) -> mrb_value;
}
extern "C" {
    /// Rescue
    ///
    /// @mrbgem mruby-error
    #[link_name = "\u{1}_mrb_rescue"]
    pub fn mrb_rescue(
        mrb: *mut mrb_state,
        body: mrb_func_t,
        b_data: mrb_value,
        rescue: mrb_func_t,
        r_data: mrb_value,
    ) -> mrb_value;
}
extern "C" {
    /// Rescue exception
    ///
    /// @mrbgem mruby-error
    #[link_name = "\u{1}_mrb_rescue_exceptions"]
    pub fn mrb_rescue_exceptions(
        mrb: *mut mrb_state,
        body: mrb_func_t,
        b_data: mrb_value,
        rescue: mrb_func_t,
        r_data: mrb_value,
        len: mrb_int,
        classes: *mut *mut RClass,
    ) -> mrb_value;
}
/// Hash class
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RHash {
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize], u32>,
    pub c: *mut RClass,
    pub gcnext: *mut RBasic,
    pub iv: *mut iv_tbl,
    pub ht: *mut htable,
}
#[test]
fn bindgen_test_layout_RHash() {
    assert_eq!(
        ::std::mem::size_of::<RHash>(),
        40usize,
        concat!("Size of: ", stringify!(RHash))
    );
    assert_eq!(
        ::std::mem::align_of::<RHash>(),
        8usize,
        concat!("Alignment of ", stringify!(RHash))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RHash>())).c as *const _ as usize },
        8usize,
        concat!("Offset of field: ", stringify!(RHash), "::", stringify!(c))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RHash>())).gcnext as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(RHash),
            "::",
            stringify!(gcnext)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RHash>())).iv as *const _ as usize },
        24usize,
        concat!("Offset of field: ", stringify!(RHash), "::", stringify!(iv))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RHash>())).ht as *const _ as usize },
        32usize,
        concat!("Offset of field: ", stringify!(RHash), "::", stringify!(ht))
    );
}
impl RHash {
    #[inline]
    pub fn tt(&self) -> mrb_vtype {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_tt(&mut self, val: mrb_vtype) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn color(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_color(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn flags(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 21u8) as u32) }
    }
    #[inline]
    pub fn set_flags(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(11usize, 21u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        tt: mrb_vtype,
        color: u32,
        flags: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize], u32> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize], u32> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let tt: u32 = unsafe { ::std::mem::transmute(tt) };
            tt as u64
        });
        __bindgen_bitfield_unit.set(8usize, 3u8, {
            let color: u32 = unsafe { ::std::mem::transmute(color) };
            color as u64
        });
        __bindgen_bitfield_unit.set(11usize, 21u8, {
            let flags: u32 = unsafe { ::std::mem::transmute(flags) };
            flags as u64
        });
        __bindgen_bitfield_unit
    }
}
extern "C" {
    #[link_name = "\u{1}_mrb_hash_new_capa"]
    pub fn mrb_hash_new_capa(arg1: *mut mrb_state, arg2: mrb_int) -> mrb_value;
}
extern "C" {
    #[link_name = "\u{1}_mrb_ensure_hash_type"]
    pub fn mrb_ensure_hash_type(mrb: *mut mrb_state, hash: mrb_value) -> mrb_value;
}
extern "C" {
    #[link_name = "\u{1}_mrb_check_hash_type"]
    pub fn mrb_check_hash_type(mrb: *mut mrb_state, hash: mrb_value) -> mrb_value;
}
extern "C" {
    #[link_name = "\u{1}_mrb_hash_new"]
    pub fn mrb_hash_new(mrb: *mut mrb_state) -> mrb_value;
}
extern "C" {
    #[link_name = "\u{1}_mrb_hash_set"]
    pub fn mrb_hash_set(mrb: *mut mrb_state, hash: mrb_value, key: mrb_value, val: mrb_value);
}
extern "C" {
    #[link_name = "\u{1}_mrb_hash_get"]
    pub fn mrb_hash_get(mrb: *mut mrb_state, hash: mrb_value, key: mrb_value) -> mrb_value;
}
extern "C" {
    #[link_name = "\u{1}_mrb_hash_fetch"]
    pub fn mrb_hash_fetch(
        mrb: *mut mrb_state,
        hash: mrb_value,
        key: mrb_value,
        def: mrb_value,
    ) -> mrb_value;
}
extern "C" {
    #[link_name = "\u{1}_mrb_hash_delete_key"]
    pub fn mrb_hash_delete_key(mrb: *mut mrb_state, hash: mrb_value, key: mrb_value) -> mrb_value;
}
extern "C" {
    #[link_name = "\u{1}_mrb_hash_keys"]
    pub fn mrb_hash_keys(mrb: *mut mrb_state, hash: mrb_value) -> mrb_value;
}
extern "C" {
    #[link_name = "\u{1}_mrb_hash_key_p"]
    pub fn mrb_hash_key_p(mrb: *mut mrb_state, hash: mrb_value, key: mrb_value) -> mrb_bool;
}
extern "C" {
    #[link_name = "\u{1}_mrb_hash_empty_p"]
    pub fn mrb_hash_empty_p(mrb: *mut mrb_state, self_: mrb_value) -> mrb_bool;
}
extern "C" {
    #[link_name = "\u{1}_mrb_hash_values"]
    pub fn mrb_hash_values(mrb: *mut mrb_state, hash: mrb_value) -> mrb_value;
}
extern "C" {
    #[link_name = "\u{1}_mrb_hash_clear"]
    pub fn mrb_hash_clear(mrb: *mut mrb_state, hash: mrb_value) -> mrb_value;
}
extern "C" {
    #[link_name = "\u{1}_mrb_hash_size"]
    pub fn mrb_hash_size(mrb: *mut mrb_state, hash: mrb_value) -> mrb_int;
}
extern "C" {
    #[link_name = "\u{1}_mrb_hash_dup"]
    pub fn mrb_hash_dup(mrb: *mut mrb_state, hash: mrb_value) -> mrb_value;
}
extern "C" {
    #[link_name = "\u{1}_mrb_hash_merge"]
    pub fn mrb_hash_merge(mrb: *mut mrb_state, hash1: mrb_value, hash2: mrb_value);
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct mrb_hash_value {
    pub v: mrb_value,
    pub n: mrb_int,
}
#[test]
fn bindgen_test_layout_mrb_hash_value() {
    assert_eq!(
        ::std::mem::size_of::<mrb_hash_value>(),
        24usize,
        concat!("Size of: ", stringify!(mrb_hash_value))
    );
    assert_eq!(
        ::std::mem::align_of::<mrb_hash_value>(),
        8usize,
        concat!("Alignment of ", stringify!(mrb_hash_value))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_hash_value>())).v as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_hash_value),
            "::",
            stringify!(v)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_hash_value>())).n as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_hash_value),
            "::",
            stringify!(n)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}_mrb_gc_mark_hash"]
    pub fn mrb_gc_mark_hash(arg1: *mut mrb_state, arg2: *mut RHash);
}
extern "C" {
    #[link_name = "\u{1}_mrb_gc_mark_hash_size"]
    pub fn mrb_gc_mark_hash_size(arg1: *mut mrb_state, arg2: *mut RHash) -> usize;
}
extern "C" {
    #[link_name = "\u{1}_mrb_gc_free_hash"]
    pub fn mrb_gc_free_hash(arg1: *mut mrb_state, arg2: *mut RHash);
}
pub type mrb_hash_foreach_func = ::std::option::Option<
    unsafe extern "C" fn(
        mrb: *mut mrb_state,
        key: mrb_value,
        val: mrb_value,
        data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    #[link_name = "\u{1}_mrb_hash_foreach"]
    pub fn mrb_hash_foreach(
        mrb: *mut mrb_state,
        hash: *mut RHash,
        func: mrb_hash_foreach_func,
        p: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    #[link_name = "\u{1}_memchr"]
    pub fn memchr(
        __s: *const ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}_memcmp"]
    pub fn memcmp(
        __s1: *const ::std::os::raw::c_void,
        __s2: *const ::std::os::raw::c_void,
        __n: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_memcpy"]
    pub fn memcpy(
        __dst: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __n: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}_memmove"]
    pub fn memmove(
        __dst: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __len: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}_memset"]
    pub fn memset(
        __b: *mut ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __len: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}_strcat"]
    pub fn strcat(
        __s1: *mut ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_strchr"]
    pub fn strchr(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_strcmp"]
    pub fn strcmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_strcoll"]
    pub fn strcoll(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_strcpy"]
    pub fn strcpy(
        __dst: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_strcspn"]
    pub fn strcspn(
        __s: *const ::std::os::raw::c_char,
        __charset: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    #[link_name = "\u{1}_strerror"]
    pub fn strerror(__errnum: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_strlen"]
    pub fn strlen(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_ulong;
}
extern "C" {
    #[link_name = "\u{1}_strncat"]
    pub fn strncat(
        __s1: *mut ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_strncmp"]
    pub fn strncmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_strncpy"]
    pub fn strncpy(
        __dst: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_strpbrk"]
    pub fn strpbrk(
        __s: *const ::std::os::raw::c_char,
        __charset: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_strrchr"]
    pub fn strrchr(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_strspn"]
    pub fn strspn(
        __s: *const ::std::os::raw::c_char,
        __charset: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    #[link_name = "\u{1}_strstr"]
    pub fn strstr(
        __big: *const ::std::os::raw::c_char,
        __little: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_strtok"]
    pub fn strtok(
        __str: *mut ::std::os::raw::c_char,
        __sep: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_strxfrm"]
    pub fn strxfrm(
        __s1: *mut ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    #[link_name = "\u{1}_strtok_r"]
    pub fn strtok_r(
        __str: *mut ::std::os::raw::c_char,
        __sep: *const ::std::os::raw::c_char,
        __lasts: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_strerror_r"]
    pub fn strerror_r(
        __errnum: ::std::os::raw::c_int,
        __strerrbuf: *mut ::std::os::raw::c_char,
        __buflen: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_strdup"]
    pub fn strdup(__s1: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_memccpy"]
    pub fn memccpy(
        __dst: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}_stpcpy"]
    pub fn stpcpy(
        __dst: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_stpncpy"]
    pub fn stpncpy(
        __dst: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_strndup"]
    pub fn strndup(__s1: *const ::std::os::raw::c_char, __n: usize) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_strnlen"]
    pub fn strnlen(__s1: *const ::std::os::raw::c_char, __n: usize) -> usize;
}
extern "C" {
    #[link_name = "\u{1}_strsignal"]
    pub fn strsignal(__sig: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
pub type errno_t = ::std::os::raw::c_int;
extern "C" {
    #[link_name = "\u{1}_memset_s"]
    pub fn memset_s(
        __s: *mut ::std::os::raw::c_void,
        __smax: rsize_t,
        __c: ::std::os::raw::c_int,
        __n: rsize_t,
    ) -> errno_t;
}
extern "C" {
    #[link_name = "\u{1}_memmem"]
    pub fn memmem(
        __big: *const ::std::os::raw::c_void,
        __big_len: usize,
        __little: *const ::std::os::raw::c_void,
        __little_len: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}_memset_pattern4"]
    pub fn memset_pattern4(
        __b: *mut ::std::os::raw::c_void,
        __pattern4: *const ::std::os::raw::c_void,
        __len: usize,
    );
}
extern "C" {
    #[link_name = "\u{1}_memset_pattern8"]
    pub fn memset_pattern8(
        __b: *mut ::std::os::raw::c_void,
        __pattern8: *const ::std::os::raw::c_void,
        __len: usize,
    );
}
extern "C" {
    #[link_name = "\u{1}_memset_pattern16"]
    pub fn memset_pattern16(
        __b: *mut ::std::os::raw::c_void,
        __pattern16: *const ::std::os::raw::c_void,
        __len: usize,
    );
}
extern "C" {
    #[link_name = "\u{1}_strcasestr"]
    pub fn strcasestr(
        __big: *const ::std::os::raw::c_char,
        __little: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_strnstr"]
    pub fn strnstr(
        __big: *const ::std::os::raw::c_char,
        __little: *const ::std::os::raw::c_char,
        __len: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_strlcat"]
    pub fn strlcat(
        __dst: *mut ::std::os::raw::c_char,
        __source: *const ::std::os::raw::c_char,
        __size: usize,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    #[link_name = "\u{1}_strlcpy"]
    pub fn strlcpy(
        __dst: *mut ::std::os::raw::c_char,
        __source: *const ::std::os::raw::c_char,
        __size: usize,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    #[link_name = "\u{1}_strmode"]
    pub fn strmode(__mode: ::std::os::raw::c_int, __bp: *mut ::std::os::raw::c_char);
}
extern "C" {
    #[link_name = "\u{1}_strsep"]
    pub fn strsep(
        __stringp: *mut *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_swab"]
    pub fn swab(
        arg1: *const ::std::os::raw::c_void,
        arg2: *mut ::std::os::raw::c_void,
        arg3: isize,
    );
}
extern "C" {
    #[link_name = "\u{1}_timingsafe_bcmp"]
    pub fn timingsafe_bcmp(
        __b1: *const ::std::os::raw::c_void,
        __b2: *const ::std::os::raw::c_void,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_bcmp"]
    pub fn bcmp(
        arg1: *const ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
        arg3: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_bcopy"]
    pub fn bcopy(
        arg1: *const ::std::os::raw::c_void,
        arg2: *mut ::std::os::raw::c_void,
        arg3: usize,
    );
}
extern "C" {
    #[link_name = "\u{1}_bzero"]
    pub fn bzero(arg1: *mut ::std::os::raw::c_void, arg2: usize);
}
extern "C" {
    #[link_name = "\u{1}_index"]
    pub fn index(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_rindex"]
    pub fn rindex(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_ffs"]
    pub fn ffs(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_strcasecmp"]
    pub fn strcasecmp(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_strncasecmp"]
    pub fn strncasecmp(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ffsl"]
    pub fn ffsl(arg1: ::std::os::raw::c_long) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ffsll"]
    pub fn ffsll(arg1: ::std::os::raw::c_longlong) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_fls"]
    pub fn fls(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_flsl"]
    pub fn flsl(arg1: ::std::os::raw::c_long) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_flsll"]
    pub fn flsll(arg1: ::std::os::raw::c_longlong) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RIstruct {
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize], u32>,
    pub c: *mut RClass,
    pub gcnext: *mut RBasic,
    pub inline_data: [::std::os::raw::c_char; 24usize],
}
#[test]
fn bindgen_test_layout_RIstruct() {
    assert_eq!(
        ::std::mem::size_of::<RIstruct>(),
        48usize,
        concat!("Size of: ", stringify!(RIstruct))
    );
    assert_eq!(
        ::std::mem::align_of::<RIstruct>(),
        8usize,
        concat!("Alignment of ", stringify!(RIstruct))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RIstruct>())).c as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RIstruct),
            "::",
            stringify!(c)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RIstruct>())).gcnext as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(RIstruct),
            "::",
            stringify!(gcnext)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RIstruct>())).inline_data as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(RIstruct),
            "::",
            stringify!(inline_data)
        )
    );
}
impl RIstruct {
    #[inline]
    pub fn tt(&self) -> mrb_vtype {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_tt(&mut self, val: mrb_vtype) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn color(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_color(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn flags(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 21u8) as u32) }
    }
    #[inline]
    pub fn set_flags(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(11usize, 21u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        tt: mrb_vtype,
        color: u32,
        flags: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize], u32> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize], u32> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let tt: u32 = unsafe { ::std::mem::transmute(tt) };
            tt as u64
        });
        __bindgen_bitfield_unit.set(8usize, 3u8, {
            let color: u32 = unsafe { ::std::mem::transmute(color) };
            color as u64
        });
        __bindgen_bitfield_unit.set(11usize, 21u8, {
            let flags: u32 = unsafe { ::std::mem::transmute(flags) };
            flags as u64
        });
        __bindgen_bitfield_unit
    }
}
/// khash definitions used in mruby's hash table.
pub type khint_t = u32;
pub type khiter_t = khint_t;
extern "C" {
    #[link_name = "\u{1}___m_empty"]
    pub static mut __m_empty: [u8; 4usize];
}
extern "C" {
    #[link_name = "\u{1}___m_del"]
    pub static mut __m_del: [u8; 4usize];
}
extern "C" {
    #[link_name = "\u{1}___m_either"]
    pub static mut __m_either: [u8; 4usize];
}
pub type kh_cstr_t = *const ::std::os::raw::c_char;
extern "C" {
    #[link_name = "\u{1}_mrb_flo_to_fixnum"]
    pub fn mrb_flo_to_fixnum(mrb: *mut mrb_state, val: mrb_value) -> mrb_value;
}
extern "C" {
    #[link_name = "\u{1}_mrb_fixnum_to_str"]
    pub fn mrb_fixnum_to_str(mrb: *mut mrb_state, x: mrb_value, base: mrb_int) -> mrb_value;
}
extern "C" {
    #[link_name = "\u{1}_mrb_float_to_str"]
    pub fn mrb_float_to_str(
        mrb: *mut mrb_state,
        x: mrb_value,
        fmt: *const ::std::os::raw::c_char,
    ) -> mrb_value;
}
extern "C" {
    #[link_name = "\u{1}_mrb_to_flo"]
    pub fn mrb_to_flo(mrb: *mut mrb_state, x: mrb_value) -> mrb_float;
}
extern "C" {
    #[link_name = "\u{1}_mrb_fixnum_plus"]
    pub fn mrb_fixnum_plus(mrb: *mut mrb_state, x: mrb_value, y: mrb_value) -> mrb_value;
}
extern "C" {
    #[link_name = "\u{1}_mrb_fixnum_minus"]
    pub fn mrb_fixnum_minus(mrb: *mut mrb_state, x: mrb_value, y: mrb_value) -> mrb_value;
}
extern "C" {
    #[link_name = "\u{1}_mrb_fixnum_mul"]
    pub fn mrb_fixnum_mul(mrb: *mut mrb_state, x: mrb_value, y: mrb_value) -> mrb_value;
}
extern "C" {
    #[link_name = "\u{1}_mrb_num_div"]
    pub fn mrb_num_div(mrb: *mut mrb_state, x: mrb_value, y: mrb_value) -> mrb_value;
}
pub const mrb_insn_OP_NOP: mrb_insn = 0;
pub const mrb_insn_OP_MOVE: mrb_insn = 1;
pub const mrb_insn_OP_LOADL: mrb_insn = 2;
pub const mrb_insn_OP_LOADI: mrb_insn = 3;
pub const mrb_insn_OP_LOADINEG: mrb_insn = 4;
pub const mrb_insn_OP_LOADI__1: mrb_insn = 5;
pub const mrb_insn_OP_LOADI_0: mrb_insn = 6;
pub const mrb_insn_OP_LOADI_1: mrb_insn = 7;
pub const mrb_insn_OP_LOADI_2: mrb_insn = 8;
pub const mrb_insn_OP_LOADI_3: mrb_insn = 9;
pub const mrb_insn_OP_LOADI_4: mrb_insn = 10;
pub const mrb_insn_OP_LOADI_5: mrb_insn = 11;
pub const mrb_insn_OP_LOADI_6: mrb_insn = 12;
pub const mrb_insn_OP_LOADI_7: mrb_insn = 13;
pub const mrb_insn_OP_LOADSYM: mrb_insn = 14;
pub const mrb_insn_OP_LOADNIL: mrb_insn = 15;
pub const mrb_insn_OP_LOADSELF: mrb_insn = 16;
pub const mrb_insn_OP_LOADT: mrb_insn = 17;
pub const mrb_insn_OP_LOADF: mrb_insn = 18;
pub const mrb_insn_OP_GETGV: mrb_insn = 19;
pub const mrb_insn_OP_SETGV: mrb_insn = 20;
pub const mrb_insn_OP_GETSV: mrb_insn = 21;
pub const mrb_insn_OP_SETSV: mrb_insn = 22;
pub const mrb_insn_OP_GETIV: mrb_insn = 23;
pub const mrb_insn_OP_SETIV: mrb_insn = 24;
pub const mrb_insn_OP_GETCV: mrb_insn = 25;
pub const mrb_insn_OP_SETCV: mrb_insn = 26;
pub const mrb_insn_OP_GETCONST: mrb_insn = 27;
pub const mrb_insn_OP_SETCONST: mrb_insn = 28;
pub const mrb_insn_OP_GETMCNST: mrb_insn = 29;
pub const mrb_insn_OP_SETMCNST: mrb_insn = 30;
pub const mrb_insn_OP_GETUPVAR: mrb_insn = 31;
pub const mrb_insn_OP_SETUPVAR: mrb_insn = 32;
pub const mrb_insn_OP_JMP: mrb_insn = 33;
pub const mrb_insn_OP_JMPIF: mrb_insn = 34;
pub const mrb_insn_OP_JMPNOT: mrb_insn = 35;
pub const mrb_insn_OP_JMPNIL: mrb_insn = 36;
pub const mrb_insn_OP_ONERR: mrb_insn = 37;
pub const mrb_insn_OP_EXCEPT: mrb_insn = 38;
pub const mrb_insn_OP_RESCUE: mrb_insn = 39;
pub const mrb_insn_OP_POPERR: mrb_insn = 40;
pub const mrb_insn_OP_RAISE: mrb_insn = 41;
pub const mrb_insn_OP_EPUSH: mrb_insn = 42;
pub const mrb_insn_OP_EPOP: mrb_insn = 43;
pub const mrb_insn_OP_SENDV: mrb_insn = 44;
pub const mrb_insn_OP_SENDVB: mrb_insn = 45;
pub const mrb_insn_OP_SEND: mrb_insn = 46;
pub const mrb_insn_OP_SENDB: mrb_insn = 47;
pub const mrb_insn_OP_CALL: mrb_insn = 48;
pub const mrb_insn_OP_SUPER: mrb_insn = 49;
pub const mrb_insn_OP_ARGARY: mrb_insn = 50;
pub const mrb_insn_OP_ENTER: mrb_insn = 51;
pub const mrb_insn_OP_KEY_P: mrb_insn = 52;
pub const mrb_insn_OP_KEYEND: mrb_insn = 53;
pub const mrb_insn_OP_KARG: mrb_insn = 54;
pub const mrb_insn_OP_RETURN: mrb_insn = 55;
pub const mrb_insn_OP_RETURN_BLK: mrb_insn = 56;
pub const mrb_insn_OP_BREAK: mrb_insn = 57;
pub const mrb_insn_OP_BLKPUSH: mrb_insn = 58;
pub const mrb_insn_OP_ADD: mrb_insn = 59;
pub const mrb_insn_OP_ADDI: mrb_insn = 60;
pub const mrb_insn_OP_SUB: mrb_insn = 61;
pub const mrb_insn_OP_SUBI: mrb_insn = 62;
pub const mrb_insn_OP_MUL: mrb_insn = 63;
pub const mrb_insn_OP_DIV: mrb_insn = 64;
pub const mrb_insn_OP_EQ: mrb_insn = 65;
pub const mrb_insn_OP_LT: mrb_insn = 66;
pub const mrb_insn_OP_LE: mrb_insn = 67;
pub const mrb_insn_OP_GT: mrb_insn = 68;
pub const mrb_insn_OP_GE: mrb_insn = 69;
pub const mrb_insn_OP_ARRAY: mrb_insn = 70;
pub const mrb_insn_OP_ARRAY2: mrb_insn = 71;
pub const mrb_insn_OP_ARYCAT: mrb_insn = 72;
pub const mrb_insn_OP_ARYPUSH: mrb_insn = 73;
pub const mrb_insn_OP_ARYDUP: mrb_insn = 74;
pub const mrb_insn_OP_AREF: mrb_insn = 75;
pub const mrb_insn_OP_ASET: mrb_insn = 76;
pub const mrb_insn_OP_APOST: mrb_insn = 77;
pub const mrb_insn_OP_INTERN: mrb_insn = 78;
pub const mrb_insn_OP_STRING: mrb_insn = 79;
pub const mrb_insn_OP_STRCAT: mrb_insn = 80;
pub const mrb_insn_OP_HASH: mrb_insn = 81;
pub const mrb_insn_OP_HASHADD: mrb_insn = 82;
pub const mrb_insn_OP_HASHCAT: mrb_insn = 83;
pub const mrb_insn_OP_LAMBDA: mrb_insn = 84;
pub const mrb_insn_OP_BLOCK: mrb_insn = 85;
pub const mrb_insn_OP_METHOD: mrb_insn = 86;
pub const mrb_insn_OP_RANGE_INC: mrb_insn = 87;
pub const mrb_insn_OP_RANGE_EXC: mrb_insn = 88;
pub const mrb_insn_OP_OCLASS: mrb_insn = 89;
pub const mrb_insn_OP_CLASS: mrb_insn = 90;
pub const mrb_insn_OP_MODULE: mrb_insn = 91;
pub const mrb_insn_OP_EXEC: mrb_insn = 92;
pub const mrb_insn_OP_DEF: mrb_insn = 93;
pub const mrb_insn_OP_ALIAS: mrb_insn = 94;
pub const mrb_insn_OP_UNDEF: mrb_insn = 95;
pub const mrb_insn_OP_SCLASS: mrb_insn = 96;
pub const mrb_insn_OP_TCLASS: mrb_insn = 97;
pub const mrb_insn_OP_DEBUG: mrb_insn = 98;
pub const mrb_insn_OP_ERR: mrb_insn = 99;
pub const mrb_insn_OP_EXT1: mrb_insn = 100;
pub const mrb_insn_OP_EXT2: mrb_insn = 101;
pub const mrb_insn_OP_EXT3: mrb_insn = 102;
pub const mrb_insn_OP_STOP: mrb_insn = 103;
pub type mrb_insn = u32;
/// Proc class
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct REnv {
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize], u32>,
    pub c: *mut RClass,
    pub gcnext: *mut RBasic,
    pub stack: *mut mrb_value,
    pub cxt: *mut mrb_context,
    pub mid: mrb_sym,
}
#[test]
fn bindgen_test_layout_REnv() {
    assert_eq!(
        ::std::mem::size_of::<REnv>(),
        48usize,
        concat!("Size of: ", stringify!(REnv))
    );
    assert_eq!(
        ::std::mem::align_of::<REnv>(),
        8usize,
        concat!("Alignment of ", stringify!(REnv))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<REnv>())).c as *const _ as usize },
        8usize,
        concat!("Offset of field: ", stringify!(REnv), "::", stringify!(c))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<REnv>())).gcnext as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(REnv),
            "::",
            stringify!(gcnext)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<REnv>())).stack as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(REnv),
            "::",
            stringify!(stack)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<REnv>())).cxt as *const _ as usize },
        32usize,
        concat!("Offset of field: ", stringify!(REnv), "::", stringify!(cxt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<REnv>())).mid as *const _ as usize },
        40usize,
        concat!("Offset of field: ", stringify!(REnv), "::", stringify!(mid))
    );
}
impl REnv {
    #[inline]
    pub fn tt(&self) -> mrb_vtype {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_tt(&mut self, val: mrb_vtype) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn color(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_color(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn flags(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 21u8) as u32) }
    }
    #[inline]
    pub fn set_flags(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(11usize, 21u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        tt: mrb_vtype,
        color: u32,
        flags: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize], u32> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize], u32> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let tt: u32 = unsafe { ::std::mem::transmute(tt) };
            tt as u64
        });
        __bindgen_bitfield_unit.set(8usize, 3u8, {
            let color: u32 = unsafe { ::std::mem::transmute(color) };
            color as u64
        });
        __bindgen_bitfield_unit.set(11usize, 21u8, {
            let flags: u32 = unsafe { ::std::mem::transmute(flags) };
            flags as u64
        });
        __bindgen_bitfield_unit
    }
}
extern "C" {
    #[link_name = "\u{1}_mrb_env_unshare"]
    pub fn mrb_env_unshare(arg1: *mut mrb_state, arg2: *mut REnv);
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct RProc {
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize], u32>,
    pub c: *mut RClass,
    pub gcnext: *mut RBasic,
    pub body: RProc__bindgen_ty_1,
    pub upper: *mut RProc,
    pub e: RProc__bindgen_ty_2,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union RProc__bindgen_ty_1 {
    pub irep: *mut mrb_irep,
    pub func: mrb_func_t,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_RProc__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<RProc__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(RProc__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<RProc__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(RProc__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RProc__bindgen_ty_1>())).irep as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RProc__bindgen_ty_1),
            "::",
            stringify!(irep)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RProc__bindgen_ty_1>())).func as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RProc__bindgen_ty_1),
            "::",
            stringify!(func)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union RProc__bindgen_ty_2 {
    pub target_class: *mut RClass,
    pub env: *mut REnv,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_RProc__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<RProc__bindgen_ty_2>(),
        8usize,
        concat!("Size of: ", stringify!(RProc__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<RProc__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(RProc__bindgen_ty_2))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<RProc__bindgen_ty_2>())).target_class as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RProc__bindgen_ty_2),
            "::",
            stringify!(target_class)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RProc__bindgen_ty_2>())).env as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RProc__bindgen_ty_2),
            "::",
            stringify!(env)
        )
    );
}
#[test]
fn bindgen_test_layout_RProc() {
    assert_eq!(
        ::std::mem::size_of::<RProc>(),
        48usize,
        concat!("Size of: ", stringify!(RProc))
    );
    assert_eq!(
        ::std::mem::align_of::<RProc>(),
        8usize,
        concat!("Alignment of ", stringify!(RProc))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RProc>())).c as *const _ as usize },
        8usize,
        concat!("Offset of field: ", stringify!(RProc), "::", stringify!(c))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RProc>())).gcnext as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(RProc),
            "::",
            stringify!(gcnext)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RProc>())).body as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(RProc),
            "::",
            stringify!(body)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RProc>())).upper as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(RProc),
            "::",
            stringify!(upper)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RProc>())).e as *const _ as usize },
        40usize,
        concat!("Offset of field: ", stringify!(RProc), "::", stringify!(e))
    );
}
impl RProc {
    #[inline]
    pub fn tt(&self) -> mrb_vtype {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_tt(&mut self, val: mrb_vtype) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn color(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_color(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn flags(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 21u8) as u32) }
    }
    #[inline]
    pub fn set_flags(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(11usize, 21u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        tt: mrb_vtype,
        color: u32,
        flags: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize], u32> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize], u32> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let tt: u32 = unsafe { ::std::mem::transmute(tt) };
            tt as u64
        });
        __bindgen_bitfield_unit.set(8usize, 3u8, {
            let color: u32 = unsafe { ::std::mem::transmute(color) };
            color as u64
        });
        __bindgen_bitfield_unit.set(11usize, 21u8, {
            let flags: u32 = unsafe { ::std::mem::transmute(flags) };
            flags as u64
        });
        __bindgen_bitfield_unit
    }
}
extern "C" {
    #[link_name = "\u{1}_mrb_proc_new"]
    pub fn mrb_proc_new(arg1: *mut mrb_state, arg2: *mut mrb_irep) -> *mut RProc;
}
extern "C" {
    #[link_name = "\u{1}_mrb_closure_new"]
    pub fn mrb_closure_new(arg1: *mut mrb_state, arg2: *mut mrb_irep) -> *mut RProc;
}
extern "C" {
    #[link_name = "\u{1}_mrb_proc_new_cfunc"]
    pub fn mrb_proc_new_cfunc(arg1: *mut mrb_state, arg2: mrb_func_t) -> *mut RProc;
}
extern "C" {
    #[link_name = "\u{1}_mrb_closure_new_cfunc"]
    pub fn mrb_closure_new_cfunc(
        mrb: *mut mrb_state,
        func: mrb_func_t,
        nlocals: ::std::os::raw::c_int,
    ) -> *mut RProc;
}
extern "C" {
    #[link_name = "\u{1}_mrb_proc_copy"]
    pub fn mrb_proc_copy(a: *mut RProc, b: *mut RProc);
}
extern "C" {
    #[link_name = "\u{1}_mrb_f_send"]
    pub fn mrb_f_send(mrb: *mut mrb_state, self_: mrb_value) -> mrb_value;
}
extern "C" {
    #[link_name = "\u{1}_mrb_proc_new_cfunc_with_env"]
    pub fn mrb_proc_new_cfunc_with_env(
        arg1: *mut mrb_state,
        arg2: mrb_func_t,
        arg3: mrb_int,
        arg4: *const mrb_value,
    ) -> *mut RProc;
}
extern "C" {
    #[link_name = "\u{1}_mrb_proc_cfunc_env_get"]
    pub fn mrb_proc_cfunc_env_get(arg1: *mut mrb_state, arg2: mrb_int) -> mrb_value;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kh_mt {
    pub n_buckets: khint_t,
    pub size: khint_t,
    pub n_occupied: khint_t,
    pub ed_flags: *mut u8,
    pub keys: *mut mrb_sym,
    pub vals: *mut mrb_method_t,
}
#[test]
fn bindgen_test_layout_kh_mt() {
    assert_eq!(
        ::std::mem::size_of::<kh_mt>(),
        40usize,
        concat!("Size of: ", stringify!(kh_mt))
    );
    assert_eq!(
        ::std::mem::align_of::<kh_mt>(),
        8usize,
        concat!("Alignment of ", stringify!(kh_mt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<kh_mt>())).n_buckets as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(kh_mt),
            "::",
            stringify!(n_buckets)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<kh_mt>())).size as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(kh_mt),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<kh_mt>())).n_occupied as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(kh_mt),
            "::",
            stringify!(n_occupied)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<kh_mt>())).ed_flags as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(kh_mt),
            "::",
            stringify!(ed_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<kh_mt>())).keys as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(kh_mt),
            "::",
            stringify!(keys)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<kh_mt>())).vals as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(kh_mt),
            "::",
            stringify!(vals)
        )
    );
}
pub type kh_mt_t = kh_mt;
extern "C" {
    #[link_name = "\u{1}_kh_alloc_mt"]
    pub fn kh_alloc_mt(mrb: *mut mrb_state, h: *mut kh_mt_t);
}
extern "C" {
    #[link_name = "\u{1}_kh_init_mt_size"]
    pub fn kh_init_mt_size(mrb: *mut mrb_state, size: khint_t) -> *mut kh_mt_t;
}
extern "C" {
    #[link_name = "\u{1}_kh_init_mt"]
    pub fn kh_init_mt(mrb: *mut mrb_state) -> *mut kh_mt_t;
}
extern "C" {
    #[link_name = "\u{1}_kh_destroy_mt"]
    pub fn kh_destroy_mt(mrb: *mut mrb_state, h: *mut kh_mt_t);
}
extern "C" {
    #[link_name = "\u{1}_kh_clear_mt"]
    pub fn kh_clear_mt(mrb: *mut mrb_state, h: *mut kh_mt_t);
}
extern "C" {
    #[link_name = "\u{1}_kh_get_mt"]
    pub fn kh_get_mt(mrb: *mut mrb_state, h: *mut kh_mt_t, key: mrb_sym) -> khint_t;
}
extern "C" {
    #[link_name = "\u{1}_kh_put_mt"]
    pub fn kh_put_mt(
        mrb: *mut mrb_state,
        h: *mut kh_mt_t,
        key: mrb_sym,
        ret: *mut ::std::os::raw::c_int,
    ) -> khint_t;
}
extern "C" {
    #[link_name = "\u{1}_kh_resize_mt"]
    pub fn kh_resize_mt(mrb: *mut mrb_state, h: *mut kh_mt_t, new_n_buckets: khint_t);
}
extern "C" {
    #[link_name = "\u{1}_kh_del_mt"]
    pub fn kh_del_mt(mrb: *mut mrb_state, h: *mut kh_mt_t, x: khint_t);
}
extern "C" {
    #[link_name = "\u{1}_kh_copy_mt"]
    pub fn kh_copy_mt(mrb: *mut mrb_state, h: *mut kh_mt_t) -> *mut kh_mt_t;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct mrb_range_edges {
    pub beg: mrb_value,
    pub end: mrb_value,
}
#[test]
fn bindgen_test_layout_mrb_range_edges() {
    assert_eq!(
        ::std::mem::size_of::<mrb_range_edges>(),
        32usize,
        concat!("Size of: ", stringify!(mrb_range_edges))
    );
    assert_eq!(
        ::std::mem::align_of::<mrb_range_edges>(),
        8usize,
        concat!("Alignment of ", stringify!(mrb_range_edges))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_range_edges>())).beg as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_range_edges),
            "::",
            stringify!(beg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_range_edges>())).end as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_range_edges),
            "::",
            stringify!(end)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RRange {
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize], u32>,
    pub c: *mut RClass,
    pub gcnext: *mut RBasic,
    pub edges: *mut mrb_range_edges,
    pub excl: mrb_bool,
}
#[test]
fn bindgen_test_layout_RRange() {
    assert_eq!(
        ::std::mem::size_of::<RRange>(),
        40usize,
        concat!("Size of: ", stringify!(RRange))
    );
    assert_eq!(
        ::std::mem::align_of::<RRange>(),
        8usize,
        concat!("Alignment of ", stringify!(RRange))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RRange>())).c as *const _ as usize },
        8usize,
        concat!("Offset of field: ", stringify!(RRange), "::", stringify!(c))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RRange>())).gcnext as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(RRange),
            "::",
            stringify!(gcnext)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RRange>())).edges as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(RRange),
            "::",
            stringify!(edges)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RRange>())).excl as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(RRange),
            "::",
            stringify!(excl)
        )
    );
}
impl RRange {
    #[inline]
    pub fn tt(&self) -> mrb_vtype {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_tt(&mut self, val: mrb_vtype) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn color(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_color(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn flags(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 21u8) as u32) }
    }
    #[inline]
    pub fn set_flags(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(11usize, 21u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        tt: mrb_vtype,
        color: u32,
        flags: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize], u32> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize], u32> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let tt: u32 = unsafe { ::std::mem::transmute(tt) };
            tt as u64
        });
        __bindgen_bitfield_unit.set(8usize, 3u8, {
            let color: u32 = unsafe { ::std::mem::transmute(color) };
            color as u64
        });
        __bindgen_bitfield_unit.set(11usize, 21u8, {
            let flags: u32 = unsafe { ::std::mem::transmute(flags) };
            flags as u64
        });
        __bindgen_bitfield_unit
    }
}
extern "C" {
    #[link_name = "\u{1}_mrb_range_ptr"]
    pub fn mrb_range_ptr(mrb: *mut mrb_state, range: mrb_value) -> *mut RRange;
}
extern "C" {
    #[link_name = "\u{1}_mrb_range_new"]
    pub fn mrb_range_new(
        mrb: *mut mrb_state,
        start: mrb_value,
        end: mrb_value,
        exclude: mrb_bool,
    ) -> mrb_value;
}
extern "C" {
    #[link_name = "\u{1}_mrb_range_beg_len"]
    pub fn mrb_range_beg_len(
        mrb: *mut mrb_state,
        range: mrb_value,
        begp: *mut mrb_int,
        lenp: *mut mrb_int,
        len: mrb_int,
        trunc: mrb_bool,
    ) -> mrb_int;
}
extern "C" {
    #[link_name = "\u{1}_mrb_get_values_at"]
    pub fn mrb_get_values_at(
        mrb: *mut mrb_state,
        obj: mrb_value,
        olen: mrb_int,
        argc: mrb_int,
        argv: *const mrb_value,
        func: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut mrb_state, arg2: mrb_value, arg3: mrb_int) -> mrb_value,
        >,
    ) -> mrb_value;
}
extern "C" {
    #[link_name = "\u{1}_mrb_gc_mark_range"]
    pub fn mrb_gc_mark_range(mrb: *mut mrb_state, r: *mut RRange);
}
extern "C" {
    #[link_name = "\u{1}_mrb_digitmap"]
    pub static mut mrb_digitmap: [::std::os::raw::c_char; 0usize];
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct RString {
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize], u32>,
    pub c: *mut RClass,
    pub gcnext: *mut RBasic,
    pub as_: RString__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union RString__bindgen_ty_1 {
    pub heap: RString__bindgen_ty_1__bindgen_ty_1,
    pub ary: [::std::os::raw::c_char; 24usize],
    _bindgen_union_align: [u64; 3usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct RString__bindgen_ty_1__bindgen_ty_1 {
    pub len: mrb_int,
    pub aux: RString__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
    pub ptr: *mut ::std::os::raw::c_char,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union RString__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1 {
    pub capa: mrb_int,
    pub shared: *mut mrb_shared_string,
    pub fshared: *mut RString,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_RString__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<RString__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(RString__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<RString__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(RString__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<RString__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1>())).capa
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RString__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(capa)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<RString__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1>())).shared
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RString__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(shared)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<RString__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1>())).fshared
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RString__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(fshared)
        )
    );
}
#[test]
fn bindgen_test_layout_RString__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<RString__bindgen_ty_1__bindgen_ty_1>(),
        24usize,
        concat!("Size of: ", stringify!(RString__bindgen_ty_1__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<RString__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(RString__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<RString__bindgen_ty_1__bindgen_ty_1>())).len as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RString__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<RString__bindgen_ty_1__bindgen_ty_1>())).aux as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RString__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(aux)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<RString__bindgen_ty_1__bindgen_ty_1>())).ptr as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(RString__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(ptr)
        )
    );
}
#[test]
fn bindgen_test_layout_RString__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<RString__bindgen_ty_1>(),
        24usize,
        concat!("Size of: ", stringify!(RString__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<RString__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(RString__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RString__bindgen_ty_1>())).heap as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RString__bindgen_ty_1),
            "::",
            stringify!(heap)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RString__bindgen_ty_1>())).ary as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RString__bindgen_ty_1),
            "::",
            stringify!(ary)
        )
    );
}
#[test]
fn bindgen_test_layout_RString() {
    assert_eq!(
        ::std::mem::size_of::<RString>(),
        48usize,
        concat!("Size of: ", stringify!(RString))
    );
    assert_eq!(
        ::std::mem::align_of::<RString>(),
        8usize,
        concat!("Alignment of ", stringify!(RString))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RString>())).c as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RString),
            "::",
            stringify!(c)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RString>())).gcnext as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(RString),
            "::",
            stringify!(gcnext)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RString>())).as_ as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(RString),
            "::",
            stringify!(as_)
        )
    );
}
impl RString {
    #[inline]
    pub fn tt(&self) -> mrb_vtype {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_tt(&mut self, val: mrb_vtype) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn color(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_color(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn flags(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 21u8) as u32) }
    }
    #[inline]
    pub fn set_flags(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(11usize, 21u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        tt: mrb_vtype,
        color: u32,
        flags: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize], u32> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize], u32> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let tt: u32 = unsafe { ::std::mem::transmute(tt) };
            tt as u64
        });
        __bindgen_bitfield_unit.set(8usize, 3u8, {
            let color: u32 = unsafe { ::std::mem::transmute(color) };
            color as u64
        });
        __bindgen_bitfield_unit.set(11usize, 21u8, {
            let flags: u32 = unsafe { ::std::mem::transmute(flags) };
            flags as u64
        });
        __bindgen_bitfield_unit
    }
}
extern "C" {
    #[link_name = "\u{1}_mrb_str_strlen"]
    pub fn mrb_str_strlen(arg1: *mut mrb_state, arg2: *mut RString) -> mrb_int;
}
extern "C" {
    #[link_name = "\u{1}_mrb_gc_free_str"]
    pub fn mrb_gc_free_str(arg1: *mut mrb_state, arg2: *mut RString);
}
extern "C" {
    #[link_name = "\u{1}_mrb_str_modify"]
    pub fn mrb_str_modify(arg1: *mut mrb_state, arg2: *mut RString);
}
extern "C" {
    #[link_name = "\u{1}_mrb_str_index"]
    pub fn mrb_str_index(
        arg1: *mut mrb_state,
        arg2: mrb_value,
        arg3: *const ::std::os::raw::c_char,
        arg4: mrb_int,
        arg5: mrb_int,
    ) -> mrb_int;
}
extern "C" {
    #[link_name = "\u{1}_mrb_str_concat"]
    pub fn mrb_str_concat(arg1: *mut mrb_state, arg2: mrb_value, arg3: mrb_value);
}
extern "C" {
    #[link_name = "\u{1}_mrb_str_plus"]
    pub fn mrb_str_plus(arg1: *mut mrb_state, arg2: mrb_value, arg3: mrb_value) -> mrb_value;
}
extern "C" {
    #[link_name = "\u{1}_mrb_ptr_to_str"]
    pub fn mrb_ptr_to_str(arg1: *mut mrb_state, arg2: *mut ::std::os::raw::c_void) -> mrb_value;
}
extern "C" {
    #[link_name = "\u{1}_mrb_obj_as_string"]
    pub fn mrb_obj_as_string(mrb: *mut mrb_state, obj: mrb_value) -> mrb_value;
}
extern "C" {
    #[link_name = "\u{1}_mrb_str_resize"]
    pub fn mrb_str_resize(mrb: *mut mrb_state, str: mrb_value, len: mrb_int) -> mrb_value;
}
extern "C" {
    #[link_name = "\u{1}_mrb_str_substr"]
    pub fn mrb_str_substr(
        mrb: *mut mrb_state,
        str: mrb_value,
        beg: mrb_int,
        len: mrb_int,
    ) -> mrb_value;
}
extern "C" {
    #[link_name = "\u{1}_mrb_ensure_string_type"]
    pub fn mrb_ensure_string_type(mrb: *mut mrb_state, str: mrb_value) -> mrb_value;
}
extern "C" {
    #[link_name = "\u{1}_mrb_check_string_type"]
    pub fn mrb_check_string_type(mrb: *mut mrb_state, str: mrb_value) -> mrb_value;
}
extern "C" {
    #[link_name = "\u{1}_mrb_string_type"]
    pub fn mrb_string_type(mrb: *mut mrb_state, str: mrb_value) -> mrb_value;
}
extern "C" {
    #[link_name = "\u{1}_mrb_str_new_capa"]
    pub fn mrb_str_new_capa(mrb: *mut mrb_state, capa: usize) -> mrb_value;
}
extern "C" {
    #[link_name = "\u{1}_mrb_str_buf_new"]
    pub fn mrb_str_buf_new(mrb: *mut mrb_state, capa: usize) -> mrb_value;
}
extern "C" {
    #[link_name = "\u{1}_mrb_string_value_cstr"]
    pub fn mrb_string_value_cstr(
        mrb: *mut mrb_state,
        ptr: *mut mrb_value,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_mrb_string_value_ptr"]
    pub fn mrb_string_value_ptr(
        mrb: *mut mrb_state,
        str: mrb_value,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_mrb_string_value_len"]
    pub fn mrb_string_value_len(mrb: *mut mrb_state, str: mrb_value) -> mrb_int;
}
extern "C" {
    #[link_name = "\u{1}_mrb_str_dup"]
    pub fn mrb_str_dup(mrb: *mut mrb_state, str: mrb_value) -> mrb_value;
}
extern "C" {
    #[link_name = "\u{1}_mrb_str_intern"]
    pub fn mrb_str_intern(mrb: *mut mrb_state, self_: mrb_value) -> mrb_value;
}
extern "C" {
    #[link_name = "\u{1}_mrb_str_to_inum"]
    pub fn mrb_str_to_inum(
        mrb: *mut mrb_state,
        str: mrb_value,
        base: mrb_int,
        badcheck: mrb_bool,
    ) -> mrb_value;
}
extern "C" {
    #[link_name = "\u{1}_mrb_cstr_to_inum"]
    pub fn mrb_cstr_to_inum(
        mrb: *mut mrb_state,
        s: *const ::std::os::raw::c_char,
        base: mrb_int,
        badcheck: mrb_bool,
    ) -> mrb_value;
}
extern "C" {
    #[link_name = "\u{1}_mrb_str_to_dbl"]
    pub fn mrb_str_to_dbl(mrb: *mut mrb_state, str: mrb_value, badcheck: mrb_bool) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_mrb_cstr_to_dbl"]
    pub fn mrb_cstr_to_dbl(
        mrb: *mut mrb_state,
        s: *const ::std::os::raw::c_char,
        badcheck: mrb_bool,
    ) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_mrb_str_to_str"]
    pub fn mrb_str_to_str(mrb: *mut mrb_state, str: mrb_value) -> mrb_value;
}
extern "C" {
    #[link_name = "\u{1}_mrb_str_equal"]
    pub fn mrb_str_equal(mrb: *mut mrb_state, str1: mrb_value, str2: mrb_value) -> mrb_bool;
}
extern "C" {
    #[link_name = "\u{1}_mrb_str_cat"]
    pub fn mrb_str_cat(
        mrb: *mut mrb_state,
        str: mrb_value,
        ptr: *const ::std::os::raw::c_char,
        len: usize,
    ) -> mrb_value;
}
extern "C" {
    #[link_name = "\u{1}_mrb_str_cat_cstr"]
    pub fn mrb_str_cat_cstr(
        mrb: *mut mrb_state,
        str: mrb_value,
        ptr: *const ::std::os::raw::c_char,
    ) -> mrb_value;
}
extern "C" {
    #[link_name = "\u{1}_mrb_str_cat_str"]
    pub fn mrb_str_cat_str(mrb: *mut mrb_state, str: mrb_value, str2: mrb_value) -> mrb_value;
}
extern "C" {
    #[link_name = "\u{1}_mrb_str_append"]
    pub fn mrb_str_append(mrb: *mut mrb_state, str: mrb_value, str2: mrb_value) -> mrb_value;
}
extern "C" {
    #[link_name = "\u{1}_mrb_str_cmp"]
    pub fn mrb_str_cmp(
        mrb: *mut mrb_state,
        str1: mrb_value,
        str2: mrb_value,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_mrb_str_to_cstr"]
    pub fn mrb_str_to_cstr(mrb: *mut mrb_state, str: mrb_value) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_mrb_str_pool"]
    pub fn mrb_str_pool(mrb: *mut mrb_state, str: mrb_value) -> mrb_value;
}
extern "C" {
    #[link_name = "\u{1}_mrb_str_hash"]
    pub fn mrb_str_hash(mrb: *mut mrb_state, str: mrb_value) -> u32;
}
extern "C" {
    #[link_name = "\u{1}_mrb_str_dump"]
    pub fn mrb_str_dump(mrb: *mut mrb_state, str: mrb_value) -> mrb_value;
}
extern "C" {
    #[link_name = "\u{1}_mrb_str_inspect"]
    pub fn mrb_str_inspect(mrb: *mut mrb_state, str: mrb_value) -> mrb_value;
}
extern "C" {
    #[link_name = "\u{1}_mrb_noregexp"]
    pub fn mrb_noregexp(mrb: *mut mrb_state, self_: mrb_value);
}
extern "C" {
    #[link_name = "\u{1}_mrb_regexp_check"]
    pub fn mrb_regexp_check(mrb: *mut mrb_state, obj: mrb_value);
}
pub type jmp_buf = [::std::os::raw::c_int; 37usize];
pub type sigjmp_buf = [::std::os::raw::c_int; 38usize];
extern "C" {
    #[link_name = "\u{1}_setjmp"]
    pub fn setjmp(arg1: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_longjmp"]
    pub fn longjmp(arg1: *mut ::std::os::raw::c_int, arg2: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "\u{1}__setjmp"]
    pub fn _setjmp(arg1: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__longjmp"]
    pub fn _longjmp(arg1: *mut ::std::os::raw::c_int, arg2: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "\u{1}_sigsetjmp"]
    pub fn sigsetjmp(
        arg1: *mut ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_siglongjmp"]
    pub fn siglongjmp(arg1: *mut ::std::os::raw::c_int, arg2: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "\u{1}_longjmperror"]
    pub fn longjmperror();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct mrb_jmpbuf {
    pub impl_: jmp_buf,
}
#[test]
fn bindgen_test_layout_mrb_jmpbuf() {
    assert_eq!(
        ::std::mem::size_of::<mrb_jmpbuf>(),
        148usize,
        concat!("Size of: ", stringify!(mrb_jmpbuf))
    );
    assert_eq!(
        ::std::mem::align_of::<mrb_jmpbuf>(),
        4usize,
        concat!("Alignment of ", stringify!(mrb_jmpbuf))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_jmpbuf>())).impl_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_jmpbuf),
            "::",
            stringify!(impl_)
        )
    );
}
/// Functions to access mruby variables.
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct global_variable {
    pub counter: ::std::os::raw::c_int,
    pub data: *mut mrb_value,
    pub getter: ::std::option::Option<unsafe extern "C" fn() -> mrb_value>,
    pub setter: ::std::option::Option<unsafe extern "C" fn()>,
}
#[test]
fn bindgen_test_layout_global_variable() {
    assert_eq!(
        ::std::mem::size_of::<global_variable>(),
        32usize,
        concat!("Size of: ", stringify!(global_variable))
    );
    assert_eq!(
        ::std::mem::align_of::<global_variable>(),
        8usize,
        concat!("Alignment of ", stringify!(global_variable))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<global_variable>())).counter as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(global_variable),
            "::",
            stringify!(counter)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<global_variable>())).data as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(global_variable),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<global_variable>())).getter as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(global_variable),
            "::",
            stringify!(getter)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<global_variable>())).setter as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(global_variable),
            "::",
            stringify!(setter)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct global_entry {
    pub var: *mut global_variable,
    pub id: mrb_sym,
}
#[test]
fn bindgen_test_layout_global_entry() {
    assert_eq!(
        ::std::mem::size_of::<global_entry>(),
        16usize,
        concat!("Size of: ", stringify!(global_entry))
    );
    assert_eq!(
        ::std::mem::align_of::<global_entry>(),
        8usize,
        concat!("Alignment of ", stringify!(global_entry))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<global_entry>())).var as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(global_entry),
            "::",
            stringify!(var)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<global_entry>())).id as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(global_entry),
            "::",
            stringify!(id)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}_mrb_vm_special_get"]
    pub fn mrb_vm_special_get(arg1: *mut mrb_state, arg2: mrb_sym) -> mrb_value;
}
extern "C" {
    #[link_name = "\u{1}_mrb_vm_special_set"]
    pub fn mrb_vm_special_set(arg1: *mut mrb_state, arg2: mrb_sym, arg3: mrb_value);
}
extern "C" {
    #[link_name = "\u{1}_mrb_vm_cv_get"]
    pub fn mrb_vm_cv_get(arg1: *mut mrb_state, arg2: mrb_sym) -> mrb_value;
}
extern "C" {
    #[link_name = "\u{1}_mrb_vm_cv_set"]
    pub fn mrb_vm_cv_set(arg1: *mut mrb_state, arg2: mrb_sym, arg3: mrb_value);
}
extern "C" {
    #[link_name = "\u{1}_mrb_vm_const_get"]
    pub fn mrb_vm_const_get(arg1: *mut mrb_state, arg2: mrb_sym) -> mrb_value;
}
extern "C" {
    #[link_name = "\u{1}_mrb_vm_const_set"]
    pub fn mrb_vm_const_set(arg1: *mut mrb_state, arg2: mrb_sym, arg3: mrb_value);
}
extern "C" {
    #[link_name = "\u{1}_mrb_const_get"]
    pub fn mrb_const_get(arg1: *mut mrb_state, arg2: mrb_value, arg3: mrb_sym) -> mrb_value;
}
extern "C" {
    #[link_name = "\u{1}_mrb_const_set"]
    pub fn mrb_const_set(arg1: *mut mrb_state, arg2: mrb_value, arg3: mrb_sym, arg4: mrb_value);
}
extern "C" {
    #[link_name = "\u{1}_mrb_const_defined"]
    pub fn mrb_const_defined(arg1: *mut mrb_state, arg2: mrb_value, arg3: mrb_sym) -> mrb_bool;
}
extern "C" {
    #[link_name = "\u{1}_mrb_const_remove"]
    pub fn mrb_const_remove(arg1: *mut mrb_state, arg2: mrb_value, arg3: mrb_sym);
}
extern "C" {
    #[link_name = "\u{1}_mrb_iv_name_sym_p"]
    pub fn mrb_iv_name_sym_p(mrb: *mut mrb_state, sym: mrb_sym) -> mrb_bool;
}
extern "C" {
    #[link_name = "\u{1}_mrb_iv_name_sym_check"]
    pub fn mrb_iv_name_sym_check(mrb: *mut mrb_state, sym: mrb_sym);
}
extern "C" {
    #[link_name = "\u{1}_mrb_obj_iv_get"]
    pub fn mrb_obj_iv_get(mrb: *mut mrb_state, obj: *mut RObject, sym: mrb_sym) -> mrb_value;
}
extern "C" {
    #[link_name = "\u{1}_mrb_obj_iv_set"]
    pub fn mrb_obj_iv_set(mrb: *mut mrb_state, obj: *mut RObject, sym: mrb_sym, v: mrb_value);
}
extern "C" {
    #[link_name = "\u{1}_mrb_obj_iv_defined"]
    pub fn mrb_obj_iv_defined(mrb: *mut mrb_state, obj: *mut RObject, sym: mrb_sym) -> mrb_bool;
}
extern "C" {
    #[link_name = "\u{1}_mrb_iv_get"]
    pub fn mrb_iv_get(mrb: *mut mrb_state, obj: mrb_value, sym: mrb_sym) -> mrb_value;
}
extern "C" {
    #[link_name = "\u{1}_mrb_iv_set"]
    pub fn mrb_iv_set(mrb: *mut mrb_state, obj: mrb_value, sym: mrb_sym, v: mrb_value);
}
extern "C" {
    #[link_name = "\u{1}_mrb_iv_defined"]
    pub fn mrb_iv_defined(arg1: *mut mrb_state, arg2: mrb_value, arg3: mrb_sym) -> mrb_bool;
}
extern "C" {
    #[link_name = "\u{1}_mrb_iv_remove"]
    pub fn mrb_iv_remove(mrb: *mut mrb_state, obj: mrb_value, sym: mrb_sym) -> mrb_value;
}
extern "C" {
    #[link_name = "\u{1}_mrb_iv_copy"]
    pub fn mrb_iv_copy(mrb: *mut mrb_state, dst: mrb_value, src: mrb_value);
}
extern "C" {
    #[link_name = "\u{1}_mrb_const_defined_at"]
    pub fn mrb_const_defined_at(mrb: *mut mrb_state, mod_: mrb_value, id: mrb_sym) -> mrb_bool;
}
extern "C" {
    /// Get a global variable. Will return nil if the var does not exist
    ///
    /// Example:
    ///
    ///     !!!ruby
    ///     # Ruby style
    ///     var = $value
    ///
    ///     !!!c
    ///     // C style
    ///     mrb_sym sym = mrb_intern_lit(mrb, "$value");
    ///     mrb_value var = mrb_gv_get(mrb, sym);
    ///
    /// @param mrb The mruby state reference
    /// @param sym The name of the global variable
    /// @return The value of that global variable. May be nil
    #[link_name = "\u{1}_mrb_gv_get"]
    pub fn mrb_gv_get(mrb: *mut mrb_state, sym: mrb_sym) -> mrb_value;
}
extern "C" {
    /// Set a global variable
    ///
    /// Example:
    ///
    ///     !!!ruby
    ///     # Ruby style
    ///     $value = "foo"
    ///
    ///     !!!c
    ///     // C style
    ///     mrb_sym sym = mrb_intern_lit(mrb, "$value");
    ///     mrb_gv_set(mrb, sym, mrb_str_new_lit("foo"));
    ///
    /// @param mrb The mruby state reference
    /// @param sym The name of the global variable
    /// @param val The value of the global variable
    #[link_name = "\u{1}_mrb_gv_set"]
    pub fn mrb_gv_set(mrb: *mut mrb_state, sym: mrb_sym, val: mrb_value);
}
extern "C" {
    /// Remove a global variable.
    ///
    /// Example:
    ///
    ///     !!!ruby
    ///     # Ruby style
    ///     $value = nil
    ///
    ///     !!!c
    ///     // C style
    ///     mrb_sym sym = mrb_intern_lit(mrb, "$value");
    ///     mrb_gv_remove(mrb, sym);
    ///
    /// @param mrb The mruby state reference
    /// @param sym The name of the global variable
    /// @param val The value of the global variable
    #[link_name = "\u{1}_mrb_gv_remove"]
    pub fn mrb_gv_remove(mrb: *mut mrb_state, sym: mrb_sym);
}
extern "C" {
    #[link_name = "\u{1}_mrb_cv_get"]
    pub fn mrb_cv_get(mrb: *mut mrb_state, mod_: mrb_value, sym: mrb_sym) -> mrb_value;
}
extern "C" {
    #[link_name = "\u{1}_mrb_mod_cv_set"]
    pub fn mrb_mod_cv_set(mrb: *mut mrb_state, c: *mut RClass, sym: mrb_sym, v: mrb_value);
}
extern "C" {
    #[link_name = "\u{1}_mrb_cv_set"]
    pub fn mrb_cv_set(mrb: *mut mrb_state, mod_: mrb_value, sym: mrb_sym, v: mrb_value);
}
extern "C" {
    #[link_name = "\u{1}_mrb_cv_defined"]
    pub fn mrb_cv_defined(mrb: *mut mrb_state, mod_: mrb_value, sym: mrb_sym) -> mrb_bool;
}
extern "C" {
    #[link_name = "\u{1}_mrb_obj_iv_inspect"]
    pub fn mrb_obj_iv_inspect(arg1: *mut mrb_state, arg2: *mut RObject) -> mrb_value;
}
extern "C" {
    #[link_name = "\u{1}_mrb_mod_constants"]
    pub fn mrb_mod_constants(mrb: *mut mrb_state, mod_: mrb_value) -> mrb_value;
}
extern "C" {
    #[link_name = "\u{1}_mrb_f_global_variables"]
    pub fn mrb_f_global_variables(mrb: *mut mrb_state, self_: mrb_value) -> mrb_value;
}
extern "C" {
    #[link_name = "\u{1}_mrb_obj_instance_variables"]
    pub fn mrb_obj_instance_variables(arg1: *mut mrb_state, arg2: mrb_value) -> mrb_value;
}
extern "C" {
    #[link_name = "\u{1}_mrb_mod_class_variables"]
    pub fn mrb_mod_class_variables(arg1: *mut mrb_state, arg2: mrb_value) -> mrb_value;
}
extern "C" {
    #[link_name = "\u{1}_mrb_mod_cv_get"]
    pub fn mrb_mod_cv_get(mrb: *mut mrb_state, c: *mut RClass, sym: mrb_sym) -> mrb_value;
}
extern "C" {
    #[link_name = "\u{1}_mrb_mod_cv_defined"]
    pub fn mrb_mod_cv_defined(mrb: *mut mrb_state, c: *mut RClass, sym: mrb_sym) -> mrb_bool;
}
extern "C" {
    #[link_name = "\u{1}_mrb_ident_p"]
    pub fn mrb_ident_p(s: *const ::std::os::raw::c_char, len: mrb_int) -> mrb_bool;
}
extern "C" {
    #[link_name = "\u{1}_mrb_gc_mark_gv"]
    pub fn mrb_gc_mark_gv(arg1: *mut mrb_state);
}
extern "C" {
    #[link_name = "\u{1}_mrb_gc_free_gv"]
    pub fn mrb_gc_free_gv(arg1: *mut mrb_state);
}
extern "C" {
    #[link_name = "\u{1}_mrb_gc_mark_iv"]
    pub fn mrb_gc_mark_iv(arg1: *mut mrb_state, arg2: *mut RObject);
}
extern "C" {
    #[link_name = "\u{1}_mrb_gc_mark_iv_size"]
    pub fn mrb_gc_mark_iv_size(arg1: *mut mrb_state, arg2: *mut RObject) -> usize;
}
extern "C" {
    #[link_name = "\u{1}_mrb_gc_free_iv"]
    pub fn mrb_gc_free_iv(arg1: *mut mrb_state, arg2: *mut RObject);
}
pub type mrb_iv_foreach_func = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut mrb_state,
        arg2: mrb_sym,
        arg3: mrb_value,
        arg4: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    #[link_name = "\u{1}_mrb_iv_foreach"]
    pub fn mrb_iv_foreach(
        mrb: *mut mrb_state,
        obj: mrb_value,
        func: mrb_iv_foreach_func,
        p: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    /// Extract the integer value from a Fixnum `mrb_value`
    #[link_name = "\u{1}_mrb_sys_fixnum_to_cint"]
    pub fn mrb_sys_fixnum_to_cint(value: mrb_value) -> mrb_int;
}
extern "C" {
    /// Extract the float value from a Float `mrb_value`
    #[link_name = "\u{1}_mrb_sys_float_to_cdouble"]
    pub fn mrb_sys_float_to_cdouble(value: mrb_value) -> mrb_float;
}
extern "C" {
    /// Extract the `RClass` from a Class `mrb_value`
    #[link_name = "\u{1}_mrb_sys_class_to_rclass"]
    pub fn mrb_sys_class_to_rclass(value: mrb_value) -> *mut RClass;
}
extern "C" {
    /// Create an `mrb_value` representing `nil`
    #[link_name = "\u{1}_mrb_sys_nil_value"]
    pub fn mrb_sys_nil_value() -> mrb_value;
}
extern "C" {
    /// Create an `mrb_value` representing `false`
    #[link_name = "\u{1}_mrb_sys_false_value"]
    pub fn mrb_sys_false_value() -> mrb_value;
}
extern "C" {
    /// Create an `mrb_value` representing `true`
    #[link_name = "\u{1}_mrb_sys_true"]
    pub fn mrb_sys_true() -> mrb_value;
}
extern "C" {
    /// Create an `mrb_value` representing an integer (a `Fixnum`)
    #[link_name = "\u{1}_mrb_sys_fixnum_value"]
    pub fn mrb_sys_fixnum_value(value: mrb_int) -> mrb_value;
}
extern "C" {
    /// Create an `mrb_value` representing a float
    #[link_name = "\u{1}_mrb_sys_float_value"]
    pub fn mrb_sys_float_value(mrb: *mut mrb_state, value: mrb_float) -> mrb_value;
}
extern "C" {
    /// Create an `mrb_value` from an `RProc`
    #[link_name = "\u{1}_mrb_sys_proc_value"]
    pub fn mrb_sys_proc_value(mrb: *mut mrb_state, proc_: *mut RProc) -> mrb_value;
}
extern "C" {
    /// Create a `Class` `mrb_value` from an `RClass`
    #[link_name = "\u{1}_mrb_sys_class_value"]
    pub fn mrb_sys_class_value(klass: *mut RClass) -> mrb_value;
}
extern "C" {
    /// Create a `Module` `mrb_value` from an `RClass`
    #[link_name = "\u{1}_mrb_sys_module_value"]
    pub fn mrb_sys_module_value(module: *mut RClass) -> mrb_value;
}
extern "C" {
    /// Create an `mrb_value` from an `RData`
    #[link_name = "\u{1}_mrb_sys_data_value"]
    pub fn mrb_sys_data_value(data: *mut RData) -> mrb_value;
}
extern "C" {
    /// Get a C string with the name of the symbol identified by an `mrb_value`
    #[link_name = "\u{1}_mrb_sys_symbol_name"]
    pub fn mrb_sys_symbol_name(
        mrb: *mut mrb_state,
        value: mrb_value,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    /// Create a new symbol from a C string
    #[link_name = "\u{1}_mrb_sys_new_symbol"]
    pub fn mrb_sys_new_symbol(
        mrb: *mut mrb_state,
        string: *const ::std::os::raw::c_char,
        len: usize,
    ) -> mrb_value;
}
extern "C" {
    #[link_name = "\u{1}_mrb_sys_data_init"]
    pub fn mrb_sys_data_init(
        value: *mut mrb_value,
        ptr: *mut ::std::os::raw::c_void,
        type_: *const mrb_data_type,
    );
}
extern "C" {
    /// Create a `String` `mrb_value` containing exception info and a backtrace for
    /// the most recent thrown exception on `mrb_state`
    #[link_name = "\u{1}_mrb_sys_get_current_exception"]
    pub fn mrb_sys_get_current_exception(mrb: *mut mrb_state) -> mrb_value;
}
extern "C" {
    /// Raise the most recent thrown exception on `mrb_state`
    #[link_name = "\u{1}_mrb_sys_raise_current_exception"]
    pub fn mrb_sys_raise_current_exception(mrb: *mut mrb_state);
}
extern "C" {
    /// Generate a String `mrb_value` from a value suitable for debug logging
    #[link_name = "\u{1}_mrb_sys_value_debug_str"]
    pub fn mrb_sys_value_debug_str(mrb: *mut mrb_state, value: mrb_value) -> mrb_value;
}
extern "C" {
    /// Raise an exception class with a message
    #[link_name = "\u{1}_mrb_sys_raise"]
    pub fn mrb_sys_raise(
        mrb: *mut mrb_state,
        eclass: *const ::std::os::raw::c_char,
        msg: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    /// Check if a class is defined under another class or module
    #[link_name = "\u{1}_mrb_sys_class_defined_under"]
    pub fn mrb_sys_class_defined_under(
        mrb: *mut mrb_state,
        outer: *mut RClass,
        name: *const ::std::os::raw::c_char,
    ) -> mrb_bool;
}
extern "C" {
    /// Get the `RClass` representing the `Class` of an `mrb_value`
    #[link_name = "\u{1}_mrb_sys_class_of_value"]
    pub fn mrb_sys_class_of_value(mrb: *mut mrb_state, value: mrb_value) -> *mut RClass;
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout___va_list_tag() {
    assert_eq!(
        ::std::mem::size_of::<__va_list_tag>(),
        24usize,
        concat!("Size of: ", stringify!(__va_list_tag))
    );
    assert_eq!(
        ::std::mem::align_of::<__va_list_tag>(),
        8usize,
        concat!("Alignment of ", stringify!(__va_list_tag))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).gp_offset as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(gp_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).fp_offset as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(fp_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).overflow_arg_area as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(overflow_arg_area)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).reg_save_area as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(reg_save_area)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iv_tbl {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct alloca_header {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct symbol_name {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mrb_irep_debug_info {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct htable {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mrb_shared_string {
    pub _address: u8,
}
