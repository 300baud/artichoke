initSidebarItems({"enum":[["MrbError",""]],"macro":[["class_spec_or_raise","Lookup a [`class::Spec`] for a Rust type `T`. If the spec does not exist, raise on the interpreter and return `nil`."],["interpreter_or_raise","Extract an `Mrb` instance from the userdata on a [`sys::mrb_state`]. If there is an error when extracting the Rust wrapper around the interpreter, attempt to raise a `RuntimeError` and return `nil`."],["module_spec_or_raise","Lookup a [`module::Spec`] for a Rust type `T`. If the spec does not exist, raise on the interpreter and return `nil`."],["unwrap_or_raise","Unwrap a `Result` or raise a `RuntimeError` and return `default`."],["unwrap_value_or_raise","Unwrap a `Result<Value>` and return the inner [`sys::mrb_value`] or raise a `RuntimeError` and return `nil`."]],"mod":[["class",""],["convert",""],["def",""],["eval",""],["extn",""],["file",""],["gc",""],["interpreter",""],["load",""],["macros","This module defines macros for working with interpreters and `Value`s. This source module is included first in `lib.rs`, which means the macros are available to all modules within the mruby crate in addition to being exported."],["method",""],["module",""],["state",""],["value",""]]});