version: 2
jobs:
  rust:
    docker:
      - image: circleci/rust:latest
    steps:
      - checkout
      - restore_cache:
          key: rust-cargo-v1-{{ checksum "Cargo.lock" }}
      - run:
          name: Install Rust Toolchain
          command: |
            rustup toolchain install "$(cat rust-toolchain)"
            rustup component add rustfmt
            rustup component add clippy
            rustc --version --verbose
            cargo --version --verbose
            rustfmt --version
            cargo clippy -- --version
      - run:
          # https://github.com/mruby/mruby/blob/master/doc/guides/compile.md#prerequisites
          name: Install mruby Build Dependencies
          command: |
            sudo apt-get install -y binutils bison ruby-full
            rustfmt --version
            ruby --version
      - run:
          # needed for cc crate in build.rs
          name: Install mruby-sys Build Dependencies
          command: |
            sudo apt-get install -y clang
            clang --version
      - run:
          name: Build Workspace
          command: |
            cargo build
      - save_cache:
          key: rust-cargo-v1-{{ checksum "Cargo.lock" }}
          paths:
            - "~/.cargo"
            - "./target"
      - run:
          name: Test Workspace
          command: cargo test --all-features
          environment:
            RUST_BACKTRACE: 1
      - run:
          name: Format Rust Sources
          command: |
            rustfmt --version
            cargo fmt -- --check --color=auto
      - run:
          name: Lint Rust With Clippy
          command: |
            cargo clippy -- --version
            cargo clippy --all-targets --all-features
      - run:
          name: Check Docs
          command: |
            cargo doc --no-deps --all
          environment:
            RUSTDOCFLAGS: "-Z unstable-options --enable-index-page"
      - persist_to_workspace:
          root: target
          paths:
            - doc
  c:
    docker:
      - image: circleci/node:lts
    steps:
      - checkout
      - restore_cache:
          key: c-yarn-v1-{{ checksum "yarn.lock" }}
      - run:
          name: Yarn Install
          command: yarn install
      - save_cache:
          key: c-yarn-v1-{{ checksum "yarn.lock" }}
          paths:
            - ~/.cache/yarn
      - run:
          name: Format C Sources
          command: |
            yarn run clang-format --version

            _check_clang_format() {
              if yarn run clang-format -output-replacements-xml "$1" | grep -q "offset"; then
                echo "KO: $1"
                echo "    Please run 'yarn lint' to resolve C formatting issues"
                return 1
              else
                echo "OK: $1"
              fi
            }
            export -f _check_clang_format

            find . -type f \
              -and \( -name '*.h' -or -name '*.c' \) \
              -and -not -path '*vendor*' \
              -and -not -path '*target*' \
              -and -not -path '*node_modules*' \
              -and -not -path '*mruby/src/extn/test/ruby-spec/*' -print0 | \
              xargs -0 -n1 bash -c '_check_clang_format "$@"' _
  ruby:
    docker:
      - image: circleci/ruby:2.6.3
    steps:
      - checkout
      - run:
          name: Install bundler 2
          command: sudo gem install bundler
      - restore_cache:
          keys:
            - ruby-bundler-v1-mruby-extn-{{ checksum "./mruby/src/extn/Gemfile.lock" }}
      - run:
          name: mruby extn Bundle Install
          working_directory: ./mruby/src/extn
          command: bundle install --path ~/vendor/mruby-extn-bundle
      - save_cache:
          key: ruby-bundler-v1-mruby-extn-{{ checksum "./mruby/src/extn/Gemfile.lock" }}
          paths:
            - ~/vendor/mruby-extn-bundle
      - run:
          name: mruby extn Lint Ruby With RuboCop
          working_directory: ./mruby/src/extn
          command: |
            bundle exec rubocop --version
            bundle exec rubocop
      - restore_cache:
          keys:
            - ruby-bundler-v1-foolsgold-{{ checksum "./mruby/src/extn/Gemfile.lock" }}
      - run:
          name: FoolsGold Bundle Install
          working_directory: ./foolsgold/ruby
          command: bundle install --path ~/vendor/foolsgold-bundle
      - save_cache:
          key: ruby-bundler-v1-foolsgold-{{ checksum "./foolsgold/ruby/Gemfile.lock" }}
          paths:
            - ~/vendor/foolsgold-bundle
      - run:
          name: FoolsGold Lint Ruby With RuboCop
          working_directory: ./foolsgold/ruby
          command: |
            bundle exec rubocop --version
            bundle exec rubocop
      - restore_cache:
          keys:
            - ruby-bundler-v1-nemesis-{{ checksum "./nemesis/ruby/Gemfile.lock" }}
      - run:
          name: Nemesis Bundle Install
          working_directory: ./nemesis/ruby
          command: bundle install --path ~/vendor/nemesis-bundle
      - save_cache:
          key: ruby-bundler-v1-nemesis-{{ checksum "./nemesis/ruby/Gemfile.lock" }}
          paths:
            - ~/vendor/nemesis-bundle
      - run:
          name: Nemesis Lint Ruby With RuboCop
          working_directory: ./nemesis/ruby
          command: |
            bundle exec rubocop --version
            bundle exec rubocop
  text:
    docker:
      - image: circleci/node:lts
    steps:
      - checkout
      - restore_cache:
          key: text-yarn-v1-{{ checksum "yarn.lock" }}
      - run:
          name: Yarn Install
          command: yarn install
      - save_cache:
          key: text-yarn-v1-{{ checksum "yarn.lock" }}
          paths:
            - ~/.cache/yarn
      - run:
          name: Format Text Sources
          command: |
            yarn run prettier --version
            if ! yarn run prettier --check --prose-wrap always './*.{css,html,js,json,md}' '{!(target),!(node_modules)}**/*.{css,html,js,json,md}'; then
              echo "KO: Text files not formatted"
              echo "    Please run 'yarn lint' to resolve text formatting issues"
              exit 1
            fi
  docs-deploy:
    docker:
      - image: node:8.10.0
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "23:28:57:b8:bc:d6:23:9f:bc:f3:68:56:29:90:68:c4"
      - attach_workspace:
          at: target
      - run:
          name: Install and configure dependencies
          command: |
            npm install -g --silent gh-pages@2.0.1
            git config user.email "ci-build@hyperbo.la"
            git config user.name "ci-build"
      - run:
          name: Deploy docs to gh-pages branch
          command: gh-pages --message "[skip ci] generate docs" --dist target/doc
workflows:
  version: 2
  build:
    jobs:
      - rust
      - c
      - ruby
      - text
      - docs-deploy:
          requires:
            - rust
          filters:
            branches:
              only: master
