version: 2
jobs:
  rust:
    docker:
      - image: circleci/rust:latest
    steps:
      - checkout
      - restore_cache:
          key: cargo-{{ checksum "Cargo.lock" }}
      - run:
          name: Install Nightly Toolchain
          command: |
            rustup toolchain install nightly
            rustc --version --verbose
            cargo --version --verbose
      - run:
          # https://github.com/mruby/mruby/blob/master/doc/guides/compile.md#prerequisites
          name: Install mruby Build Dependencies
          command: |
            sudo apt-get install -y binutils bison ruby-full
            ruby --version
      - run:
          # needed for cc crate in build.rs
          name: Install mruby-sys Build Dependencies
          command: |
            sudo apt-get install -y clang
            ruby --version
      - run:
          name: Build Workspace
          command: |
            cargo build
            cargo build --release
      - save_cache:
          key: cargo-{{ checksum "Cargo.lock" }}
          paths:
            - "~/.cargo"
            - "./target"
      - run:
          name: Test
          command: cargo test --all-features
      - run:
          name: Check Formatting
          command: |
            rustup component add rustfmt
            rustfmt --version
            cargo fmt -- --check --color=auto
      - run:
          name: Lint With Clippy
          command: |
            rustup component add clippy
            cargo clippy --all-targets --all-features
  c:
    docker:
      - image: silkeh/clang:latest
    steps:
      - checkout
      - run:
          name: clang-format
          command: |
            SOURCES="$(find . -type f \( -name '*.h' -or -name '*.c' \) -and -not -path '*vendor*' -and -not -path '*target*')"
            for SOURCE in $SOURCES
            do
              clang-format -output-replacements-xml "$SOURCE" > /tmp/clang-format-replacements
              if grep -q "offset" /tmp/clang-format-replacements; then
                echo "Source file '$SOURCE' contains formatting issues."
                echo "Please use clang-format tool to resolve found issues."
                exit 1
              fi
            done
  ruby:
    docker:
      - image: circleci/ruby:2.6
    steps:
      - checkout
      - run:
          name: rubocop
          command: |
            cd foolsgold/ruby
            bundle install
            bundle exec rubocop
  docs:
    docker:
      - image: circleci/node:lts
    steps:
      - checkout
      - restore_cache:
          key: yarn-deps-{{ checksum "yarn.lock" }}
      - run:
          name: Yarn Install
          command: yarn install
      - run:
          name: Format Markdown
          command: |
            yarn run fmt
            git diff -q
      - save_cache:
          key: yarn-deps-{{ checksum "yarn.lock" }}
          paths:
            - ~/.cache/yarn
workflows:
  version: 2
  build_test_lint:
    jobs:
      - rust
      - c
      - ruby
      - docs
