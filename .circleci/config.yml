version: 2.1
orbs:
  win: circleci/windows@2.1.0
commands:
  rubocop:
    description: Lint Ruby sources with RuboCop
    parameters:
      target:
        type: string
    steps:
      - restore_cache:
          keys:
            - v1-bundler-cache-{{ .Environment.CIRCLE_JOB }}-{{ checksum "<< parameters.target >>/Gemfile.lock" }}
      - run:
          name: Bundle Install
          working_directory: "<< parameters.target >>"
          command: |
            bundle install --path ~/vendor
      - run:
          name: Lint Ruby With RuboCop
          working_directory: "<< parameters.target >>"
          command: |
            bundle exec rubocop --version
            bundle exec rubocop
      - save_cache:
          key: v1-bundler-cache-{{ .Environment.CIRCLE_JOB }}-{{ checksum "<< parameters.target >>/Gemfile.lock" }}
          paths:
            - "~/vendor"
jobs:
  artichoke-x86_64-linux:
    docker:
      - image: debian:buster-slim
    resource_class: large
    steps:
      - run:
          name: Setup Image
          command: |
            apt-get update
            apt-get install -y curl git ssh
      - checkout
      - restore_cache:
          name: Restore sccache cache
          key: v1-sccache-cache-stable-{{ arch }}-{{ .Environment.CIRCLE_JOB }}
      - run:
          name: Install Rust Toolchain
          command: |
            curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y -q --profile minimal --default-toolchain "$(cat rust-toolchain)"
      - run:
          name: Install Toolchain
          working_directory: "~"
          command: |
            apt-get install -y clang bison
            git clone https://github.com/rbenv/ruby-build.git
            PREFIX=/usr/local ./ruby-build/install.sh
      - run:
          name: Install Ruby
          command: |
            ruby-build "$(cat .ruby-version)" /usr/local
      - run:
          name: Install sccache
          command: |
            cargo install sccache
            echo 'export "RUSTC_WRAPPER"="sccache"' >> $BASH_ENV
            echo 'export "SCCACHE_CACHE_SIZE"="1G"' >> $BASH_ENV
      - run:
          name: Installed Toolchain Versions
          command: |
            rustc --version --verbose
            cargo --version --verbose
            ruby --version
            clang --version
            bison --version
      - run:
          name: Build workspace without default features
          command: |
            cargo build -p artichoke-backend --no-default-features
            touch artichoke-backend/build.rs
          environment:
            RUST_BACKTRACE: 1
      - run:
          name: Build Workspace
          command: |
            cargo build
          environment:
            RUST_BACKTRACE: 1
      - run:
          name: Test Workspace
          command: cargo test --all-features
          environment:
            RUST_BACKTRACE: 1
      - save_cache:
          name: Save sccache cache
          key: v1-sccache-cache-stable-{{ arch }}-{{ .Environment.CIRCLE_JOB }}-{{ epoch }}
          paths:
            - "~/.cache/sccache"
  artichoke-x86_64-windows:
    executor:
      name: win/default
    steps:
      - checkout
      - restore_cache:
          name: Restore sccache cache
          key: v1-sccache-cache-stable-{{ arch }}-{{ .Environment.CIRCLE_JOB }}
      - run:
          name: Install Toolchain
          command: |
            # Install rustup
            $client = new-object System.Net.WebClient
            $client.DownloadFile('https://win.rustup.rs', "$pwd\rustup-init.exe")
            $toolchain = Get-Content rust-toolchain | Select-Object -First 1
            .\rustup-init.exe -y --profile minimal --default-toolchain "$($toolchain)-msvc"
            # This is necessary because otherwise cargo fails when trying to use git?
            mkdir .cargo
            Add-Content .cargo\config "[net]`ngit-fetch-with-cli = true"
            choco install ruby --no-progress --version=2.6.3.1
            choco install visualstudio2019-workload-vctools
            choco install llvm
            choco install winflexbison3 --ignore-checksums
      - run:
          name: Install sccache
          command: |
            cargo install sccache
      - run:
          name: Installed Toolchain Versions
          command: |
            rustc --version --verbose
            cargo --version --verbose
            ruby --version
            clang --version
            win_bison --version
      - run:
          name: Build Workspace
          command: |
            cargo build
          environment:
            RUST_BACKTRACE: 1
            RUSTC_WRAPPER: sccache
            SCCACHE_CACHE_SIZE: 1G
            LIBCLANG_PATH: C:\Program Files\LLVM\bin
      - run:
          name: Test Workspace
          command: |
            cargo test --all-features
            % 'suppressing test failures. See GH-359.'
          environment:
            RUST_BACKTRACE: 1
            RUSTC_WRAPPER: sccache
            SCCACHE_CACHE_SIZE: 1G
            LIBCLANG_PATH: C:\Program Files\LLVM\bin
      - save_cache:
          name: Save sccache cache
          key: v1-sccache-cache-stable-{{ arch }}-{{ .Environment.CIRCLE_JOB }}-{{ epoch }}
          paths:
            - "%LOCALAPPDATA%\\Mozilla\\sccache"
  artichoke-ruby-spec:
    docker:
      - image: debian:buster-slim
    resource_class: large
    steps:
      - checkout
      - restore_cache:
          name: Restore sccache cache
          key: v1-sccache-cache-stable-{{ arch }}-{{ .Environment.CIRCLE_JOB }}
      - run:
          name: Install Rust Toolchain
          command: |
            apt-get install -y curl
            curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y -q --profile minimal --default-toolchain "$(cat rust-toolchain)"
      - run:
          name: Install Toolchain
          working_directory: "~"
          command: |
            apt-get install -y clang bison
            git clone https://github.com/rbenv/ruby-build.git
            PREFIX=/usr/local ./ruby-build/install.sh
            ruby-build "$(cat .ruby-version)" /usr/local
      - run:
          name: Install sccache
          command: |
            cargo install sccache
            echo 'export "RUSTC_WRAPPER"="sccache"' >> $BASH_ENV
            echo 'export "SCCACHE_CACHE_SIZE"="1G"' >> $BASH_ENV
      - run:
          name: Installed Toolchain Versions
          command: |
            rustc --version --verbose
            cargo --version --verbose
            ruby --version
            clang --version
            bison --version
      - run:
          name: ruby/spec Compliance Regression Test
          command: |
            # Suppress failures from spec suite
            ./scripts/spec-compliance.sh --artichoke || :
      - save_cache:
          name: Save sccache cache
          key: v1-sccache-cache-stable-{{ arch }}-{{ .Environment.CIRCLE_JOB }}-{{ epoch }}
          paths:
            - "~/.cache/sccache"
  linter:
    docker:
      - image: debian:buster-slim
    steps:
      - checkout
      - restore_cache:
          key: v1-node-modules-cache-{{ .Environment.CIRCLE_JOB }}-{{ checksum "yarn.lock" }}
      - restore_cache:
          name: Restore sccache cache
          key: v1-sccache-cache-stable-{{ arch }}-{{ .Environment.CIRCLE_JOB }}
      - run:
          name: Install Rust Toolchain
          command: |
            apt-get install -y curl
            curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y -q --profile minimal --default-toolchain "$(cat rust-toolchain)" --component rustfmt clippy
      - run:
          name: Install Toolchain
          working_directory: "~"
          command: |
            git clone https://github.com/rbenv/ruby-build.git
            PREFIX=/usr/local ./ruby-build/install.sh
            ruby-build "$(cat .ruby-version)" /usr/local
            gem install bundler
            curl -sSfL https://deb.nodesource.com/setup_13.x | bash -
            apt-get install -y nodejs
            curl -sSf https://dl.yarnpkg.com/debian/pubkey.gpg | apt-key add -
            echo "deb https://dl.yarnpkg.com/debian/ stable main" | tee /etc/apt/sources.list.d/yarn.list
            apt-get update
            apt-get install --no-install-recommends -y yarn
            yarn install
            curl -o- -sSfL https://storage.googleapis.com/shellcheck/shellcheck-stable.linux.x86_64.tar.xz | tar x shellcheck-stable/shellcheck
            mv shellcheck-stable/shellcheck /usr/local/bin
            chmod +x /usr/local/bin/shellcheck
            curl -o/usr/local/bin/shfmt -sSfL https://github.com/mvdan/sh/releases/download/v2.6.4/shfmt_v2.6.4_linux_amd64
            chmod +x /usr/local/bin/shfmt
      - run:
          name: Install sccache
          command: |
            cargo install sccache
            echo 'export "RUSTC_WRAPPER"="sccache"' >> $BASH_ENV
            echo 'export "SCCACHE_CACHE_SIZE"="1G"' >> $BASH_ENV
      - run:
          name: Installed Toolchain Versions
          command: |
            rustc --version --verbose
            cargo --version --verbose
            sccache --version
            rustfmt --version
            cargo clippy -- --version
            ruby --version
            node --version
            yarn --version
            yarn --silent clang-format --version
            shellcheck --version
            shfmt -version
      - run:
          name: Format Rust Sources
          command: |
            cargo fmt -- --check --color=auto
      - run:
          name: Lint Rust With Clippy
          command: |
            cargo clippy --all-targets --all-features
      - run:
          name: Check Rust Docs
          command: |
            cargo doc --no-deps --all
      - run:
          name: Format Text Sources
          command: |
            ./scripts/format-text.sh --check "css"
            ./scripts/format-text.sh --check "html"
            ./scripts/format-text.sh --check "js"
            ./scripts/format-text.sh --check "json"
            ./scripts/format-text.sh --check "yaml"
            ./scripts/format-text.sh --check "yml"
            ./scripts/format-text.sh --check "md"
      - run:
          name: Format Shell Sources
          command: |
            shfmt -f . | grep -v target/ | grep -v node_modules/ | grep -v vendor/ | xargs shfmt -i 2 -ci -s -d
      - run:
          name: Lint Shell Sources
          command: |
            shfmt -f . | grep -v target/ | grep -v node_modules/ | grep -v vendor/ | xargs shellcheck
      - run:
          name: Format C Sources
          command: |
            ./scripts/format-c.sh --check
      - run:
          name: yarn check
          command: |
            yarn check --integrity
            yarn check --verify-tree
      - run:
          name: Lint JavaScript with eslint
          command: |
            yarn run eslint --ext .html,.js .
      - rubocop:
          target: .
      - save_cache:
          name: Save sccache cache
          key: v1-sccache-cache-stable-{{ arch }}-{{ .Environment.CIRCLE_JOB }}-{{ epoch }}
          paths:
            - "~/.cache/sccache"
      - save_cache:
          key: v1-node-modules-cache-{{ .Environment.CIRCLE_JOB }}-{{ checksum "yarn.lock" }}
          paths:
            - "~/.cache/yarn"
            - "node_modules"
      - persist_to_workspace:
          root: target
          paths:
            - "doc"
  gh-pages-deploy:
    docker:
      - image: node:lts
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "ac:59:ea:b4:7f:14:dd:de:a7:50:3e:d0:35:c9:a5:a9"
      - attach_workspace:
          at: target
      - restore_cache:
          key: v1-node-modules-cache-{{ .Environment.CIRCLE_JOB }}-{{ checksum "yarn.lock" }}
      - run: yarn install
      - run:
          name: Copy doc asset overrides
          command: cp assets/* target/doc
      - run:
          name: Deploy docs to gh-pages branch
          command: |
            yarn run gh-pages \
              --user "ci-build <ci-build@hyperbo.la>" \
              --message "[skip ci] build docs" \
              --dist target/doc
      - save_cache:
          key: v1-node-modules-cache-{{ .Environment.CIRCLE_JOB }}-{{ checksum "yarn.lock" }}
          paths:
            - "~/.cache/yarn"
            - "node_modules"
workflows:
  version: 2
  build:
    jobs:
      - artichoke-x86_64-linux
      - artichoke-x86_64-windows
      - artichoke-ruby-spec
      - linter
      - gh-pages-deploy:
          requires:
            - linter
          filters:
            branches:
              only: master
