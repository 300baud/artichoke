---
name: CI
"on":
  push:
    branches:
      - trunk
  pull_request:
    branches:
      - trunk
  schedule:
    - cron: "0 0 * * TUE"
jobs:
  build:
    name: Build
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    env:
      RUSTFLAGS: -D warnings
      RUST_BACKTRACE: 1
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal

      - name: Install Ruby toolchain
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ".ruby-version"

      - name: Compile
        run: cargo build --workspace --verbose

      - name: Compile tests
        run: cargo test --workspace --no-run

      - name: Test
        run: cargo test --workspace

  build-features:
    name: Build (non-default features)
    runs-on: ubuntu-latest
    env:
      RUSTFLAGS: -D warnings
      RUST_BACKTRACE: 1
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal

      - name: Install Ruby toolchain
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ".ruby-version"

      - name: Check with locked Cargo.lock
        run: cargo check --locked

      - name: Check fuzz with locked Cargo.lock
        run: cargo check --locked
        working-directory: "fuzz"

      - name: Check spec-runner with locked Cargo.lock
        run: cargo check --locked
        working-directory: "spec-runner"

      - name: Check artichoke with no default features
        run: cargo check --verbose --no-default-features

      - name: Check artichoke with all features
        run: cargo check --verbose --all-features

      - name: Check spinoso-array with no default features
        run: cargo check --verbose --no-default-features
        working-directory: "spinoso-array"

      - name: Check spinoso-array with all features
        run: cargo check --verbose --all-features
        working-directory: "spinoso-array"

      - name: Check spinoso-env with no default features
        run: cargo check --verbose --no-default-features
        working-directory: "spinoso-env"

      - name: Check spinoso-env with all features
        run: cargo check --verbose --all-features
        working-directory: "spinoso-env"

      - name: Check spinoso-exception with no default features
        run: cargo check --verbose --no-default-features
        working-directory: "spinoso-exception"

      - name: Check spinoso-exception with all features
        run: cargo check --verbose --all-features
        working-directory: "spinoso-exception"

      - name: Check spinoso-math with no default features
        run: cargo check --verbose --no-default-features
        working-directory: "spinoso-math"

      - name: Check spinoso-math with all features
        run: cargo check --verbose --all-features
        working-directory: "spinoso-math"

      - name: Check spinoso-random with no default features
        run: cargo check --verbose --no-default-features
        working-directory: "spinoso-random"

      - name: Check spinoso-random with all features
        run: cargo check --verbose --all-features
        working-directory: "spinoso-random"

      - name: Check spinoso-random with some features
        run: |
          cargo check --verbose --no-default-features --features rand-core
          cargo check --verbose --no-default-features --features std
          cargo check --verbose --no-default-features --features rand
        working-directory: "spinoso-random"

      - name: Check spinoso-regexp with no default features
        run: cargo check --verbose --no-default-features
        working-directory: "spinoso-regexp"

      - name: Check spinoso-regexp with all features
        run: cargo check --verbose --all-features
        working-directory: "spinoso-regexp"

      - name: Check spinoso-securerandom with no default features
        run: cargo check --verbose --no-default-features
        working-directory: "spinoso-securerandom"

      - name: Check spinoso-securerandom with all features
        run: cargo check --verbose --all-features
        working-directory: "spinoso-securerandom"

      - name: Check spinoso-symbol with no default features
        run: cargo check --verbose --no-default-features
        working-directory: "spinoso-symbol"

      - name: Check spinoso-symbol with all features
        run: cargo check --verbose --all-features
        working-directory: "spinoso-symbol"

      - name: Compile spinoso-symbol with some features
        run: |
          cargo check --verbose --no-default-features --features ident-parser
          cargo check --verbose --no-default-features --features inspect
          cargo check --verbose --no-default-features --features inspect,artichoke
        working-directory: "spinoso-symbol"

      - name: Compile scolapasta-hex with no default features
        run: cargo check --verbose --no-default-features
        working-directory: "scolapasta-hex"

      - name: Compile scolapasta-hex with all features
        run: cargo check --verbose --all-features
        working-directory: "scolapasta-hex"

      - name: Compile scolapasta-hex with some features
        run: |
          cargo check --verbose --no-default-features --features alloc
          cargo check --verbose --no-default-features --features alloc,std
        working-directory: "scolapasta-hex"

      - name: Compile scolapasta-string-escape with no default features
        run: cargo check --verbose --no-default-features
        working-directory: "scolapasta-string-escape"

      - name: Compile scolapasta-string-escape with all features
        run: cargo check --verbose --all-features
        working-directory: "scolapasta-string-escape"

  rust:
    name: Lint and format Rust
    runs-on: ubuntu-latest
    env:
      RUSTFLAGS: -D warnings
      RUST_BACKTRACE: 1
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          components: rustfmt, clippy

      - name: Install Ruby toolchain
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ".ruby-version"

      - name: Check formatting
        run: cargo fmt -- --check --color=auto

      - name: Lint with Clippy
        uses: actions-rs/clippy-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: --workspace --all-features --all-targets

      - name: Check formatting (spec-runner)
        run: cargo fmt -- --check --color=auto
        working-directory: "spec-runner"

      - name: Lint with Clippy (spec-runner)
        run: cargo clippy --workspace --all-features --all-targets
        working-directory: "spec-runner"

  rust-minimal-versions:
    name: Compile with minimum dependency versions
    runs-on: ubuntu-latest
    env:
      RUSTFLAGS: -D warnings
      RUST_BACKTRACE: 1
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          components: rustfmt, clippy

      - name: Install Rust nightly toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          profile: minimal

      - name: Check artichoke with minimal versions
        run: |
          cargo +nightly generate-lockfile -Z minimal-versions
          cargo check

      - name: Check spec-runner with minimal versions
        run: |
          cargo +nightly generate-lockfile -Z minimal-versions
          cargo check
        working-directory: "spec-runner"

  rust-sanitizer:
    name: Compile and test with sanitizers
    runs-on: ubuntu-latest
    env:
      RUSTFLAGS: -D warnings
      RUST_BACKTRACE: 1
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install nightly Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          profile: minimal
          target: x86_64-unknown-linux-gnu
          override: true

      - name: Test with leak sanitizer and all features
        run: cargo test --workspace --all-features --target x86_64-unknown-linux-gnu
        env:
          RUSTFLAGS: "-Z sanitizer=leak"

      - name: Test spec-runner with leak sanitizer and all features
        run: cargo test --workspace --all-features --target x86_64-unknown-linux-gnu
        working-directory: "spec-runner"
        env:
          RUSTFLAGS: "-Z sanitizer=leak"

  ruby:
    name: Lint and format Ruby
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install Ruby toolchain
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ".ruby-version"
          bundler-cache: true

      - name: Lint and check formatting with Rubocop
        run: bundle exec rubocop --format github

  c:
    name: Lint and format C
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Lint and check formatting with clang-format
        run: npx github:artichoke/clang-format --check

  text:
    name: Lint and format text
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Lint and check formatting with prettier
        run: npx prettier --check '**/*'

      - name: Lint YAML sources with yamllint
        run: |
          sudo -H python3 -m pip install --upgrade pip setuptools wheel
          sudo -H python3 -m pip install --upgrade yamllint
          yamllint --version
          echo "Linting YAML sources with yamllint ..."
          yamllint --strict .
          echo "OK"
