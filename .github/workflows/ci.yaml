name: CI
on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
  schedule:
    - cron: "0 0 * * TUE"
jobs:
  build:
    name: Build
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    env:
      RUSTFLAGS: -D warnings
      RUST_BACKTRACE: 1
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal

      - name: Install Ruby toolchain
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ".ruby-version"

      - name: Install Bison
        run: sudo apt install bison
        if: matrix.os == 'ubuntu-latest'

      # avoid choco because it takes forever to initialize on first use
      # instead, install directly from GitHub releases
      - name: Install Bison
        run: |
          (New-Object System.Net.WebClient).DownloadFile("https://github.com/lexxmark/winflexbison/releases/download/v2.5.22/win_flex_bison-2.5.22.zip","win_flex_bison.zip");
          Expand-Archive .\win_flex_bison.zip .\win_flex_bison;
          echo "::add-path::${{ github.workspace }}/win_flex_bison"
        if: matrix.os == 'windows-latest'

      - name: Check Bison
        run: bison --version
        if: matrix.os != 'windows-latest'

      - name: Check Bison
        run: |
          win_bison.exe --version
          win_bison --version
        if: matrix.os == 'windows-latest'

      - name: Compile
        run: cargo build --workspace --verbose

      - name: Compile tests
        run: cargo test --workspace --no-run

      - name: Test
        run: cargo test --workspace

  build-features:
    name: Build (non-default features)
    runs-on: ubuntu-latest
    env:
      RUSTFLAGS: -D warnings
      RUST_BACKTRACE: 1
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal

      - name: Install Ruby toolchain
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ".ruby-version"

      - name: Install Bison
        run: sudo apt install bison

      - name: Compile artichoke with no default features
        run: cargo build --verbose --no-default-features

      - name: Compile artichoke with all features
        run: cargo build --verbose --all-features

      - name: Compile spinoso-array with no default features
        run: cargo build --verbose --no-default-features
        working-directory: "spinoso-array"

      - name: Compile spinoso-array with all features
        run: cargo build --verbose --all-features
        working-directory: "spinoso-array"

      - name: Compile spinoso-symbol with no default features
        run: cargo build --verbose --no-default-features
        working-directory: "spinoso-symbol"

      - name: Compile spinoso-symbol with all features
        run: cargo build --verbose --all-features
        working-directory: "spinoso-symbol"

      - name: Compile spinoso-symbol with some features
        run: |
          cargo build --verbose --no-default-features --features ident-parser
          cargo build --verbose --no-default-features --features inspect
          cargo build --verbose --no-default-features --features inspect,artichoke
        working-directory: "spinoso-symbol"

  rust:
    name: Lint and format Rust
    runs-on: ubuntu-latest
    env:
      RUSTFLAGS: -D warnings
      RUST_BACKTRACE: 1
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          components: rustfmt, clippy

      - name: Install Ruby toolchain
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ".ruby-version"

      - name: Install Bison
        run: sudo apt install bison

      - name: Check formatting
        run: cargo fmt -- --check --color=auto

      - name: Lint with Clippy
        uses: actions-rs/clippy-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: --workspace --all-features

  ruby:
    name: Lint and format Ruby
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install Ruby toolchain
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ".ruby-version"

      - name: Install gems
        run: bundle install

      - name: Lint and check formatting with Rubocop
        run: bundle exec rubocop

  c:
    name: Lint and format C
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Lint and check formatting with clang-format
        run: npx github:artichoke/clang-format --check

  text:
    name: Lint and format text
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Lint and check formatting with prettier
        run: npx prettier --check '**/*'
