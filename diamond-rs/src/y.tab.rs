use libc;
use c2rust_bitfields::BitfieldStruct;
extern "C" {
    pub type iv_tbl;
    pub type RClass;
    pub type symbol_name;
    /* debug info */
    pub type mrb_irep_debug_info;
    /* memory pool implementation */
    pub type mrb_pool;
    pub type vtable;
    #[no_mangle]
    fn __tolower(_: __darwin_ct_rune_t) -> __darwin_ct_rune_t;
    #[no_mangle]
    fn __error() -> *mut libc::c_int;
    #[no_mangle]
    fn strtoul(_: *const libc::c_char, _: *mut *mut libc::c_char,
               _: libc::c_int) -> libc::c_ulong;
    #[no_mangle]
    fn memcmp(_: *const libc::c_void, _: *const libc::c_void,
              _: libc::c_ulong) -> libc::c_int;
    #[no_mangle]
    fn memcpy(_: *mut libc::c_void, _: *const libc::c_void, _: libc::c_ulong)
     -> *mut libc::c_void;
    #[no_mangle]
    fn memmove(_: *mut libc::c_void, _: *const libc::c_void, _: libc::c_ulong)
     -> *mut libc::c_void;
    #[no_mangle]
    fn strcat(_: *mut libc::c_char, _: *const libc::c_char)
     -> *mut libc::c_char;
    #[no_mangle]
    fn strchr(_: *const libc::c_char, _: libc::c_int) -> *mut libc::c_char;
    #[no_mangle]
    fn strcmp(_: *const libc::c_char, _: *const libc::c_char) -> libc::c_int;
    #[no_mangle]
    fn strcpy(_: *mut libc::c_char, _: *const libc::c_char)
     -> *mut libc::c_char;
    #[no_mangle]
    fn strlen(_: *const libc::c_char) -> libc::c_ulong;
    #[no_mangle]
    fn strncat(_: *mut libc::c_char, _: *const libc::c_char, _: libc::c_ulong)
     -> *mut libc::c_char;
    #[no_mangle]
    fn strncmp(_: *const libc::c_char, _: *const libc::c_char,
               _: libc::c_ulong) -> libc::c_int;
    #[no_mangle]
    fn strncpy(_: *mut libc::c_char, _: *const libc::c_char, _: libc::c_ulong)
     -> *mut libc::c_char;
    #[no_mangle]
    fn mrb_intern(_: *mut mrb_state, _: *const libc::c_char, _: size_t)
     -> mrb_sym;
    /* *
 * Create a symbol
 *
 *     # Ruby style:
 *     :pizza # => :pizza
 *
 *     // C style:
 *     mrb_sym m_sym = mrb_intern_lit(mrb, "pizza"); //  => :pizza
 * @param [mrb_state*] mrb_state* The current mruby state.
 * @param [const char*] const char* The name of the method.
 * @return [mrb_sym] mrb_sym A symbol.
 */
    #[no_mangle]
    fn mrb_intern_cstr(_: *mut mrb_state, _: *const libc::c_char) -> mrb_sym;
    #[no_mangle]
    fn mrb_float_read(_: *const libc::c_char, _: *mut *mut libc::c_char)
     -> libc::c_double;
    #[no_mangle]
    fn mrb_pool_realloc(_: *mut mrb_pool, _: *mut libc::c_void,
                        oldlen: size_t, newlen: size_t) -> *mut libc::c_void;
    #[no_mangle]
    fn mrb_intern_static(_: *mut mrb_state, _: *const libc::c_char, _: size_t)
     -> mrb_sym;
    #[no_mangle]
    fn mrb_sym2name_len(_: *mut mrb_state, _: mrb_sym, _: *mut mrb_int)
     -> *const libc::c_char;
    #[no_mangle]
    fn mrb_malloc(_: *mut mrb_state, _: size_t) -> *mut libc::c_void;
    #[no_mangle]
    fn mrb_calloc(_: *mut mrb_state, _: size_t, _: size_t)
     -> *mut libc::c_void;
    #[no_mangle]
    fn mrb_realloc(_: *mut mrb_state, _: *mut libc::c_void, _: size_t)
     -> *mut libc::c_void;
    #[no_mangle]
    fn mrb_free(_: *mut mrb_state, _: *mut libc::c_void);
    #[no_mangle]
    fn mrb_str_new_static(mrb: *mut mrb_state, p: *const libc::c_char,
                          len: size_t) -> mrb_value;
    #[no_mangle]
    fn mrb_top_self(_: *mut mrb_state) -> mrb_value;
    #[no_mangle]
    fn mrb_top_run(_: *mut mrb_state, _: *mut RProc, _: mrb_value,
                   _: libc::c_uint) -> mrb_value;
    #[no_mangle]
    fn mrb_field_write_barrier(_: *mut mrb_state, _: *mut RBasic,
                               _: *mut RBasic);
    #[no_mangle]
    fn mrb_exc_new(mrb: *mut mrb_state, c: *mut RClass,
                   ptr: *const libc::c_char, len: size_t) -> mrb_value;
    #[no_mangle]
    fn mrb_bug(mrb: *mut mrb_state, fmt: *const libc::c_char, _: ...);
    #[no_mangle]
    fn mrb_pool_open(_: *mut mrb_state) -> *mut mrb_pool;
    #[no_mangle]
    fn mrb_pool_close(_: *mut mrb_pool);
    #[no_mangle]
    fn mrb_pool_alloc(_: *mut mrb_pool, _: size_t) -> *mut libc::c_void;
    /* *
 * Gets a exception class.
 * @param [mrb_state*] mrb The current mruby state.
 * @param [const char *] name The name of the class.
 * @return [struct RClass *] A reference to the class.
*/
    #[no_mangle]
    fn mrb_exc_get(mrb: *mut mrb_state, name: *const libc::c_char)
     -> *mut RClass;
    #[no_mangle]
    fn mrb_generate_code(_: *mut mrb_state, _: *mut mrb_parser_state)
     -> *mut RProc;
    #[no_mangle]
    fn mrb_exc_new_str(mrb: *mut mrb_state, c: *mut RClass, str: mrb_value)
     -> mrb_value;
    #[no_mangle]
    fn _setjmp(_: *mut libc::c_int) -> libc::c_int;
    #[no_mangle]
    fn _longjmp(_: *mut libc::c_int, _: libc::c_int) -> !;
    #[no_mangle]
    fn mrb_codedump_all(_: *mut mrb_state, _: *mut RProc);
}
pub type __darwin_intptr_t = libc::c_long;
pub type __darwin_ct_rune_t = libc::c_int;
pub type __darwin_size_t = libc::c_ulong;
pub type size_t = __darwin_size_t;
pub type int32_t = libc::c_int;
pub type int64_t = libc::c_longlong;
pub type intptr_t = __darwin_intptr_t;
pub type uint8_t = libc::c_uchar;
pub type uint16_t = libc::c_ushort;
pub type uint32_t = libc::c_uint;
/*
** mruby/value.h - mruby value definitions
**
** See Copyright Notice in mruby.h
*/
/* *
 * MRuby Value definition functions and macros.
 */
pub type mrb_sym = uint32_t;
pub type mrb_bool = uint8_t;
/*
** mruby/gc.h - garbage collector for mruby
**
** See Copyright Notice in mruby.h
*/
/* *
 * Uncommon memory management stuffs.
 */
#[derive ( Copy , Clone )]
#[repr(C)]
pub struct mrb_state {
    pub jmp: *mut mrb_jmpbuf,
    pub allocf: mrb_allocf,
    pub allocf_ud: *mut libc::c_void,
    pub c: *mut mrb_context,
    pub root_c: *mut mrb_context,
    pub globals: *mut iv_tbl,
    pub exc: *mut RObject,
    pub top_self: *mut RObject,
    pub object_class: *mut RClass,
    pub class_class: *mut RClass,
    pub module_class: *mut RClass,
    pub proc_class: *mut RClass,
    pub string_class: *mut RClass,
    pub array_class: *mut RClass,
    pub hash_class: *mut RClass,
    pub range_class: *mut RClass,
    pub float_class: *mut RClass,
    pub fixnum_class: *mut RClass,
    pub true_class: *mut RClass,
    pub false_class: *mut RClass,
    pub nil_class: *mut RClass,
    pub symbol_class: *mut RClass,
    pub kernel_module: *mut RClass,
    pub gc: mrb_gc,
    pub symidx: mrb_sym,
    pub symtbl: *mut symbol_name,
    pub symhash: [mrb_sym; 256],
    pub symcapa: size_t,
    pub symbuf: [libc::c_char; 8],
    pub eException_class: *mut RClass,
    pub eStandardError_class: *mut RClass,
    pub nomem_err: *mut RObject,
    pub stack_err: *mut RObject,
    pub ud: *mut libc::c_void,
    pub atexit_stack: *mut mrb_atexit_func,
    pub atexit_stack_len: uint16_t,
    pub ecall_nest: uint16_t,
}
pub type mrb_atexit_func
    =
    Option<unsafe extern "C" fn(_: *mut mrb_state) -> ()>;
#[derive ( BitfieldStruct , Clone , Copy )]
#[repr(C)]
pub struct RObject {
    #[bitfield(name = "tt", ty = "mrb_vtype", bits = "0..=7")]
    #[bitfield(name = "color", ty = "uint32_t", bits = "8..=10")]
    #[bitfield(name = "flags", ty = "uint32_t", bits = "11..=31")]
    pub tt_color_flags: [u8; 4],
    #[bitfield(padding)]
    pub _pad: [u8; 4],
    pub c: *mut RClass,
    pub gcnext: *mut RBasic,
    pub iv: *mut iv_tbl,
}
/*
** mruby/object.h - mruby object definition
**
** See Copyright Notice in mruby.h
*/
#[derive ( BitfieldStruct , Clone , Copy )]
#[repr(C)]
pub struct RBasic {
    #[bitfield(name = "tt", ty = "mrb_vtype", bits = "0..=7")]
    #[bitfield(name = "color", ty = "uint32_t", bits = "8..=10")]
    #[bitfield(name = "flags", ty = "uint32_t", bits = "11..=31")]
    pub tt_color_flags: [u8; 4],
    #[bitfield(padding)]
    pub _pad: [u8; 4],
    pub c: *mut RClass,
    pub gcnext: *mut RBasic,
}
pub type mrb_vtype = libc::c_uint;
/*  25 */
pub const MRB_TT_MAXDEFINE: mrb_vtype = 25;
/*  24 */
pub const MRB_TT_BREAK: mrb_vtype = 24;
/*  23 */
pub const MRB_TT_ISTRUCT: mrb_vtype = 23;
/*  22 */
pub const MRB_TT_FIBER: mrb_vtype = 22;
/*  21 */
pub const MRB_TT_DATA: mrb_vtype = 21;
/*  20 */
pub const MRB_TT_ENV: mrb_vtype = 20;
/*  19 */
pub const MRB_TT_FILE: mrb_vtype = 19;
/*  18 */
pub const MRB_TT_EXCEPTION: mrb_vtype = 18;
/*  17 */
pub const MRB_TT_RANGE: mrb_vtype = 17;
/*  16 */
pub const MRB_TT_STRING: mrb_vtype = 16;
/*  15 */
pub const MRB_TT_HASH: mrb_vtype = 15;
/*  14 */
pub const MRB_TT_ARRAY: mrb_vtype = 14;
/*  13 */
pub const MRB_TT_PROC: mrb_vtype = 13;
/*  12 */
pub const MRB_TT_SCLASS: mrb_vtype = 12;
/*  11 */
pub const MRB_TT_ICLASS: mrb_vtype = 11;
/*  10 */
pub const MRB_TT_MODULE: mrb_vtype = 10;
/*   9 */
pub const MRB_TT_CLASS: mrb_vtype = 9;
/*   8 */
pub const MRB_TT_OBJECT: mrb_vtype = 8;
/*   7 */
pub const MRB_TT_CPTR: mrb_vtype = 7;
/*   6 */
pub const MRB_TT_FLOAT: mrb_vtype = 6;
/*   5 */
pub const MRB_TT_UNDEF: mrb_vtype = 5;
/*   4 */
pub const MRB_TT_SYMBOL: mrb_vtype = 4;
/*   3 */
pub const MRB_TT_FIXNUM: mrb_vtype = 3;
/*   2 */
pub const MRB_TT_TRUE: mrb_vtype = 2;
/*   1 */
pub const MRB_TT_FREE: mrb_vtype = 1;
/*   0 */
pub const MRB_TT_FALSE: mrb_vtype = 0;
#[derive ( BitfieldStruct , Clone , Copy )]
#[repr(C)]
pub struct mrb_gc {
    pub heaps: *mut mrb_heap_page,
    pub sweeps: *mut mrb_heap_page,
    pub free_heaps: *mut mrb_heap_page,
    pub live: size_t,
    pub arena: *mut *mut RBasic,
    pub arena_capa: libc::c_int,
    pub arena_idx: libc::c_int,
    pub state: mrb_gc_state,
    pub current_white_part: libc::c_int,
    pub gray_list: *mut RBasic,
    pub atomic_gray_list: *mut RBasic,
    pub live_after_mark: size_t,
    pub threshold: size_t,
    pub interval_ratio: libc::c_int,
    pub step_ratio: libc::c_int,
    #[bitfield(name = "iterating", ty = "mrb_bool", bits = "0..=0")]
    #[bitfield(name = "disabled", ty = "mrb_bool", bits = "1..=1")]
    #[bitfield(name = "full", ty = "mrb_bool", bits = "2..=2")]
    #[bitfield(name = "generational", ty = "mrb_bool", bits = "3..=3")]
    #[bitfield(name = "out_of_memory", ty = "mrb_bool", bits = "4..=4")]
    pub iterating_disabled_full_generational_out_of_memory: [u8; 1],
    #[bitfield(padding)]
    pub _pad: [u8; 7],
    pub majorgc_old_threshold: size_t,
}
pub type mrb_gc_state = libc::c_uint;
pub const MRB_GC_STATE_SWEEP: mrb_gc_state = 2;
pub const MRB_GC_STATE_MARK: mrb_gc_state = 1;
pub const MRB_GC_STATE_ROOT: mrb_gc_state = 0;
/* Disable MSVC warning "C4200: nonstandard extension used: zero-sized array
 * in struct/union" when in C++ mode */
#[derive ( BitfieldStruct , Clone , Copy )]
#[repr(C)]
pub struct mrb_heap_page {
    pub freelist: *mut RBasic,
    pub prev: *mut mrb_heap_page,
    pub next: *mut mrb_heap_page,
    pub free_next: *mut mrb_heap_page,
    pub free_prev: *mut mrb_heap_page,
    #[bitfield(name = "old", ty = "mrb_bool", bits = "0..=0")]
    pub old: [u8; 1],
    #[bitfield(padding)]
    pub _pad: [u8; 7],
    pub objects: [*mut libc::c_void; 0],
}
#[derive ( Copy , Clone )]
#[repr(C)]
pub struct mrb_context {
    pub prev: *mut mrb_context,
    pub stack: *mut mrb_value,
    pub stbase: *mut mrb_value,
    pub stend: *mut mrb_value,
    pub ci: *mut mrb_callinfo,
    pub cibase: *mut mrb_callinfo,
    pub ciend: *mut mrb_callinfo,
    pub rescue: *mut uint16_t,
    pub rsize: uint16_t,
    pub ensure: *mut *mut RProc,
    pub esize: uint16_t,
    pub eidx: uint16_t,
    pub status: mrb_fiber_state,
    pub vmexec: mrb_bool,
    pub fib: *mut RFiber,
}
#[derive ( BitfieldStruct , Clone , Copy )]
#[repr(C)]
pub struct RFiber {
    #[bitfield(name = "tt", ty = "mrb_vtype", bits = "0..=7")]
    #[bitfield(name = "color", ty = "uint32_t", bits = "8..=10")]
    #[bitfield(name = "flags", ty = "uint32_t", bits = "11..=31")]
    pub tt_color_flags: [u8; 4],
    #[bitfield(padding)]
    pub _pad: [u8; 4],
    pub c: *mut RClass,
    pub gcnext: *mut RBasic,
    pub cxt: *mut mrb_context,
}
pub type mrb_fiber_state = libc::c_uint;
pub const MRB_FIBER_TERMINATED: mrb_fiber_state = 5;
pub const MRB_FIBER_TRANSFERRED: mrb_fiber_state = 4;
pub const MRB_FIBER_SUSPENDED: mrb_fiber_state = 3;
pub const MRB_FIBER_RESUMED: mrb_fiber_state = 2;
pub const MRB_FIBER_RUNNING: mrb_fiber_state = 1;
pub const MRB_FIBER_CREATED: mrb_fiber_state = 0;
#[derive ( BitfieldStruct , Clone , Copy )]
#[repr(C)]
pub struct RProc {
    #[bitfield(name = "tt", ty = "mrb_vtype", bits = "0..=7")]
    #[bitfield(name = "color", ty = "uint32_t", bits = "8..=10")]
    #[bitfield(name = "flags", ty = "uint32_t", bits = "11..=31")]
    pub tt_color_flags: [u8; 4],
    #[bitfield(padding)]
    pub _pad: [u8; 4],
    pub c: *mut RClass,
    pub gcnext: *mut RBasic,
    pub body: C2RustUnnamed_1,
    pub upper: *mut RProc,
    pub e: C2RustUnnamed,
}
#[derive ( Copy , Clone )]
#[repr ( C )]
pub union C2RustUnnamed {
    pub target_class: *mut RClass,
    pub env: *mut REnv,
}
/*
** mruby/proc.h - Proc class
**
** See Copyright Notice in mruby.h
*/
/* *
 * Proc class
 */
#[derive ( BitfieldStruct , Clone , Copy )]
#[repr(C)]
pub struct REnv {
    #[bitfield(name = "tt", ty = "mrb_vtype", bits = "0..=7")]
    #[bitfield(name = "color", ty = "uint32_t", bits = "8..=10")]
    #[bitfield(name = "flags", ty = "uint32_t", bits = "11..=31")]
    pub tt_color_flags: [u8; 4],
    #[bitfield(padding)]
    pub _pad: [u8; 4],
    pub c: *mut RClass,
    pub gcnext: *mut RBasic,
    pub stack: *mut mrb_value,
    pub cxt: *mut mrb_context,
    pub mid: mrb_sym,
    #[bitfield(padding)]
    pub _pad2: [u8; 4],
}
/*
** mruby/boxing_no.h - unboxed mrb_value definition
**
** See Copyright Notice in mruby.h
*/
#[derive ( Copy , Clone )]
#[repr(C)]
pub struct mrb_value {
    pub value: C2RustUnnamed_0,
    pub tt: mrb_vtype,
}
#[derive ( Copy , Clone )]
#[repr ( C )]
pub union C2RustUnnamed_0 {
    pub f: mrb_float,
    pub p: *mut libc::c_void,
    pub i: mrb_int,
    pub sym: mrb_sym,
}
pub type mrb_int = int64_t;
pub type mrb_float = libc::c_double;
#[derive ( Copy , Clone )]
#[repr ( C )]
pub union C2RustUnnamed_1 {
    pub irep: *mut mrb_irep,
    pub func: mrb_func_t,
}
/* default method cache size: 128 */
/* cache size needs to be power of 2 */
pub type mrb_func_t
    =
    Option<unsafe extern "C" fn(_: *mut mrb_state, _: mrb_value)
               -> mrb_value>;
/* Program data array struct */
#[derive ( Copy , Clone )]
#[repr(C)]
pub struct mrb_irep {
    pub nlocals: uint16_t,
    pub nregs: uint16_t,
    pub flags: uint8_t,
    pub iseq: *mut mrb_code,
    pub pool: *mut mrb_value,
    pub syms: *mut mrb_sym,
    pub reps: *mut *mut mrb_irep,
    pub lv: *mut mrb_locals,
    pub debug_info: *mut mrb_irep_debug_info,
    pub ilen: uint16_t,
    pub plen: uint16_t,
    pub slen: uint16_t,
    pub rlen: uint16_t,
    pub refcnt: uint32_t,
}
#[derive ( Copy , Clone )]
#[repr(C)]
pub struct mrb_locals {
    pub name: mrb_sym,
    pub r: uint16_t,
}
/*
** mruby - An embeddable Ruby implementation
**
** Copyright (c) mruby developers 2010-2019
**
** Permission is hereby granted, free of charge, to any person obtaining
** a copy of this software and associated documentation files (the
** "Software"), to deal in the Software without restriction, including
** without limitation the rights to use, copy, modify, merge, publish,
** distribute, sublicense, and/or sell copies of the Software, and to
** permit persons to whom the Software is furnished to do so, subject to
** the following conditions:
**
** The above copyright notice and this permission notice shall be
** included in all copies or substantial portions of the Software.
**
** THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
** EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
** MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
** IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
** CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
** TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
** SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
**
** [ MIT license: http://www.opensource.org/licenses/mit-license.php ]
*/
/* *
 * MRuby C API entry point
 */
pub type mrb_code = uint8_t;
#[derive ( Copy , Clone )]
#[repr(C)]
pub struct mrb_callinfo {
    pub mid: mrb_sym,
    pub proc_0: *mut RProc,
    pub stackent: *mut mrb_value,
    pub ridx: uint16_t,
    pub epos: uint16_t,
    pub env: *mut REnv,
    pub pc: *mut mrb_code,
    pub err: *mut mrb_code,
    pub argc: libc::c_int,
    pub acc: libc::c_int,
    pub target_class: *mut RClass,
}
/* *
 * Function pointer type of custom allocator used in @see mrb_open_allocf.
 *
 * The function pointing it must behave similarly as realloc except:
 * - If ptr is NULL it must allocate new space.
 * - If s is NULL, ptr must be freed.
 *
 * See @see mrb_default_allocf for the default implementation.
 */
pub type mrb_allocf
    =
    Option<unsafe extern "C" fn(_: *mut mrb_state, _: *mut libc::c_void,
                                _: size_t, _: *mut libc::c_void)
               -> *mut libc::c_void>;
/*
** mruby/compile.h - mruby parser
**
** See Copyright Notice in mruby.h
*/
/* *
 * MRuby Compiler
 */
#[derive ( Copy , Clone )]
#[repr(C)]
pub struct mrb_jmpbuf {
    pub impl_0: jmp_buf,
}
pub type jmp_buf = [libc::c_int; 37];
/* parser structure */
#[derive ( BitfieldStruct , Clone , Copy )]
#[repr(C)]
pub struct mrb_parser_state {
    pub mrb: *mut mrb_state,
    pub pool: *mut mrb_pool,
    pub cells: *mut mrb_ast_node,
    pub s: *const libc::c_char,
    pub send: *const libc::c_char,
    pub cxt: *mut mrbc_context,
    pub filename_sym: mrb_sym,
    pub lineno: uint16_t,
    #[bitfield(padding)]
    pub _pad: [u8; 2],
    pub column: libc::c_int,
    pub lstate: mrb_lex_state_enum,
    pub lex_strterm: *mut mrb_ast_node,
    pub cond_stack: libc::c_uint,
    pub cmdarg_stack: libc::c_uint,
    pub paren_nest: libc::c_int,
    pub lpar_beg: libc::c_int,
    pub in_def: libc::c_int,
    pub in_single: libc::c_int,
    #[bitfield(name = "cmd_start", ty = "mrb_bool", bits = "0..=0")]
    pub cmd_start: [u8; 1],
    #[bitfield(padding)]
    pub _pad2: [u8; 7],
    pub locals: *mut mrb_ast_node,
    pub pb: *mut mrb_ast_node,
    pub tokbuf: *mut libc::c_char,
    pub buf: [libc::c_char; 256],
    pub tidx: libc::c_int,
    pub tsiz: libc::c_int,
    pub all_heredocs: *mut mrb_ast_node,
    pub heredocs_from_nextline: *mut mrb_ast_node,
    pub parsing_heredoc: *mut mrb_ast_node,
    pub lex_strterm_before_heredoc: *mut mrb_ast_node,
    pub ylval: *mut libc::c_void,
    pub nerr: size_t,
    pub nwarn: size_t,
    pub tree: *mut mrb_ast_node,
    #[bitfield(name = "no_optimize", ty = "mrb_bool", bits = "0..=0")]
    #[bitfield(name = "on_eval", ty = "mrb_bool", bits = "1..=1")]
    #[bitfield(name = "capture_errors", ty = "mrb_bool", bits = "2..=2")]
    pub no_optimize_on_eval_capture_errors: [u8; 1],
    #[bitfield(padding)]
    pub _pad3: [u8; 7],
    pub error_buffer: [mrb_parser_message; 10],
    pub warn_buffer: [mrb_parser_message; 10],
    pub filename_table: *mut mrb_sym,
    pub filename_table_length: uint16_t,
    pub current_filename_index: uint16_t,
    #[bitfield(padding)]
    pub _pad4: [u8; 4],
    pub jmp: *mut mrb_jmpbuf,
}
/* saved error message */
#[derive ( Copy , Clone )]
#[repr(C)]
pub struct mrb_parser_message {
    pub lineno: uint16_t,
    pub column: libc::c_int,
    pub message: *mut libc::c_char,
}
/* AST node structure */
#[derive ( Copy , Clone )]
#[repr(C)]
pub struct mrb_ast_node {
    pub car: *mut mrb_ast_node,
    pub cdr: *mut mrb_ast_node,
    pub lineno: uint16_t,
    pub filename_index: uint16_t,
}
/* lexer states */
pub type mrb_lex_state_enum = libc::c_uint;
pub const EXPR_MAX_STATE: mrb_lex_state_enum = 11;
/* alike EXPR_BEG but label is disallowed. */
pub const EXPR_VALUE: mrb_lex_state_enum = 10;
/* immediate after 'class', no here document. */
pub const EXPR_CLASS: mrb_lex_state_enum = 9;
/* right after '.' or '::', no reserved words. */
pub const EXPR_DOT: mrb_lex_state_enum = 8;
/* ignore newline, no reserved words. */
pub const EXPR_FNAME: mrb_lex_state_enum = 7;
/* newline significant, +/- is an operator. */
pub const EXPR_MID: mrb_lex_state_enum = 6;
/* newline significant, +/- is an operator. */
pub const EXPR_CMDARG: mrb_lex_state_enum = 5;
/* newline significant, +/- is an operator. */
pub const EXPR_ARG: mrb_lex_state_enum = 4;
/* ditto, and unbound braces. */
pub const EXPR_ENDFN: mrb_lex_state_enum = 3;
/* ditto, and unbound braces. */
pub const EXPR_ENDARG: mrb_lex_state_enum = 2;
/* newline significant, +/- is an operator. */
pub const EXPR_END: mrb_lex_state_enum = 1;
/* ignore newline, +/- is a sign. */
pub const EXPR_BEG: mrb_lex_state_enum = 0;
/* load context */
#[derive ( BitfieldStruct , Clone , Copy )]
#[repr(C)]
pub struct mrbc_context {
    pub syms: *mut mrb_sym,
    pub slen: libc::c_int,
    #[bitfield(padding)]
    pub _pad: [u8; 4],
    pub filename: *mut libc::c_char,
    pub lineno: uint16_t,
    #[bitfield(padding)]
    pub _pad2: [u8; 6],
    pub partial_hook: Option<unsafe extern "C" fn(_: *mut mrb_parser_state)
                                 -> libc::c_int>,
    pub partial_data: *mut libc::c_void,
    pub target_class: *mut RClass,
    #[bitfield(name = "capture_errors", ty = "mrb_bool", bits = "0..=0")]
    #[bitfield(name = "dump_result", ty = "mrb_bool", bits = "1..=1")]
    #[bitfield(name = "no_exec", ty = "mrb_bool", bits = "2..=2")]
    #[bitfield(name = "keep_lv", ty = "mrb_bool", bits = "3..=3")]
    #[bitfield(name = "no_optimize", ty = "mrb_bool", bits = "4..=4")]
    #[bitfield(name = "on_eval", ty = "mrb_bool", bits = "5..=5")]
    pub capture_errors_dump_result_no_exec_keep_lv_no_optimize_on_eval: [u8; 1],
    #[bitfield(padding)]
    pub _pad3: [u8; 7],
    pub parser_nerr: size_t,
}
pub type mrb_string_type = libc::c_uint;
pub const str_xquote: mrb_string_type = 131;
pub const str_heredoc: mrb_string_type = 65;
pub const str_dsymbols: mrb_string_type = 51;
pub const str_ssymbols: mrb_string_type = 49;
pub const str_ssym: mrb_string_type = 17;
pub const str_dword: mrb_string_type = 43;
pub const str_sword: mrb_string_type = 41;
pub const str_regexp: mrb_string_type = 7;
pub const str_dquote: mrb_string_type = 3;
pub const str_squote: mrb_string_type = 1;
pub const str_not_parsing: mrb_string_type = 0;
/* heredoc structure */
#[derive ( BitfieldStruct , Clone , Copy )]
#[repr(C)]
pub struct mrb_parser_heredoc_info {
    #[bitfield(name = "allow_indent", ty = "mrb_bool", bits = "0..=0")]
    #[bitfield(name = "line_head", ty = "mrb_bool", bits = "1..=1")]
    pub allow_indent_line_head: [u8; 1],
    #[bitfield(padding)]
    pub _pad: [u8; 3],
    pub type_0: mrb_string_type,
    pub term: *const libc::c_char,
    pub term_len: libc::c_int,
    #[bitfield(padding)]
    pub _pad2: [u8; 4],
    pub doc: *mut mrb_ast_node,
}
pub type parser_state = mrb_parser_state;
/* A Bison parser, made by GNU Bison 2.3.  */
/* Skeleton implementation for Bison's Yacc-like parsers in C

   Copyright (C) 1984, 1989, 1990, 2000, 2001, 2002, 2003, 2004, 2005, 2006
   Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 51 Franklin Street, Fifth Floor,
   Boston, MA 02110-1301, USA.  */
/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.

   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */
pub type node = mrb_ast_node;
pub type parser_heredoc_info = mrb_parser_heredoc_info;
pub const NODE_SCOPE: node_type = 1;
pub const NODE_NIL: node_type = 78;
pub type yytype_int16 = libc::c_short;
/* Line 193 of yacc.c.  */
/* Enabling the token table.  */
#[derive ( Copy , Clone )]
#[repr ( C )]
pub union YYSTYPE {
    pub nd: *mut node,
    pub id: mrb_sym,
    pub num: libc::c_int,
    pub stack: stack_type,
    pub vars: *const vtable,
}
pub type stack_type = libc::c_uint;
pub type yytype_uint16 = libc::c_ushort;
pub type yytype_uint8 = libc::c_uchar;
pub const YYERROR_VERBOSE_ARGS_MAXIMUM: C2RustUnnamed_2 = 5;
pub type C2RustUnnamed_2 = libc::c_uint;
pub const NODE_KW_REST_ARGS: node_type = 61;
pub const NODE_BEGIN: node_type = 14;
pub const NODE_OR: node_type = 18;
pub const NODE_AND: node_type = 17;
pub const NODE_RETRY: node_type = 13;
pub const NODE_REDO: node_type = 12;
pub const NODE_NEXT: node_type = 11;
pub const NODE_RETURN: node_type = 35;
pub const NODE_BREAK: node_type = 10;
pub const NODE_SYM: node_type = 50;
pub const NODE_DSYM: node_type = 83;
pub const NODE_DSTR: node_type = 52;
pub const NODE_HEREDOC: node_type = 84;
pub const NODE_ARRAY: node_type = 31;
pub const NODE_FLOAT: node_type = 47;
pub const NODE_MATCH: node_type = 45;
pub const NODE_DREGX: node_type = 56;
pub const NODE_DXSTR: node_type = 54;
pub const NODE_XSTR: node_type = 53;
pub const NODE_STR: node_type = 51;
/*
** node.h - nodes of abstract syntax tree
**
** See Copyright Notice in mruby.h
*/
pub type node_type = libc::c_uint;
pub const NODE_LAST: node_type = 88;
pub const NODE_SYMBOLS: node_type = 87;
pub const NODE_WORDS: node_type = 86;
pub const NODE_LITERAL_DELIM: node_type = 85;
pub const NODE_POSTEXE: node_type = 82;
pub const NODE_DEFINED: node_type = 81;
pub const NODE_FALSE: node_type = 80;
pub const NODE_TRUE: node_type = 79;
pub const NODE_SELF: node_type = 77;
pub const NODE_DOT3: node_type = 76;
pub const NODE_DOT2: node_type = 75;
pub const NODE_COLON3: node_type = 74;
pub const NODE_COLON2: node_type = 73;
pub const NODE_SCLASS: node_type = 72;
pub const NODE_MODULE: node_type = 71;
pub const NODE_CLASS: node_type = 70;
pub const NODE_UNDEF: node_type = 69;
pub const NODE_ALIAS: node_type = 68;
pub const NODE_SDEF: node_type = 67;
pub const NODE_DEF: node_type = 66;
pub const NODE_BLOCK_ARG: node_type = 65;
pub const NODE_SVALUE: node_type = 64;
pub const NODE_TO_ARY: node_type = 63;
pub const NODE_SPLAT: node_type = 62;
pub const NODE_KW_ARG: node_type = 60;
pub const NODE_ARGS_TAIL: node_type = 59;
pub const NODE_ARG: node_type = 58;
pub const NODE_DREGX_ONCE: node_type = 57;
pub const NODE_REGX: node_type = 55;
pub const NODE_LAMBDA: node_type = 49;
pub const NODE_NEGATE: node_type = 48;
pub const NODE_INT: node_type = 46;
pub const NODE_BACK_REF: node_type = 44;
pub const NODE_NTH_REF: node_type = 43;
pub const NODE_CVAR: node_type = 42;
pub const NODE_CONST: node_type = 41;
pub const NODE_IVAR: node_type = 40;
pub const NODE_GVAR: node_type = 39;
pub const NODE_DVAR: node_type = 38;
pub const NODE_LVAR: node_type = 37;
pub const NODE_YIELD: node_type = 36;
pub const NODE_KW_HASH: node_type = 34;
pub const NODE_HASH: node_type = 33;
pub const NODE_ZARRAY: node_type = 32;
pub const NODE_ZSUPER: node_type = 30;
pub const NODE_SUPER: node_type = 29;
pub const NODE_FCALL: node_type = 28;
pub const NODE_SCALL: node_type = 27;
pub const NODE_CALL: node_type = 26;
pub const NODE_OP_ASGN: node_type = 25;
pub const NODE_CVDECL: node_type = 24;
pub const NODE_CVASGN: node_type = 23;
pub const NODE_CDECL: node_type = 22;
pub const NODE_ASGN: node_type = 21;
pub const NODE_MASGN: node_type = 20;
pub const NODE_NOT: node_type = 19;
pub const NODE_ENSURE: node_type = 16;
pub const NODE_RESCUE: node_type = 15;
pub const NODE_FOR: node_type = 9;
pub const NODE_ITER: node_type = 8;
pub const NODE_UNTIL: node_type = 7;
pub const NODE_WHILE: node_type = 6;
pub const NODE_WHEN: node_type = 5;
pub const NODE_CASE: node_type = 4;
pub const NODE_IF: node_type = 3;
pub const NODE_BLOCK: node_type = 2;
pub const NODE_METHOD: node_type = 0;
pub type string_type = mrb_string_type;
/* ANSI-C code produced by gperf version 3.1 */
/* Command-line: gperf -L ANSI-C -C -p -j1 -i 1 -g -o -t -N mrb_reserved_word -k'1,3,$' /home/matz/work/mruby/mrbgems/mruby-compiler/core/keywords  */
#[derive ( Copy , Clone )]
#[repr(C)]
pub struct kwtable {
    pub name: *const libc::c_char,
    pub id: [libc::c_int; 2],
    pub state: mrb_lex_state_enum,
}
#[derive ( Copy , Clone )]
#[repr ( C )]
pub union yyalloc {
    pub yyss: yytype_int16,
    pub yyvs: YYSTYPE,
}
#[no_mangle]
#[inline]
#[linkage = "external"]
pub unsafe extern "C" fn tolower(mut _c: libc::c_int) -> libc::c_int {
    return __tolower(_c);
}
#[inline]
unsafe extern "C" fn mrb_obj_value(mut p: *mut libc::c_void) -> mrb_value {
    let mut v: mrb_value =
        mrb_value{value: C2RustUnnamed_0{f: 0.,}, tt: MRB_TT_FALSE,};
    v.tt = (*(p as *mut RBasic as *mut RObject)).tt();
    v.value.p = p as *mut RBasic as *mut libc::c_void;
    return v;
}
/*
 * Get a nil mrb_value object.
 *
 * @return
 *      nil mrb_value object reference.
 */
#[inline]
unsafe extern "C" fn mrb_nil_value() -> mrb_value {
    let mut v: mrb_value =
        mrb_value{value: C2RustUnnamed_0{f: 0.,}, tt: MRB_TT_FALSE,};
    v.tt = MRB_TT_FALSE;
    v.value.i = 0i32 as mrb_int;
    return v;
}
#[inline]
unsafe extern "C" fn mrb_undef_value() -> mrb_value {
    let mut v: mrb_value =
        mrb_value{value: C2RustUnnamed_0{f: 0.,}, tt: MRB_TT_FALSE,};
    v.tt = MRB_TT_UNDEF;
    v.value.i = 0i32 as mrb_int;
    return v;
}
#[inline]
unsafe extern "C" fn intern_cstr_gen(mut p: *mut parser_state,
                                     mut s: *const libc::c_char) -> mrb_sym {
    return mrb_intern_cstr((*p).mrb, s);
}
#[inline]
unsafe extern "C" fn intern_gen(mut p: *mut parser_state,
                                mut s: *const libc::c_char, mut len: size_t)
 -> mrb_sym {
    return mrb_intern((*p).mrb, s, len);
}
#[inline]
unsafe extern "C" fn intern_gen_c(mut p: *mut parser_state, c: libc::c_char)
 -> mrb_sym {
    return mrb_intern((*p).mrb, &c, 1i32 as size_t);
}
unsafe extern "C" fn cons_free_gen(mut p: *mut parser_state,
                                   mut cons: *mut node) {
    (*cons).cdr = (*p).cells;
    (*p).cells = cons;
}
unsafe extern "C" fn parser_palloc(mut p: *mut parser_state, mut size: size_t)
 -> *mut libc::c_void {
    let mut m: *mut libc::c_void = mrb_pool_alloc((*p).pool, size);
    if m.is_null() { _longjmp((*(*p).jmp).impl_0.as_mut_ptr(), 1i32); }
    return m;
}
unsafe extern "C" fn cons_gen(mut p: *mut parser_state, mut car: *mut node,
                              mut cdr: *mut node) -> *mut node {
    let mut c: *mut node = 0 as *mut node;
    if !(*p).cells.is_null() {
        c = (*p).cells;
        (*p).cells = (*(*p).cells).cdr
    } else {
        c =
            parser_palloc(p,
                          ::std::mem::size_of::<mrb_ast_node>() as
                              libc::c_ulong) as *mut node
    }
    (*c).car = car;
    (*c).cdr = cdr;
    (*c).lineno = (*p).lineno;
    (*c).filename_index = (*p).current_filename_index;
    if (*p).lineno as libc::c_int == 0i32 &&
           (*p).current_filename_index as libc::c_int > 0i32 {
        (*c).filename_index = (*c).filename_index.wrapping_sub(1)
    }
    return c;
}
unsafe extern "C" fn list1_gen(mut p: *mut parser_state, mut a: *mut node)
 -> *mut node {
    return cons_gen(p, a, 0 as *mut node);
}
unsafe extern "C" fn list2_gen(mut p: *mut parser_state, mut a: *mut node,
                               mut b: *mut node) -> *mut node {
    return cons_gen(p, a, cons_gen(p, b, 0 as *mut node));
}
unsafe extern "C" fn list3_gen(mut p: *mut parser_state, mut a: *mut node,
                               mut b: *mut node, mut c: *mut node)
 -> *mut node {
    return cons_gen(p, a, cons_gen(p, b, cons_gen(p, c, 0 as *mut node)));
}
unsafe extern "C" fn list4_gen(mut p: *mut parser_state, mut a: *mut node,
                               mut b: *mut node, mut c: *mut node,
                               mut d: *mut node) -> *mut node {
    return cons_gen(p, a,
                    cons_gen(p, b,
                             cons_gen(p, c, cons_gen(p, d, 0 as *mut node))));
}
unsafe extern "C" fn list5_gen(mut p: *mut parser_state, mut a: *mut node,
                               mut b: *mut node, mut c: *mut node,
                               mut d: *mut node, mut e: *mut node)
 -> *mut node {
    return cons_gen(p, a,
                    cons_gen(p, b,
                             cons_gen(p, c,
                                      cons_gen(p, d,
                                               cons_gen(p, e,
                                                        0 as *mut node)))));
}
unsafe extern "C" fn list6_gen(mut p: *mut parser_state, mut a: *mut node,
                               mut b: *mut node, mut c: *mut node,
                               mut d: *mut node, mut e: *mut node,
                               mut f: *mut node) -> *mut node {
    return cons_gen(p, a,
                    cons_gen(p, b,
                             cons_gen(p, c,
                                      cons_gen(p, d,
                                               cons_gen(p, e,
                                                        cons_gen(p, f,
                                                                 0 as
                                                                     *mut node))))));
}
unsafe extern "C" fn append_gen(mut p: *mut parser_state, mut a: *mut node,
                                mut b: *mut node) -> *mut node {
    let mut c: *mut node = a;
    if a.is_null() { return b }
    while !(*c).cdr.is_null() { c = (*c).cdr }
    if !b.is_null() { (*c).cdr = b }
    return a;
}
unsafe extern "C" fn parser_strndup(mut p: *mut parser_state,
                                    mut s: *const libc::c_char,
                                    mut len: size_t) -> *mut libc::c_char {
    let mut b: *mut libc::c_char =
        parser_palloc(p, len.wrapping_add(1i32 as libc::c_ulong)) as
            *mut libc::c_char;
    memcpy(b as *mut libc::c_void, s as *const libc::c_void, len);
    *b.offset(len as isize) = '\u{0}' as i32 as libc::c_char;
    return b;
}
unsafe extern "C" fn parser_strdup(mut p: *mut parser_state,
                                   mut s: *const libc::c_char)
 -> *mut libc::c_char {
    return parser_strndup(p, s, strlen(s));
}
unsafe extern "C" fn dump_int(mut i: uint16_t, mut s: *mut libc::c_char) {
    let mut p: *mut libc::c_char = s;
    let mut t: *mut libc::c_char = s;
    while i as libc::c_int > 0i32 {
        let fresh0 = p;
        p = p.offset(1);
        *fresh0 = (i as libc::c_int % 10i32 + '0' as i32) as libc::c_char;
        i = (i as libc::c_int / 10i32) as uint16_t
    }
    if p == s {
        let fresh1 = p;
        p = p.offset(1);
        *fresh1 = '0' as i32 as libc::c_char
    }
    *p = 0i32 as libc::c_char;
    /* point the last char */
    p = p.offset(-1isize);
    while t < p {
        let mut c: libc::c_char = *t;
        let fresh2 = t;
        t = t.offset(1);
        *fresh2 = *p;
        let fresh3 = p;
        p = p.offset(-1);
        *fresh3 = c
    };
}
unsafe extern "C" fn local_switch(mut p: *mut parser_state) -> *mut node {
    let mut prev: *mut node = (*p).locals;
    (*p).locals = cons_gen(p, 0 as *mut node, 0 as *mut node);
    return prev;
}
unsafe extern "C" fn local_resume(mut p: *mut parser_state,
                                  mut prev: *mut node) {
    (*p).locals = prev;
}
unsafe extern "C" fn local_nest(mut p: *mut parser_state) {
    (*p).locals = cons_gen(p, 0 as *mut node, (*p).locals);
}
unsafe extern "C" fn local_unnest(mut p: *mut parser_state) {
    if !(*p).locals.is_null() { (*p).locals = (*(*p).locals).cdr };
}
unsafe extern "C" fn local_var_p(mut p: *mut parser_state, mut sym: mrb_sym)
 -> mrb_bool {
    let mut l: *mut node = (*p).locals;
    while !l.is_null() {
        let mut n: *mut node = (*l).car;
        while !n.is_null() {
            if (*n).car as intptr_t as mrb_sym == sym {
                return 1i32 as mrb_bool
            }
            n = (*n).cdr
        }
        l = (*l).cdr
    }
    return 0i32 as mrb_bool;
}
unsafe extern "C" fn local_add_f(mut p: *mut parser_state, mut sym: mrb_sym) {
    if !(*p).locals.is_null() {
        (*(*p).locals).car =
            append_gen(p, (*(*p).locals).car,
                       list1_gen(p, sym as intptr_t as *mut node))
    };
}
/* Copy the first part of user declarations.  */
unsafe extern "C" fn local_add(mut p: *mut parser_state, mut sym: mrb_sym) {
    if 0 == local_var_p(p, sym) { local_add_f(p, sym); };
}
unsafe extern "C" fn local_add_blk(mut p: *mut parser_state,
                                   mut blk: mrb_sym) {
    /* allocate register for block */
    local_add_f(p,
                if 0 != blk {
                    blk
                } else {
                    mrb_intern_static((*p).mrb,
                                      b"&\x00" as *const u8 as
                                          *const libc::c_char,
                                      (::std::mem::size_of::<[libc::c_char; 2]>()
                                           as
                                           libc::c_ulong).wrapping_sub(1i32 as
                                                                           libc::c_ulong))
                });
}
unsafe extern "C" fn local_add_kw(mut p: *mut parser_state,
                                  mut kwd: mrb_sym) {
    /* allocate register for keywords hash */
    local_add_f(p,
                if 0 != kwd {
                    kwd
                } else {
                    mrb_intern_static((*p).mrb,
                                      b"**\x00" as *const u8 as
                                          *const libc::c_char,
                                      (::std::mem::size_of::<[libc::c_char; 3]>()
                                           as
                                           libc::c_ulong).wrapping_sub(1i32 as
                                                                           libc::c_ulong))
                });
}
unsafe extern "C" fn locals_node(mut p: *mut parser_state) -> *mut node {
    return if !(*p).locals.is_null() {
               (*(*p).locals).car
           } else { 0 as *mut mrb_ast_node };
}
/* (:scope (vars..) (prog...)) */
unsafe extern "C" fn new_scope(mut p: *mut parser_state, mut body: *mut node)
 -> *mut node {
    return cons_gen(p, NODE_SCOPE as libc::c_int as *mut node,
                    cons_gen(p, locals_node(p), body));
}
/* (:begin prog...) */
unsafe extern "C" fn new_begin(mut p: *mut parser_state, mut body: *mut node)
 -> *mut node {
    if !body.is_null() {
        return list2_gen(p, NODE_BEGIN as libc::c_int as *mut node, body)
    }
    return cons_gen(p, NODE_BEGIN as libc::c_int as *mut node,
                    0 as *mut node);
}
/* (:rescue body rescue else) */
unsafe extern "C" fn new_rescue(mut p: *mut parser_state, mut body: *mut node,
                                mut resq: *mut node, mut els: *mut node)
 -> *mut node {
    return list4_gen(p, NODE_RESCUE as libc::c_int as *mut node, body, resq,
                     els);
}
unsafe extern "C" fn new_mod_rescue(mut p: *mut parser_state,
                                    mut body: *mut node, mut resq: *mut node)
 -> *mut node {
    return new_rescue(p, body,
                      list1_gen(p,
                                list3_gen(p, 0 as *mut node, 0 as *mut node,
                                          resq)), 0 as *mut node);
}
/* (:ensure body ensure) */
unsafe extern "C" fn new_ensure(mut p: *mut parser_state, mut a: *mut node,
                                mut b: *mut node) -> *mut node {
    return cons_gen(p, NODE_ENSURE as libc::c_int as *mut node,
                    cons_gen(p, a, cons_gen(p, 0 as *mut node, b)));
}
/* (:nil) */
unsafe extern "C" fn new_nil(mut p: *mut parser_state) -> *mut node {
    return list1_gen(p, NODE_NIL as libc::c_int as *mut node);
}
/* (:true) */
unsafe extern "C" fn new_true(mut p: *mut parser_state) -> *mut node {
    return list1_gen(p, NODE_TRUE as libc::c_int as *mut node);
}
/* (:false) */
unsafe extern "C" fn new_false(mut p: *mut parser_state) -> *mut node {
    return list1_gen(p, NODE_FALSE as libc::c_int as *mut node);
}
/* (:alias new old) */
unsafe extern "C" fn new_alias(mut p: *mut parser_state, mut a: mrb_sym,
                               mut b: mrb_sym) -> *mut node {
    return cons_gen(p, NODE_ALIAS as libc::c_int as *mut node,
                    cons_gen(p, a as intptr_t as *mut node,
                             b as intptr_t as *mut node));
}
/* (:if cond then else) */
unsafe extern "C" fn new_if(mut p: *mut parser_state, mut a: *mut node,
                            mut b: *mut node, mut c: *mut node) -> *mut node {
    void_expr_error(p, a);
    return list4_gen(p, NODE_IF as libc::c_int as *mut node, a, b, c);
}
/* (:unless cond then else) */
unsafe extern "C" fn new_unless(mut p: *mut parser_state, mut a: *mut node,
                                mut b: *mut node, mut c: *mut node)
 -> *mut node {
    void_expr_error(p, a);
    return list4_gen(p, NODE_IF as libc::c_int as *mut node, a, c, b);
}
/* (:while cond body) */
unsafe extern "C" fn new_while(mut p: *mut parser_state, mut a: *mut node,
                               mut b: *mut node) -> *mut node {
    void_expr_error(p, a);
    return cons_gen(p, NODE_WHILE as libc::c_int as *mut node,
                    cons_gen(p, a, b));
}
/* (:until cond body) */
unsafe extern "C" fn new_until(mut p: *mut parser_state, mut a: *mut node,
                               mut b: *mut node) -> *mut node {
    void_expr_error(p, a);
    return cons_gen(p, NODE_UNTIL as libc::c_int as *mut node,
                    cons_gen(p, a, b));
}
/* (:for var obj body) */
unsafe extern "C" fn new_for(mut p: *mut parser_state, mut v: *mut node,
                             mut o: *mut node, mut b: *mut node)
 -> *mut node {
    void_expr_error(p, o);
    return list4_gen(p, NODE_FOR as libc::c_int as *mut node, v, o, b);
}
/* (:case a ((when ...) body) ((when...) body)) */
unsafe extern "C" fn new_case(mut p: *mut parser_state, mut a: *mut node,
                              mut b: *mut node) -> *mut node {
    let mut n: *mut node =
        list2_gen(p, NODE_CASE as libc::c_int as *mut node, a);
    let mut n2: *mut node = n;
    void_expr_error(p, a);
    while !(*n2).cdr.is_null() { n2 = (*n2).cdr }
    (*n2).cdr = b;
    return n;
}
/* (:postexe a) */
unsafe extern "C" fn new_postexe(mut p: *mut parser_state, mut a: *mut node)
 -> *mut node {
    return cons_gen(p, NODE_POSTEXE as libc::c_int as *mut node, a);
}
/* (:self) */
unsafe extern "C" fn new_self(mut p: *mut parser_state) -> *mut node {
    return list1_gen(p, NODE_SELF as libc::c_int as *mut node);
}
/* (:call a b c) */
unsafe extern "C" fn new_call(mut p: *mut parser_state, mut a: *mut node,
                              mut b: mrb_sym, mut c: *mut node,
                              mut pass: libc::c_int) -> *mut node {
    let mut n: *mut node =
        list4_gen(p,
                  (if 0 != pass {
                       NODE_CALL as libc::c_int
                   } else { NODE_SCALL as libc::c_int }) as intptr_t as
                      *mut node, a, b as intptr_t as *mut node, c);
    void_expr_error(p, a);
    if !a.is_null() {
        (*n).filename_index = (*a).filename_index;
        (*n).lineno = (*a).lineno
    }
    return n;
}
/* (:fcall self mid args) */
unsafe extern "C" fn new_fcall(mut p: *mut parser_state, mut b: mrb_sym,
                               mut c: *mut node) -> *mut node {
    let mut n: *mut node = new_self(p);
    if !c.is_null() {
        (*n).filename_index = (*c).filename_index;
        (*n).lineno = (*c).lineno
    }
    n =
        list4_gen(p, NODE_FCALL as libc::c_int as *mut node, n,
                  b as intptr_t as *mut node, c);
    if !c.is_null() {
        (*n).filename_index = (*c).filename_index;
        (*n).lineno = (*c).lineno
    }
    return n;
}
/* (:super . c) */
unsafe extern "C" fn new_super(mut p: *mut parser_state, mut c: *mut node)
 -> *mut node {
    return cons_gen(p, NODE_SUPER as libc::c_int as *mut node, c);
}
/* (:zsuper) */
unsafe extern "C" fn new_zsuper(mut p: *mut parser_state) -> *mut node {
    return list1_gen(p, NODE_ZSUPER as libc::c_int as *mut node);
}
/* (:yield . c) */
unsafe extern "C" fn new_yield(mut p: *mut parser_state, mut c: *mut node)
 -> *mut node {
    if !c.is_null() {
        if !(*c).cdr.is_null() {
            yyerror(p,
                    b"both block arg and actual block given\x00" as *const u8
                        as *const libc::c_char);
        }
        return cons_gen(p, NODE_YIELD as libc::c_int as *mut node, (*c).car)
    }
    return cons_gen(p, NODE_YIELD as libc::c_int as *mut node,
                    0 as *mut node);
}
/* (:return . c) */
unsafe extern "C" fn new_return(mut p: *mut parser_state, mut c: *mut node)
 -> *mut node {
    return cons_gen(p, NODE_RETURN as libc::c_int as *mut node, c);
}
/* (:break . c) */
unsafe extern "C" fn new_break(mut p: *mut parser_state, mut c: *mut node)
 -> *mut node {
    return cons_gen(p, NODE_BREAK as libc::c_int as *mut node, c);
}
/* (:next . c) */
unsafe extern "C" fn new_next(mut p: *mut parser_state, mut c: *mut node)
 -> *mut node {
    return cons_gen(p, NODE_NEXT as libc::c_int as *mut node, c);
}
/* (:redo) */
unsafe extern "C" fn new_redo(mut p: *mut parser_state) -> *mut node {
    return list1_gen(p, NODE_REDO as libc::c_int as *mut node);
}
/* (:retry) */
unsafe extern "C" fn new_retry(mut p: *mut parser_state) -> *mut node {
    return list1_gen(p, NODE_RETRY as libc::c_int as *mut node);
}
/* (:dot2 a b) */
unsafe extern "C" fn new_dot2(mut p: *mut parser_state, mut a: *mut node,
                              mut b: *mut node) -> *mut node {
    return cons_gen(p, NODE_DOT2 as libc::c_int as *mut node,
                    cons_gen(p, a, b));
}
/* (:dot3 a b) */
unsafe extern "C" fn new_dot3(mut p: *mut parser_state, mut a: *mut node,
                              mut b: *mut node) -> *mut node {
    return cons_gen(p, NODE_DOT3 as libc::c_int as *mut node,
                    cons_gen(p, a, b));
}
/* (:colon2 b c) */
unsafe extern "C" fn new_colon2(mut p: *mut parser_state, mut b: *mut node,
                                mut c: mrb_sym) -> *mut node {
    void_expr_error(p, b);
    return cons_gen(p, NODE_COLON2 as libc::c_int as *mut node,
                    cons_gen(p, b, c as intptr_t as *mut node));
}
/* (:colon3 . c) */
unsafe extern "C" fn new_colon3(mut p: *mut parser_state, mut c: mrb_sym)
 -> *mut node {
    return cons_gen(p, NODE_COLON3 as libc::c_int as *mut node,
                    c as intptr_t as *mut node);
}
/* (:and a b) */
unsafe extern "C" fn new_and(mut p: *mut parser_state, mut a: *mut node,
                             mut b: *mut node) -> *mut node {
    return cons_gen(p, NODE_AND as libc::c_int as *mut node,
                    cons_gen(p, a, b));
}
/* (:or a b) */
unsafe extern "C" fn new_or(mut p: *mut parser_state, mut a: *mut node,
                            mut b: *mut node) -> *mut node {
    return cons_gen(p, NODE_OR as libc::c_int as *mut node,
                    cons_gen(p, a, b));
}
/* (:array a...) */
unsafe extern "C" fn new_array(mut p: *mut parser_state, mut a: *mut node)
 -> *mut node {
    return cons_gen(p, NODE_ARRAY as libc::c_int as *mut node, a);
}
/* (:splat . a) */
unsafe extern "C" fn new_splat(mut p: *mut parser_state, mut a: *mut node)
 -> *mut node {
    return cons_gen(p, NODE_SPLAT as libc::c_int as *mut node, a);
}
/* (:hash (k . v) (k . v)...) */
unsafe extern "C" fn new_hash(mut p: *mut parser_state, mut a: *mut node)
 -> *mut node {
    return cons_gen(p, NODE_HASH as libc::c_int as *mut node, a);
}
/* (:kw_hash (k . v) (k . v)...) */
unsafe extern "C" fn new_kw_hash(mut p: *mut parser_state, mut a: *mut node)
 -> *mut node {
    return cons_gen(p, NODE_KW_HASH as libc::c_int as *mut node, a);
}
/* (:sym . a) */
unsafe extern "C" fn new_sym(mut p: *mut parser_state, mut sym: mrb_sym)
 -> *mut node {
    return cons_gen(p, NODE_SYM as libc::c_int as *mut node,
                    sym as intptr_t as *mut node);
}
unsafe extern "C" fn new_strsym(mut p: *mut parser_state, mut str: *mut node)
 -> mrb_sym {
    let mut s: *const libc::c_char = (*(*str).cdr).car as *const libc::c_char;
    let mut len: size_t = (*(*str).cdr).cdr as size_t;
    return mrb_intern((*p).mrb, s, len);
}
/* (:lvar . a) */
unsafe extern "C" fn new_lvar(mut p: *mut parser_state, mut sym: mrb_sym)
 -> *mut node {
    return cons_gen(p, NODE_LVAR as libc::c_int as *mut node,
                    sym as intptr_t as *mut node);
}
/* (:gvar . a) */
unsafe extern "C" fn new_gvar(mut p: *mut parser_state, mut sym: mrb_sym)
 -> *mut node {
    return cons_gen(p, NODE_GVAR as libc::c_int as *mut node,
                    sym as intptr_t as *mut node);
}
/* (:ivar . a) */
unsafe extern "C" fn new_ivar(mut p: *mut parser_state, mut sym: mrb_sym)
 -> *mut node {
    return cons_gen(p, NODE_IVAR as libc::c_int as *mut node,
                    sym as intptr_t as *mut node);
}
/* (:cvar . a) */
unsafe extern "C" fn new_cvar(mut p: *mut parser_state, mut sym: mrb_sym)
 -> *mut node {
    return cons_gen(p, NODE_CVAR as libc::c_int as *mut node,
                    sym as intptr_t as *mut node);
}
/* (:const . a) */
unsafe extern "C" fn new_const(mut p: *mut parser_state, mut sym: mrb_sym)
 -> *mut node {
    return cons_gen(p, NODE_CONST as libc::c_int as *mut node,
                    sym as intptr_t as *mut node);
}
/* (:undef a...) */
unsafe extern "C" fn new_undef(mut p: *mut parser_state, mut sym: mrb_sym)
 -> *mut node {
    return list2_gen(p, NODE_UNDEF as libc::c_int as *mut node,
                     sym as intptr_t as *mut node);
}
/* (:class class super body) */
unsafe extern "C" fn new_class(mut p: *mut parser_state, mut c: *mut node,
                               mut s: *mut node, mut b: *mut node)
 -> *mut node {
    void_expr_error(p, s);
    return list4_gen(p, NODE_CLASS as libc::c_int as *mut node, c, s,
                     cons_gen(p, locals_node(p), b));
}
/* (:sclass obj body) */
unsafe extern "C" fn new_sclass(mut p: *mut parser_state, mut o: *mut node,
                                mut b: *mut node) -> *mut node {
    void_expr_error(p, o);
    return list3_gen(p, NODE_SCLASS as libc::c_int as *mut node, o,
                     cons_gen(p, locals_node(p), b));
}
/* (:module module body) */
unsafe extern "C" fn new_module(mut p: *mut parser_state, mut m: *mut node,
                                mut b: *mut node) -> *mut node {
    return list3_gen(p, NODE_MODULE as libc::c_int as *mut node, m,
                     cons_gen(p, locals_node(p), b));
}
/* (:def m lv (arg . body)) */
unsafe extern "C" fn new_def(mut p: *mut parser_state, mut m: mrb_sym,
                             mut a: *mut node, mut b: *mut node)
 -> *mut node {
    return list5_gen(p, NODE_DEF as libc::c_int as *mut node,
                     m as intptr_t as *mut node, locals_node(p), a, b);
}
/* (:sdef obj m lv (arg . body)) */
unsafe extern "C" fn new_sdef(mut p: *mut parser_state, mut o: *mut node,
                              mut m: mrb_sym, mut a: *mut node,
                              mut b: *mut node) -> *mut node {
    void_expr_error(p, o);
    return list6_gen(p, NODE_SDEF as libc::c_int as *mut node, o,
                     m as intptr_t as *mut node, locals_node(p), a, b);
}
/* (:arg . sym) */
unsafe extern "C" fn new_arg(mut p: *mut parser_state, mut sym: mrb_sym)
 -> *mut node {
    return cons_gen(p, NODE_ARG as libc::c_int as *mut node,
                    sym as intptr_t as *mut node);
}
unsafe extern "C" fn local_add_margs(mut p: *mut parser_state,
                                     mut n: *mut node) {
    while !n.is_null() {
        if (*(*n).car).car == NODE_MASGN as libc::c_int as *mut node {
            let mut t: *mut node = (*(*(*n).car).cdr).cdr;
            (*(*(*n).car).cdr).cdr = 0 as *mut mrb_ast_node;
            while !t.is_null() {
                local_add_f(p, (*t).car as intptr_t as mrb_sym);
                t = (*t).cdr
            }
            local_add_margs(p, (*(*(*(*n).car).cdr).car).car);
            local_add_margs(p, (*(*(*(*(*(*n).car).cdr).car).cdr).cdr).car);
        }
        n = (*n).cdr
    };
}
/* (m o r m2 tail) */
/* m: (a b c) */
/* o: ((a . e1) (b . e2)) */
/* r: a */
/* m2: (a b c) */
/* b: a */
unsafe extern "C" fn new_args(mut p: *mut parser_state, mut m: *mut node,
                              mut opt: *mut node, mut rest: mrb_sym,
                              mut m2: *mut node, mut tail: *mut node)
 -> *mut node {
    let mut n: *mut node = 0 as *mut node;
    local_add_margs(p, m);
    local_add_margs(p, m2);
    n = cons_gen(p, m2, tail);
    n = cons_gen(p, rest as intptr_t as *mut node, n);
    n = cons_gen(p, opt, n);
    return cons_gen(p, m, n);
}
/* (:args_tail keywords rest_keywords_sym block_sym) */
unsafe extern "C" fn new_args_tail(mut p: *mut parser_state,
                                   mut kws: *mut node, mut kwrest: *mut node,
                                   mut blk: mrb_sym) -> *mut node {
    let mut k: *mut node = 0 as *mut node;
    if !kws.is_null() || !kwrest.is_null() {
        local_add_kw(p,
                     if !kwrest.is_null() && !(*kwrest).cdr.is_null() {
                         (*kwrest).cdr as intptr_t as mrb_sym
                     } else { 0i32 as libc::c_uint });
    }
    local_add_blk(p, blk);
    // allocate register for keywords arguments
  // order is for Proc#parameters
    k = kws;
    while !k.is_null() {
        if (*(*(*(*k).car).cdr).cdr).car.is_null() {
            // allocate required keywords
            local_add_f(p, (*(*(*k).car).cdr).car as intptr_t as mrb_sym);
        }
        k = (*k).cdr
    }
    k = kws;
    while !k.is_null() {
        if !(*(*(*(*k).car).cdr).cdr).car.is_null() {
            // allocate keywords with default
            local_add_f(p, (*(*(*k).car).cdr).car as intptr_t as mrb_sym);
        }
        k = (*k).cdr
    }
    return list4_gen(p, NODE_ARGS_TAIL as libc::c_int as *mut node, kws,
                     kwrest, blk as intptr_t as *mut node);
}
/* (:kw_arg kw_sym def_arg) */
unsafe extern "C" fn new_kw_arg(mut p: *mut parser_state, mut kw: mrb_sym,
                                mut def_arg: *mut node) -> *mut node {
    return list3_gen(p, NODE_KW_ARG as libc::c_int as *mut node,
                     kw as intptr_t as *mut node, def_arg);
}
/* (:block_arg . a) */
unsafe extern "C" fn new_block_arg(mut p: *mut parser_state, mut a: *mut node)
 -> *mut node {
    return cons_gen(p, NODE_BLOCK_ARG as libc::c_int as *mut node, a);
}
/* (:block arg body) */
unsafe extern "C" fn new_block(mut p: *mut parser_state, mut a: *mut node,
                               mut b: *mut node) -> *mut node {
    return list4_gen(p, NODE_BLOCK as libc::c_int as *mut node,
                     locals_node(p), a, b);
}
/* (:lambda arg body) */
unsafe extern "C" fn new_lambda(mut p: *mut parser_state, mut a: *mut node,
                                mut b: *mut node) -> *mut node {
    return list4_gen(p, NODE_LAMBDA as libc::c_int as *mut node,
                     locals_node(p), a, b);
}
/* (:asgn lhs rhs) */
unsafe extern "C" fn new_asgn(mut p: *mut parser_state, mut a: *mut node,
                              mut b: *mut node) -> *mut node {
    void_expr_error(p, b);
    return cons_gen(p, NODE_ASGN as libc::c_int as *mut node,
                    cons_gen(p, a, b));
}
/* (:masgn mlhs=(pre rest post)  mrhs) */
unsafe extern "C" fn new_masgn(mut p: *mut parser_state, mut a: *mut node,
                               mut b: *mut node) -> *mut node {
    void_expr_error(p, b);
    return cons_gen(p, NODE_MASGN as libc::c_int as *mut node,
                    cons_gen(p, a, b));
}
/* (:masgn mlhs mrhs) no check */
unsafe extern "C" fn new_masgn_param(mut p: *mut parser_state,
                                     mut a: *mut node, mut b: *mut node)
 -> *mut node {
    return cons_gen(p, NODE_MASGN as libc::c_int as *mut node,
                    cons_gen(p, a, b));
}
/* (:asgn lhs rhs) */
unsafe extern "C" fn new_op_asgn(mut p: *mut parser_state, mut a: *mut node,
                                 mut op: mrb_sym, mut b: *mut node)
 -> *mut node {
    void_expr_error(p, b);
    return list4_gen(p, NODE_OP_ASGN as libc::c_int as *mut node, a,
                     op as intptr_t as *mut node, b);
}
unsafe extern "C" fn new_imaginary(mut p: *mut parser_state,
                                   mut imaginary: *mut node) -> *mut node {
    return new_call(p,
                    new_const(p,
                              intern_cstr_gen(p,
                                              b"Kernel\x00" as *const u8 as
                                                  *const libc::c_char)),
                    intern_cstr_gen(p,
                                    b"Complex\x00" as *const u8 as
                                        *const libc::c_char),
                    list1_gen(p,
                              list2_gen(p,
                                        list3_gen(p,
                                                  NODE_INT as libc::c_int as
                                                      *mut node,
                                                  parser_strdup(p,
                                                                b"0\x00" as
                                                                    *const u8
                                                                    as
                                                                    *const libc::c_char)
                                                      as *mut node,
                                                  10i32 as intptr_t as
                                                      *mut node), imaginary)),
                    1i32);
}
unsafe extern "C" fn new_rational(mut p: *mut parser_state,
                                  mut rational: *mut node) -> *mut node {
    return new_call(p,
                    new_const(p,
                              intern_cstr_gen(p,
                                              b"Kernel\x00" as *const u8 as
                                                  *const libc::c_char)),
                    intern_cstr_gen(p,
                                    b"Rational\x00" as *const u8 as
                                        *const libc::c_char),
                    list1_gen(p, list1_gen(p, rational)), 1i32);
}
/* (:int . i) */
unsafe extern "C" fn new_int(mut p: *mut parser_state,
                             mut s: *const libc::c_char,
                             mut base: libc::c_int, mut suffix: libc::c_int)
 -> *mut node {
    let mut result: *mut node =
        list3_gen(p, NODE_INT as libc::c_int as *mut node,
                  parser_strdup(p, s) as *mut node,
                  base as intptr_t as *mut node);
    if 0 != suffix & 1i32 << 0i32 { result = new_rational(p, result) }
    if 0 != suffix & 1i32 << 1i32 { result = new_imaginary(p, result) }
    return result;
}
/* (:float . i) */
unsafe extern "C" fn new_float(mut p: *mut parser_state,
                               mut s: *const libc::c_char,
                               mut suffix: libc::c_int) -> *mut node {
    let mut result: *mut node =
        cons_gen(p, NODE_FLOAT as libc::c_int as *mut node,
                 parser_strdup(p, s) as *mut node);
    if 0 != suffix & 1i32 << 0i32 { result = new_rational(p, result) }
    if 0 != suffix & 1i32 << 1i32 { result = new_imaginary(p, result) }
    return result;
}
/* (:str . (s . len)) */
unsafe extern "C" fn new_str(mut p: *mut parser_state,
                             mut s: *const libc::c_char, mut len: size_t)
 -> *mut node {
    return cons_gen(p, NODE_STR as libc::c_int as *mut node,
                    cons_gen(p, parser_strndup(p, s, len) as *mut node,
                             len as intptr_t as *mut node));
}
/* (:dstr . a) */
unsafe extern "C" fn new_dstr(mut p: *mut parser_state, mut a: *mut node)
 -> *mut node {
    return cons_gen(p, NODE_DSTR as libc::c_int as *mut node, a);
}
unsafe extern "C" fn string_node_p(mut n: *mut node) -> libc::c_int {
    return ((*n).car as intptr_t as node_type as libc::c_uint ==
                NODE_STR as libc::c_int as libc::c_uint) as libc::c_int;
}
unsafe extern "C" fn composite_string_node(mut p: *mut parser_state,
                                           mut a: *mut node, mut b: *mut node)
 -> *mut node {
    let mut newlen: size_t =
        ((*a).cdr as size_t).wrapping_add((*b).cdr as size_t);
    let mut str: *mut libc::c_char =
        mrb_pool_realloc((*p).pool, (*a).car as *mut libc::c_void,
                         ((*a).cdr as
                              size_t).wrapping_add(1i32 as libc::c_ulong),
                         newlen.wrapping_add(1i32 as libc::c_ulong)) as
            *mut libc::c_char;
    memcpy(str.offset((*a).cdr as size_t as isize) as *mut libc::c_void,
           (*b).car as *const libc::c_void, (*b).cdr as size_t);
    *str.offset(newlen as isize) = '\u{0}' as i32 as libc::c_char;
    (*a).car = str as *mut node;
    (*a).cdr = newlen as *mut node;
    cons_free_gen(p, b);
    return a;
}
unsafe extern "C" fn concat_string(mut p: *mut parser_state, mut a: *mut node,
                                   mut b: *mut node) -> *mut node {
    if 0 != string_node_p(a) {
        if 0 != string_node_p(b) {
            /* a == NODE_STR && b == NODE_STR */
            composite_string_node(p, (*a).cdr, (*b).cdr);
            cons_free_gen(p, b);
            return a
        } else {
            /* a == NODE_STR && b == NODE_DSTR */
            if 0 != string_node_p((*(*b).cdr).car) {
                /* a == NODE_STR && b->[NODE_STR, ...] */
                composite_string_node(p, (*a).cdr, (*(*(*b).cdr).car).cdr);
                cons_free_gen(p, (*(*b).cdr).car);
                (*(*b).cdr).car = a;
                return b
            }
        }
    } else {
        /* last node of a */
        let mut c: *mut node = 0 as *mut node;
        c = a;
        while !(*c).cdr.is_null() { c = (*c).cdr }
        if 0 != string_node_p(b) {
            /* a == NODE_DSTR && b == NODE_STR */
            if 0 != string_node_p((*c).car) {
                /* a->[..., NODE_STR] && b == NODE_STR */
                composite_string_node(p, (*(*c).car).cdr, (*b).cdr);
                cons_free_gen(p, b);
                return a
            }
            append_gen(p, a, list1_gen(p, b));
            return a
        } else if 0 != string_node_p((*c).car) &&
                      0 != string_node_p((*(*b).cdr).car) {
            /* a->[..., NODE_STR] && b->[NODE_STR, ...] */
            let mut d: *mut node = (*b).cdr;
            cons_free_gen(p, b);
            composite_string_node(p, (*(*c).car).cdr, (*(*d).car).cdr);
            cons_free_gen(p, (*d).car);
            (*c).cdr = (*d).cdr;
            cons_free_gen(p, d);
            return a
        } else { (*c).cdr = (*b).cdr; cons_free_gen(p, b); return a }
    }
    return new_dstr(p, list2_gen(p, a, b));
}
/* (:str . (s . len)) */
unsafe extern "C" fn new_xstr(mut p: *mut parser_state,
                              mut s: *const libc::c_char,
                              mut len: libc::c_int) -> *mut node {
    return cons_gen(p, NODE_XSTR as libc::c_int as *mut node,
                    cons_gen(p,
                             parser_strndup(p, s, len as size_t) as *mut node,
                             len as intptr_t as *mut node));
}
/* (:xstr . a) */
unsafe extern "C" fn new_dxstr(mut p: *mut parser_state, mut a: *mut node)
 -> *mut node {
    return cons_gen(p, NODE_DXSTR as libc::c_int as *mut node, a);
}
/* (:dsym . a) */
unsafe extern "C" fn new_dsym(mut p: *mut parser_state, mut a: *mut node)
 -> *mut node {
    return cons_gen(p, NODE_DSYM as libc::c_int as *mut node, a);
}
/* (:regx . (s . (opt . enc))) */
unsafe extern "C" fn new_regx(mut p: *mut parser_state,
                              mut p1: *const libc::c_char,
                              mut p2: *const libc::c_char,
                              mut p3: *const libc::c_char) -> *mut node {
    return cons_gen(p, NODE_REGX as libc::c_int as *mut node,
                    cons_gen(p, p1 as *mut node,
                             cons_gen(p, p2 as *mut node, p3 as *mut node)));
}
/* (:dregx . (a . b)) */
unsafe extern "C" fn new_dregx(mut p: *mut parser_state, mut a: *mut node,
                               mut b: *mut node) -> *mut node {
    return cons_gen(p, NODE_DREGX as libc::c_int as *mut node,
                    cons_gen(p, a, b));
}
/* (:backref . n) */
unsafe extern "C" fn new_back_ref(mut p: *mut parser_state,
                                  mut n: libc::c_int) -> *mut node {
    return cons_gen(p, NODE_BACK_REF as libc::c_int as *mut node,
                    n as intptr_t as *mut node);
}
/* (:nthref . n) */
unsafe extern "C" fn new_nth_ref(mut p: *mut parser_state, mut n: libc::c_int)
 -> *mut node {
    return cons_gen(p, NODE_NTH_REF as libc::c_int as *mut node,
                    n as intptr_t as *mut node);
}
/* (:heredoc . a) */
unsafe extern "C" fn new_heredoc(mut p: *mut parser_state) -> *mut node {
    let mut inf: *mut parser_heredoc_info =
        parser_palloc(p,
                      ::std::mem::size_of::<parser_heredoc_info>() as
                          libc::c_ulong) as *mut parser_heredoc_info;
    return cons_gen(p, NODE_HEREDOC as libc::c_int as *mut node,
                    inf as *mut node);
}
unsafe extern "C" fn new_bv(mut p: *mut parser_state, mut id: mrb_sym) { }
unsafe extern "C" fn new_literal_delim(mut p: *mut parser_state)
 -> *mut node {
    return cons_gen(p, NODE_LITERAL_DELIM as libc::c_int as *mut node,
                    0 as *mut node);
}
/* (:words . a) */
unsafe extern "C" fn new_words(mut p: *mut parser_state, mut a: *mut node)
 -> *mut node {
    return cons_gen(p, NODE_WORDS as libc::c_int as *mut node, a);
}
/* (:symbols . a) */
unsafe extern "C" fn new_symbols(mut p: *mut parser_state, mut a: *mut node)
 -> *mut node {
    return cons_gen(p, NODE_SYMBOLS as libc::c_int as *mut node, a);
}
/* xxx ----------------------------- */
/* (:call a op) */
unsafe extern "C" fn call_uni_op(mut p: *mut parser_state,
                                 mut recv: *mut node,
                                 mut m: *const libc::c_char) -> *mut node {
    void_expr_error(p, recv);
    return new_call(p, recv, intern_cstr_gen(p, m), 0 as *mut node, 1i32);
}
/* (:call a op b) */
unsafe extern "C" fn call_bin_op(mut p: *mut parser_state,
                                 mut recv: *mut node,
                                 mut m: *const libc::c_char,
                                 mut arg1: *mut node) -> *mut node {
    return new_call(p, recv, intern_cstr_gen(p, m),
                    list1_gen(p, list1_gen(p, arg1)), 1i32);
}
unsafe extern "C" fn args_with_block(mut p: *mut parser_state,
                                     mut a: *mut node, mut b: *mut node) {
    if !b.is_null() {
        if !(*a).cdr.is_null() {
            yyerror(p,
                    b"both block arg and actual block given\x00" as *const u8
                        as *const libc::c_char);
        }
        (*a).cdr = b
    };
}
unsafe extern "C" fn call_with_block(mut p: *mut parser_state,
                                     mut a: *mut node, mut b: *mut node) {
    let mut n: *mut node = 0 as *mut node;
    match (*a).car as intptr_t as libc::c_int as node_type as libc::c_uint {
        29 | 30 => {
            if (*a).cdr.is_null() {
                (*a).cdr = cons_gen(p, 0 as *mut node, b)
            } else { args_with_block(p, (*a).cdr, b); }
        }
        26 | 28 | 27 => {
            n = (*(*(*a).cdr).cdr).cdr;
            if (*n).car.is_null() {
                (*n).car = cons_gen(p, 0 as *mut node, b)
            } else { args_with_block(p, (*n).car, b); }
        }
        _ => { }
    };
}
unsafe extern "C" fn negate_lit(mut p: *mut parser_state, mut n: *mut node)
 -> *mut node {
    return cons_gen(p, NODE_NEGATE as libc::c_int as *mut node, n);
}
unsafe extern "C" fn cond(mut n: *mut node) -> *mut node { return n; }
unsafe extern "C" fn ret_args(mut p: *mut parser_state, mut n: *mut node)
 -> *mut node {
    if !(*n).cdr.is_null() {
        yyerror(p,
                b"block argument should not be given\x00" as *const u8 as
                    *const libc::c_char);
        return 0 as *mut node
    }
    if (*(*n).car).cdr.is_null() { return (*(*n).car).car }
    return new_array(p, (*n).car);
}
unsafe extern "C" fn assignable(mut p: *mut parser_state,
                                mut lhs: *mut node) {
    if (*lhs).car as intptr_t as libc::c_int == NODE_LVAR as libc::c_int {
        local_add(p, (*lhs).cdr as intptr_t as mrb_sym);
    };
}
unsafe extern "C" fn var_reference(mut p: *mut parser_state,
                                   mut lhs: *mut node) -> *mut node {
    let mut n: *mut node = 0 as *mut node;
    if (*lhs).car as intptr_t as libc::c_int == NODE_LVAR as libc::c_int {
        if 0 == local_var_p(p, (*lhs).cdr as intptr_t as mrb_sym) {
            n =
                new_fcall(p, (*lhs).cdr as intptr_t as mrb_sym,
                          0 as *mut node);
            cons_free_gen(p, lhs);
            return n
        }
    }
    return lhs;
}
unsafe extern "C" fn new_strterm(mut p: *mut parser_state,
                                 mut type_0: string_type,
                                 mut term: libc::c_int,
                                 mut paren: libc::c_int) -> *mut node {
    return cons_gen(p, type_0 as intptr_t as *mut node,
                    cons_gen(p, 0 as *mut node,
                             cons_gen(p, paren as intptr_t as *mut node,
                                      term as intptr_t as *mut node)));
}
unsafe extern "C" fn end_strterm(mut p: *mut parser_state) {
    cons_free_gen(p, (*(*(*p).lex_strterm).cdr).cdr);
    cons_free_gen(p, (*(*p).lex_strterm).cdr);
    cons_free_gen(p, (*p).lex_strterm);
    (*p).lex_strterm = 0 as *mut mrb_ast_node;
}
unsafe extern "C" fn parsing_heredoc_inf(mut p: *mut parser_state)
 -> *mut parser_heredoc_info {
    let mut nd: *mut node = (*p).parsing_heredoc;
    if nd.is_null() { return 0 as *mut parser_heredoc_info }
    /* mrb_assert(nd->car->car == NODE_HEREDOC); */
    return (*(*nd).car).cdr as *mut parser_heredoc_info;
}
unsafe extern "C" fn heredoc_treat_nextline(mut p: *mut parser_state) {
    if (*p).heredocs_from_nextline.is_null() { return }
    if (*p).parsing_heredoc.is_null() {
        let mut n: *mut node = 0 as *mut node;
        (*p).parsing_heredoc = (*p).heredocs_from_nextline;
        (*p).lex_strterm_before_heredoc = (*p).lex_strterm;
        (*p).lex_strterm =
            new_strterm(p, (*parsing_heredoc_inf(p)).type_0, 0i32, 0i32);
        n = (*p).all_heredocs;
        if !n.is_null() {
            while !(*n).cdr.is_null() { n = (*n).cdr }
            (*n).cdr = (*p).parsing_heredoc
        } else { (*p).all_heredocs = (*p).parsing_heredoc }
    } else {
        let mut n_0: *mut node = 0 as *mut node;
        let mut m: *mut node = 0 as *mut node;
        m = (*p).heredocs_from_nextline;
        while !(*m).cdr.is_null() { m = (*m).cdr }
        n_0 = (*p).all_heredocs;
        if n_0 == (*p).parsing_heredoc {
            (*m).cdr = n_0;
            (*p).all_heredocs = (*p).heredocs_from_nextline;
            (*p).parsing_heredoc = (*p).heredocs_from_nextline
        } else {
            while (*n_0).cdr != (*p).parsing_heredoc { n_0 = (*n_0).cdr }
            (*m).cdr = (*n_0).cdr;
            (*n_0).cdr = (*p).heredocs_from_nextline;
            (*p).parsing_heredoc = (*p).heredocs_from_nextline
        }
    }
    (*p).heredocs_from_nextline = 0 as *mut mrb_ast_node;
}
unsafe extern "C" fn heredoc_end(mut p: *mut parser_state) {
    (*p).parsing_heredoc = (*(*p).parsing_heredoc).cdr;
    if (*p).parsing_heredoc.is_null() {
        (*p).lstate = EXPR_BEG;
        (*p).set_cmd_start(1i32 as mrb_bool);
        end_strterm(p);
        (*p).lex_strterm = (*p).lex_strterm_before_heredoc;
        (*p).lex_strterm_before_heredoc = 0 as *mut mrb_ast_node
    } else {
        (*(*p).lex_strterm).car =
            (*parsing_heredoc_inf(p)).type_0 as intptr_t as *mut node
    };
}
static mut yytranslate: [yytype_uint8; 375] =
    [0i32 as yytype_uint8, 2i32 as yytype_uint8, 2i32 as yytype_uint8,
     2i32 as yytype_uint8, 2i32 as yytype_uint8, 2i32 as yytype_uint8,
     2i32 as yytype_uint8, 2i32 as yytype_uint8, 2i32 as yytype_uint8,
     2i32 as yytype_uint8, 145i32 as yytype_uint8, 2i32 as yytype_uint8,
     2i32 as yytype_uint8, 2i32 as yytype_uint8, 2i32 as yytype_uint8,
     2i32 as yytype_uint8, 2i32 as yytype_uint8, 2i32 as yytype_uint8,
     2i32 as yytype_uint8, 2i32 as yytype_uint8, 2i32 as yytype_uint8,
     2i32 as yytype_uint8, 2i32 as yytype_uint8, 2i32 as yytype_uint8,
     2i32 as yytype_uint8, 2i32 as yytype_uint8, 2i32 as yytype_uint8,
     2i32 as yytype_uint8, 2i32 as yytype_uint8, 2i32 as yytype_uint8,
     2i32 as yytype_uint8, 2i32 as yytype_uint8, 2i32 as yytype_uint8,
     132i32 as yytype_uint8, 2i32 as yytype_uint8, 2i32 as yytype_uint8,
     2i32 as yytype_uint8, 130i32 as yytype_uint8, 125i32 as yytype_uint8,
     2i32 as yytype_uint8, 140i32 as yytype_uint8, 141i32 as yytype_uint8,
     128i32 as yytype_uint8, 126i32 as yytype_uint8, 138i32 as yytype_uint8,
     127i32 as yytype_uint8, 144i32 as yytype_uint8, 129i32 as yytype_uint8,
     2i32 as yytype_uint8, 2i32 as yytype_uint8, 2i32 as yytype_uint8,
     2i32 as yytype_uint8, 2i32 as yytype_uint8, 2i32 as yytype_uint8,
     2i32 as yytype_uint8, 2i32 as yytype_uint8, 2i32 as yytype_uint8,
     2i32 as yytype_uint8, 120i32 as yytype_uint8, 143i32 as yytype_uint8,
     122i32 as yytype_uint8, 118i32 as yytype_uint8, 121i32 as yytype_uint8,
     119i32 as yytype_uint8, 2i32 as yytype_uint8, 2i32 as yytype_uint8,
     2i32 as yytype_uint8, 2i32 as yytype_uint8, 2i32 as yytype_uint8,
     2i32 as yytype_uint8, 2i32 as yytype_uint8, 2i32 as yytype_uint8,
     2i32 as yytype_uint8, 2i32 as yytype_uint8, 2i32 as yytype_uint8,
     2i32 as yytype_uint8, 2i32 as yytype_uint8, 2i32 as yytype_uint8,
     2i32 as yytype_uint8, 2i32 as yytype_uint8, 2i32 as yytype_uint8,
     2i32 as yytype_uint8, 2i32 as yytype_uint8, 2i32 as yytype_uint8,
     2i32 as yytype_uint8, 2i32 as yytype_uint8, 2i32 as yytype_uint8,
     2i32 as yytype_uint8, 2i32 as yytype_uint8, 2i32 as yytype_uint8,
     2i32 as yytype_uint8, 137i32 as yytype_uint8, 2i32 as yytype_uint8,
     142i32 as yytype_uint8, 124i32 as yytype_uint8, 2i32 as yytype_uint8,
     139i32 as yytype_uint8, 2i32 as yytype_uint8, 2i32 as yytype_uint8,
     2i32 as yytype_uint8, 2i32 as yytype_uint8, 2i32 as yytype_uint8,
     2i32 as yytype_uint8, 2i32 as yytype_uint8, 2i32 as yytype_uint8,
     2i32 as yytype_uint8, 2i32 as yytype_uint8, 2i32 as yytype_uint8,
     2i32 as yytype_uint8, 2i32 as yytype_uint8, 2i32 as yytype_uint8,
     2i32 as yytype_uint8, 2i32 as yytype_uint8, 2i32 as yytype_uint8,
     2i32 as yytype_uint8, 2i32 as yytype_uint8, 2i32 as yytype_uint8,
     2i32 as yytype_uint8, 2i32 as yytype_uint8, 2i32 as yytype_uint8,
     2i32 as yytype_uint8, 2i32 as yytype_uint8, 2i32 as yytype_uint8,
     135i32 as yytype_uint8, 123i32 as yytype_uint8, 136i32 as yytype_uint8,
     133i32 as yytype_uint8, 2i32 as yytype_uint8, 2i32 as yytype_uint8,
     2i32 as yytype_uint8, 2i32 as yytype_uint8, 2i32 as yytype_uint8,
     2i32 as yytype_uint8, 2i32 as yytype_uint8, 2i32 as yytype_uint8,
     2i32 as yytype_uint8, 2i32 as yytype_uint8, 2i32 as yytype_uint8,
     2i32 as yytype_uint8, 2i32 as yytype_uint8, 2i32 as yytype_uint8,
     2i32 as yytype_uint8, 2i32 as yytype_uint8, 2i32 as yytype_uint8,
     2i32 as yytype_uint8, 2i32 as yytype_uint8, 2i32 as yytype_uint8,
     2i32 as yytype_uint8, 2i32 as yytype_uint8, 2i32 as yytype_uint8,
     2i32 as yytype_uint8, 2i32 as yytype_uint8, 2i32 as yytype_uint8,
     2i32 as yytype_uint8, 2i32 as yytype_uint8, 2i32 as yytype_uint8,
     2i32 as yytype_uint8, 2i32 as yytype_uint8, 2i32 as yytype_uint8,
     2i32 as yytype_uint8, 2i32 as yytype_uint8, 2i32 as yytype_uint8,
     2i32 as yytype_uint8, 2i32 as yytype_uint8, 2i32 as yytype_uint8,
     2i32 as yytype_uint8, 2i32 as yytype_uint8, 2i32 as yytype_uint8,
     2i32 as yytype_uint8, 2i32 as yytype_uint8, 2i32 as yytype_uint8,
     2i32 as yytype_uint8, 2i32 as yytype_uint8, 2i32 as yytype_uint8,
     2i32 as yytype_uint8, 2i32 as yytype_uint8, 2i32 as yytype_uint8,
     2i32 as yytype_uint8, 2i32 as yytype_uint8, 2i32 as yytype_uint8,
     2i32 as yytype_uint8, 2i32 as yytype_uint8, 2i32 as yytype_uint8,
     2i32 as yytype_uint8, 2i32 as yytype_uint8, 2i32 as yytype_uint8,
     2i32 as yytype_uint8, 2i32 as yytype_uint8, 2i32 as yytype_uint8,
     2i32 as yytype_uint8, 2i32 as yytype_uint8, 2i32 as yytype_uint8,
     2i32 as yytype_uint8, 2i32 as yytype_uint8, 2i32 as yytype_uint8,
     2i32 as yytype_uint8, 2i32 as yytype_uint8, 2i32 as yytype_uint8,
     2i32 as yytype_uint8, 2i32 as yytype_uint8, 2i32 as yytype_uint8,
     2i32 as yytype_uint8, 2i32 as yytype_uint8, 2i32 as yytype_uint8,
     2i32 as yytype_uint8, 2i32 as yytype_uint8, 2i32 as yytype_uint8,
     2i32 as yytype_uint8, 2i32 as yytype_uint8, 2i32 as yytype_uint8,
     2i32 as yytype_uint8, 2i32 as yytype_uint8, 2i32 as yytype_uint8,
     2i32 as yytype_uint8, 2i32 as yytype_uint8, 2i32 as yytype_uint8,
     2i32 as yytype_uint8, 2i32 as yytype_uint8, 2i32 as yytype_uint8,
     2i32 as yytype_uint8, 2i32 as yytype_uint8, 2i32 as yytype_uint8,
     2i32 as yytype_uint8, 2i32 as yytype_uint8, 2i32 as yytype_uint8,
     2i32 as yytype_uint8, 2i32 as yytype_uint8, 2i32 as yytype_uint8,
     2i32 as yytype_uint8, 2i32 as yytype_uint8, 2i32 as yytype_uint8,
     2i32 as yytype_uint8, 2i32 as yytype_uint8, 2i32 as yytype_uint8,
     2i32 as yytype_uint8, 2i32 as yytype_uint8, 2i32 as yytype_uint8,
     2i32 as yytype_uint8, 2i32 as yytype_uint8, 2i32 as yytype_uint8,
     2i32 as yytype_uint8, 2i32 as yytype_uint8, 2i32 as yytype_uint8,
     2i32 as yytype_uint8, 2i32 as yytype_uint8, 2i32 as yytype_uint8,
     2i32 as yytype_uint8, 2i32 as yytype_uint8, 2i32 as yytype_uint8,
     2i32 as yytype_uint8, 2i32 as yytype_uint8, 2i32 as yytype_uint8,
     2i32 as yytype_uint8, 2i32 as yytype_uint8, 2i32 as yytype_uint8,
     2i32 as yytype_uint8, 1i32 as yytype_uint8, 2i32 as yytype_uint8,
     3i32 as yytype_uint8, 4i32 as yytype_uint8, 5i32 as yytype_uint8,
     6i32 as yytype_uint8, 7i32 as yytype_uint8, 8i32 as yytype_uint8,
     9i32 as yytype_uint8, 10i32 as yytype_uint8, 11i32 as yytype_uint8,
     12i32 as yytype_uint8, 13i32 as yytype_uint8, 14i32 as yytype_uint8,
     15i32 as yytype_uint8, 16i32 as yytype_uint8, 17i32 as yytype_uint8,
     18i32 as yytype_uint8, 19i32 as yytype_uint8, 20i32 as yytype_uint8,
     21i32 as yytype_uint8, 22i32 as yytype_uint8, 23i32 as yytype_uint8,
     24i32 as yytype_uint8, 25i32 as yytype_uint8, 26i32 as yytype_uint8,
     27i32 as yytype_uint8, 28i32 as yytype_uint8, 29i32 as yytype_uint8,
     30i32 as yytype_uint8, 31i32 as yytype_uint8, 32i32 as yytype_uint8,
     33i32 as yytype_uint8, 34i32 as yytype_uint8, 35i32 as yytype_uint8,
     36i32 as yytype_uint8, 37i32 as yytype_uint8, 38i32 as yytype_uint8,
     39i32 as yytype_uint8, 40i32 as yytype_uint8, 41i32 as yytype_uint8,
     42i32 as yytype_uint8, 43i32 as yytype_uint8, 44i32 as yytype_uint8,
     45i32 as yytype_uint8, 46i32 as yytype_uint8, 47i32 as yytype_uint8,
     48i32 as yytype_uint8, 49i32 as yytype_uint8, 50i32 as yytype_uint8,
     51i32 as yytype_uint8, 52i32 as yytype_uint8, 53i32 as yytype_uint8,
     54i32 as yytype_uint8, 55i32 as yytype_uint8, 56i32 as yytype_uint8,
     57i32 as yytype_uint8, 58i32 as yytype_uint8, 59i32 as yytype_uint8,
     60i32 as yytype_uint8, 61i32 as yytype_uint8, 62i32 as yytype_uint8,
     63i32 as yytype_uint8, 64i32 as yytype_uint8, 65i32 as yytype_uint8,
     66i32 as yytype_uint8, 67i32 as yytype_uint8, 68i32 as yytype_uint8,
     69i32 as yytype_uint8, 70i32 as yytype_uint8, 71i32 as yytype_uint8,
     72i32 as yytype_uint8, 73i32 as yytype_uint8, 74i32 as yytype_uint8,
     75i32 as yytype_uint8, 76i32 as yytype_uint8, 77i32 as yytype_uint8,
     78i32 as yytype_uint8, 79i32 as yytype_uint8, 80i32 as yytype_uint8,
     81i32 as yytype_uint8, 82i32 as yytype_uint8, 83i32 as yytype_uint8,
     84i32 as yytype_uint8, 85i32 as yytype_uint8, 86i32 as yytype_uint8,
     87i32 as yytype_uint8, 88i32 as yytype_uint8, 89i32 as yytype_uint8,
     90i32 as yytype_uint8, 91i32 as yytype_uint8, 92i32 as yytype_uint8,
     93i32 as yytype_uint8, 94i32 as yytype_uint8, 95i32 as yytype_uint8,
     96i32 as yytype_uint8, 97i32 as yytype_uint8, 98i32 as yytype_uint8,
     99i32 as yytype_uint8, 100i32 as yytype_uint8, 101i32 as yytype_uint8,
     102i32 as yytype_uint8, 103i32 as yytype_uint8, 104i32 as yytype_uint8,
     105i32 as yytype_uint8, 106i32 as yytype_uint8, 107i32 as yytype_uint8,
     108i32 as yytype_uint8, 109i32 as yytype_uint8, 110i32 as yytype_uint8,
     111i32 as yytype_uint8, 112i32 as yytype_uint8, 113i32 as yytype_uint8,
     114i32 as yytype_uint8, 115i32 as yytype_uint8, 116i32 as yytype_uint8,
     117i32 as yytype_uint8, 131i32 as yytype_uint8, 134i32 as yytype_uint8];
static mut yytname: [*const libc::c_char; 323] =
    [b"$end\x00" as *const u8 as *const libc::c_char,
     b"error\x00" as *const u8 as *const libc::c_char,
     b"$undefined\x00" as *const u8 as *const libc::c_char,
     b"keyword_class\x00" as *const u8 as *const libc::c_char,
     b"keyword_module\x00" as *const u8 as *const libc::c_char,
     b"keyword_def\x00" as *const u8 as *const libc::c_char,
     b"keyword_begin\x00" as *const u8 as *const libc::c_char,
     b"keyword_if\x00" as *const u8 as *const libc::c_char,
     b"keyword_unless\x00" as *const u8 as *const libc::c_char,
     b"keyword_while\x00" as *const u8 as *const libc::c_char,
     b"keyword_until\x00" as *const u8 as *const libc::c_char,
     b"keyword_for\x00" as *const u8 as *const libc::c_char,
     b"keyword_undef\x00" as *const u8 as *const libc::c_char,
     b"keyword_rescue\x00" as *const u8 as *const libc::c_char,
     b"keyword_ensure\x00" as *const u8 as *const libc::c_char,
     b"keyword_end\x00" as *const u8 as *const libc::c_char,
     b"keyword_then\x00" as *const u8 as *const libc::c_char,
     b"keyword_elsif\x00" as *const u8 as *const libc::c_char,
     b"keyword_else\x00" as *const u8 as *const libc::c_char,
     b"keyword_case\x00" as *const u8 as *const libc::c_char,
     b"keyword_when\x00" as *const u8 as *const libc::c_char,
     b"keyword_break\x00" as *const u8 as *const libc::c_char,
     b"keyword_next\x00" as *const u8 as *const libc::c_char,
     b"keyword_redo\x00" as *const u8 as *const libc::c_char,
     b"keyword_retry\x00" as *const u8 as *const libc::c_char,
     b"keyword_in\x00" as *const u8 as *const libc::c_char,
     b"keyword_do\x00" as *const u8 as *const libc::c_char,
     b"keyword_do_cond\x00" as *const u8 as *const libc::c_char,
     b"keyword_do_block\x00" as *const u8 as *const libc::c_char,
     b"keyword_do_LAMBDA\x00" as *const u8 as *const libc::c_char,
     b"keyword_return\x00" as *const u8 as *const libc::c_char,
     b"keyword_yield\x00" as *const u8 as *const libc::c_char,
     b"keyword_super\x00" as *const u8 as *const libc::c_char,
     b"keyword_self\x00" as *const u8 as *const libc::c_char,
     b"keyword_nil\x00" as *const u8 as *const libc::c_char,
     b"keyword_true\x00" as *const u8 as *const libc::c_char,
     b"keyword_false\x00" as *const u8 as *const libc::c_char,
     b"keyword_and\x00" as *const u8 as *const libc::c_char,
     b"keyword_or\x00" as *const u8 as *const libc::c_char,
     b"keyword_not\x00" as *const u8 as *const libc::c_char,
     b"modifier_if\x00" as *const u8 as *const libc::c_char,
     b"modifier_unless\x00" as *const u8 as *const libc::c_char,
     b"modifier_while\x00" as *const u8 as *const libc::c_char,
     b"modifier_until\x00" as *const u8 as *const libc::c_char,
     b"modifier_rescue\x00" as *const u8 as *const libc::c_char,
     b"keyword_alias\x00" as *const u8 as *const libc::c_char,
     b"keyword_BEGIN\x00" as *const u8 as *const libc::c_char,
     b"keyword_END\x00" as *const u8 as *const libc::c_char,
     b"keyword__LINE__\x00" as *const u8 as *const libc::c_char,
     b"keyword__FILE__\x00" as *const u8 as *const libc::c_char,
     b"keyword__ENCODING__\x00" as *const u8 as *const libc::c_char,
     b"tIDENTIFIER\x00" as *const u8 as *const libc::c_char,
     b"tFID\x00" as *const u8 as *const libc::c_char,
     b"tGVAR\x00" as *const u8 as *const libc::c_char,
     b"tIVAR\x00" as *const u8 as *const libc::c_char,
     b"tCONSTANT\x00" as *const u8 as *const libc::c_char,
     b"tCVAR\x00" as *const u8 as *const libc::c_char,
     b"tLABEL_TAG\x00" as *const u8 as *const libc::c_char,
     b"tINTEGER\x00" as *const u8 as *const libc::c_char,
     b"tFLOAT\x00" as *const u8 as *const libc::c_char,
     b"tCHAR\x00" as *const u8 as *const libc::c_char,
     b"tXSTRING\x00" as *const u8 as *const libc::c_char,
     b"tREGEXP\x00" as *const u8 as *const libc::c_char,
     b"tSTRING\x00" as *const u8 as *const libc::c_char,
     b"tSTRING_PART\x00" as *const u8 as *const libc::c_char,
     b"tSTRING_MID\x00" as *const u8 as *const libc::c_char,
     b"tNTH_REF\x00" as *const u8 as *const libc::c_char,
     b"tBACK_REF\x00" as *const u8 as *const libc::c_char,
     b"tREGEXP_END\x00" as *const u8 as *const libc::c_char,
     b"tUPLUS\x00" as *const u8 as *const libc::c_char,
     b"tUMINUS\x00" as *const u8 as *const libc::c_char,
     b"tPOW\x00" as *const u8 as *const libc::c_char,
     b"tCMP\x00" as *const u8 as *const libc::c_char,
     b"tEQ\x00" as *const u8 as *const libc::c_char,
     b"tEQQ\x00" as *const u8 as *const libc::c_char,
     b"tNEQ\x00" as *const u8 as *const libc::c_char,
     b"tGEQ\x00" as *const u8 as *const libc::c_char,
     b"tLEQ\x00" as *const u8 as *const libc::c_char,
     b"tANDOP\x00" as *const u8 as *const libc::c_char,
     b"tOROP\x00" as *const u8 as *const libc::c_char,
     b"tMATCH\x00" as *const u8 as *const libc::c_char,
     b"tNMATCH\x00" as *const u8 as *const libc::c_char,
     b"tDOT2\x00" as *const u8 as *const libc::c_char,
     b"tDOT3\x00" as *const u8 as *const libc::c_char,
     b"tAREF\x00" as *const u8 as *const libc::c_char,
     b"tASET\x00" as *const u8 as *const libc::c_char,
     b"tLSHFT\x00" as *const u8 as *const libc::c_char,
     b"tRSHFT\x00" as *const u8 as *const libc::c_char,
     b"tCOLON2\x00" as *const u8 as *const libc::c_char,
     b"tCOLON3\x00" as *const u8 as *const libc::c_char,
     b"tOP_ASGN\x00" as *const u8 as *const libc::c_char,
     b"tASSOC\x00" as *const u8 as *const libc::c_char,
     b"tLPAREN\x00" as *const u8 as *const libc::c_char,
     b"tLPAREN_ARG\x00" as *const u8 as *const libc::c_char,
     b"tRPAREN\x00" as *const u8 as *const libc::c_char,
     b"tLBRACK\x00" as *const u8 as *const libc::c_char,
     b"tLBRACE\x00" as *const u8 as *const libc::c_char,
     b"tLBRACE_ARG\x00" as *const u8 as *const libc::c_char,
     b"tSTAR\x00" as *const u8 as *const libc::c_char,
     b"tDSTAR\x00" as *const u8 as *const libc::c_char,
     b"tAMPER\x00" as *const u8 as *const libc::c_char,
     b"tLAMBDA\x00" as *const u8 as *const libc::c_char,
     b"tANDDOT\x00" as *const u8 as *const libc::c_char,
     b"tSYMBEG\x00" as *const u8 as *const libc::c_char,
     b"tREGEXP_BEG\x00" as *const u8 as *const libc::c_char,
     b"tWORDS_BEG\x00" as *const u8 as *const libc::c_char,
     b"tSYMBOLS_BEG\x00" as *const u8 as *const libc::c_char,
     b"tSTRING_BEG\x00" as *const u8 as *const libc::c_char,
     b"tXSTRING_BEG\x00" as *const u8 as *const libc::c_char,
     b"tSTRING_DVAR\x00" as *const u8 as *const libc::c_char,
     b"tLAMBEG\x00" as *const u8 as *const libc::c_char,
     b"tHEREDOC_BEG\x00" as *const u8 as *const libc::c_char,
     b"tHEREDOC_END\x00" as *const u8 as *const libc::c_char,
     b"tLITERAL_DELIM\x00" as *const u8 as *const libc::c_char,
     b"tHD_LITERAL_DELIM\x00" as *const u8 as *const libc::c_char,
     b"tHD_STRING_PART\x00" as *const u8 as *const libc::c_char,
     b"tHD_STRING_MID\x00" as *const u8 as *const libc::c_char,
     b"tLOWEST\x00" as *const u8 as *const libc::c_char,
     b"\'=\'\x00" as *const u8 as *const libc::c_char,
     b"\'?\'\x00" as *const u8 as *const libc::c_char,
     b"\':\'\x00" as *const u8 as *const libc::c_char,
     b"\'>\'\x00" as *const u8 as *const libc::c_char,
     b"\'<\'\x00" as *const u8 as *const libc::c_char,
     b"\'|\'\x00" as *const u8 as *const libc::c_char,
     b"\'^\'\x00" as *const u8 as *const libc::c_char,
     b"\'&\'\x00" as *const u8 as *const libc::c_char,
     b"\'+\'\x00" as *const u8 as *const libc::c_char,
     b"\'-\'\x00" as *const u8 as *const libc::c_char,
     b"\'*\'\x00" as *const u8 as *const libc::c_char,
     b"\'/\'\x00" as *const u8 as *const libc::c_char,
     b"\'%\'\x00" as *const u8 as *const libc::c_char,
     b"tUMINUS_NUM\x00" as *const u8 as *const libc::c_char,
     b"\'!\'\x00" as *const u8 as *const libc::c_char,
     b"\'~\'\x00" as *const u8 as *const libc::c_char,
     b"tLAST_TOKEN\x00" as *const u8 as *const libc::c_char,
     b"\'{\'\x00" as *const u8 as *const libc::c_char,
     b"\'}\'\x00" as *const u8 as *const libc::c_char,
     b"\'[\'\x00" as *const u8 as *const libc::c_char,
     b"\',\'\x00" as *const u8 as *const libc::c_char,
     b"\'`\'\x00" as *const u8 as *const libc::c_char,
     b"\'(\'\x00" as *const u8 as *const libc::c_char,
     b"\')\'\x00" as *const u8 as *const libc::c_char,
     b"\']\'\x00" as *const u8 as *const libc::c_char,
     b"\';\'\x00" as *const u8 as *const libc::c_char,
     b"\'.\'\x00" as *const u8 as *const libc::c_char,
     b"\'\\n\'\x00" as *const u8 as *const libc::c_char,
     b"$accept\x00" as *const u8 as *const libc::c_char,
     b"program\x00" as *const u8 as *const libc::c_char,
     b"@1\x00" as *const u8 as *const libc::c_char,
     b"top_compstmt\x00" as *const u8 as *const libc::c_char,
     b"top_stmts\x00" as *const u8 as *const libc::c_char,
     b"top_stmt\x00" as *const u8 as *const libc::c_char,
     b"@2\x00" as *const u8 as *const libc::c_char,
     b"bodystmt\x00" as *const u8 as *const libc::c_char,
     b"compstmt\x00" as *const u8 as *const libc::c_char,
     b"stmts\x00" as *const u8 as *const libc::c_char,
     b"stmt\x00" as *const u8 as *const libc::c_char,
     b"@3\x00" as *const u8 as *const libc::c_char,
     b"command_asgn\x00" as *const u8 as *const libc::c_char,
     b"command_rhs\x00" as *const u8 as *const libc::c_char,
     b"expr\x00" as *const u8 as *const libc::c_char,
     b"expr_value\x00" as *const u8 as *const libc::c_char,
     b"command_call\x00" as *const u8 as *const libc::c_char,
     b"block_command\x00" as *const u8 as *const libc::c_char,
     b"cmd_brace_block\x00" as *const u8 as *const libc::c_char,
     b"@4\x00" as *const u8 as *const libc::c_char,
     b"command\x00" as *const u8 as *const libc::c_char,
     b"mlhs\x00" as *const u8 as *const libc::c_char,
     b"mlhs_inner\x00" as *const u8 as *const libc::c_char,
     b"mlhs_basic\x00" as *const u8 as *const libc::c_char,
     b"mlhs_item\x00" as *const u8 as *const libc::c_char,
     b"mlhs_list\x00" as *const u8 as *const libc::c_char,
     b"mlhs_post\x00" as *const u8 as *const libc::c_char,
     b"mlhs_node\x00" as *const u8 as *const libc::c_char,
     b"lhs\x00" as *const u8 as *const libc::c_char,
     b"cname\x00" as *const u8 as *const libc::c_char,
     b"cpath\x00" as *const u8 as *const libc::c_char,
     b"fname\x00" as *const u8 as *const libc::c_char,
     b"fsym\x00" as *const u8 as *const libc::c_char,
     b"undef_list\x00" as *const u8 as *const libc::c_char,
     b"@5\x00" as *const u8 as *const libc::c_char,
     b"op\x00" as *const u8 as *const libc::c_char,
     b"reswords\x00" as *const u8 as *const libc::c_char,
     b"arg\x00" as *const u8 as *const libc::c_char,
     b"aref_args\x00" as *const u8 as *const libc::c_char,
     b"arg_rhs\x00" as *const u8 as *const libc::c_char,
     b"paren_args\x00" as *const u8 as *const libc::c_char,
     b"opt_paren_args\x00" as *const u8 as *const libc::c_char,
     b"opt_call_args\x00" as *const u8 as *const libc::c_char,
     b"call_args\x00" as *const u8 as *const libc::c_char,
     b"command_args\x00" as *const u8 as *const libc::c_char,
     b"@6\x00" as *const u8 as *const libc::c_char,
     b"block_arg\x00" as *const u8 as *const libc::c_char,
     b"opt_block_arg\x00" as *const u8 as *const libc::c_char,
     b"comma\x00" as *const u8 as *const libc::c_char,
     b"args\x00" as *const u8 as *const libc::c_char,
     b"mrhs\x00" as *const u8 as *const libc::c_char,
     b"primary\x00" as *const u8 as *const libc::c_char,
     b"@7\x00" as *const u8 as *const libc::c_char,
     b"@8\x00" as *const u8 as *const libc::c_char,
     b"@9\x00" as *const u8 as *const libc::c_char,
     b"@10\x00" as *const u8 as *const libc::c_char,
     b"@11\x00" as *const u8 as *const libc::c_char,
     b"@12\x00" as *const u8 as *const libc::c_char,
     b"@13\x00" as *const u8 as *const libc::c_char,
     b"@14\x00" as *const u8 as *const libc::c_char,
     b"@15\x00" as *const u8 as *const libc::c_char,
     b"@16\x00" as *const u8 as *const libc::c_char,
     b"@17\x00" as *const u8 as *const libc::c_char,
     b"@18\x00" as *const u8 as *const libc::c_char,
     b"@19\x00" as *const u8 as *const libc::c_char,
     b"@20\x00" as *const u8 as *const libc::c_char,
     b"@21\x00" as *const u8 as *const libc::c_char,
     b"@22\x00" as *const u8 as *const libc::c_char,
     b"@23\x00" as *const u8 as *const libc::c_char,
     b"@24\x00" as *const u8 as *const libc::c_char,
     b"@25\x00" as *const u8 as *const libc::c_char,
     b"@26\x00" as *const u8 as *const libc::c_char,
     b"primary_value\x00" as *const u8 as *const libc::c_char,
     b"then\x00" as *const u8 as *const libc::c_char,
     b"do\x00" as *const u8 as *const libc::c_char,
     b"if_tail\x00" as *const u8 as *const libc::c_char,
     b"opt_else\x00" as *const u8 as *const libc::c_char,
     b"for_var\x00" as *const u8 as *const libc::c_char,
     b"f_margs\x00" as *const u8 as *const libc::c_char,
     b"@27\x00" as *const u8 as *const libc::c_char,
     b"block_args_tail\x00" as *const u8 as *const libc::c_char,
     b"opt_block_args_tail\x00" as *const u8 as *const libc::c_char,
     b"block_param\x00" as *const u8 as *const libc::c_char,
     b"opt_block_param\x00" as *const u8 as *const libc::c_char,
     b"block_param_def\x00" as *const u8 as *const libc::c_char,
     b"@28\x00" as *const u8 as *const libc::c_char,
     b"opt_bv_decl\x00" as *const u8 as *const libc::c_char,
     b"bv_decls\x00" as *const u8 as *const libc::c_char,
     b"bvar\x00" as *const u8 as *const libc::c_char,
     b"f_larglist\x00" as *const u8 as *const libc::c_char,
     b"lambda_body\x00" as *const u8 as *const libc::c_char,
     b"do_block\x00" as *const u8 as *const libc::c_char,
     b"@29\x00" as *const u8 as *const libc::c_char,
     b"block_call\x00" as *const u8 as *const libc::c_char,
     b"method_call\x00" as *const u8 as *const libc::c_char,
     b"brace_block\x00" as *const u8 as *const libc::c_char,
     b"@30\x00" as *const u8 as *const libc::c_char,
     b"@31\x00" as *const u8 as *const libc::c_char,
     b"case_body\x00" as *const u8 as *const libc::c_char,
     b"cases\x00" as *const u8 as *const libc::c_char,
     b"opt_rescue\x00" as *const u8 as *const libc::c_char,
     b"exc_list\x00" as *const u8 as *const libc::c_char,
     b"exc_var\x00" as *const u8 as *const libc::c_char,
     b"opt_ensure\x00" as *const u8 as *const libc::c_char,
     b"literal\x00" as *const u8 as *const libc::c_char,
     b"string\x00" as *const u8 as *const libc::c_char,
     b"string_fragment\x00" as *const u8 as *const libc::c_char,
     b"string_rep\x00" as *const u8 as *const libc::c_char,
     b"string_interp\x00" as *const u8 as *const libc::c_char,
     b"@32\x00" as *const u8 as *const libc::c_char,
     b"xstring\x00" as *const u8 as *const libc::c_char,
     b"regexp\x00" as *const u8 as *const libc::c_char,
     b"heredoc\x00" as *const u8 as *const libc::c_char,
     b"heredoc_bodies\x00" as *const u8 as *const libc::c_char,
     b"heredoc_body\x00" as *const u8 as *const libc::c_char,
     b"heredoc_string_rep\x00" as *const u8 as *const libc::c_char,
     b"heredoc_string_interp\x00" as *const u8 as *const libc::c_char,
     b"@33\x00" as *const u8 as *const libc::c_char,
     b"words\x00" as *const u8 as *const libc::c_char,
     b"symbol\x00" as *const u8 as *const libc::c_char,
     b"basic_symbol\x00" as *const u8 as *const libc::c_char,
     b"sym\x00" as *const u8 as *const libc::c_char,
     b"symbols\x00" as *const u8 as *const libc::c_char,
     b"numeric\x00" as *const u8 as *const libc::c_char,
     b"variable\x00" as *const u8 as *const libc::c_char,
     b"var_lhs\x00" as *const u8 as *const libc::c_char,
     b"var_ref\x00" as *const u8 as *const libc::c_char,
     b"backref\x00" as *const u8 as *const libc::c_char,
     b"superclass\x00" as *const u8 as *const libc::c_char,
     b"@34\x00" as *const u8 as *const libc::c_char,
     b"f_arglist\x00" as *const u8 as *const libc::c_char,
     b"f_label\x00" as *const u8 as *const libc::c_char,
     b"f_kw\x00" as *const u8 as *const libc::c_char,
     b"f_block_kw\x00" as *const u8 as *const libc::c_char,
     b"f_block_kwarg\x00" as *const u8 as *const libc::c_char,
     b"f_kwarg\x00" as *const u8 as *const libc::c_char,
     b"kwrest_mark\x00" as *const u8 as *const libc::c_char,
     b"f_kwrest\x00" as *const u8 as *const libc::c_char,
     b"args_tail\x00" as *const u8 as *const libc::c_char,
     b"opt_args_tail\x00" as *const u8 as *const libc::c_char,
     b"f_args\x00" as *const u8 as *const libc::c_char,
     b"f_bad_arg\x00" as *const u8 as *const libc::c_char,
     b"f_norm_arg\x00" as *const u8 as *const libc::c_char,
     b"f_arg_item\x00" as *const u8 as *const libc::c_char,
     b"@35\x00" as *const u8 as *const libc::c_char,
     b"f_arg\x00" as *const u8 as *const libc::c_char,
     b"f_opt_asgn\x00" as *const u8 as *const libc::c_char,
     b"f_opt\x00" as *const u8 as *const libc::c_char,
     b"f_block_opt\x00" as *const u8 as *const libc::c_char,
     b"f_block_optarg\x00" as *const u8 as *const libc::c_char,
     b"f_optarg\x00" as *const u8 as *const libc::c_char,
     b"restarg_mark\x00" as *const u8 as *const libc::c_char,
     b"f_rest_arg\x00" as *const u8 as *const libc::c_char,
     b"blkarg_mark\x00" as *const u8 as *const libc::c_char,
     b"f_block_arg\x00" as *const u8 as *const libc::c_char,
     b"opt_f_block_arg\x00" as *const u8 as *const libc::c_char,
     b"singleton\x00" as *const u8 as *const libc::c_char,
     b"@36\x00" as *const u8 as *const libc::c_char,
     b"assoc_list\x00" as *const u8 as *const libc::c_char,
     b"assocs\x00" as *const u8 as *const libc::c_char,
     b"assoc\x00" as *const u8 as *const libc::c_char,
     b"operation\x00" as *const u8 as *const libc::c_char,
     b"operation2\x00" as *const u8 as *const libc::c_char,
     b"operation3\x00" as *const u8 as *const libc::c_char,
     b"dot_or_colon\x00" as *const u8 as *const libc::c_char,
     b"call_op\x00" as *const u8 as *const libc::c_char,
     b"call_op2\x00" as *const u8 as *const libc::c_char,
     b"opt_terms\x00" as *const u8 as *const libc::c_char,
     b"opt_nl\x00" as *const u8 as *const libc::c_char,
     b"rparen\x00" as *const u8 as *const libc::c_char,
     b"rbracket\x00" as *const u8 as *const libc::c_char,
     b"trailer\x00" as *const u8 as *const libc::c_char,
     b"term\x00" as *const u8 as *const libc::c_char,
     b"nl\x00" as *const u8 as *const libc::c_char,
     b"terms\x00" as *const u8 as *const libc::c_char,
     b"none\x00" as *const u8 as *const libc::c_char,
     0 as *const libc::c_char];
static mut yyr1: [yytype_uint16; 588] =
    [0i32 as yytype_uint16, 146i32 as yytype_uint16, 148i32 as yytype_uint16,
     147i32 as yytype_uint16, 149i32 as yytype_uint16,
     150i32 as yytype_uint16, 150i32 as yytype_uint16,
     150i32 as yytype_uint16, 150i32 as yytype_uint16,
     151i32 as yytype_uint16, 152i32 as yytype_uint16,
     151i32 as yytype_uint16, 153i32 as yytype_uint16,
     154i32 as yytype_uint16, 155i32 as yytype_uint16,
     155i32 as yytype_uint16, 155i32 as yytype_uint16,
     155i32 as yytype_uint16, 157i32 as yytype_uint16,
     156i32 as yytype_uint16, 156i32 as yytype_uint16,
     156i32 as yytype_uint16, 156i32 as yytype_uint16,
     156i32 as yytype_uint16, 156i32 as yytype_uint16,
     156i32 as yytype_uint16, 156i32 as yytype_uint16,
     156i32 as yytype_uint16, 156i32 as yytype_uint16,
     156i32 as yytype_uint16, 156i32 as yytype_uint16,
     156i32 as yytype_uint16, 156i32 as yytype_uint16,
     158i32 as yytype_uint16, 158i32 as yytype_uint16,
     158i32 as yytype_uint16, 158i32 as yytype_uint16,
     158i32 as yytype_uint16, 158i32 as yytype_uint16,
     158i32 as yytype_uint16, 158i32 as yytype_uint16,
     159i32 as yytype_uint16, 159i32 as yytype_uint16,
     159i32 as yytype_uint16, 160i32 as yytype_uint16,
     160i32 as yytype_uint16, 160i32 as yytype_uint16,
     160i32 as yytype_uint16, 160i32 as yytype_uint16,
     160i32 as yytype_uint16, 161i32 as yytype_uint16,
     162i32 as yytype_uint16, 162i32 as yytype_uint16,
     163i32 as yytype_uint16, 163i32 as yytype_uint16,
     165i32 as yytype_uint16, 164i32 as yytype_uint16,
     166i32 as yytype_uint16, 166i32 as yytype_uint16,
     166i32 as yytype_uint16, 166i32 as yytype_uint16,
     166i32 as yytype_uint16, 166i32 as yytype_uint16,
     166i32 as yytype_uint16, 166i32 as yytype_uint16,
     166i32 as yytype_uint16, 166i32 as yytype_uint16,
     166i32 as yytype_uint16, 167i32 as yytype_uint16,
     167i32 as yytype_uint16, 168i32 as yytype_uint16,
     168i32 as yytype_uint16, 169i32 as yytype_uint16,
     169i32 as yytype_uint16, 169i32 as yytype_uint16,
     169i32 as yytype_uint16, 169i32 as yytype_uint16,
     169i32 as yytype_uint16, 169i32 as yytype_uint16,
     169i32 as yytype_uint16, 169i32 as yytype_uint16,
     169i32 as yytype_uint16, 170i32 as yytype_uint16,
     170i32 as yytype_uint16, 171i32 as yytype_uint16,
     171i32 as yytype_uint16, 172i32 as yytype_uint16,
     172i32 as yytype_uint16, 173i32 as yytype_uint16,
     173i32 as yytype_uint16, 173i32 as yytype_uint16,
     173i32 as yytype_uint16, 173i32 as yytype_uint16,
     173i32 as yytype_uint16, 173i32 as yytype_uint16,
     173i32 as yytype_uint16, 174i32 as yytype_uint16,
     174i32 as yytype_uint16, 174i32 as yytype_uint16,
     174i32 as yytype_uint16, 174i32 as yytype_uint16,
     174i32 as yytype_uint16, 174i32 as yytype_uint16,
     174i32 as yytype_uint16, 175i32 as yytype_uint16,
     175i32 as yytype_uint16, 176i32 as yytype_uint16,
     176i32 as yytype_uint16, 176i32 as yytype_uint16,
     177i32 as yytype_uint16, 177i32 as yytype_uint16,
     177i32 as yytype_uint16, 177i32 as yytype_uint16,
     177i32 as yytype_uint16, 178i32 as yytype_uint16,
     178i32 as yytype_uint16, 179i32 as yytype_uint16,
     180i32 as yytype_uint16, 179i32 as yytype_uint16,
     181i32 as yytype_uint16, 181i32 as yytype_uint16,
     181i32 as yytype_uint16, 181i32 as yytype_uint16,
     181i32 as yytype_uint16, 181i32 as yytype_uint16,
     181i32 as yytype_uint16, 181i32 as yytype_uint16,
     181i32 as yytype_uint16, 181i32 as yytype_uint16,
     181i32 as yytype_uint16, 181i32 as yytype_uint16,
     181i32 as yytype_uint16, 181i32 as yytype_uint16,
     181i32 as yytype_uint16, 181i32 as yytype_uint16,
     181i32 as yytype_uint16, 181i32 as yytype_uint16,
     181i32 as yytype_uint16, 181i32 as yytype_uint16,
     181i32 as yytype_uint16, 181i32 as yytype_uint16,
     181i32 as yytype_uint16, 181i32 as yytype_uint16,
     181i32 as yytype_uint16, 181i32 as yytype_uint16,
     181i32 as yytype_uint16, 181i32 as yytype_uint16,
     181i32 as yytype_uint16, 181i32 as yytype_uint16,
     182i32 as yytype_uint16, 182i32 as yytype_uint16,
     182i32 as yytype_uint16, 182i32 as yytype_uint16,
     182i32 as yytype_uint16, 182i32 as yytype_uint16,
     182i32 as yytype_uint16, 182i32 as yytype_uint16,
     182i32 as yytype_uint16, 182i32 as yytype_uint16,
     182i32 as yytype_uint16, 182i32 as yytype_uint16,
     182i32 as yytype_uint16, 182i32 as yytype_uint16,
     182i32 as yytype_uint16, 182i32 as yytype_uint16,
     182i32 as yytype_uint16, 182i32 as yytype_uint16,
     182i32 as yytype_uint16, 182i32 as yytype_uint16,
     182i32 as yytype_uint16, 182i32 as yytype_uint16,
     182i32 as yytype_uint16, 182i32 as yytype_uint16,
     182i32 as yytype_uint16, 182i32 as yytype_uint16,
     182i32 as yytype_uint16, 182i32 as yytype_uint16,
     182i32 as yytype_uint16, 182i32 as yytype_uint16,
     182i32 as yytype_uint16, 182i32 as yytype_uint16,
     182i32 as yytype_uint16, 182i32 as yytype_uint16,
     182i32 as yytype_uint16, 182i32 as yytype_uint16,
     182i32 as yytype_uint16, 182i32 as yytype_uint16,
     182i32 as yytype_uint16, 182i32 as yytype_uint16,
     183i32 as yytype_uint16, 183i32 as yytype_uint16,
     183i32 as yytype_uint16, 183i32 as yytype_uint16,
     183i32 as yytype_uint16, 183i32 as yytype_uint16,
     183i32 as yytype_uint16, 183i32 as yytype_uint16,
     183i32 as yytype_uint16, 183i32 as yytype_uint16,
     183i32 as yytype_uint16, 183i32 as yytype_uint16,
     183i32 as yytype_uint16, 183i32 as yytype_uint16,
     183i32 as yytype_uint16, 183i32 as yytype_uint16,
     183i32 as yytype_uint16, 183i32 as yytype_uint16,
     183i32 as yytype_uint16, 183i32 as yytype_uint16,
     183i32 as yytype_uint16, 183i32 as yytype_uint16,
     183i32 as yytype_uint16, 183i32 as yytype_uint16,
     183i32 as yytype_uint16, 183i32 as yytype_uint16,
     183i32 as yytype_uint16, 183i32 as yytype_uint16,
     183i32 as yytype_uint16, 183i32 as yytype_uint16,
     183i32 as yytype_uint16, 183i32 as yytype_uint16,
     183i32 as yytype_uint16, 183i32 as yytype_uint16,
     183i32 as yytype_uint16, 183i32 as yytype_uint16,
     183i32 as yytype_uint16, 183i32 as yytype_uint16,
     183i32 as yytype_uint16, 183i32 as yytype_uint16,
     183i32 as yytype_uint16, 183i32 as yytype_uint16,
     183i32 as yytype_uint16, 184i32 as yytype_uint16,
     184i32 as yytype_uint16, 184i32 as yytype_uint16,
     184i32 as yytype_uint16, 185i32 as yytype_uint16,
     185i32 as yytype_uint16, 186i32 as yytype_uint16,
     187i32 as yytype_uint16, 187i32 as yytype_uint16,
     188i32 as yytype_uint16, 188i32 as yytype_uint16,
     188i32 as yytype_uint16, 188i32 as yytype_uint16,
     188i32 as yytype_uint16, 189i32 as yytype_uint16,
     189i32 as yytype_uint16, 189i32 as yytype_uint16,
     189i32 as yytype_uint16, 189i32 as yytype_uint16,
     191i32 as yytype_uint16, 190i32 as yytype_uint16,
     192i32 as yytype_uint16, 193i32 as yytype_uint16,
     193i32 as yytype_uint16, 194i32 as yytype_uint16,
     194i32 as yytype_uint16, 195i32 as yytype_uint16,
     195i32 as yytype_uint16, 195i32 as yytype_uint16,
     195i32 as yytype_uint16, 196i32 as yytype_uint16,
     196i32 as yytype_uint16, 196i32 as yytype_uint16,
     197i32 as yytype_uint16, 197i32 as yytype_uint16,
     197i32 as yytype_uint16, 197i32 as yytype_uint16,
     197i32 as yytype_uint16, 197i32 as yytype_uint16,
     197i32 as yytype_uint16, 197i32 as yytype_uint16,
     198i32 as yytype_uint16, 197i32 as yytype_uint16,
     199i32 as yytype_uint16, 200i32 as yytype_uint16,
     197i32 as yytype_uint16, 201i32 as yytype_uint16,
     197i32 as yytype_uint16, 197i32 as yytype_uint16,
     197i32 as yytype_uint16, 197i32 as yytype_uint16,
     197i32 as yytype_uint16, 197i32 as yytype_uint16,
     197i32 as yytype_uint16, 197i32 as yytype_uint16,
     197i32 as yytype_uint16, 197i32 as yytype_uint16,
     197i32 as yytype_uint16, 197i32 as yytype_uint16,
     197i32 as yytype_uint16, 202i32 as yytype_uint16,
     203i32 as yytype_uint16, 197i32 as yytype_uint16,
     197i32 as yytype_uint16, 197i32 as yytype_uint16,
     204i32 as yytype_uint16, 205i32 as yytype_uint16,
     197i32 as yytype_uint16, 206i32 as yytype_uint16,
     207i32 as yytype_uint16, 197i32 as yytype_uint16,
     197i32 as yytype_uint16, 197i32 as yytype_uint16,
     208i32 as yytype_uint16, 209i32 as yytype_uint16,
     197i32 as yytype_uint16, 210i32 as yytype_uint16,
     197i32 as yytype_uint16, 211i32 as yytype_uint16,
     212i32 as yytype_uint16, 197i32 as yytype_uint16,
     213i32 as yytype_uint16, 197i32 as yytype_uint16,
     214i32 as yytype_uint16, 215i32 as yytype_uint16,
     197i32 as yytype_uint16, 216i32 as yytype_uint16,
     217i32 as yytype_uint16, 197i32 as yytype_uint16,
     197i32 as yytype_uint16, 197i32 as yytype_uint16,
     197i32 as yytype_uint16, 197i32 as yytype_uint16,
     218i32 as yytype_uint16, 219i32 as yytype_uint16,
     219i32 as yytype_uint16, 219i32 as yytype_uint16,
     220i32 as yytype_uint16, 220i32 as yytype_uint16,
     221i32 as yytype_uint16, 221i32 as yytype_uint16,
     222i32 as yytype_uint16, 222i32 as yytype_uint16,
     223i32 as yytype_uint16, 223i32 as yytype_uint16,
     224i32 as yytype_uint16, 224i32 as yytype_uint16,
     224i32 as yytype_uint16, 224i32 as yytype_uint16,
     224i32 as yytype_uint16, 224i32 as yytype_uint16,
     224i32 as yytype_uint16, 224i32 as yytype_uint16,
     225i32 as yytype_uint16, 224i32 as yytype_uint16,
     226i32 as yytype_uint16, 226i32 as yytype_uint16,
     226i32 as yytype_uint16, 226i32 as yytype_uint16,
     227i32 as yytype_uint16, 227i32 as yytype_uint16,
     228i32 as yytype_uint16, 228i32 as yytype_uint16,
     228i32 as yytype_uint16, 228i32 as yytype_uint16,
     228i32 as yytype_uint16, 228i32 as yytype_uint16,
     228i32 as yytype_uint16, 228i32 as yytype_uint16,
     228i32 as yytype_uint16, 228i32 as yytype_uint16,
     228i32 as yytype_uint16, 228i32 as yytype_uint16,
     228i32 as yytype_uint16, 228i32 as yytype_uint16,
     228i32 as yytype_uint16, 229i32 as yytype_uint16,
     229i32 as yytype_uint16, 231i32 as yytype_uint16,
     230i32 as yytype_uint16, 230i32 as yytype_uint16,
     230i32 as yytype_uint16, 232i32 as yytype_uint16,
     232i32 as yytype_uint16, 233i32 as yytype_uint16,
     233i32 as yytype_uint16, 234i32 as yytype_uint16,
     234i32 as yytype_uint16, 235i32 as yytype_uint16,
     235i32 as yytype_uint16, 236i32 as yytype_uint16,
     236i32 as yytype_uint16, 238i32 as yytype_uint16,
     237i32 as yytype_uint16, 239i32 as yytype_uint16,
     239i32 as yytype_uint16, 239i32 as yytype_uint16,
     239i32 as yytype_uint16, 240i32 as yytype_uint16,
     240i32 as yytype_uint16, 240i32 as yytype_uint16,
     240i32 as yytype_uint16, 240i32 as yytype_uint16,
     240i32 as yytype_uint16, 240i32 as yytype_uint16,
     240i32 as yytype_uint16, 240i32 as yytype_uint16,
     242i32 as yytype_uint16, 241i32 as yytype_uint16,
     243i32 as yytype_uint16, 241i32 as yytype_uint16,
     244i32 as yytype_uint16, 245i32 as yytype_uint16,
     245i32 as yytype_uint16, 246i32 as yytype_uint16,
     246i32 as yytype_uint16, 247i32 as yytype_uint16,
     247i32 as yytype_uint16, 247i32 as yytype_uint16,
     248i32 as yytype_uint16, 248i32 as yytype_uint16,
     249i32 as yytype_uint16, 249i32 as yytype_uint16,
     250i32 as yytype_uint16, 250i32 as yytype_uint16,
     250i32 as yytype_uint16, 250i32 as yytype_uint16,
     251i32 as yytype_uint16, 251i32 as yytype_uint16,
     252i32 as yytype_uint16, 252i32 as yytype_uint16,
     252i32 as yytype_uint16, 252i32 as yytype_uint16,
     253i32 as yytype_uint16, 253i32 as yytype_uint16,
     254i32 as yytype_uint16, 255i32 as yytype_uint16,
     254i32 as yytype_uint16, 254i32 as yytype_uint16,
     254i32 as yytype_uint16, 256i32 as yytype_uint16,
     256i32 as yytype_uint16, 257i32 as yytype_uint16,
     257i32 as yytype_uint16, 258i32 as yytype_uint16,
     259i32 as yytype_uint16, 259i32 as yytype_uint16,
     260i32 as yytype_uint16, 260i32 as yytype_uint16,
     261i32 as yytype_uint16, 261i32 as yytype_uint16,
     262i32 as yytype_uint16, 263i32 as yytype_uint16,
     262i32 as yytype_uint16, 264i32 as yytype_uint16,
     264i32 as yytype_uint16, 265i32 as yytype_uint16,
     265i32 as yytype_uint16, 266i32 as yytype_uint16,
     267i32 as yytype_uint16, 267i32 as yytype_uint16,
     267i32 as yytype_uint16, 267i32 as yytype_uint16,
     267i32 as yytype_uint16, 267i32 as yytype_uint16,
     268i32 as yytype_uint16, 268i32 as yytype_uint16,
     269i32 as yytype_uint16, 269i32 as yytype_uint16,
     269i32 as yytype_uint16, 269i32 as yytype_uint16,
     270i32 as yytype_uint16, 270i32 as yytype_uint16,
     270i32 as yytype_uint16, 270i32 as yytype_uint16,
     270i32 as yytype_uint16, 271i32 as yytype_uint16,
     272i32 as yytype_uint16, 272i32 as yytype_uint16,
     272i32 as yytype_uint16, 272i32 as yytype_uint16,
     272i32 as yytype_uint16, 272i32 as yytype_uint16,
     272i32 as yytype_uint16, 272i32 as yytype_uint16,
     273i32 as yytype_uint16, 273i32 as yytype_uint16,
     274i32 as yytype_uint16, 275i32 as yytype_uint16,
     274i32 as yytype_uint16, 276i32 as yytype_uint16,
     276i32 as yytype_uint16, 277i32 as yytype_uint16,
     278i32 as yytype_uint16, 278i32 as yytype_uint16,
     279i32 as yytype_uint16, 279i32 as yytype_uint16,
     280i32 as yytype_uint16, 280i32 as yytype_uint16,
     281i32 as yytype_uint16, 281i32 as yytype_uint16,
     282i32 as yytype_uint16, 282i32 as yytype_uint16,
     283i32 as yytype_uint16, 283i32 as yytype_uint16,
     284i32 as yytype_uint16, 284i32 as yytype_uint16,
     284i32 as yytype_uint16, 284i32 as yytype_uint16,
     285i32 as yytype_uint16, 285i32 as yytype_uint16,
     286i32 as yytype_uint16, 286i32 as yytype_uint16,
     286i32 as yytype_uint16, 286i32 as yytype_uint16,
     286i32 as yytype_uint16, 286i32 as yytype_uint16,
     286i32 as yytype_uint16, 286i32 as yytype_uint16,
     286i32 as yytype_uint16, 286i32 as yytype_uint16,
     286i32 as yytype_uint16, 286i32 as yytype_uint16,
     286i32 as yytype_uint16, 286i32 as yytype_uint16,
     286i32 as yytype_uint16, 287i32 as yytype_uint16,
     287i32 as yytype_uint16, 287i32 as yytype_uint16,
     287i32 as yytype_uint16, 288i32 as yytype_uint16,
     288i32 as yytype_uint16, 289i32 as yytype_uint16,
     290i32 as yytype_uint16, 289i32 as yytype_uint16,
     291i32 as yytype_uint16, 291i32 as yytype_uint16,
     292i32 as yytype_uint16, 293i32 as yytype_uint16,
     294i32 as yytype_uint16, 295i32 as yytype_uint16,
     295i32 as yytype_uint16, 296i32 as yytype_uint16,
     296i32 as yytype_uint16, 297i32 as yytype_uint16,
     297i32 as yytype_uint16, 298i32 as yytype_uint16,
     298i32 as yytype_uint16, 299i32 as yytype_uint16,
     299i32 as yytype_uint16, 300i32 as yytype_uint16,
     301i32 as yytype_uint16, 301i32 as yytype_uint16,
     302i32 as yytype_uint16, 303i32 as yytype_uint16,
     302i32 as yytype_uint16, 304i32 as yytype_uint16,
     304i32 as yytype_uint16, 305i32 as yytype_uint16,
     305i32 as yytype_uint16, 306i32 as yytype_uint16,
     306i32 as yytype_uint16, 306i32 as yytype_uint16,
     306i32 as yytype_uint16, 307i32 as yytype_uint16,
     307i32 as yytype_uint16, 307i32 as yytype_uint16,
     308i32 as yytype_uint16, 308i32 as yytype_uint16,
     308i32 as yytype_uint16, 308i32 as yytype_uint16,
     309i32 as yytype_uint16, 309i32 as yytype_uint16,
     309i32 as yytype_uint16, 310i32 as yytype_uint16,
     310i32 as yytype_uint16, 311i32 as yytype_uint16,
     311i32 as yytype_uint16, 312i32 as yytype_uint16,
     312i32 as yytype_uint16, 313i32 as yytype_uint16,
     313i32 as yytype_uint16, 314i32 as yytype_uint16,
     314i32 as yytype_uint16, 315i32 as yytype_uint16,
     316i32 as yytype_uint16, 317i32 as yytype_uint16,
     317i32 as yytype_uint16, 317i32 as yytype_uint16,
     318i32 as yytype_uint16, 318i32 as yytype_uint16,
     318i32 as yytype_uint16, 319i32 as yytype_uint16,
     320i32 as yytype_uint16, 320i32 as yytype_uint16,
     321i32 as yytype_uint16];
static mut yyr2: [yytype_uint8; 588] =
    [0i32 as yytype_uint8, 2i32 as yytype_uint8, 0i32 as yytype_uint8,
     2i32 as yytype_uint8, 2i32 as yytype_uint8, 1i32 as yytype_uint8,
     1i32 as yytype_uint8, 3i32 as yytype_uint8, 2i32 as yytype_uint8,
     1i32 as yytype_uint8, 0i32 as yytype_uint8, 5i32 as yytype_uint8,
     4i32 as yytype_uint8, 2i32 as yytype_uint8, 1i32 as yytype_uint8,
     1i32 as yytype_uint8, 3i32 as yytype_uint8, 2i32 as yytype_uint8,
     0i32 as yytype_uint8, 4i32 as yytype_uint8, 2i32 as yytype_uint8,
     3i32 as yytype_uint8, 3i32 as yytype_uint8, 3i32 as yytype_uint8,
     3i32 as yytype_uint8, 3i32 as yytype_uint8, 4i32 as yytype_uint8,
     1i32 as yytype_uint8, 3i32 as yytype_uint8, 3i32 as yytype_uint8,
     3i32 as yytype_uint8, 3i32 as yytype_uint8, 1i32 as yytype_uint8,
     3i32 as yytype_uint8, 3i32 as yytype_uint8, 6i32 as yytype_uint8,
     5i32 as yytype_uint8, 5i32 as yytype_uint8, 5i32 as yytype_uint8,
     5i32 as yytype_uint8, 3i32 as yytype_uint8, 1i32 as yytype_uint8,
     3i32 as yytype_uint8, 1i32 as yytype_uint8, 1i32 as yytype_uint8,
     3i32 as yytype_uint8, 3i32 as yytype_uint8, 3i32 as yytype_uint8,
     2i32 as yytype_uint8, 1i32 as yytype_uint8, 1i32 as yytype_uint8,
     1i32 as yytype_uint8, 1i32 as yytype_uint8, 1i32 as yytype_uint8,
     4i32 as yytype_uint8, 0i32 as yytype_uint8, 5i32 as yytype_uint8,
     2i32 as yytype_uint8, 3i32 as yytype_uint8, 4i32 as yytype_uint8,
     5i32 as yytype_uint8, 4i32 as yytype_uint8, 5i32 as yytype_uint8,
     2i32 as yytype_uint8, 2i32 as yytype_uint8, 2i32 as yytype_uint8,
     2i32 as yytype_uint8, 2i32 as yytype_uint8, 1i32 as yytype_uint8,
     3i32 as yytype_uint8, 1i32 as yytype_uint8, 3i32 as yytype_uint8,
     1i32 as yytype_uint8, 2i32 as yytype_uint8, 3i32 as yytype_uint8,
     5i32 as yytype_uint8, 2i32 as yytype_uint8, 4i32 as yytype_uint8,
     2i32 as yytype_uint8, 4i32 as yytype_uint8, 1i32 as yytype_uint8,
     3i32 as yytype_uint8, 1i32 as yytype_uint8, 3i32 as yytype_uint8,
     2i32 as yytype_uint8, 3i32 as yytype_uint8, 1i32 as yytype_uint8,
     2i32 as yytype_uint8, 1i32 as yytype_uint8, 4i32 as yytype_uint8,
     3i32 as yytype_uint8, 3i32 as yytype_uint8, 3i32 as yytype_uint8,
     3i32 as yytype_uint8, 2i32 as yytype_uint8, 1i32 as yytype_uint8,
     1i32 as yytype_uint8, 4i32 as yytype_uint8, 3i32 as yytype_uint8,
     3i32 as yytype_uint8, 3i32 as yytype_uint8, 3i32 as yytype_uint8,
     2i32 as yytype_uint8, 1i32 as yytype_uint8, 1i32 as yytype_uint8,
     1i32 as yytype_uint8, 2i32 as yytype_uint8, 1i32 as yytype_uint8,
     3i32 as yytype_uint8, 1i32 as yytype_uint8, 1i32 as yytype_uint8,
     1i32 as yytype_uint8, 1i32 as yytype_uint8, 1i32 as yytype_uint8,
     1i32 as yytype_uint8, 1i32 as yytype_uint8, 1i32 as yytype_uint8,
     0i32 as yytype_uint8, 4i32 as yytype_uint8, 1i32 as yytype_uint8,
     1i32 as yytype_uint8, 1i32 as yytype_uint8, 1i32 as yytype_uint8,
     1i32 as yytype_uint8, 1i32 as yytype_uint8, 1i32 as yytype_uint8,
     1i32 as yytype_uint8, 1i32 as yytype_uint8, 1i32 as yytype_uint8,
     1i32 as yytype_uint8, 1i32 as yytype_uint8, 1i32 as yytype_uint8,
     1i32 as yytype_uint8, 1i32 as yytype_uint8, 1i32 as yytype_uint8,
     1i32 as yytype_uint8, 1i32 as yytype_uint8, 1i32 as yytype_uint8,
     1i32 as yytype_uint8, 1i32 as yytype_uint8, 1i32 as yytype_uint8,
     1i32 as yytype_uint8, 1i32 as yytype_uint8, 1i32 as yytype_uint8,
     1i32 as yytype_uint8, 1i32 as yytype_uint8, 1i32 as yytype_uint8,
     1i32 as yytype_uint8, 1i32 as yytype_uint8, 1i32 as yytype_uint8,
     1i32 as yytype_uint8, 1i32 as yytype_uint8, 1i32 as yytype_uint8,
     1i32 as yytype_uint8, 1i32 as yytype_uint8, 1i32 as yytype_uint8,
     1i32 as yytype_uint8, 1i32 as yytype_uint8, 1i32 as yytype_uint8,
     1i32 as yytype_uint8, 1i32 as yytype_uint8, 1i32 as yytype_uint8,
     1i32 as yytype_uint8, 1i32 as yytype_uint8, 1i32 as yytype_uint8,
     1i32 as yytype_uint8, 1i32 as yytype_uint8, 1i32 as yytype_uint8,
     1i32 as yytype_uint8, 1i32 as yytype_uint8, 1i32 as yytype_uint8,
     1i32 as yytype_uint8, 1i32 as yytype_uint8, 1i32 as yytype_uint8,
     1i32 as yytype_uint8, 1i32 as yytype_uint8, 1i32 as yytype_uint8,
     1i32 as yytype_uint8, 1i32 as yytype_uint8, 1i32 as yytype_uint8,
     1i32 as yytype_uint8, 1i32 as yytype_uint8, 1i32 as yytype_uint8,
     1i32 as yytype_uint8, 1i32 as yytype_uint8, 1i32 as yytype_uint8,
     1i32 as yytype_uint8, 1i32 as yytype_uint8, 1i32 as yytype_uint8,
     3i32 as yytype_uint8, 3i32 as yytype_uint8, 6i32 as yytype_uint8,
     5i32 as yytype_uint8, 5i32 as yytype_uint8, 5i32 as yytype_uint8,
     5i32 as yytype_uint8, 4i32 as yytype_uint8, 3i32 as yytype_uint8,
     3i32 as yytype_uint8, 3i32 as yytype_uint8, 3i32 as yytype_uint8,
     3i32 as yytype_uint8, 3i32 as yytype_uint8, 3i32 as yytype_uint8,
     3i32 as yytype_uint8, 3i32 as yytype_uint8, 4i32 as yytype_uint8,
     4i32 as yytype_uint8, 2i32 as yytype_uint8, 2i32 as yytype_uint8,
     3i32 as yytype_uint8, 3i32 as yytype_uint8, 3i32 as yytype_uint8,
     3i32 as yytype_uint8, 3i32 as yytype_uint8, 3i32 as yytype_uint8,
     3i32 as yytype_uint8, 3i32 as yytype_uint8, 3i32 as yytype_uint8,
     3i32 as yytype_uint8, 3i32 as yytype_uint8, 3i32 as yytype_uint8,
     3i32 as yytype_uint8, 2i32 as yytype_uint8, 2i32 as yytype_uint8,
     3i32 as yytype_uint8, 3i32 as yytype_uint8, 3i32 as yytype_uint8,
     3i32 as yytype_uint8, 6i32 as yytype_uint8, 6i32 as yytype_uint8,
     1i32 as yytype_uint8, 1i32 as yytype_uint8, 2i32 as yytype_uint8,
     4i32 as yytype_uint8, 2i32 as yytype_uint8, 1i32 as yytype_uint8,
     3i32 as yytype_uint8, 3i32 as yytype_uint8, 1i32 as yytype_uint8,
     1i32 as yytype_uint8, 1i32 as yytype_uint8, 1i32 as yytype_uint8,
     2i32 as yytype_uint8, 4i32 as yytype_uint8, 2i32 as yytype_uint8,
     1i32 as yytype_uint8, 2i32 as yytype_uint8, 2i32 as yytype_uint8,
     4i32 as yytype_uint8, 1i32 as yytype_uint8, 0i32 as yytype_uint8,
     2i32 as yytype_uint8, 2i32 as yytype_uint8, 2i32 as yytype_uint8,
     1i32 as yytype_uint8, 1i32 as yytype_uint8, 2i32 as yytype_uint8,
     1i32 as yytype_uint8, 2i32 as yytype_uint8, 3i32 as yytype_uint8,
     4i32 as yytype_uint8, 3i32 as yytype_uint8, 4i32 as yytype_uint8,
     2i32 as yytype_uint8, 1i32 as yytype_uint8, 1i32 as yytype_uint8,
     1i32 as yytype_uint8, 1i32 as yytype_uint8, 1i32 as yytype_uint8,
     1i32 as yytype_uint8, 1i32 as yytype_uint8, 1i32 as yytype_uint8,
     0i32 as yytype_uint8, 4i32 as yytype_uint8, 0i32 as yytype_uint8,
     0i32 as yytype_uint8, 5i32 as yytype_uint8, 0i32 as yytype_uint8,
     3i32 as yytype_uint8, 3i32 as yytype_uint8, 3i32 as yytype_uint8,
     2i32 as yytype_uint8, 3i32 as yytype_uint8, 3i32 as yytype_uint8,
     1i32 as yytype_uint8, 2i32 as yytype_uint8, 4i32 as yytype_uint8,
     3i32 as yytype_uint8, 2i32 as yytype_uint8, 1i32 as yytype_uint8,
     2i32 as yytype_uint8, 0i32 as yytype_uint8, 0i32 as yytype_uint8,
     5i32 as yytype_uint8, 6i32 as yytype_uint8, 6i32 as yytype_uint8,
     0i32 as yytype_uint8, 0i32 as yytype_uint8, 7i32 as yytype_uint8,
     0i32 as yytype_uint8, 0i32 as yytype_uint8, 7i32 as yytype_uint8,
     5i32 as yytype_uint8, 4i32 as yytype_uint8, 0i32 as yytype_uint8,
     0i32 as yytype_uint8, 9i32 as yytype_uint8, 0i32 as yytype_uint8,
     6i32 as yytype_uint8, 0i32 as yytype_uint8, 0i32 as yytype_uint8,
     8i32 as yytype_uint8, 0i32 as yytype_uint8, 5i32 as yytype_uint8,
     0i32 as yytype_uint8, 0i32 as yytype_uint8, 7i32 as yytype_uint8,
     0i32 as yytype_uint8, 0i32 as yytype_uint8, 9i32 as yytype_uint8,
     1i32 as yytype_uint8, 1i32 as yytype_uint8, 1i32 as yytype_uint8,
     1i32 as yytype_uint8, 1i32 as yytype_uint8, 1i32 as yytype_uint8,
     1i32 as yytype_uint8, 2i32 as yytype_uint8, 1i32 as yytype_uint8,
     1i32 as yytype_uint8, 1i32 as yytype_uint8, 5i32 as yytype_uint8,
     1i32 as yytype_uint8, 2i32 as yytype_uint8, 1i32 as yytype_uint8,
     1i32 as yytype_uint8, 1i32 as yytype_uint8, 4i32 as yytype_uint8,
     6i32 as yytype_uint8, 3i32 as yytype_uint8, 5i32 as yytype_uint8,
     2i32 as yytype_uint8, 4i32 as yytype_uint8, 1i32 as yytype_uint8,
     0i32 as yytype_uint8, 4i32 as yytype_uint8, 4i32 as yytype_uint8,
     2i32 as yytype_uint8, 2i32 as yytype_uint8, 1i32 as yytype_uint8,
     2i32 as yytype_uint8, 0i32 as yytype_uint8, 6i32 as yytype_uint8,
     8i32 as yytype_uint8, 4i32 as yytype_uint8, 6i32 as yytype_uint8,
     4i32 as yytype_uint8, 3i32 as yytype_uint8, 6i32 as yytype_uint8,
     2i32 as yytype_uint8, 4i32 as yytype_uint8, 6i32 as yytype_uint8,
     2i32 as yytype_uint8, 4i32 as yytype_uint8, 2i32 as yytype_uint8,
     4i32 as yytype_uint8, 1i32 as yytype_uint8, 1i32 as yytype_uint8,
     1i32 as yytype_uint8, 0i32 as yytype_uint8, 4i32 as yytype_uint8,
     1i32 as yytype_uint8, 4i32 as yytype_uint8, 1i32 as yytype_uint8,
     4i32 as yytype_uint8, 1i32 as yytype_uint8, 3i32 as yytype_uint8,
     1i32 as yytype_uint8, 1i32 as yytype_uint8, 4i32 as yytype_uint8,
     1i32 as yytype_uint8, 3i32 as yytype_uint8, 3i32 as yytype_uint8,
     0i32 as yytype_uint8, 5i32 as yytype_uint8, 2i32 as yytype_uint8,
     4i32 as yytype_uint8, 5i32 as yytype_uint8, 5i32 as yytype_uint8,
     2i32 as yytype_uint8, 4i32 as yytype_uint8, 4i32 as yytype_uint8,
     3i32 as yytype_uint8, 3i32 as yytype_uint8, 3i32 as yytype_uint8,
     2i32 as yytype_uint8, 1i32 as yytype_uint8, 4i32 as yytype_uint8,
     0i32 as yytype_uint8, 5i32 as yytype_uint8, 0i32 as yytype_uint8,
     5i32 as yytype_uint8, 5i32 as yytype_uint8, 1i32 as yytype_uint8,
     1i32 as yytype_uint8, 6i32 as yytype_uint8, 1i32 as yytype_uint8,
     1i32 as yytype_uint8, 1i32 as yytype_uint8, 1i32 as yytype_uint8,
     2i32 as yytype_uint8, 1i32 as yytype_uint8, 2i32 as yytype_uint8,
     1i32 as yytype_uint8, 1i32 as yytype_uint8, 1i32 as yytype_uint8,
     1i32 as yytype_uint8, 1i32 as yytype_uint8, 1i32 as yytype_uint8,
     2i32 as yytype_uint8, 1i32 as yytype_uint8, 1i32 as yytype_uint8,
     2i32 as yytype_uint8, 3i32 as yytype_uint8, 1i32 as yytype_uint8,
     2i32 as yytype_uint8, 1i32 as yytype_uint8, 0i32 as yytype_uint8,
     4i32 as yytype_uint8, 1i32 as yytype_uint8, 2i32 as yytype_uint8,
     2i32 as yytype_uint8, 3i32 as yytype_uint8, 2i32 as yytype_uint8,
     3i32 as yytype_uint8, 1i32 as yytype_uint8, 1i32 as yytype_uint8,
     2i32 as yytype_uint8, 1i32 as yytype_uint8, 2i32 as yytype_uint8,
     1i32 as yytype_uint8, 2i32 as yytype_uint8, 1i32 as yytype_uint8,
     0i32 as yytype_uint8, 4i32 as yytype_uint8, 2i32 as yytype_uint8,
     3i32 as yytype_uint8, 1i32 as yytype_uint8, 4i32 as yytype_uint8,
     2i32 as yytype_uint8, 1i32 as yytype_uint8, 1i32 as yytype_uint8,
     1i32 as yytype_uint8, 1i32 as yytype_uint8, 1i32 as yytype_uint8,
     2i32 as yytype_uint8, 2i32 as yytype_uint8, 3i32 as yytype_uint8,
     1i32 as yytype_uint8, 1i32 as yytype_uint8, 2i32 as yytype_uint8,
     2i32 as yytype_uint8, 1i32 as yytype_uint8, 1i32 as yytype_uint8,
     1i32 as yytype_uint8, 1i32 as yytype_uint8, 1i32 as yytype_uint8,
     1i32 as yytype_uint8, 1i32 as yytype_uint8, 1i32 as yytype_uint8,
     1i32 as yytype_uint8, 1i32 as yytype_uint8, 1i32 as yytype_uint8,
     1i32 as yytype_uint8, 1i32 as yytype_uint8, 1i32 as yytype_uint8,
     1i32 as yytype_uint8, 1i32 as yytype_uint8, 0i32 as yytype_uint8,
     0i32 as yytype_uint8, 4i32 as yytype_uint8, 3i32 as yytype_uint8,
     2i32 as yytype_uint8, 2i32 as yytype_uint8, 2i32 as yytype_uint8,
     1i32 as yytype_uint8, 2i32 as yytype_uint8, 1i32 as yytype_uint8,
     1i32 as yytype_uint8, 3i32 as yytype_uint8, 1i32 as yytype_uint8,
     3i32 as yytype_uint8, 1i32 as yytype_uint8, 1i32 as yytype_uint8,
     2i32 as yytype_uint8, 1i32 as yytype_uint8, 4i32 as yytype_uint8,
     2i32 as yytype_uint8, 2i32 as yytype_uint8, 1i32 as yytype_uint8,
     2i32 as yytype_uint8, 0i32 as yytype_uint8, 6i32 as yytype_uint8,
     8i32 as yytype_uint8, 4i32 as yytype_uint8, 6i32 as yytype_uint8,
     4i32 as yytype_uint8, 6i32 as yytype_uint8, 2i32 as yytype_uint8,
     4i32 as yytype_uint8, 6i32 as yytype_uint8, 2i32 as yytype_uint8,
     4i32 as yytype_uint8, 2i32 as yytype_uint8, 4i32 as yytype_uint8,
     1i32 as yytype_uint8, 0i32 as yytype_uint8, 1i32 as yytype_uint8,
     1i32 as yytype_uint8, 1i32 as yytype_uint8, 1i32 as yytype_uint8,
     1i32 as yytype_uint8, 1i32 as yytype_uint8, 1i32 as yytype_uint8,
     0i32 as yytype_uint8, 4i32 as yytype_uint8, 1i32 as yytype_uint8,
     3i32 as yytype_uint8, 2i32 as yytype_uint8, 2i32 as yytype_uint8,
     2i32 as yytype_uint8, 1i32 as yytype_uint8, 3i32 as yytype_uint8,
     1i32 as yytype_uint8, 3i32 as yytype_uint8, 1i32 as yytype_uint8,
     1i32 as yytype_uint8, 2i32 as yytype_uint8, 1i32 as yytype_uint8,
     1i32 as yytype_uint8, 1i32 as yytype_uint8, 2i32 as yytype_uint8,
     2i32 as yytype_uint8, 1i32 as yytype_uint8, 1i32 as yytype_uint8,
     0i32 as yytype_uint8, 4i32 as yytype_uint8, 1i32 as yytype_uint8,
     2i32 as yytype_uint8, 1i32 as yytype_uint8, 3i32 as yytype_uint8,
     3i32 as yytype_uint8, 3i32 as yytype_uint8, 3i32 as yytype_uint8,
     2i32 as yytype_uint8, 1i32 as yytype_uint8, 1i32 as yytype_uint8,
     1i32 as yytype_uint8, 1i32 as yytype_uint8, 1i32 as yytype_uint8,
     1i32 as yytype_uint8, 1i32 as yytype_uint8, 1i32 as yytype_uint8,
     1i32 as yytype_uint8, 1i32 as yytype_uint8, 1i32 as yytype_uint8,
     1i32 as yytype_uint8, 1i32 as yytype_uint8, 1i32 as yytype_uint8,
     1i32 as yytype_uint8, 1i32 as yytype_uint8, 0i32 as yytype_uint8,
     1i32 as yytype_uint8, 0i32 as yytype_uint8, 1i32 as yytype_uint8,
     2i32 as yytype_uint8, 2i32 as yytype_uint8, 0i32 as yytype_uint8,
     1i32 as yytype_uint8, 1i32 as yytype_uint8, 1i32 as yytype_uint8,
     1i32 as yytype_uint8, 1i32 as yytype_uint8, 1i32 as yytype_uint8,
     1i32 as yytype_uint8, 2i32 as yytype_uint8, 0i32 as yytype_uint8];
static mut yydefact: [yytype_uint16; 1026] =
    [2i32 as yytype_uint16, 0i32 as yytype_uint16, 0i32 as yytype_uint16,
     1i32 as yytype_uint16, 0i32 as yytype_uint16, 0i32 as yytype_uint16,
     0i32 as yytype_uint16, 0i32 as yytype_uint16, 273i32 as yytype_uint16,
     0i32 as yytype_uint16, 0i32 as yytype_uint16, 297i32 as yytype_uint16,
     300i32 as yytype_uint16, 0i32 as yytype_uint16, 0i32 as yytype_uint16,
     572i32 as yytype_uint16, 321i32 as yytype_uint16,
     322i32 as yytype_uint16, 323i32 as yytype_uint16,
     324i32 as yytype_uint16, 285i32 as yytype_uint16,
     251i32 as yytype_uint16, 397i32 as yytype_uint16,
     471i32 as yytype_uint16, 470i32 as yytype_uint16,
     472i32 as yytype_uint16, 473i32 as yytype_uint16,
     574i32 as yytype_uint16, 0i32 as yytype_uint16, 10i32 as yytype_uint16,
     0i32 as yytype_uint16, 475i32 as yytype_uint16, 474i32 as yytype_uint16,
     476i32 as yytype_uint16, 463i32 as yytype_uint16,
     272i32 as yytype_uint16, 465i32 as yytype_uint16,
     464i32 as yytype_uint16, 467i32 as yytype_uint16,
     466i32 as yytype_uint16, 459i32 as yytype_uint16,
     460i32 as yytype_uint16, 421i32 as yytype_uint16,
     422i32 as yytype_uint16, 477i32 as yytype_uint16,
     478i32 as yytype_uint16, 0i32 as yytype_uint16, 0i32 as yytype_uint16,
     0i32 as yytype_uint16, 0i32 as yytype_uint16, 275i32 as yytype_uint16,
     587i32 as yytype_uint16, 587i32 as yytype_uint16, 80i32 as yytype_uint16,
     292i32 as yytype_uint16, 0i32 as yytype_uint16, 0i32 as yytype_uint16,
     0i32 as yytype_uint16, 0i32 as yytype_uint16, 0i32 as yytype_uint16,
     0i32 as yytype_uint16, 436i32 as yytype_uint16, 0i32 as yytype_uint16,
     0i32 as yytype_uint16, 0i32 as yytype_uint16, 3i32 as yytype_uint16,
     572i32 as yytype_uint16, 6i32 as yytype_uint16, 9i32 as yytype_uint16,
     27i32 as yytype_uint16, 32i32 as yytype_uint16, 44i32 as yytype_uint16,
     52i32 as yytype_uint16, 51i32 as yytype_uint16, 0i32 as yytype_uint16,
     68i32 as yytype_uint16, 0i32 as yytype_uint16, 72i32 as yytype_uint16,
     82i32 as yytype_uint16, 0i32 as yytype_uint16, 49i32 as yytype_uint16,
     231i32 as yytype_uint16, 0i32 as yytype_uint16, 53i32 as yytype_uint16,
     290i32 as yytype_uint16, 265i32 as yytype_uint16,
     266i32 as yytype_uint16, 419i32 as yytype_uint16,
     267i32 as yytype_uint16, 268i32 as yytype_uint16,
     269i32 as yytype_uint16, 417i32 as yytype_uint16,
     416i32 as yytype_uint16, 448i32 as yytype_uint16,
     418i32 as yytype_uint16, 415i32 as yytype_uint16,
     469i32 as yytype_uint16, 0i32 as yytype_uint16, 270i32 as yytype_uint16,
     271i32 as yytype_uint16, 251i32 as yytype_uint16, 5i32 as yytype_uint16,
     8i32 as yytype_uint16, 321i32 as yytype_uint16, 322i32 as yytype_uint16,
     285i32 as yytype_uint16, 587i32 as yytype_uint16,
     397i32 as yytype_uint16, 0i32 as yytype_uint16, 104i32 as yytype_uint16,
     105i32 as yytype_uint16, 0i32 as yytype_uint16, 0i32 as yytype_uint16,
     0i32 as yytype_uint16, 0i32 as yytype_uint16, 107i32 as yytype_uint16,
     479i32 as yytype_uint16, 325i32 as yytype_uint16, 0i32 as yytype_uint16,
     469i32 as yytype_uint16, 271i32 as yytype_uint16, 0i32 as yytype_uint16,
     313i32 as yytype_uint16, 159i32 as yytype_uint16,
     169i32 as yytype_uint16, 160i32 as yytype_uint16,
     156i32 as yytype_uint16, 185i32 as yytype_uint16,
     186i32 as yytype_uint16, 187i32 as yytype_uint16,
     188i32 as yytype_uint16, 167i32 as yytype_uint16,
     182i32 as yytype_uint16, 175i32 as yytype_uint16,
     165i32 as yytype_uint16, 164i32 as yytype_uint16,
     180i32 as yytype_uint16, 163i32 as yytype_uint16,
     162i32 as yytype_uint16, 158i32 as yytype_uint16,
     183i32 as yytype_uint16, 157i32 as yytype_uint16,
     170i32 as yytype_uint16, 174i32 as yytype_uint16,
     176i32 as yytype_uint16, 168i32 as yytype_uint16,
     161i32 as yytype_uint16, 177i32 as yytype_uint16,
     184i32 as yytype_uint16, 179i32 as yytype_uint16,
     178i32 as yytype_uint16, 171i32 as yytype_uint16,
     181i32 as yytype_uint16, 166i32 as yytype_uint16,
     155i32 as yytype_uint16, 173i32 as yytype_uint16,
     172i32 as yytype_uint16, 154i32 as yytype_uint16,
     152i32 as yytype_uint16, 153i32 as yytype_uint16,
     149i32 as yytype_uint16, 150i32 as yytype_uint16,
     151i32 as yytype_uint16, 109i32 as yytype_uint16,
     111i32 as yytype_uint16, 110i32 as yytype_uint16,
     144i32 as yytype_uint16, 145i32 as yytype_uint16,
     140i32 as yytype_uint16, 122i32 as yytype_uint16,
     123i32 as yytype_uint16, 124i32 as yytype_uint16,
     131i32 as yytype_uint16, 128i32 as yytype_uint16,
     130i32 as yytype_uint16, 125i32 as yytype_uint16,
     126i32 as yytype_uint16, 146i32 as yytype_uint16,
     147i32 as yytype_uint16, 132i32 as yytype_uint16,
     133i32 as yytype_uint16, 137i32 as yytype_uint16,
     141i32 as yytype_uint16, 127i32 as yytype_uint16,
     129i32 as yytype_uint16, 119i32 as yytype_uint16,
     120i32 as yytype_uint16, 121i32 as yytype_uint16,
     134i32 as yytype_uint16, 135i32 as yytype_uint16,
     136i32 as yytype_uint16, 138i32 as yytype_uint16,
     139i32 as yytype_uint16, 142i32 as yytype_uint16,
     143i32 as yytype_uint16, 148i32 as yytype_uint16,
     546i32 as yytype_uint16, 315i32 as yytype_uint16,
     112i32 as yytype_uint16, 113i32 as yytype_uint16,
     545i32 as yytype_uint16, 0i32 as yytype_uint16, 0i32 as yytype_uint16,
     0i32 as yytype_uint16, 50i32 as yytype_uint16, 0i32 as yytype_uint16,
     0i32 as yytype_uint16, 0i32 as yytype_uint16, 469i32 as yytype_uint16,
     0i32 as yytype_uint16, 271i32 as yytype_uint16, 0i32 as yytype_uint16,
     0i32 as yytype_uint16, 0i32 as yytype_uint16, 0i32 as yytype_uint16,
     336i32 as yytype_uint16, 335i32 as yytype_uint16, 0i32 as yytype_uint16,
     0i32 as yytype_uint16, 469i32 as yytype_uint16, 271i32 as yytype_uint16,
     178i32 as yytype_uint16, 171i32 as yytype_uint16,
     181i32 as yytype_uint16, 166i32 as yytype_uint16,
     149i32 as yytype_uint16, 150i32 as yytype_uint16,
     151i32 as yytype_uint16, 109i32 as yytype_uint16,
     110i32 as yytype_uint16, 0i32 as yytype_uint16, 114i32 as yytype_uint16,
     116i32 as yytype_uint16, 20i32 as yytype_uint16, 115i32 as yytype_uint16,
     439i32 as yytype_uint16, 444i32 as yytype_uint16,
     443i32 as yytype_uint16, 581i32 as yytype_uint16,
     584i32 as yytype_uint16, 572i32 as yytype_uint16,
     583i32 as yytype_uint16, 0i32 as yytype_uint16, 441i32 as yytype_uint16,
     0i32 as yytype_uint16, 585i32 as yytype_uint16, 582i32 as yytype_uint16,
     573i32 as yytype_uint16, 556i32 as yytype_uint16, 0i32 as yytype_uint16,
     0i32 as yytype_uint16, 0i32 as yytype_uint16, 0i32 as yytype_uint16,
     246i32 as yytype_uint16, 258i32 as yytype_uint16, 66i32 as yytype_uint16,
     250i32 as yytype_uint16, 587i32 as yytype_uint16,
     419i32 as yytype_uint16, 587i32 as yytype_uint16,
     550i32 as yytype_uint16, 67i32 as yytype_uint16, 65i32 as yytype_uint16,
     587i32 as yytype_uint16, 240i32 as yytype_uint16,
     286i32 as yytype_uint16, 64i32 as yytype_uint16, 0i32 as yytype_uint16,
     239i32 as yytype_uint16, 396i32 as yytype_uint16, 63i32 as yytype_uint16,
     574i32 as yytype_uint16, 0i32 as yytype_uint16, 575i32 as yytype_uint16,
     18i32 as yytype_uint16, 0i32 as yytype_uint16, 0i32 as yytype_uint16,
     208i32 as yytype_uint16, 0i32 as yytype_uint16, 209i32 as yytype_uint16,
     282i32 as yytype_uint16, 0i32 as yytype_uint16, 0i32 as yytype_uint16,
     0i32 as yytype_uint16, 572i32 as yytype_uint16, 15i32 as yytype_uint16,
     574i32 as yytype_uint16, 70i32 as yytype_uint16, 14i32 as yytype_uint16,
     0i32 as yytype_uint16, 574i32 as yytype_uint16, 0i32 as yytype_uint16,
     578i32 as yytype_uint16, 578i32 as yytype_uint16,
     232i32 as yytype_uint16, 0i32 as yytype_uint16, 0i32 as yytype_uint16,
     578i32 as yytype_uint16, 548i32 as yytype_uint16, 0i32 as yytype_uint16,
     0i32 as yytype_uint16, 78i32 as yytype_uint16, 0i32 as yytype_uint16,
     88i32 as yytype_uint16, 95i32 as yytype_uint16, 517i32 as yytype_uint16,
     453i32 as yytype_uint16, 452i32 as yytype_uint16,
     454i32 as yytype_uint16, 455i32 as yytype_uint16, 0i32 as yytype_uint16,
     451i32 as yytype_uint16, 450i32 as yytype_uint16,
     434i32 as yytype_uint16, 428i32 as yytype_uint16,
     427i32 as yytype_uint16, 430i32 as yytype_uint16, 0i32 as yytype_uint16,
     0i32 as yytype_uint16, 425i32 as yytype_uint16, 446i32 as yytype_uint16,
     0i32 as yytype_uint16, 457i32 as yytype_uint16, 0i32 as yytype_uint16,
     423i32 as yytype_uint16, 0i32 as yytype_uint16, 432i32 as yytype_uint16,
     0i32 as yytype_uint16, 461i32 as yytype_uint16, 462i32 as yytype_uint16,
     48i32 as yytype_uint16, 223i32 as yytype_uint16, 224i32 as yytype_uint16,
     4i32 as yytype_uint16, 573i32 as yytype_uint16, 0i32 as yytype_uint16,
     0i32 as yytype_uint16, 0i32 as yytype_uint16, 0i32 as yytype_uint16,
     0i32 as yytype_uint16, 0i32 as yytype_uint16, 0i32 as yytype_uint16,
     384i32 as yytype_uint16, 386i32 as yytype_uint16, 0i32 as yytype_uint16,
     84i32 as yytype_uint16, 0i32 as yytype_uint16, 76i32 as yytype_uint16,
     73i32 as yytype_uint16, 0i32 as yytype_uint16, 0i32 as yytype_uint16,
     0i32 as yytype_uint16, 0i32 as yytype_uint16, 0i32 as yytype_uint16,
     0i32 as yytype_uint16, 0i32 as yytype_uint16, 0i32 as yytype_uint16,
     0i32 as yytype_uint16, 0i32 as yytype_uint16, 0i32 as yytype_uint16,
     0i32 as yytype_uint16, 0i32 as yytype_uint16, 0i32 as yytype_uint16,
     0i32 as yytype_uint16, 0i32 as yytype_uint16, 0i32 as yytype_uint16,
     0i32 as yytype_uint16, 0i32 as yytype_uint16, 0i32 as yytype_uint16,
     0i32 as yytype_uint16, 0i32 as yytype_uint16, 0i32 as yytype_uint16,
     0i32 as yytype_uint16, 0i32 as yytype_uint16, 0i32 as yytype_uint16,
     0i32 as yytype_uint16, 0i32 as yytype_uint16, 569i32 as yytype_uint16,
     587i32 as yytype_uint16, 568i32 as yytype_uint16, 0i32 as yytype_uint16,
     571i32 as yytype_uint16, 570i32 as yytype_uint16, 0i32 as yytype_uint16,
     401i32 as yytype_uint16, 399i32 as yytype_uint16,
     291i32 as yytype_uint16, 420i32 as yytype_uint16, 0i32 as yytype_uint16,
     0i32 as yytype_uint16, 390i32 as yytype_uint16, 57i32 as yytype_uint16,
     289i32 as yytype_uint16, 310i32 as yytype_uint16,
     104i32 as yytype_uint16, 105i32 as yytype_uint16,
     106i32 as yytype_uint16, 461i32 as yytype_uint16,
     462i32 as yytype_uint16, 480i32 as yytype_uint16,
     308i32 as yytype_uint16, 0i32 as yytype_uint16, 587i32 as yytype_uint16,
     0i32 as yytype_uint16, 0i32 as yytype_uint16, 0i32 as yytype_uint16,
     316i32 as yytype_uint16, 567i32 as yytype_uint16,
     566i32 as yytype_uint16, 318i32 as yytype_uint16, 0i32 as yytype_uint16,
     587i32 as yytype_uint16, 282i32 as yytype_uint16,
     327i32 as yytype_uint16, 0i32 as yytype_uint16, 326i32 as yytype_uint16,
     0i32 as yytype_uint16, 0i32 as yytype_uint16, 587i32 as yytype_uint16,
     0i32 as yytype_uint16, 0i32 as yytype_uint16, 0i32 as yytype_uint16,
     0i32 as yytype_uint16, 0i32 as yytype_uint16, 0i32 as yytype_uint16,
     282i32 as yytype_uint16, 0i32 as yytype_uint16, 587i32 as yytype_uint16,
     0i32 as yytype_uint16, 305i32 as yytype_uint16, 0i32 as yytype_uint16,
     117i32 as yytype_uint16, 0i32 as yytype_uint16, 0i32 as yytype_uint16,
     440i32 as yytype_uint16, 442i32 as yytype_uint16, 0i32 as yytype_uint16,
     0i32 as yytype_uint16, 586i32 as yytype_uint16, 0i32 as yytype_uint16,
     259i32 as yytype_uint16, 555i32 as yytype_uint16,
     253i32 as yytype_uint16, 0i32 as yytype_uint16, 256i32 as yytype_uint16,
     247i32 as yytype_uint16, 0i32 as yytype_uint16, 255i32 as yytype_uint16,
     0i32 as yytype_uint16, 256i32 as yytype_uint16, 248i32 as yytype_uint16,
     0i32 as yytype_uint16, 574i32 as yytype_uint16, 242i32 as yytype_uint16,
     587i32 as yytype_uint16, 587i32 as yytype_uint16,
     241i32 as yytype_uint16, 252i32 as yytype_uint16,
     574i32 as yytype_uint16, 0i32 as yytype_uint16, 288i32 as yytype_uint16,
     47i32 as yytype_uint16, 0i32 as yytype_uint16, 0i32 as yytype_uint16,
     0i32 as yytype_uint16, 0i32 as yytype_uint16, 0i32 as yytype_uint16,
     0i32 as yytype_uint16, 17i32 as yytype_uint16, 574i32 as yytype_uint16,
     280i32 as yytype_uint16, 13i32 as yytype_uint16, 573i32 as yytype_uint16,
     69i32 as yytype_uint16, 276i32 as yytype_uint16, 279i32 as yytype_uint16,
     283i32 as yytype_uint16, 580i32 as yytype_uint16,
     233i32 as yytype_uint16, 579i32 as yytype_uint16,
     580i32 as yytype_uint16, 235i32 as yytype_uint16,
     284i32 as yytype_uint16, 549i32 as yytype_uint16, 94i32 as yytype_uint16,
     86i32 as yytype_uint16, 0i32 as yytype_uint16, 81i32 as yytype_uint16,
     0i32 as yytype_uint16, 0i32 as yytype_uint16, 587i32 as yytype_uint16,
     0i32 as yytype_uint16, 523i32 as yytype_uint16, 520i32 as yytype_uint16,
     519i32 as yytype_uint16, 518i32 as yytype_uint16,
     521i32 as yytype_uint16, 493i32 as yytype_uint16,
     525i32 as yytype_uint16, 537i32 as yytype_uint16,
     494i32 as yytype_uint16, 541i32 as yytype_uint16,
     540i32 as yytype_uint16, 536i32 as yytype_uint16,
     517i32 as yytype_uint16, 293i32 as yytype_uint16,
     486i32 as yytype_uint16, 491i32 as yytype_uint16,
     587i32 as yytype_uint16, 496i32 as yytype_uint16,
     587i32 as yytype_uint16, 516i32 as yytype_uint16,
     381i32 as yytype_uint16, 522i32 as yytype_uint16,
     524i32 as yytype_uint16, 527i32 as yytype_uint16,
     502i32 as yytype_uint16, 0i32 as yytype_uint16, 534i32 as yytype_uint16,
     502i32 as yytype_uint16, 539i32 as yytype_uint16,
     502i32 as yytype_uint16, 0i32 as yytype_uint16, 500i32 as yytype_uint16,
     456i32 as yytype_uint16, 0i32 as yytype_uint16, 0i32 as yytype_uint16,
     431i32 as yytype_uint16, 437i32 as yytype_uint16,
     435i32 as yytype_uint16, 426i32 as yytype_uint16,
     447i32 as yytype_uint16, 458i32 as yytype_uint16,
     424i32 as yytype_uint16, 433i32 as yytype_uint16, 0i32 as yytype_uint16,
     0i32 as yytype_uint16, 7i32 as yytype_uint16, 21i32 as yytype_uint16,
     22i32 as yytype_uint16, 23i32 as yytype_uint16, 24i32 as yytype_uint16,
     25i32 as yytype_uint16, 45i32 as yytype_uint16, 46i32 as yytype_uint16,
     587i32 as yytype_uint16, 0i32 as yytype_uint16, 28i32 as yytype_uint16,
     30i32 as yytype_uint16, 0i32 as yytype_uint16, 31i32 as yytype_uint16,
     574i32 as yytype_uint16, 0i32 as yytype_uint16, 74i32 as yytype_uint16,
     85i32 as yytype_uint16, 43i32 as yytype_uint16, 33i32 as yytype_uint16,
     41i32 as yytype_uint16, 0i32 as yytype_uint16, 236i32 as yytype_uint16,
     189i32 as yytype_uint16, 29i32 as yytype_uint16, 0i32 as yytype_uint16,
     271i32 as yytype_uint16, 205i32 as yytype_uint16,
     213i32 as yytype_uint16, 218i32 as yytype_uint16,
     219i32 as yytype_uint16, 220i32 as yytype_uint16,
     215i32 as yytype_uint16, 217i32 as yytype_uint16,
     227i32 as yytype_uint16, 228i32 as yytype_uint16,
     221i32 as yytype_uint16, 222i32 as yytype_uint16,
     198i32 as yytype_uint16, 199i32 as yytype_uint16,
     225i32 as yytype_uint16, 226i32 as yytype_uint16,
     574i32 as yytype_uint16, 214i32 as yytype_uint16,
     216i32 as yytype_uint16, 210i32 as yytype_uint16,
     211i32 as yytype_uint16, 212i32 as yytype_uint16,
     200i32 as yytype_uint16, 201i32 as yytype_uint16,
     202i32 as yytype_uint16, 203i32 as yytype_uint16,
     204i32 as yytype_uint16, 559i32 as yytype_uint16,
     564i32 as yytype_uint16, 560i32 as yytype_uint16,
     565i32 as yytype_uint16, 395i32 as yytype_uint16,
     251i32 as yytype_uint16, 393i32 as yytype_uint16,
     574i32 as yytype_uint16, 559i32 as yytype_uint16,
     561i32 as yytype_uint16, 560i32 as yytype_uint16,
     562i32 as yytype_uint16, 394i32 as yytype_uint16,
     587i32 as yytype_uint16, 559i32 as yytype_uint16,
     560i32 as yytype_uint16, 251i32 as yytype_uint16,
     587i32 as yytype_uint16, 587i32 as yytype_uint16, 34i32 as yytype_uint16,
     236i32 as yytype_uint16, 190i32 as yytype_uint16, 40i32 as yytype_uint16,
     197i32 as yytype_uint16, 55i32 as yytype_uint16, 58i32 as yytype_uint16,
     0i32 as yytype_uint16, 0i32 as yytype_uint16, 0i32 as yytype_uint16,
     104i32 as yytype_uint16, 105i32 as yytype_uint16,
     108i32 as yytype_uint16, 0i32 as yytype_uint16, 574i32 as yytype_uint16,
     587i32 as yytype_uint16, 0i32 as yytype_uint16, 574i32 as yytype_uint16,
     517i32 as yytype_uint16, 0i32 as yytype_uint16, 274i32 as yytype_uint16,
     587i32 as yytype_uint16, 587i32 as yytype_uint16,
     407i32 as yytype_uint16, 587i32 as yytype_uint16,
     328i32 as yytype_uint16, 563i32 as yytype_uint16,
     281i32 as yytype_uint16, 574i32 as yytype_uint16,
     559i32 as yytype_uint16, 560i32 as yytype_uint16,
     587i32 as yytype_uint16, 330i32 as yytype_uint16,
     298i32 as yytype_uint16, 329i32 as yytype_uint16,
     301i32 as yytype_uint16, 563i32 as yytype_uint16,
     281i32 as yytype_uint16, 574i32 as yytype_uint16,
     559i32 as yytype_uint16, 560i32 as yytype_uint16, 0i32 as yytype_uint16,
     0i32 as yytype_uint16, 0i32 as yytype_uint16, 0i32 as yytype_uint16,
     258i32 as yytype_uint16, 0i32 as yytype_uint16, 304i32 as yytype_uint16,
     553i32 as yytype_uint16, 552i32 as yytype_uint16,
     257i32 as yytype_uint16, 0i32 as yytype_uint16, 260i32 as yytype_uint16,
     254i32 as yytype_uint16, 587i32 as yytype_uint16,
     554i32 as yytype_uint16, 551i32 as yytype_uint16,
     238i32 as yytype_uint16, 256i32 as yytype_uint16, 0i32 as yytype_uint16,
     245i32 as yytype_uint16, 287i32 as yytype_uint16,
     576i32 as yytype_uint16, 19i32 as yytype_uint16, 0i32 as yytype_uint16,
     26i32 as yytype_uint16, 196i32 as yytype_uint16, 71i32 as yytype_uint16,
     16i32 as yytype_uint16, 574i32 as yytype_uint16, 578i32 as yytype_uint16,
     87i32 as yytype_uint16, 79i32 as yytype_uint16, 563i32 as yytype_uint16,
     93i32 as yytype_uint16, 574i32 as yytype_uint16, 559i32 as yytype_uint16,
     560i32 as yytype_uint16, 484i32 as yytype_uint16,
     529i32 as yytype_uint16, 0i32 as yytype_uint16, 574i32 as yytype_uint16,
     0i32 as yytype_uint16, 485i32 as yytype_uint16, 0i32 as yytype_uint16,
     498i32 as yytype_uint16, 544i32 as yytype_uint16,
     495i32 as yytype_uint16, 0i32 as yytype_uint16, 499i32 as yytype_uint16,
     0i32 as yytype_uint16, 509i32 as yytype_uint16, 530i32 as yytype_uint16,
     0i32 as yytype_uint16, 512i32 as yytype_uint16, 538i32 as yytype_uint16,
     0i32 as yytype_uint16, 514i32 as yytype_uint16, 542i32 as yytype_uint16,
     449i32 as yytype_uint16, 0i32 as yytype_uint16, 438i32 as yytype_uint16,
     206i32 as yytype_uint16, 207i32 as yytype_uint16,
     372i32 as yytype_uint16, 370i32 as yytype_uint16, 0i32 as yytype_uint16,
     369i32 as yytype_uint16, 368i32 as yytype_uint16,
     264i32 as yytype_uint16, 0i32 as yytype_uint16, 83i32 as yytype_uint16,
     77i32 as yytype_uint16, 0i32 as yytype_uint16, 0i32 as yytype_uint16,
     0i32 as yytype_uint16, 0i32 as yytype_uint16, 0i32 as yytype_uint16,
     587i32 as yytype_uint16, 0i32 as yytype_uint16, 0i32 as yytype_uint16,
     0i32 as yytype_uint16, 0i32 as yytype_uint16, 392i32 as yytype_uint16,
     61i32 as yytype_uint16, 0i32 as yytype_uint16, 398i32 as yytype_uint16,
     0i32 as yytype_uint16, 0i32 as yytype_uint16, 391i32 as yytype_uint16,
     59i32 as yytype_uint16, 387i32 as yytype_uint16, 54i32 as yytype_uint16,
     0i32 as yytype_uint16, 0i32 as yytype_uint16, 587i32 as yytype_uint16,
     311i32 as yytype_uint16, 0i32 as yytype_uint16, 0i32 as yytype_uint16,
     398i32 as yytype_uint16, 314i32 as yytype_uint16,
     547i32 as yytype_uint16, 517i32 as yytype_uint16, 0i32 as yytype_uint16,
     0i32 as yytype_uint16, 319i32 as yytype_uint16, 408i32 as yytype_uint16,
     409i32 as yytype_uint16, 587i32 as yytype_uint16,
     410i32 as yytype_uint16, 0i32 as yytype_uint16, 587i32 as yytype_uint16,
     333i32 as yytype_uint16, 0i32 as yytype_uint16, 0i32 as yytype_uint16,
     331i32 as yytype_uint16, 0i32 as yytype_uint16, 0i32 as yytype_uint16,
     398i32 as yytype_uint16, 0i32 as yytype_uint16, 0i32 as yytype_uint16,
     0i32 as yytype_uint16, 0i32 as yytype_uint16, 0i32 as yytype_uint16,
     398i32 as yytype_uint16, 0i32 as yytype_uint16, 118i32 as yytype_uint16,
     445i32 as yytype_uint16, 303i32 as yytype_uint16, 0i32 as yytype_uint16,
     0i32 as yytype_uint16, 261i32 as yytype_uint16, 249i32 as yytype_uint16,
     587i32 as yytype_uint16, 11i32 as yytype_uint16, 277i32 as yytype_uint16,
     234i32 as yytype_uint16, 398i32 as yytype_uint16,
     523i32 as yytype_uint16, 344i32 as yytype_uint16,
     574i32 as yytype_uint16, 337i32 as yytype_uint16, 0i32 as yytype_uint16,
     374i32 as yytype_uint16, 0i32 as yytype_uint16, 0i32 as yytype_uint16,
     294i32 as yytype_uint16, 0i32 as yytype_uint16, 492i32 as yytype_uint16,
     587i32 as yytype_uint16, 543i32 as yytype_uint16,
     501i32 as yytype_uint16, 528i32 as yytype_uint16,
     502i32 as yytype_uint16, 502i32 as yytype_uint16,
     502i32 as yytype_uint16, 535i32 as yytype_uint16,
     502i32 as yytype_uint16, 523i32 as yytype_uint16,
     502i32 as yytype_uint16, 429i32 as yytype_uint16,
     367i32 as yytype_uint16, 574i32 as yytype_uint16,
     574i32 as yytype_uint16, 488i32 as yytype_uint16,
     489i32 as yytype_uint16, 587i32 as yytype_uint16,
     587i32 as yytype_uint16, 352i32 as yytype_uint16, 0i32 as yytype_uint16,
     532i32 as yytype_uint16, 352i32 as yytype_uint16,
     352i32 as yytype_uint16, 350i32 as yytype_uint16, 0i32 as yytype_uint16,
     0i32 as yytype_uint16, 262i32 as yytype_uint16, 75i32 as yytype_uint16,
     42i32 as yytype_uint16, 237i32 as yytype_uint16, 559i32 as yytype_uint16,
     560i32 as yytype_uint16, 574i32 as yytype_uint16,
     559i32 as yytype_uint16, 560i32 as yytype_uint16, 0i32 as yytype_uint16,
     0i32 as yytype_uint16, 39i32 as yytype_uint16, 194i32 as yytype_uint16,
     38i32 as yytype_uint16, 195i32 as yytype_uint16, 62i32 as yytype_uint16,
     577i32 as yytype_uint16, 0i32 as yytype_uint16, 36i32 as yytype_uint16,
     192i32 as yytype_uint16, 37i32 as yytype_uint16, 193i32 as yytype_uint16,
     60i32 as yytype_uint16, 388i32 as yytype_uint16, 389i32 as yytype_uint16,
     0i32 as yytype_uint16, 0i32 as yytype_uint16, 0i32 as yytype_uint16,
     0i32 as yytype_uint16, 481i32 as yytype_uint16, 309i32 as yytype_uint16,
     574i32 as yytype_uint16, 0i32 as yytype_uint16, 483i32 as yytype_uint16,
     517i32 as yytype_uint16, 0i32 as yytype_uint16, 0i32 as yytype_uint16,
     412i32 as yytype_uint16, 334i32 as yytype_uint16, 0i32 as yytype_uint16,
     12i32 as yytype_uint16, 414i32 as yytype_uint16, 0i32 as yytype_uint16,
     295i32 as yytype_uint16, 0i32 as yytype_uint16, 296i32 as yytype_uint16,
     0i32 as yytype_uint16, 0i32 as yytype_uint16, 306i32 as yytype_uint16,
     260i32 as yytype_uint16, 587i32 as yytype_uint16,
     244i32 as yytype_uint16, 345i32 as yytype_uint16,
     342i32 as yytype_uint16, 526i32 as yytype_uint16, 0i32 as yytype_uint16,
     380i32 as yytype_uint16, 0i32 as yytype_uint16, 0i32 as yytype_uint16,
     0i32 as yytype_uint16, 497i32 as yytype_uint16, 0i32 as yytype_uint16,
     505i32 as yytype_uint16, 0i32 as yytype_uint16, 507i32 as yytype_uint16,
     0i32 as yytype_uint16, 513i32 as yytype_uint16, 0i32 as yytype_uint16,
     510i32 as yytype_uint16, 515i32 as yytype_uint16, 0i32 as yytype_uint16,
     0i32 as yytype_uint16, 0i32 as yytype_uint16, 487i32 as yytype_uint16,
     0i32 as yytype_uint16, 348i32 as yytype_uint16, 349i32 as yytype_uint16,
     352i32 as yytype_uint16, 360i32 as yytype_uint16,
     531i32 as yytype_uint16, 0i32 as yytype_uint16, 363i32 as yytype_uint16,
     0i32 as yytype_uint16, 365i32 as yytype_uint16, 385i32 as yytype_uint16,
     263i32 as yytype_uint16, 398i32 as yytype_uint16,
     230i32 as yytype_uint16, 229i32 as yytype_uint16, 35i32 as yytype_uint16,
     191i32 as yytype_uint16, 402i32 as yytype_uint16,
     400i32 as yytype_uint16, 0i32 as yytype_uint16, 0i32 as yytype_uint16,
     482i32 as yytype_uint16, 317i32 as yytype_uint16, 0i32 as yytype_uint16,
     0i32 as yytype_uint16, 411i32 as yytype_uint16, 0i32 as yytype_uint16,
     96i32 as yytype_uint16, 103i32 as yytype_uint16, 0i32 as yytype_uint16,
     413i32 as yytype_uint16, 0i32 as yytype_uint16, 299i32 as yytype_uint16,
     302i32 as yytype_uint16, 0i32 as yytype_uint16, 404i32 as yytype_uint16,
     405i32 as yytype_uint16, 403i32 as yytype_uint16, 0i32 as yytype_uint16,
     0i32 as yytype_uint16, 340i32 as yytype_uint16, 378i32 as yytype_uint16,
     574i32 as yytype_uint16, 376i32 as yytype_uint16,
     379i32 as yytype_uint16, 383i32 as yytype_uint16,
     382i32 as yytype_uint16, 502i32 as yytype_uint16,
     502i32 as yytype_uint16, 502i32 as yytype_uint16,
     502i32 as yytype_uint16, 373i32 as yytype_uint16,
     371i32 as yytype_uint16, 282i32 as yytype_uint16, 0i32 as yytype_uint16,
     490i32 as yytype_uint16, 587i32 as yytype_uint16, 0i32 as yytype_uint16,
     351i32 as yytype_uint16, 358i32 as yytype_uint16,
     352i32 as yytype_uint16, 352i32 as yytype_uint16,
     352i32 as yytype_uint16, 533i32 as yytype_uint16,
     352i32 as yytype_uint16, 352i32 as yytype_uint16, 56i32 as yytype_uint16,
     312i32 as yytype_uint16, 0i32 as yytype_uint16, 102i32 as yytype_uint16,
     0i32 as yytype_uint16, 587i32 as yytype_uint16, 0i32 as yytype_uint16,
     587i32 as yytype_uint16, 587i32 as yytype_uint16, 0i32 as yytype_uint16,
     346i32 as yytype_uint16, 343i32 as yytype_uint16, 0i32 as yytype_uint16,
     338i32 as yytype_uint16, 0i32 as yytype_uint16, 375i32 as yytype_uint16,
     506i32 as yytype_uint16, 0i32 as yytype_uint16, 503i32 as yytype_uint16,
     508i32 as yytype_uint16, 511i32 as yytype_uint16,
     563i32 as yytype_uint16, 281i32 as yytype_uint16,
     347i32 as yytype_uint16, 0i32 as yytype_uint16, 355i32 as yytype_uint16,
     0i32 as yytype_uint16, 357i32 as yytype_uint16, 0i32 as yytype_uint16,
     364i32 as yytype_uint16, 0i32 as yytype_uint16, 361i32 as yytype_uint16,
     366i32 as yytype_uint16, 320i32 as yytype_uint16, 99i32 as yytype_uint16,
     101i32 as yytype_uint16, 574i32 as yytype_uint16,
     559i32 as yytype_uint16, 560i32 as yytype_uint16,
     406i32 as yytype_uint16, 332i32 as yytype_uint16,
     307i32 as yytype_uint16, 0i32 as yytype_uint16, 341i32 as yytype_uint16,
     0i32 as yytype_uint16, 377i32 as yytype_uint16, 502i32 as yytype_uint16,
     352i32 as yytype_uint16, 352i32 as yytype_uint16,
     352i32 as yytype_uint16, 352i32 as yytype_uint16, 97i32 as yytype_uint16,
     339i32 as yytype_uint16, 504i32 as yytype_uint16,
     356i32 as yytype_uint16, 0i32 as yytype_uint16, 353i32 as yytype_uint16,
     359i32 as yytype_uint16, 362i32 as yytype_uint16,
     352i32 as yytype_uint16, 354i32 as yytype_uint16];
static mut yydefgoto: [yytype_int16; 176] =
    [-1i32 as yytype_int16, 1i32 as yytype_int16, 2i32 as yytype_int16,
     65i32 as yytype_int16, 66i32 as yytype_int16, 67i32 as yytype_int16,
     275i32 as yytype_int16, 410i32 as yytype_int16, 411i32 as yytype_int16,
     284i32 as yytype_int16, 285i32 as yytype_int16, 462i32 as yytype_int16,
     69i32 as yytype_int16, 556i32 as yytype_int16, 70i32 as yytype_int16,
     205i32 as yytype_int16, 71i32 as yytype_int16, 72i32 as yytype_int16,
     615i32 as yytype_int16, 744i32 as yytype_int16, 73i32 as yytype_int16,
     74i32 as yytype_int16, 286i32 as yytype_int16, 75i32 as yytype_int16,
     76i32 as yytype_int16, 77i32 as yytype_int16, 487i32 as yytype_int16,
     78i32 as yytype_int16, 206i32 as yytype_int16, 115i32 as yytype_int16,
     116i32 as yytype_int16, 231i32 as yytype_int16, 232i32 as yytype_int16,
     233i32 as yytype_int16, 651i32 as yytype_int16, 593i32 as yytype_int16,
     199i32 as yytype_int16, 80i32 as yytype_int16, 291i32 as yytype_int16,
     560i32 as yytype_int16, 594i32 as yytype_int16, 265i32 as yytype_int16,
     452i32 as yytype_int16, 453i32 as yytype_int16, 266i32 as yytype_int16,
     267i32 as yytype_int16, 256i32 as yytype_int16, 445i32 as yytype_int16,
     451i32 as yytype_int16, 454i32 as yytype_int16, 550i32 as yytype_int16,
     81i32 as yytype_int16, 202i32 as yytype_int16, 289i32 as yytype_int16,
     678i32 as yytype_int16, 290i32 as yytype_int16, 305i32 as yytype_int16,
     691i32 as yytype_int16, 212i32 as yytype_int16, 771i32 as yytype_int16,
     213i32 as yytype_int16, 772i32 as yytype_int16, 650i32 as yytype_int16,
     933i32 as yytype_int16, 618i32 as yytype_int16, 616i32 as yytype_int16,
     853i32 as yytype_int16, 404i32 as yytype_int16, 406i32 as yytype_int16,
     627i32 as yytype_int16, 628i32 as yytype_int16, 859i32 as yytype_int16,
     278i32 as yytype_int16, 414i32 as yytype_int16, 642i32 as yytype_int16,
     763i32 as yytype_int16, 764i32 as yytype_int16, 218i32 as yytype_int16,
     789i32 as yytype_int16, 937i32 as yytype_int16, 957i32 as yytype_int16,
     903i32 as yytype_int16, 811i32 as yytype_int16, 715i32 as yytype_int16,
     716i32 as yytype_int16, 812i32 as yytype_int16, 791i32 as yytype_int16,
     941i32 as yytype_int16, 942i32 as yytype_int16, 505i32 as yytype_int16,
     795i32 as yytype_int16, 343i32 as yytype_int16, 545i32 as yytype_int16,
     83i32 as yytype_int16, 84i32 as yytype_int16, 392i32 as yytype_int16,
     608i32 as yytype_int16, 607i32 as yytype_int16, 437i32 as yytype_int16,
     936i32 as yytype_int16, 631i32 as yytype_int16, 757i32 as yytype_int16,
     861i32 as yytype_int16, 865i32 as yytype_int16, 85i32 as yytype_int16,
     86i32 as yytype_int16, 87i32 as yytype_int16, 318i32 as yytype_int16,
     319i32 as yytype_int16, 526i32 as yytype_int16, 88i32 as yytype_int16,
     89i32 as yytype_int16, 90i32 as yytype_int16, 659i32 as yytype_int16,
     241i32 as yytype_int16, 242i32 as yytype_int16, 243i32 as yytype_int16,
     432i32 as yytype_int16, 91i32 as yytype_int16, 92i32 as yytype_int16,
     93i32 as yytype_int16, 312i32 as yytype_int16, 94i32 as yytype_int16,
     95i32 as yytype_int16, 208i32 as yytype_int16, 209i32 as yytype_int16,
     98i32 as yytype_int16, 210i32 as yytype_int16, 400i32 as yytype_int16,
     617i32 as yytype_int16, 752i32 as yytype_int16, 506i32 as yytype_int16,
     507i32 as yytype_int16, 814i32 as yytype_int16, 815i32 as yytype_int16,
     508i32 as yytype_int16, 509i32 as yytype_int16, 510i32 as yytype_int16,
     800i32 as yytype_int16, 700i32 as yytype_int16, 753i32 as yytype_int16,
     513i32 as yytype_int16, 514i32 as yytype_int16, 515i32 as yytype_int16,
     689i32 as yytype_int16, 516i32 as yytype_int16, 517i32 as yytype_int16,
     518i32 as yytype_int16, 819i32 as yytype_int16, 820i32 as yytype_int16,
     519i32 as yytype_int16, 520i32 as yytype_int16, 521i32 as yytype_int16,
     522i32 as yytype_int16, 523i32 as yytype_int16, 694i32 as yytype_int16,
     201i32 as yytype_int16, 405i32 as yytype_int16, 296i32 as yytype_int16,
     455i32 as yytype_int16, 260i32 as yytype_int16, 121i32 as yytype_int16,
     622i32 as yytype_int16, 596i32 as yytype_int16, 409i32 as yytype_int16,
     403i32 as yytype_int16, 383i32 as yytype_int16, 244i32 as yytype_int16,
     459i32 as yytype_int16, 460i32 as yytype_int16, 735i32 as yytype_int16,
     478i32 as yytype_int16, 415i32 as yytype_int16, 273i32 as yytype_int16,
     247i32 as yytype_int16, 288i32 as yytype_int16];
static mut yypact: [yytype_int16; 1026] =
    [-826i32 as yytype_int16, 98i32 as yytype_int16, 2785i32 as yytype_int16,
     -826i32 as yytype_int16, 7387i32 as yytype_int16,
     9342i32 as yytype_int16, 9675i32 as yytype_int16,
     5490i32 as yytype_int16, -826i32 as yytype_int16,
     8997i32 as yytype_int16, 8997i32 as yytype_int16,
     -826i32 as yytype_int16, -826i32 as yytype_int16,
     9453i32 as yytype_int16, 6891i32 as yytype_int16,
     5231i32 as yytype_int16, 7847i32 as yytype_int16,
     7847i32 as yytype_int16, -826i32 as yytype_int16,
     -826i32 as yytype_int16, 7847i32 as yytype_int16,
     3027i32 as yytype_int16, 6249i32 as yytype_int16,
     -826i32 as yytype_int16, -826i32 as yytype_int16,
     -826i32 as yytype_int16, -826i32 as yytype_int16, 230i32 as yytype_int16,
     6891i32 as yytype_int16, -826i32 as yytype_int16, -2i32 as yytype_int16,
     -826i32 as yytype_int16, -826i32 as yytype_int16,
     -826i32 as yytype_int16, 5628i32 as yytype_int16,
     5743i32 as yytype_int16, -826i32 as yytype_int16,
     -826i32 as yytype_int16, 5858i32 as yytype_int16,
     -826i32 as yytype_int16, -826i32 as yytype_int16,
     -826i32 as yytype_int16, -826i32 as yytype_int16,
     -826i32 as yytype_int16, -826i32 as yytype_int16,
     -826i32 as yytype_int16, 9112i32 as yytype_int16,
     9112i32 as yytype_int16, 118i32 as yytype_int16, 4508i32 as yytype_int16,
     335i32 as yytype_int16, 8077i32 as yytype_int16, 8307i32 as yytype_int16,
     7165i32 as yytype_int16, -826i32 as yytype_int16,
     6617i32 as yytype_int16, 485i32 as yytype_int16, 1106i32 as yytype_int16,
     1173i32 as yytype_int16, 1250i32 as yytype_int16, 726i32 as yytype_int16,
     -826i32 as yytype_int16, 354i32 as yytype_int16, 9227i32 as yytype_int16,
     9112i32 as yytype_int16, -826i32 as yytype_int16, 947i32 as yytype_int16,
     -826i32 as yytype_int16, 1248i32 as yytype_int16,
     -826i32 as yytype_int16, 381i32 as yytype_int16, -826i32 as yytype_int16,
     -826i32 as yytype_int16, 216i32 as yytype_int16, 112i32 as yytype_int16,
     -826i32 as yytype_int16, 121i32 as yytype_int16, 9564i32 as yytype_int16,
     -826i32 as yytype_int16, 143i32 as yytype_int16,
     10006i32 as yytype_int16, 434i32 as yytype_int16, 467i32 as yytype_int16,
     87i32 as yytype_int16, 39i32 as yytype_int16, -826i32 as yytype_int16,
     106i32 as yytype_int16, -826i32 as yytype_int16, -826i32 as yytype_int16,
     -826i32 as yytype_int16, -826i32 as yytype_int16,
     -826i32 as yytype_int16, -826i32 as yytype_int16,
     -826i32 as yytype_int16, -826i32 as yytype_int16,
     -826i32 as yytype_int16, 361i32 as yytype_int16, 184i32 as yytype_int16,
     -826i32 as yytype_int16, 455i32 as yytype_int16, 37i32 as yytype_int16,
     -826i32 as yytype_int16, -826i32 as yytype_int16,
     -826i32 as yytype_int16, -826i32 as yytype_int16,
     -826i32 as yytype_int16, 136i32 as yytype_int16, 136i32 as yytype_int16,
     142i32 as yytype_int16, 833i32 as yytype_int16, 843i32 as yytype_int16,
     8997i32 as yytype_int16, 465i32 as yytype_int16, 4624i32 as yytype_int16,
     373i32 as yytype_int16, -826i32 as yytype_int16, 168i32 as yytype_int16,
     -826i32 as yytype_int16, 557i32 as yytype_int16, -826i32 as yytype_int16,
     -826i32 as yytype_int16, 37i32 as yytype_int16, -826i32 as yytype_int16,
     -826i32 as yytype_int16, -826i32 as yytype_int16,
     -826i32 as yytype_int16, -826i32 as yytype_int16,
     -826i32 as yytype_int16, -826i32 as yytype_int16,
     -826i32 as yytype_int16, -826i32 as yytype_int16,
     -826i32 as yytype_int16, -826i32 as yytype_int16,
     -826i32 as yytype_int16, -826i32 as yytype_int16,
     -826i32 as yytype_int16, -826i32 as yytype_int16,
     -826i32 as yytype_int16, -826i32 as yytype_int16,
     -826i32 as yytype_int16, -826i32 as yytype_int16,
     -826i32 as yytype_int16, -826i32 as yytype_int16,
     -826i32 as yytype_int16, -826i32 as yytype_int16,
     -826i32 as yytype_int16, -826i32 as yytype_int16,
     -826i32 as yytype_int16, -826i32 as yytype_int16,
     -826i32 as yytype_int16, 53i32 as yytype_int16, 102i32 as yytype_int16,
     126i32 as yytype_int16, 135i32 as yytype_int16, -826i32 as yytype_int16,
     -826i32 as yytype_int16, -826i32 as yytype_int16,
     -826i32 as yytype_int16, -826i32 as yytype_int16,
     -826i32 as yytype_int16, 175i32 as yytype_int16, 179i32 as yytype_int16,
     187i32 as yytype_int16, 205i32 as yytype_int16, -826i32 as yytype_int16,
     213i32 as yytype_int16, -826i32 as yytype_int16, -826i32 as yytype_int16,
     -826i32 as yytype_int16, -826i32 as yytype_int16,
     -826i32 as yytype_int16, -826i32 as yytype_int16,
     -826i32 as yytype_int16, -826i32 as yytype_int16,
     -826i32 as yytype_int16, -826i32 as yytype_int16,
     -826i32 as yytype_int16, -826i32 as yytype_int16,
     -826i32 as yytype_int16, -826i32 as yytype_int16,
     -826i32 as yytype_int16, -826i32 as yytype_int16,
     -826i32 as yytype_int16, -826i32 as yytype_int16,
     -826i32 as yytype_int16, -826i32 as yytype_int16,
     -826i32 as yytype_int16, -826i32 as yytype_int16,
     -826i32 as yytype_int16, -826i32 as yytype_int16,
     -826i32 as yytype_int16, -826i32 as yytype_int16,
     -826i32 as yytype_int16, -826i32 as yytype_int16,
     -826i32 as yytype_int16, -826i32 as yytype_int16,
     -826i32 as yytype_int16, -826i32 as yytype_int16,
     -826i32 as yytype_int16, -826i32 as yytype_int16,
     -826i32 as yytype_int16, 214i32 as yytype_int16, 3704i32 as yytype_int16,
     241i32 as yytype_int16, 381i32 as yytype_int16, 202i32 as yytype_int16,
     180i32 as yytype_int16, 664i32 as yytype_int16, 63i32 as yytype_int16,
     232i32 as yytype_int16, 66i32 as yytype_int16, 202i32 as yytype_int16,
     8997i32 as yytype_int16, 8997i32 as yytype_int16, 265i32 as yytype_int16,
     -826i32 as yytype_int16, -826i32 as yytype_int16, 750i32 as yytype_int16,
     303i32 as yytype_int16, 61i32 as yytype_int16, 86i32 as yytype_int16,
     -826i32 as yytype_int16, -826i32 as yytype_int16,
     -826i32 as yytype_int16, -826i32 as yytype_int16,
     -826i32 as yytype_int16, -826i32 as yytype_int16,
     -826i32 as yytype_int16, -826i32 as yytype_int16,
     -826i32 as yytype_int16, 6754i32 as yytype_int16,
     -826i32 as yytype_int16, -826i32 as yytype_int16, 229i32 as yytype_int16,
     -826i32 as yytype_int16, -826i32 as yytype_int16,
     -826i32 as yytype_int16, -826i32 as yytype_int16,
     -826i32 as yytype_int16, -826i32 as yytype_int16, 947i32 as yytype_int16,
     -826i32 as yytype_int16, 366i32 as yytype_int16, -826i32 as yytype_int16,
     323i32 as yytype_int16, -826i32 as yytype_int16, -826i32 as yytype_int16,
     947i32 as yytype_int16, 2894i32 as yytype_int16, 9112i32 as yytype_int16,
     9112i32 as yytype_int16, 9112i32 as yytype_int16,
     9112i32 as yytype_int16, -826i32 as yytype_int16,
     11494i32 as yytype_int16, -826i32 as yytype_int16,
     -826i32 as yytype_int16, 242i32 as yytype_int16, 363i32 as yytype_int16,
     287i32 as yytype_int16, -826i32 as yytype_int16, -826i32 as yytype_int16,
     -826i32 as yytype_int16, 7847i32 as yytype_int16,
     -826i32 as yytype_int16, -826i32 as yytype_int16,
     -826i32 as yytype_int16, 7847i32 as yytype_int16,
     -826i32 as yytype_int16, -826i32 as yytype_int16,
     -826i32 as yytype_int16, 5347i32 as yytype_int16,
     8997i32 as yytype_int16, -826i32 as yytype_int16,
     -826i32 as yytype_int16, 302i32 as yytype_int16, 4740i32 as yytype_int16,
     -826i32 as yytype_int16, 775i32 as yytype_int16, 368i32 as yytype_int16,
     531i32 as yytype_int16, 7617i32 as yytype_int16, 4508i32 as yytype_int16,
     311i32 as yytype_int16, 947i32 as yytype_int16, 1248i32 as yytype_int16,
     299i32 as yytype_int16, 337i32 as yytype_int16, -826i32 as yytype_int16,
     7617i32 as yytype_int16, 299i32 as yytype_int16, 328i32 as yytype_int16,
     14i32 as yytype_int16, 150i32 as yytype_int16, -826i32 as yytype_int16,
     11494i32 as yytype_int16, 339i32 as yytype_int16, 150i32 as yytype_int16,
     -826i32 as yytype_int16, 429i32 as yytype_int16, 9786i32 as yytype_int16,
     376i32 as yytype_int16, 779i32 as yytype_int16, 783i32 as yytype_int16,
     811i32 as yytype_int16, 966i32 as yytype_int16, -826i32 as yytype_int16,
     -826i32 as yytype_int16, -826i32 as yytype_int16,
     -826i32 as yytype_int16, 1304i32 as yytype_int16,
     -826i32 as yytype_int16, -826i32 as yytype_int16,
     -826i32 as yytype_int16, -826i32 as yytype_int16,
     -826i32 as yytype_int16, -826i32 as yytype_int16, 389i32 as yytype_int16,
     693i32 as yytype_int16, -826i32 as yytype_int16, -826i32 as yytype_int16,
     1332i32 as yytype_int16, -826i32 as yytype_int16,
     1349i32 as yytype_int16, -826i32 as yytype_int16,
     1403i32 as yytype_int16, -826i32 as yytype_int16,
     1010i32 as yytype_int16, 446i32 as yytype_int16, 456i32 as yytype_int16,
     -826i32 as yytype_int16, -826i32 as yytype_int16,
     -826i32 as yytype_int16, -826i32 as yytype_int16,
     4999i32 as yytype_int16, 8997i32 as yytype_int16,
     8997i32 as yytype_int16, 8997i32 as yytype_int16,
     8997i32 as yytype_int16, 7617i32 as yytype_int16,
     8997i32 as yytype_int16, 8997i32 as yytype_int16,
     -826i32 as yytype_int16, -826i32 as yytype_int16,
     8422i32 as yytype_int16, -826i32 as yytype_int16,
     4508i32 as yytype_int16, 7276i32 as yytype_int16, 413i32 as yytype_int16,
     8422i32 as yytype_int16, 9112i32 as yytype_int16,
     9112i32 as yytype_int16, 9112i32 as yytype_int16,
     9112i32 as yytype_int16, 9112i32 as yytype_int16,
     9112i32 as yytype_int16, 9112i32 as yytype_int16,
     9112i32 as yytype_int16, 9112i32 as yytype_int16,
     9112i32 as yytype_int16, 9112i32 as yytype_int16,
     9112i32 as yytype_int16, 9112i32 as yytype_int16,
     9112i32 as yytype_int16, 9112i32 as yytype_int16,
     9112i32 as yytype_int16, 9112i32 as yytype_int16,
     9112i32 as yytype_int16, 9112i32 as yytype_int16,
     9112i32 as yytype_int16, 9112i32 as yytype_int16,
     9112i32 as yytype_int16, 9112i32 as yytype_int16,
     9112i32 as yytype_int16, 9112i32 as yytype_int16,
     9112i32 as yytype_int16, 2263i32 as yytype_int16,
     -826i32 as yytype_int16, 7847i32 as yytype_int16,
     -826i32 as yytype_int16, 10071i32 as yytype_int16,
     -826i32 as yytype_int16, -826i32 as yytype_int16,
     11233i32 as yytype_int16, -826i32 as yytype_int16,
     -826i32 as yytype_int16, -826i32 as yytype_int16,
     -826i32 as yytype_int16, 9227i32 as yytype_int16,
     9227i32 as yytype_int16, -826i32 as yytype_int16, 457i32 as yytype_int16,
     -826i32 as yytype_int16, 381i32 as yytype_int16, -826i32 as yytype_int16,
     838i32 as yytype_int16, -826i32 as yytype_int16, -826i32 as yytype_int16,
     -826i32 as yytype_int16, -826i32 as yytype_int16,
     -826i32 as yytype_int16, 10154i32 as yytype_int16,
     7847i32 as yytype_int16, 10237i32 as yytype_int16,
     3704i32 as yytype_int16, 8997i32 as yytype_int16,
     -826i32 as yytype_int16, -826i32 as yytype_int16,
     -826i32 as yytype_int16, -826i32 as yytype_int16, 541i32 as yytype_int16,
     544i32 as yytype_int16, 181i32 as yytype_int16, -826i32 as yytype_int16,
     3847i32 as yytype_int16, 550i32 as yytype_int16, 9112i32 as yytype_int16,
     10320i32 as yytype_int16, 7847i32 as yytype_int16,
     10403i32 as yytype_int16, 9112i32 as yytype_int16,
     9112i32 as yytype_int16, 4133i32 as yytype_int16, 846i32 as yytype_int16,
     846i32 as yytype_int16, 94i32 as yytype_int16, 10486i32 as yytype_int16,
     7847i32 as yytype_int16, 10569i32 as yytype_int16,
     -826i32 as yytype_int16, 497i32 as yytype_int16, -826i32 as yytype_int16,
     4740i32 as yytype_int16, 323i32 as yytype_int16, -826i32 as yytype_int16,
     -826i32 as yytype_int16, 8537i32 as yytype_int16, 562i32 as yytype_int16,
     -826i32 as yytype_int16, 9112i32 as yytype_int16,
     10006i32 as yytype_int16, 10006i32 as yytype_int16,
     10006i32 as yytype_int16, 9112i32 as yytype_int16,
     389i32 as yytype_int16, -826i32 as yytype_int16, 7962i32 as yytype_int16,
     -826i32 as yytype_int16, 9112i32 as yytype_int16,
     7732i32 as yytype_int16, -826i32 as yytype_int16, 479i32 as yytype_int16,
     299i32 as yytype_int16, -826i32 as yytype_int16, 443i32 as yytype_int16,
     444i32 as yytype_int16, -826i32 as yytype_int16, -826i32 as yytype_int16,
     84i32 as yytype_int16, 442i32 as yytype_int16, -826i32 as yytype_int16,
     -826i32 as yytype_int16, 6891i32 as yytype_int16,
     4249i32 as yytype_int16, 449i32 as yytype_int16,
     10320i32 as yytype_int16, 10403i32 as yytype_int16,
     9112i32 as yytype_int16, 1248i32 as yytype_int16, 299i32 as yytype_int16,
     -826i32 as yytype_int16, -826i32 as yytype_int16,
     5115i32 as yytype_int16, 470i32 as yytype_int16, 1248i32 as yytype_int16,
     -826i32 as yytype_int16, -826i32 as yytype_int16,
     8192i32 as yytype_int16, -826i32 as yytype_int16,
     -826i32 as yytype_int16, -826i32 as yytype_int16,
     -826i32 as yytype_int16, -826i32 as yytype_int16,
     -826i32 as yytype_int16, 838i32 as yytype_int16, 121i32 as yytype_int16,
     9786i32 as yytype_int16, -826i32 as yytype_int16,
     9786i32 as yytype_int16, 10652i32 as yytype_int16,
     7847i32 as yytype_int16, 10735i32 as yytype_int16, 17i32 as yytype_int16,
     -826i32 as yytype_int16, -826i32 as yytype_int16,
     -826i32 as yytype_int16, -826i32 as yytype_int16,
     -826i32 as yytype_int16, -826i32 as yytype_int16,
     -826i32 as yytype_int16, -826i32 as yytype_int16,
     -826i32 as yytype_int16, -826i32 as yytype_int16,
     -826i32 as yytype_int16, 1336i32 as yytype_int16,
     -826i32 as yytype_int16, 9112i32 as yytype_int16,
     -826i32 as yytype_int16, 474i32 as yytype_int16, 536i32 as yytype_int16,
     476i32 as yytype_int16, -826i32 as yytype_int16, -826i32 as yytype_int16,
     -826i32 as yytype_int16, -826i32 as yytype_int16,
     -826i32 as yytype_int16, 498i32 as yytype_int16, 9112i32 as yytype_int16,
     -826i32 as yytype_int16, 500i32 as yytype_int16, 552i32 as yytype_int16,
     503i32 as yytype_int16, 592i32 as yytype_int16, -826i32 as yytype_int16,
     -826i32 as yytype_int16, 1407i32 as yytype_int16,
     4740i32 as yytype_int16, 389i32 as yytype_int16, -826i32 as yytype_int16,
     -826i32 as yytype_int16, -826i32 as yytype_int16,
     -826i32 as yytype_int16, -826i32 as yytype_int16,
     -826i32 as yytype_int16, -826i32 as yytype_int16,
     9112i32 as yytype_int16, 9112i32 as yytype_int16,
     -826i32 as yytype_int16, -826i32 as yytype_int16,
     -826i32 as yytype_int16, -826i32 as yytype_int16,
     -826i32 as yytype_int16, -826i32 as yytype_int16,
     -826i32 as yytype_int16, -826i32 as yytype_int16, 115i32 as yytype_int16,
     9112i32 as yytype_int16, -826i32 as yytype_int16,
     11322i32 as yytype_int16, 242i32 as yytype_int16,
     -826i32 as yytype_int16, 299i32 as yytype_int16, 9786i32 as yytype_int16,
     506i32 as yytype_int16, -826i32 as yytype_int16, -826i32 as yytype_int16,
     -826i32 as yytype_int16, 604i32 as yytype_int16, 535i32 as yytype_int16,
     1962i32 as yytype_int16, -826i32 as yytype_int16,
     -826i32 as yytype_int16, 913i32 as yytype_int16, 194i32 as yytype_int16,
     368i32 as yytype_int16, 10091i32 as yytype_int16,
     10091i32 as yytype_int16, 10091i32 as yytype_int16,
     10091i32 as yytype_int16, 1170i32 as yytype_int16,
     1170i32 as yytype_int16, 10174i32 as yytype_int16,
     11515i32 as yytype_int16, 10091i32 as yytype_int16,
     10091i32 as yytype_int16, 2587i32 as yytype_int16,
     2587i32 as yytype_int16, 700i32 as yytype_int16, 700i32 as yytype_int16,
     11262i32 as yytype_int16, 1170i32 as yytype_int16,
     1170i32 as yytype_int16, 879i32 as yytype_int16, 879i32 as yytype_int16,
     1178i32 as yytype_int16, 401i32 as yytype_int16, 401i32 as yytype_int16,
     368i32 as yytype_int16, 368i32 as yytype_int16, 368i32 as yytype_int16,
     3160i32 as yytype_int16, 6364i32 as yytype_int16,
     3426i32 as yytype_int16, 6479i32 as yytype_int16,
     -826i32 as yytype_int16, 136i32 as yytype_int16, -826i32 as yytype_int16,
     299i32 as yytype_int16, 623i32 as yytype_int16, -826i32 as yytype_int16,
     631i32 as yytype_int16, -826i32 as yytype_int16, -826i32 as yytype_int16,
     6249i32 as yytype_int16, -826i32 as yytype_int16,
     -826i32 as yytype_int16, 1848i32 as yytype_int16, 115i32 as yytype_int16,
     115i32 as yytype_int16, -826i32 as yytype_int16, 2333i32 as yytype_int16,
     -826i32 as yytype_int16, -826i32 as yytype_int16,
     -826i32 as yytype_int16, -826i32 as yytype_int16,
     -826i32 as yytype_int16, 947i32 as yytype_int16, 8997i32 as yytype_int16,
     3704i32 as yytype_int16, 858i32 as yytype_int16, 451i32 as yytype_int16,
     -826i32 as yytype_int16, 136i32 as yytype_int16, 299i32 as yytype_int16,
     136i32 as yytype_int16, 639i32 as yytype_int16, 84i32 as yytype_int16,
     1569i32 as yytype_int16, 7028i32 as yytype_int16,
     -826i32 as yytype_int16, 8652i32 as yytype_int16, 637i32 as yytype_int16,
     -826i32 as yytype_int16, 477i32 as yytype_int16, -826i32 as yytype_int16,
     5973i32 as yytype_int16, 6111i32 as yytype_int16, 299i32 as yytype_int16,
     195i32 as yytype_int16, 218i32 as yytype_int16, 637i32 as yytype_int16,
     -826i32 as yytype_int16, -826i32 as yytype_int16,
     -826i32 as yytype_int16, -826i32 as yytype_int16, 64i32 as yytype_int16,
     99i32 as yytype_int16, 299i32 as yytype_int16, 111i32 as yytype_int16,
     113i32 as yytype_int16, 8997i32 as yytype_int16, 6891i32 as yytype_int16,
     524i32 as yytype_int16, 650i32 as yytype_int16, 10006i32 as yytype_int16,
     584i32 as yytype_int16, -826i32 as yytype_int16,
     10006i32 as yytype_int16, 10006i32 as yytype_int16,
     389i32 as yytype_int16, 9112i32 as yytype_int16,
     11494i32 as yytype_int16, -826i32 as yytype_int16,
     287i32 as yytype_int16, 10006i32 as yytype_int16,
     -826i32 as yytype_int16, -826i32 as yytype_int16,
     1080i32 as yytype_int16, 7962i32 as yytype_int16,
     7502i32 as yytype_int16, -826i32 as yytype_int16,
     -826i32 as yytype_int16, -826i32 as yytype_int16, 532i32 as yytype_int16,
     -826i32 as yytype_int16, -826i32 as yytype_int16, 47i32 as yytype_int16,
     1248i32 as yytype_int16, 299i32 as yytype_int16, 150i32 as yytype_int16,
     413i32 as yytype_int16, -826i32 as yytype_int16, 42i32 as yytype_int16,
     451i32 as yytype_int16, 299i32 as yytype_int16, 50i32 as yytype_int16,
     74i32 as yytype_int16, -826i32 as yytype_int16, -826i32 as yytype_int16,
     1227i32 as yytype_int16, 299i32 as yytype_int16, 83i32 as yytype_int16,
     10006i32 as yytype_int16, 169i32 as yytype_int16,
     -826i32 as yytype_int16, -826i32 as yytype_int16,
     -826i32 as yytype_int16, 32i32 as yytype_int16, -826i32 as yytype_int16,
     1336i32 as yytype_int16, -826i32 as yytype_int16,
     10006i32 as yytype_int16, 1336i32 as yytype_int16,
     -826i32 as yytype_int16, -826i32 as yytype_int16,
     1091i32 as yytype_int16, -826i32 as yytype_int16,
     -826i32 as yytype_int16, -826i32 as yytype_int16, 537i32 as yytype_int16,
     -826i32 as yytype_int16, 368i32 as yytype_int16, 368i32 as yytype_int16,
     -826i32 as yytype_int16, 1336i32 as yytype_int16,
     3704i32 as yytype_int16, -826i32 as yytype_int16,
     -826i32 as yytype_int16, 11340i32 as yytype_int16,
     8767i32 as yytype_int16, -826i32 as yytype_int16,
     -826i32 as yytype_int16, 9786i32 as yytype_int16,
     7617i32 as yytype_int16, 9227i32 as yytype_int16,
     9112i32 as yytype_int16, 10818i32 as yytype_int16,
     7847i32 as yytype_int16, 10901i32 as yytype_int16, 58i32 as yytype_int16,
     9227i32 as yytype_int16, 9227i32 as yytype_int16,
     -826i32 as yytype_int16, 457i32 as yytype_int16, 525i32 as yytype_int16,
     675i32 as yytype_int16, 9227i32 as yytype_int16, 9227i32 as yytype_int16,
     -826i32 as yytype_int16, 457i32 as yytype_int16, 39i32 as yytype_int16,
     216i32 as yytype_int16, 3704i32 as yytype_int16, 4740i32 as yytype_int16,
     115i32 as yytype_int16, -826i32 as yytype_int16, 947i32 as yytype_int16,
     656i32 as yytype_int16, -826i32 as yytype_int16, -826i32 as yytype_int16,
     -826i32 as yytype_int16, 1336i32 as yytype_int16,
     3704i32 as yytype_int16, 947i32 as yytype_int16, -826i32 as yytype_int16,
     11322i32 as yytype_int16, -826i32 as yytype_int16,
     583i32 as yytype_int16, -826i32 as yytype_int16, 4392i32 as yytype_int16,
     662i32 as yytype_int16, -826i32 as yytype_int16, 8997i32 as yytype_int16,
     683i32 as yytype_int16, -826i32 as yytype_int16, 9112i32 as yytype_int16,
     9112i32 as yytype_int16, 219i32 as yytype_int16, 9112i32 as yytype_int16,
     9112i32 as yytype_int16, 687i32 as yytype_int16, 4883i32 as yytype_int16,
     4883i32 as yytype_int16, 117i32 as yytype_int16, 846i32 as yytype_int16,
     -826i32 as yytype_int16, -826i32 as yytype_int16,
     -826i32 as yytype_int16, 8882i32 as yytype_int16,
     3990i32 as yytype_int16, 10006i32 as yytype_int16,
     -826i32 as yytype_int16, 574i32 as yytype_int16, -826i32 as yytype_int16,
     -826i32 as yytype_int16, -826i32 as yytype_int16, 197i32 as yytype_int16,
     -826i32 as yytype_int16, 437i32 as yytype_int16, 299i32 as yytype_int16,
     577i32 as yytype_int16, 579i32 as yytype_int16, 575i32 as yytype_int16,
     3704i32 as yytype_int16, 4740i32 as yytype_int16,
     -826i32 as yytype_int16, 666i32 as yytype_int16, -826i32 as yytype_int16,
     476i32 as yytype_int16, -826i32 as yytype_int16, -826i32 as yytype_int16,
     -826i32 as yytype_int16, 587i32 as yytype_int16, 590i32 as yytype_int16,
     598i32 as yytype_int16, -826i32 as yytype_int16, 600i32 as yytype_int16,
     666i32 as yytype_int16, 598i32 as yytype_int16, -826i32 as yytype_int16,
     -826i32 as yytype_int16, 299i32 as yytype_int16, 299i32 as yytype_int16,
     9897i32 as yytype_int16, -826i32 as yytype_int16, 602i32 as yytype_int16,
     476i32 as yytype_int16, 607i32 as yytype_int16, 9897i32 as yytype_int16,
     -826i32 as yytype_int16, 608i32 as yytype_int16, 615i32 as yytype_int16,
     -826i32 as yytype_int16, 715i32 as yytype_int16, 9112i32 as yytype_int16,
     11408i32 as yytype_int16, -826i32 as yytype_int16,
     -826i32 as yytype_int16, 10006i32 as yytype_int16,
     3293i32 as yytype_int16, 3559i32 as yytype_int16, 299i32 as yytype_int16,
     221i32 as yytype_int16, 235i32 as yytype_int16, 9112i32 as yytype_int16,
     9112i32 as yytype_int16, -826i32 as yytype_int16,
     -826i32 as yytype_int16, -826i32 as yytype_int16,
     -826i32 as yytype_int16, -826i32 as yytype_int16,
     -826i32 as yytype_int16, 9227i32 as yytype_int16,
     -826i32 as yytype_int16, -826i32 as yytype_int16,
     -826i32 as yytype_int16, -826i32 as yytype_int16,
     -826i32 as yytype_int16, -826i32 as yytype_int16,
     -826i32 as yytype_int16, 748i32 as yytype_int16, 640i32 as yytype_int16,
     4740i32 as yytype_int16, 3704i32 as yytype_int16,
     -826i32 as yytype_int16, -826i32 as yytype_int16, 299i32 as yytype_int16,
     752i32 as yytype_int16, -826i32 as yytype_int16, 1569i32 as yytype_int16,
     10008i32 as yytype_int16, 202i32 as yytype_int16,
     -826i32 as yytype_int16, -826i32 as yytype_int16,
     4883i32 as yytype_int16, -826i32 as yytype_int16,
     -826i32 as yytype_int16, 202i32 as yytype_int16, -826i32 as yytype_int16,
     9112i32 as yytype_int16, -826i32 as yytype_int16, 773i32 as yytype_int16,
     780i32 as yytype_int16, -826i32 as yytype_int16,
     10006i32 as yytype_int16, 131i32 as yytype_int16,
     7502i32 as yytype_int16, -826i32 as yytype_int16, 658i32 as yytype_int16,
     -826i32 as yytype_int16, 1451i32 as yytype_int16,
     -826i32 as yytype_int16, 985i32 as yytype_int16, 784i32 as yytype_int16,
     667i32 as yytype_int16, -826i32 as yytype_int16, 1336i32 as yytype_int16,
     -826i32 as yytype_int16, 1091i32 as yytype_int16,
     -826i32 as yytype_int16, 1091i32 as yytype_int16,
     -826i32 as yytype_int16, 1091i32 as yytype_int16,
     -826i32 as yytype_int16, -826i32 as yytype_int16, 679i32 as yytype_int16,
     688i32 as yytype_int16, 743i32 as yytype_int16, 923i32 as yytype_int16,
     169i32 as yytype_int16, -826i32 as yytype_int16, -826i32 as yytype_int16,
     1102i32 as yytype_int16, -826i32 as yytype_int16, 923i32 as yytype_int16,
     1336i32 as yytype_int16, -826i32 as yytype_int16,
     1091i32 as yytype_int16, -826i32 as yytype_int16,
     -826i32 as yytype_int16, 11426i32 as yytype_int16,
     325i32 as yytype_int16, 10006i32 as yytype_int16,
     10006i32 as yytype_int16, -826i32 as yytype_int16,
     -826i32 as yytype_int16, -826i32 as yytype_int16,
     -826i32 as yytype_int16, 680i32 as yytype_int16, 802i32 as yytype_int16,
     -826i32 as yytype_int16, -826i32 as yytype_int16,
     3704i32 as yytype_int16, 764i32 as yytype_int16, -826i32 as yytype_int16,
     943i32 as yytype_int16, 783i32 as yytype_int16, 811i32 as yytype_int16,
     3704i32 as yytype_int16, -826i32 as yytype_int16,
     3847i32 as yytype_int16, -826i32 as yytype_int16,
     -826i32 as yytype_int16, 4883i32 as yytype_int16,
     -826i32 as yytype_int16, -826i32 as yytype_int16,
     -826i32 as yytype_int16, 1046i32 as yytype_int16,
     1046i32 as yytype_int16, 487i32 as yytype_int16, -826i32 as yytype_int16,
     255i32 as yytype_int16, -826i32 as yytype_int16, -826i32 as yytype_int16,
     -826i32 as yytype_int16, -826i32 as yytype_int16, 598i32 as yytype_int16,
     682i32 as yytype_int16, 598i32 as yytype_int16, 598i32 as yytype_int16,
     -826i32 as yytype_int16, -826i32 as yytype_int16,
     -826i32 as yytype_int16, 10984i32 as yytype_int16,
     -826i32 as yytype_int16, 476i32 as yytype_int16, 169i32 as yytype_int16,
     -826i32 as yytype_int16, -826i32 as yytype_int16, 685i32 as yytype_int16,
     695i32 as yytype_int16, 697i32 as yytype_int16, -826i32 as yytype_int16,
     699i32 as yytype_int16, 697i32 as yytype_int16, -826i32 as yytype_int16,
     -826i32 as yytype_int16, 806i32 as yytype_int16, 838i32 as yytype_int16,
     11067i32 as yytype_int16, 7847i32 as yytype_int16,
     11150i32 as yytype_int16, 544i32 as yytype_int16, 477i32 as yytype_int16,
     810i32 as yytype_int16, 703i32 as yytype_int16, 703i32 as yytype_int16,
     1046i32 as yytype_int16, 707i32 as yytype_int16, 985i32 as yytype_int16,
     -826i32 as yytype_int16, -826i32 as yytype_int16,
     1091i32 as yytype_int16, -826i32 as yytype_int16,
     -826i32 as yytype_int16, -826i32 as yytype_int16, 706i32 as yytype_int16,
     711i32 as yytype_int16, -826i32 as yytype_int16, 1336i32 as yytype_int16,
     -826i32 as yytype_int16, 1091i32 as yytype_int16,
     -826i32 as yytype_int16, 1091i32 as yytype_int16,
     -826i32 as yytype_int16, 1091i32 as yytype_int16,
     -826i32 as yytype_int16, -826i32 as yytype_int16,
     -826i32 as yytype_int16, 858i32 as yytype_int16, 451i32 as yytype_int16,
     299i32 as yytype_int16, 789i32 as yytype_int16, 794i32 as yytype_int16,
     -826i32 as yytype_int16, -826i32 as yytype_int16,
     -826i32 as yytype_int16, 1046i32 as yytype_int16, 703i32 as yytype_int16,
     1046i32 as yytype_int16, -826i32 as yytype_int16, 598i32 as yytype_int16,
     697i32 as yytype_int16, 709i32 as yytype_int16, 697i32 as yytype_int16,
     697i32 as yytype_int16, 108i32 as yytype_int16, 703i32 as yytype_int16,
     -826i32 as yytype_int16, -826i32 as yytype_int16,
     1091i32 as yytype_int16, -826i32 as yytype_int16,
     -826i32 as yytype_int16, -826i32 as yytype_int16, 697i32 as yytype_int16,
     -826i32 as yytype_int16];
static mut yypgoto: [yytype_int16; 176] =
    [-826i32 as yytype_int16, -826i32 as yytype_int16,
     -826i32 as yytype_int16, 398i32 as yytype_int16, -826i32 as yytype_int16,
     30i32 as yytype_int16, -826i32 as yytype_int16, -178i32 as yytype_int16,
     -40i32 as yytype_int16, -826i32 as yytype_int16, 52i32 as yytype_int16,
     -826i32 as yytype_int16, -218i32 as yytype_int16,
     -340i32 as yytype_int16, 1039i32 as yytype_int16, 92i32 as yytype_int16,
     -20i32 as yytype_int16, -826i32 as yytype_int16, -619i32 as yytype_int16,
     -826i32 as yytype_int16, -13i32 as yytype_int16, 849i32 as yytype_int16,
     -192i32 as yytype_int16, -25i32 as yytype_int16, -52i32 as yytype_int16,
     -261i32 as yytype_int16, -436i32 as yytype_int16, -21i32 as yytype_int16,
     1830i32 as yytype_int16, -74i32 as yytype_int16, 859i32 as yytype_int16,
     3i32 as yytype_int16, -17i32 as yytype_int16, -826i32 as yytype_int16,
     -826i32 as yytype_int16, 5i32 as yytype_int16, -826i32 as yytype_int16,
     983i32 as yytype_int16, -826i32 as yytype_int16, 745i32 as yytype_int16,
     55i32 as yytype_int16, 13i32 as yytype_int16, -323i32 as yytype_int16,
     127i32 as yytype_int16, -9i32 as yytype_int16, -826i32 as yytype_int16,
     -338i32 as yytype_int16, -257i32 as yytype_int16,
     -147i32 as yytype_int16, 67i32 as yytype_int16, -314i32 as yytype_int16,
     40i32 as yytype_int16, -826i32 as yytype_int16, -826i32 as yytype_int16,
     -826i32 as yytype_int16, -826i32 as yytype_int16,
     -826i32 as yytype_int16, -826i32 as yytype_int16,
     -826i32 as yytype_int16, -826i32 as yytype_int16,
     -826i32 as yytype_int16, -826i32 as yytype_int16,
     -826i32 as yytype_int16, -826i32 as yytype_int16,
     -826i32 as yytype_int16, -826i32 as yytype_int16,
     -826i32 as yytype_int16, -826i32 as yytype_int16,
     -826i32 as yytype_int16, -826i32 as yytype_int16,
     -826i32 as yytype_int16, -826i32 as yytype_int16, 346i32 as yytype_int16,
     -195i32 as yytype_int16, -396i32 as yytype_int16, -98i32 as yytype_int16,
     -572i32 as yytype_int16, -826i32 as yytype_int16,
     -826i32 as yytype_int16, -826i32 as yytype_int16, 165i32 as yytype_int16,
     634i32 as yytype_int16, -826i32 as yytype_int16, -538i32 as yytype_int16,
     -826i32 as yytype_int16, -826i32 as yytype_int16,
     -278i32 as yytype_int16, -826i32 as yytype_int16, -96i32 as yytype_int16,
     -826i32 as yytype_int16, -826i32 as yytype_int16, 145i32 as yytype_int16,
     -826i32 as yytype_int16, -826i32 as yytype_int16,
     -826i32 as yytype_int16, -76i32 as yytype_int16, -826i32 as yytype_int16,
     -826i32 as yytype_int16, -410i32 as yytype_int16,
     -826i32 as yytype_int16, -81i32 as yytype_int16, -826i32 as yytype_int16,
     -826i32 as yytype_int16, -826i32 as yytype_int16,
     -826i32 as yytype_int16, -826i32 as yytype_int16, 20i32 as yytype_int16,
     69i32 as yytype_int16, -118i32 as yytype_int16, -826i32 as yytype_int16,
     -826i32 as yytype_int16, -826i32 as yytype_int16,
     -826i32 as yytype_int16, 580i32 as yytype_int16, -286i32 as yytype_int16,
     -826i32 as yytype_int16, 660i32 as yytype_int16, -826i32 as yytype_int16,
     -826i32 as yytype_int16, -826i32 as yytype_int16, 1i32 as yytype_int16,
     -826i32 as yytype_int16, -826i32 as yytype_int16,
     -826i32 as yytype_int16, 1723i32 as yytype_int16,
     1854i32 as yytype_int16, 885i32 as yytype_int16, 1435i32 as yytype_int16,
     -826i32 as yytype_int16, -826i32 as yytype_int16, 49i32 as yytype_int16,
     23i32 as yytype_int16, 222i32 as yytype_int16, 12i32 as yytype_int16,
     -826i32 as yytype_int16, -826i32 as yytype_int16,
     -826i32 as yytype_int16, -113i32 as yytype_int16,
     -283i32 as yytype_int16, -241i32 as yytype_int16,
     -287i32 as yytype_int16, -800i32 as yytype_int16,
     -731i32 as yytype_int16, -367i32 as yytype_int16,
     -826i32 as yytype_int16, 851i32 as yytype_int16, -613i32 as yytype_int16,
     -658i32 as yytype_int16, -825i32 as yytype_int16, 15i32 as yytype_int16,
     225i32 as yytype_int16, -826i32 as yytype_int16, -605i32 as yytype_int16,
     -826i32 as yytype_int16, -125i32 as yytype_int16,
     -444i32 as yytype_int16, -826i32 as yytype_int16,
     -826i32 as yytype_int16, -826i32 as yytype_int16, 10i32 as yytype_int16,
     -435i32 as yytype_int16, 840i32 as yytype_int16, -280i32 as yytype_int16,
     -826i32 as yytype_int16, -826i32 as yytype_int16, -77i32 as yytype_int16,
     -826i32 as yytype_int16, -24i32 as yytype_int16, -27i32 as yytype_int16,
     -205i32 as yytype_int16, -559i32 as yytype_int16,
     -276i32 as yytype_int16, 26i32 as yytype_int16, 1254i32 as yytype_int16,
     -19i32 as yytype_int16, -1i32 as yytype_int16];
static mut yytable: [yytype_int16; 11646] =
    [272i32 as yytype_int16, 101i32 as yytype_int16, 450i32 as yytype_int16,
     253i32 as yytype_int16, 253i32 as yytype_int16, 380i32 as yytype_int16,
     382i32 as yytype_int16, 253i32 as yytype_int16, 386i32 as yytype_int16,
     283i32 as yytype_int16, 197i32 as yytype_int16, 274i32 as yytype_int16,
     198i32 as yytype_int16, 270i32 as yytype_int16, 665i32 as yytype_int16,
     234i32 as yytype_int16, 422i32 as yytype_int16, 481i32 as yytype_int16,
     512i32 as yytype_int16, 198i32 as yytype_int16, 268i32 as yytype_int16,
     483i32 as yytype_int16, 511i32 as yytype_int16, 653i32 as yytype_int16,
     287i32 as yytype_int16, 348i32 as yytype_int16, 259i32 as yytype_int16,
     259i32 as yytype_int16, 644i32 as yytype_int16, 234i32 as yytype_int16,
     259i32 as yytype_int16, 528i32 as yytype_int16, 301i32 as yytype_int16,
     198i32 as yytype_int16, 102i32 as yytype_int16, 561i32 as yytype_int16,
     258i32 as yytype_int16, 258i32 as yytype_int16, 396i32 as yytype_int16,
     486i32 as yytype_int16, 258i32 as yytype_int16, 245i32 as yytype_int16,
     333i32 as yytype_int16, 330i32 as yytype_int16, 805i32 as yytype_int16,
     117i32 as yytype_int16, 117i32 as yytype_int16, 334i32 as yytype_int16,
     609i32 as yytype_int16, 612i32 as yytype_int16, 294i32 as yytype_int16,
     298i32 as yytype_int16, 681i32 as yytype_int16, 117i32 as yytype_int16,
     68i32 as yytype_int16, 597i32 as yytype_int16, 68i32 as yytype_int16,
     878i32 as yytype_int16, 311i32 as yytype_int16, 760i32 as yytype_int16,
     198i32 as yytype_int16, 293i32 as yytype_int16, 297i32 as yytype_int16,
     384i32 as yytype_int16, 748i32 as yytype_int16, 384i32 as yytype_int16,
     698i32 as yytype_int16, -91i32 as yytype_int16, 770i32 as yytype_int16,
     742i32 as yytype_int16, 743i32 as yytype_int16, 258i32 as yytype_int16,
     258i32 as yytype_int16, 283i32 as yytype_int16, 687i32 as yytype_int16,
     -90i32 as yytype_int16, 264i32 as yytype_int16, 269i32 as yytype_int16,
     767i32 as yytype_int16, 623i32 as yytype_int16, 962i32 as yytype_int16,
     473i32 as yytype_int16, 943i32 as yytype_int16, 257i32 as yytype_int16,
     257i32 as yytype_int16, 475i32 as yytype_int16, -96i32 as yytype_int16,
     257i32 as yytype_int16, 773i32 as yytype_int16, -99i32 as yytype_int16,
     469i32 as yytype_int16, 391i32 as yytype_int16, 245i32 as yytype_int16,
     117i32 as yytype_int16, 803i32 as yytype_int16, 637i32 as yytype_int16,
     595i32 as yytype_int16, 806i32 as yytype_int16, 3i32 as yytype_int16,
     -92i32 as yytype_int16, 603i32 as yytype_int16, 818i32 as yytype_int16,
     211i32 as yytype_int16, 606i32 as yytype_int16, 647i32 as yytype_int16,
     268i32 as yytype_int16, 387i32 as yytype_int16, 240i32 as yytype_int16,
     662i32 as yytype_int16, 821i32 as yytype_int16, 446i32 as yytype_int16,
     -103i32 as yytype_int16, 793i32 as yytype_int16, 662i32 as yytype_int16,
     840i32 as yytype_int16, 834i32 as yytype_int16, 721i32 as yytype_int16,
     117i32 as yytype_int16, 292i32 as yytype_int16, -102i32 as yytype_int16,
     847i32 as yytype_int16, 340i32 as yytype_int16, 341i32 as yytype_int16,
     624i32 as yytype_int16, -101i32 as yytype_int16, 786i32 as yytype_int16,
     321i32 as yytype_int16, 323i32 as yytype_int16, 325i32 as yytype_int16,
     327i32 as yytype_int16, 419i32 as yytype_int16, 555i32 as yytype_int16,
     501i32 as yytype_int16, 276i32 as yytype_int16, -398i32 as yytype_int16,
     688i32 as yytype_int16, -98i32 as yytype_int16, 595i32 as yytype_int16,
     -100i32 as yytype_int16, 603i32 as yytype_int16, 428i32 as yytype_int16,
     -471i32 as yytype_int16, -97i32 as yytype_int16, 255i32 as yytype_int16,
     261i32 as yytype_int16, 477i32 as yytype_int16, 480i32 as yytype_int16,
     262i32 as yytype_int16, 624i32 as yytype_int16, 759i32 as yytype_int16,
     480i32 as yytype_int16, 436i32 as yytype_int16, 444i32 as yytype_int16,
     -468i32 as yytype_int16, 551i32 as yytype_int16, 390i32 as yytype_int16,
     421i32 as yytype_int16, 502i32 as yytype_int16, 528i32 as yytype_int16,
     239i32 as yytype_int16, -91i32 as yytype_int16, 264i32 as yytype_int16,
     269i32 as yytype_int16, 528i32 as yytype_int16, 962i32 as yytype_int16,
     -69i32 as yytype_int16, 42i32 as yytype_int16, 684i32 as yytype_int16,
     -90i32 as yytype_int16, 43i32 as yytype_int16, 555i32 as yytype_int16,
     555i32 as yytype_int16, 385i32 as yytype_int16, 280i32 as yytype_int16,
     385i32 as yytype_int16, 381i32 as yytype_int16, 390i32 as yytype_int16,
     263i32 as yytype_int16, 835i32 as yytype_int16, 943i32 as yytype_int16,
     -91i32 as yytype_int16, -96i32 as yytype_int16, -559i32 as yytype_int16,
     -91i32 as yytype_int16, -103i32 as yytype_int16, -83i32 as yytype_int16,
     624i32 as yytype_int16, -91i32 as yytype_int16, -90i32 as yytype_int16,
     377i32 as yytype_int16, -470i32 as yytype_int16, -90i32 as yytype_int16,
     -92i32 as yytype_int16, 794i32 as yytype_int16, 713i32 as yytype_int16,
     -90i32 as yytype_int16, -398i32 as yytype_int16, -471i32 as yytype_int16,
     450i32 as yytype_int16, -88i32 as yytype_int16, 530i32 as yytype_int16,
     466i32 as yytype_int16, -91i32 as yytype_int16, 530i32 as yytype_int16,
     -559i32 as yytype_int16, 530i32 as yytype_int16, 852i32 as yytype_int16,
     530i32 as yytype_int16, 978i32 as yytype_int16, 530i32 as yytype_int16,
     -398i32 as yytype_int16, 624i32 as yytype_int16, -92i32 as yytype_int16,
     59i32 as yytype_int16, -472i32 as yytype_int16, -92i32 as yytype_int16,
     433i32 as yytype_int16, 690i32 as yytype_int16, 413i32 as yytype_int16,
     -92i32 as yytype_int16, 796i32 as yytype_int16, 511i32 as yytype_int16,
     -89i32 as yytype_int16, -473i32 as yytype_int16, -95i32 as yytype_int16,
     491i32 as yytype_int16, 625i32 as yytype_int16, 486i32 as yytype_int16,
     805i32 as yytype_int16, 239i32 as yytype_int16, 344i32 as yytype_int16,
     379i32 as yytype_int16, -94i32 as yytype_int16, 311i32 as yytype_int16,
     665i32 as yytype_int16, 198i32 as yytype_int16, 464i32 as yytype_int16,
     -93i32 as yytype_int16, 714i32 as yytype_int16, -560i32 as yytype_int16,
     497i32 as yytype_int16, 710i32 as yytype_int16, 283i32 as yytype_int16,
     -398i32 as yytype_int16, 342i32 as yytype_int16, -398i32 as yytype_int16,
     -470i32 as yytype_int16, 666i32 as yytype_int16, 485i32 as yytype_int16,
     -90i32 as yytype_int16, 253i32 as yytype_int16, -92i32 as yytype_int16,
     -398i32 as yytype_int16, 670i32 as yytype_int16, 253i32 as yytype_int16,
     -89i32 as yytype_int16, 447i32 as yytype_int16, 287i32 as yytype_int16,
     447i32 as yytype_int16, 345i32 as yytype_int16, 471i32 as yytype_int16,
     349i32 as yytype_int16, 456i32 as yytype_int16, -475i32 as yytype_int16,
     676i32 as yytype_int16, 472i32 as yytype_int16, 245i32 as yytype_int16,
     -474i32 as yytype_int16, 500i32 as yytype_int16, 501i32 as yytype_int16,
     -472i32 as yytype_int16, 467i32 as yytype_int16, 911i32 as yytype_int16,
     438i32 as yytype_int16, 388i32 as yytype_int16, -476i32 as yytype_int16,
     263i32 as yytype_int16, 259i32 as yytype_int16, 703i32 as yytype_int16,
     -473i32 as yytype_int16, 706i32 as yytype_int16, 947i32 as yytype_int16,
     271i32 as yytype_int16, 258i32 as yytype_int16, 389i32 as yytype_int16,
     768i32 as yytype_int16, 826i32 as yytype_int16, 258i32 as yytype_int16,
     449i32 as yytype_int16, 818i32 as yytype_int16, 399i32 as yytype_int16,
     486i32 as yytype_int16, 818i32 as yytype_int16, -463i32 as yytype_int16,
     502i32 as yytype_int16, 239i32 as yytype_int16, 412i32 as yytype_int16,
     960i32 as yytype_int16, 416i32 as yytype_int16, -102i32 as yytype_int16,
     963i32 as yytype_int16, -467i32 as yytype_int16, 407i32 as yytype_int16,
     934i32 as yytype_int16, 423i32 as yytype_int16, 424i32 as yytype_int16,
     283i32 as yytype_int16, 668i32 as yytype_int16, 769i32 as yytype_int16,
     869i32 as yytype_int16, 245i32 as yytype_int16, 736i32 as yytype_int16,
     -103i32 as yytype_int16, -98i32 as yytype_int16, 235i32 as yytype_int16,
     -89i32 as yytype_int16, 756i32 as yytype_int16, 236i32 as yytype_int16,
     237i32 as yytype_int16, -475i32 as yytype_int16, 425i32 as yytype_int16,
     287i32 as yytype_int16, 420i32 as yytype_int16, -474i32 as yytype_int16,
     547i32 as yytype_int16, 737i32 as yytype_int16, 553i32 as yytype_int16,
     621i32 as yytype_int16, 429i32 as yytype_int16, 557i32 as yytype_int16,
     662i32 as yytype_int16, -476i32 as yytype_int16, 801i32 as yytype_int16,
     468i32 as yytype_int16, 257i32 as yytype_int16, -89i32 as yytype_int16,
     -100i32 as yytype_int16, -97i32 as yytype_int16, -89i32 as yytype_int16,
     -98i32 as yytype_int16, 117i32 as yytype_int16, 474i32 as yytype_int16,
     -89i32 as yytype_int16, 436i32 as yytype_int16, 511i32 as yytype_int16,
     238i32 as yytype_int16, 720i32 as yytype_int16, 239i32 as yytype_int16,
     82i32 as yytype_int16, -463i32 as yytype_int16, 82i32 as yytype_int16,
     118i32 as yytype_int16, 118i32 as yytype_int16, -100i32 as yytype_int16,
     885i32 as yytype_int16, 207i32 as yytype_int16, 207i32 as yytype_int16,
     -467i32 as yytype_int16, 408i32 as yytype_int16, 217i32 as yytype_int16,
     438i32 as yytype_int16, 207i32 as yytype_int16, 207i32 as yytype_int16,
     207i32 as yytype_int16, 537i32 as yytype_int16, 253i32 as yytype_int16,
     207i32 as yytype_int16, 431i32 as yytype_int16, 557i32 as yytype_int16,
     557i32 as yytype_int16, 271i32 as yytype_int16, 900i32 as yytype_int16,
     901i32 as yytype_int16, 710i32 as yytype_int16, 633i32 as yytype_int16,
     239i32 as yytype_int16, 818i32 as yytype_int16, 456i32 as yytype_int16,
     873i32 as yytype_int16, 525i32 as yytype_int16, 444i32 as yytype_int16,
     528i32 as yytype_int16, 640i32 as yytype_int16, 528i32 as yytype_int16,
     1013i32 as yytype_int16, 601i32 as yytype_int16, 68i32 as yytype_int16,
     117i32 as yytype_int16, 601i32 as yytype_int16, 253i32 as yytype_int16,
     836i32 as yytype_int16, 542i32 as yytype_int16, 652i32 as yytype_int16,
     979i32 as yytype_int16, 457i32 as yytype_int16, 82i32 as yytype_int16,
     843i32 as yytype_int16, 845i32 as yytype_int16, 258i32 as yytype_int16,
     302i32 as yytype_int16, 239i32 as yytype_int16, 456i32 as yytype_int16,
     719i32 as yytype_int16, 785i32 as yytype_int16, 831i32 as yytype_int16,
     253i32 as yytype_int16, 781i32 as yytype_int16, 530i32 as yytype_int16,
     601i32 as yytype_int16, 207i32 as yytype_int16, 632i32 as yytype_int16,
     549i32 as yytype_int16, 328i32 as yytype_int16, 329i32 as yytype_int16,
     253i32 as yytype_int16, 842i32 as yytype_int16, 549i32 as yytype_int16,
     456i32 as yytype_int16, 340i32 as yytype_int16, 341i32 as yytype_int16,
     448i32 as yytype_int16, 750i32 as yytype_int16, 258i32 as yytype_int16,
     302i32 as yytype_int16, 601i32 as yytype_int16, 449i32 as yytype_int16,
     456i32 as yytype_int16, 538i32 as yytype_int16, 539i32 as yytype_int16,
     540i32 as yytype_int16, 541i32 as yytype_int16, 397i32 as yytype_int16,
     398i32 as yytype_int16, 601i32 as yytype_int16, 680i32 as yytype_int16,
     602i32 as yytype_int16, 485i32 as yytype_int16, 463i32 as yytype_int16,
     258i32 as yytype_int16, 350i32 as yytype_int16, 747i32 as yytype_int16,
     665i32 as yytype_int16, 1016i32 as yytype_int16, -97i32 as yytype_int16,
     239i32 as yytype_int16, 672i32 as yytype_int16, 595i32 as yytype_int16,
     258i32 as yytype_int16, 603i32 as yytype_int16, 643i32 as yytype_int16,
     643i32 as yytype_int16, -468i32 as yytype_int16, 470i32 as yytype_int16,
     447i32 as yytype_int16, 447i32 as yytype_int16, -68i32 as yytype_int16,
     663i32 as yytype_int16, 207i32 as yytype_int16, 602i32 as yytype_int16,
     82i32 as yytype_int16, 779i32 as yytype_int16, 486i32 as yytype_int16,
     101i32 as yytype_int16, 234i32 as yytype_int16, 856i32 as yytype_int16,
     935i32 as yytype_int16, 258i32 as yytype_int16, 198i32 as yytype_int16,
     511i32 as yytype_int16, 258i32 as yytype_int16, 476i32 as yytype_int16,
     601i32 as yytype_int16, 350i32 as yytype_int16, 784i32 as yytype_int16,
     602i32 as yytype_int16, 482i32 as yytype_int16, -278i32 as yytype_int16,
     253i32 as yytype_int16, 434i32 as yytype_int16, -96i32 as yytype_int16,
     -278i32 as yytype_int16, 236i32 as yytype_int16, 237i32 as yytype_int16,
     602i32 as yytype_int16, 484i32 as yytype_int16, 728i32 as yytype_int16,
     709i32 as yytype_int16, 679i32 as yytype_int16, 787i32 as yytype_int16,
     456i32 as yytype_int16, 493i32 as yytype_int16, 494i32 as yytype_int16,
     495i32 as yytype_int16, 496i32 as yytype_int16, 762i32 as yytype_int16,
     759i32 as yytype_int16, 601i32 as yytype_int16, 258i32 as yytype_int16,
     438i32 as yytype_int16, -88i32 as yytype_int16, 485i32 as yytype_int16,
     235i32 as yytype_int16, 914i32 as yytype_int16, 655i32 as yytype_int16,
     236i32 as yytype_int16, 237i32 as yytype_int16, 555i32 as yytype_int16,
     695i32 as yytype_int16, 778i32 as yytype_int16, 695i32 as yytype_int16,
     258i32 as yytype_int16, 988i32 as yytype_int16, 555i32 as yytype_int16,
     801i32 as yytype_int16, 488i32 as yytype_int16, 68i32 as yytype_int16,
     394i32 as yytype_int16, 535i32 as yytype_int16, 555i32 as yytype_int16,
     555i32 as yytype_int16, 395i32 as yytype_int16, 602i32 as yytype_int16,
     -325i32 as yytype_int16, 801i32 as yytype_int16, 677i32 as yytype_int16,
     781i32 as yytype_int16, 117i32 as yytype_int16, 536i32 as yytype_int16,
     117i32 as yytype_int16, 373i32 as yytype_int16, 374i32 as yytype_int16,
     375i32 as yytype_int16, 480i32 as yytype_int16, 895i32 as yytype_int16,
     896i32 as yytype_int16, 801i32 as yytype_int16, -325i32 as yytype_int16,
     823i32 as yytype_int16, 787i32 as yytype_int16, -281i32 as yytype_int16,
     493i32 as yytype_int16, 494i32 as yytype_int16, 495i32 as yytype_int16,
     496i32 as yytype_int16, 717i32 as yytype_int16, 389i32 as yytype_int16,
     602i32 as yytype_int16, 313i32 as yytype_int16, 82i32 as yytype_int16,
     314i32 as yytype_int16, 315i32 as yytype_int16, 554i32 as yytype_int16,
     729i32 as yytype_int16, -281i32 as yytype_int16, 614i32 as yytype_int16,
     376i32 as yytype_int16, 629i32 as yytype_int16, 630i32 as yytype_int16,
     207i32 as yytype_int16, 207i32 as yytype_int16, 524i32 as yytype_int16,
     887i32 as yytype_int16, 889i32 as yytype_int16, 891i32 as yytype_int16,
     850i32 as yytype_int16, 893i32 as yytype_int16, 634i32 as yytype_int16,
     894i32 as yytype_int16, 799i32 as yytype_int16, 377i32 as yytype_int16,
     734i32 as yytype_int16, -325i32 as yytype_int16, 799i32 as yytype_int16,
     -103i32 as yytype_int16, 857i32 as yytype_int16, 877i32 as yytype_int16,
     511i32 as yytype_int16, 656i32 as yytype_int16, -325i32 as yytype_int16,
     251i32 as yytype_int16, 798i32 as yytype_int16, 667i32 as yytype_int16,
     669i32 as yytype_int16, 671i32 as yytype_int16, 879i32 as yytype_int16,
     674i32 as yytype_int16, 733i32 as yytype_int16, 696i32 as yytype_int16,
     -281i32 as yytype_int16, 822i32 as yytype_int16, 528i32 as yytype_int16,
     -560i32 as yytype_int16, 117i32 as yytype_int16, -95i32 as yytype_int16,
     739i32 as yytype_int16, -281i32 as yytype_int16, 734i32 as yytype_int16,
     741i32 as yytype_int16, 316i32 as yytype_int16, 317i32 as yytype_int16,
     413i32 as yytype_int16, 816i32 as yytype_int16, 268i32 as yytype_int16,
     704i32 as yytype_int16, 378i32 as yytype_int16, 268i32 as yytype_int16,
     717i32 as yytype_int16, 717i32 as yytype_int16, -83i32 as yytype_int16,
     207i32 as yytype_int16, 734i32 as yytype_int16, 379i32 as yytype_int16,
     693i32 as yytype_int16, 207i32 as yytype_int16, 697i32 as yytype_int16,
     883i32 as yytype_int16, 738i32 as yytype_int16, 207i32 as yytype_int16,
     207i32 as yytype_int16, 740i32 as yytype_int16, 734i32 as yytype_int16,
     467i32 as yytype_int16, 82i32 as yytype_int16, 268i32 as yytype_int16,
     555i32 as yytype_int16, 977i32 as yytype_int16, 801i32 as yytype_int16,
     82i32 as yytype_int16, 82i32 as yytype_int16, 758i32 as yytype_int16,
     761i32 as yytype_int16, 754i32 as yytype_int16, 761i32 as yytype_int16,
     198i32 as yytype_int16, 775i32 as yytype_int16, 82i32 as yytype_int16,
     699i32 as yytype_int16, 738i32 as yytype_int16, 702i32 as yytype_int16,
     761i32 as yytype_int16, 801i32 as yytype_int16, 705i32 as yytype_int16,
     745i32 as yytype_int16, 707i32 as yytype_int16, 722i32 as yytype_int16,
     401i32 as yytype_int16, 302i32 as yytype_int16, 1001i32 as yytype_int16,
     723i32 as yytype_int16, -102i32 as yytype_int16, 732i32 as yytype_int16,
     920i32 as yytype_int16, 234i32 as yytype_int16, 724i32 as yytype_int16,
     749i32 as yytype_int16, 759i32 as yytype_int16, 198i32 as yytype_int16,
     734i32 as yytype_int16, 264i32 as yytype_int16, 377i32 as yytype_int16,
     776i32 as yytype_int16, 264i32 as yytype_int16, 447i32 as yytype_int16,
     792i32 as yytype_int16, 848i32 as yytype_int16, 777i32 as yytype_int16,
     928i32 as yytype_int16, 841i32 as yytype_int16, 783i32 as yytype_int16,
     -94i32 as yytype_int16, 485i32 as yytype_int16, 855i32 as yytype_int16,
     930i32 as yytype_int16, 809i32 as yytype_int16, 860i32 as yytype_int16,
     919i32 as yytype_int16, 864i32 as yytype_int16, 732i32 as yytype_int16,
     782i32 as yytype_int16, 264i32 as yytype_int16, 82i32 as yytype_int16,
     207i32 as yytype_int16, 207i32 as yytype_int16, 207i32 as yytype_int16,
     207i32 as yytype_int16, 82i32 as yytype_int16, 207i32 as yytype_int16,
     207i32 as yytype_int16, 258i32 as yytype_int16, 258i32 as yytype_int16,
     207i32 as yytype_int16, 624i32 as yytype_int16, 82i32 as yytype_int16,
     302i32 as yytype_int16, 402i32 as yytype_int16, 562i32 as yytype_int16,
     235i32 as yytype_int16, 549i32 as yytype_int16, 868i32 as yytype_int16,
     236i32 as yytype_int16, 237i32 as yytype_int16, 379i32 as yytype_int16,
     870i32 as yytype_int16, 851i32 as yytype_int16, 557i32 as yytype_int16,
     981i32 as yytype_int16, 983i32 as yytype_int16, 984i32 as yytype_int16,
     985i32 as yytype_int16, 746i32 as yytype_int16, 557i32 as yytype_int16,
     838i32 as yytype_int16, 876i32 as yytype_int16, 736i32 as yytype_int16,
     253i32 as yytype_int16, 880i32 as yytype_int16, 557i32 as yytype_int16,
     557i32 as yytype_int16, 882i32 as yytype_int16, 863i32 as yytype_int16,
     881i32 as yytype_int16, 737i32 as yytype_int16, 444i32 as yytype_int16,
     687i32 as yytype_int16, 207i32 as yytype_int16, 886i32 as yytype_int16,
     456i32 as yytype_int16, 238i32 as yytype_int16, 888i32 as yytype_int16,
     239i32 as yytype_int16, 909i32 as yytype_int16, 871i32 as yytype_int16,
     872i32 as yytype_int16, 601i32 as yytype_int16, 562i32 as yytype_int16,
     562i32 as yytype_int16, 890i32 as yytype_int16, 813i32 as yytype_int16,
     892i32 as yytype_int16, 875i32 as yytype_int16, 899i32 as yytype_int16,
     -98i32 as yytype_int16, 774i32 as yytype_int16, 717i32 as yytype_int16,
     967i32 as yytype_int16, 902i32 as yytype_int16, 905i32 as yytype_int16,
     258i32 as yytype_int16, 207i32 as yytype_int16, -100i32 as yytype_int16,
     82i32 as yytype_int16, 207i32 as yytype_int16, 417i32 as yytype_int16,
     907i32 as yytype_int16, 884i32 as yytype_int16, 529i32 as yytype_int16,
     862i32 as yytype_int16, 314i32 as yytype_int16, 315i32 as yytype_int16,
     866i32 as yytype_int16, 82i32 as yytype_int16, -90i32 as yytype_int16,
     117i32 as yytype_int16, 916i32 as yytype_int16, 207i32 as yytype_int16,
     842i32 as yytype_int16, 377i32 as yytype_int16, 921i32 as yytype_int16,
     82i32 as yytype_int16, -92i32 as yytype_int16, 1018i32 as yytype_int16,
     350i32 as yytype_int16, 854i32 as yytype_int16, 207i32 as yytype_int16,
     799i32 as yytype_int16, 827i32 as yytype_int16, 917i32 as yytype_int16,
     822i32 as yytype_int16, 82i32 as yytype_int16, 858i32 as yytype_int16,
     822i32 as yytype_int16, 447i32 as yytype_int16, 822i32 as yytype_int16,
     602i32 as yytype_int16, 792i32 as yytype_int16, 792i32 as yytype_int16,
     955i32 as yytype_int16, 326i32 as yytype_int16, 931i32 as yytype_int16,
     816i32 as yytype_int16, 314i32 as yytype_int16, 315i32 as yytype_int16,
     816i32 as yytype_int16, -97i32 as yytype_int16, 816i32 as yytype_int16,
     932i32 as yytype_int16, 938i32 as yytype_int16, 695i32 as yytype_int16,
     952i32 as yytype_int16, 944i32 as yytype_int16, 643i32 as yytype_int16,
     418i32 as yytype_int16, 950i32 as yytype_int16, 945i32 as yytype_int16,
     734i32 as yytype_int16, -98i32 as yytype_int16, 316i32 as yytype_int16,
     317i32 as yytype_int16, 379i32 as yytype_int16, 82i32 as yytype_int16,
     -100i32 as yytype_int16, 951i32 as yytype_int16, 918i32 as yytype_int16,
     -89i32 as yytype_int16, 695i32 as yytype_int16, 695i32 as yytype_int16,
     965i32 as yytype_int16, 966i32 as yytype_int16, 82i32 as yytype_int16,
     968i32 as yytype_int16, 982i32 as yytype_int16, 998i32 as yytype_int16,
     557i32 as yytype_int16, 989i32 as yytype_int16, 929i32 as yytype_int16,
     1006i32 as yytype_int16, 371i32 as yytype_int16, 372i32 as yytype_int16,
     373i32 as yytype_int16, 374i32 as yytype_int16, 375i32 as yytype_int16,
     822i32 as yytype_int16, 302i32 as yytype_int16, 991i32 as yytype_int16,
     302i32 as yytype_int16, 993i32 as yytype_int16, 207i32 as yytype_int16,
     995i32 as yytype_int16, 426i32 as yytype_int16, 316i32 as yytype_int16,
     317i32 as yytype_int16, 1007i32 as yytype_int16, 100i32 as yytype_int16,
     816i32 as yytype_int16, 100i32 as yytype_int16, 1009i32 as yytype_int16,
     -559i32 as yytype_int16, 1020i32 as yytype_int16, 971i32 as yytype_int16,
     100i32 as yytype_int16, 100i32 as yytype_int16, -560i32 as yytype_int16,
     377i32 as yytype_int16, 117i32 as yytype_int16, 867i32 as yytype_int16,
     100i32 as yytype_int16, 100i32 as yytype_int16, 100i32 as yytype_int16,
     117i32 as yytype_int16, -556i32 as yytype_int16, 100i32 as yytype_int16,
     673i32 as yytype_int16, 215i32 as yytype_int16, 465i32 as yytype_int16,
     822i32 as yytype_int16, 122i32 as yytype_int16, 822i32 as yytype_int16,
     489i32 as yytype_int16, 822i32 as yytype_int16, -557i32 as yytype_int16,
     822i32 as yytype_int16, -469i32 as yytype_int16, 82i32 as yytype_int16,
     641i32 as yytype_int16, 761i32 as yytype_int16, 1005i32 as yytype_int16,
     816i32 as yytype_int16, 377i32 as yytype_int16, 816i32 as yytype_int16,
     810i32 as yytype_int16, 816i32 as yytype_int16, 377i32 as yytype_int16,
     816i32 as yytype_int16, 1010i32 as yytype_int16, -563i32 as yytype_int16,
     -469i32 as yytype_int16, 849i32 as yytype_int16, 427i32 as yytype_int16,
     972i32 as yytype_int16, 100i32 as yytype_int16, 973i32 as yytype_int16,
     1004i32 as yytype_int16, 200i32 as yytype_int16, 974i32 as yytype_int16,
     379i32 as yytype_int16, 822i32 as yytype_int16, 258i32 as yytype_int16,
     527i32 as yytype_int16, 302i32 as yytype_int16, -271i32 as yytype_int16,
     117i32 as yytype_int16, -98i32 as yytype_int16, 435i32 as yytype_int16,
     100i32 as yytype_int16, -98i32 as yytype_int16, -98i32 as yytype_int16,
     -100i32 as yytype_int16, 816i32 as yytype_int16, 922i32 as yytype_int16,
     -100i32 as yytype_int16, -100i32 as yytype_int16, 954i32 as yytype_int16,
     418i32 as yytype_int16, -271i32 as yytype_int16, 980i32 as yytype_int16,
     797i32 as yytype_int16, 490i32 as yytype_int16, 959i32 as yytype_int16,
     0i32 as yytype_int16, 379i32 as yytype_int16, -469i32 as yytype_int16,
     -463i32 as yytype_int16, 813i32 as yytype_int16, 379i32 as yytype_int16,
     802i32 as yytype_int16, 813i32 as yytype_int16, -282i32 as yytype_int16,
     -469i32 as yytype_int16, 813i32 as yytype_int16, 0i32 as yytype_int16,
     813i32 as yytype_int16, -467i32 as yytype_int16, -98i32 as yytype_int16,
     0i32 as yytype_int16, -98i32 as yytype_int16, -463i32 as yytype_int16,
     0i32 as yytype_int16, -100i32 as yytype_int16, 0i32 as yytype_int16,
     -100i32 as yytype_int16, -282i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     -467i32 as yytype_int16, -563i32 as yytype_int16, 0i32 as yytype_int16,
     -271i32 as yytype_int16, 0i32 as yytype_int16, 350i32 as yytype_int16,
     100i32 as yytype_int16, 0i32 as yytype_int16, 100i32 as yytype_int16,
     695i32 as yytype_int16, -271i32 as yytype_int16, 0i32 as yytype_int16,
     253i32 as yytype_int16, 235i32 as yytype_int16, 0i32 as yytype_int16,
     -563i32 as yytype_int16, 236i32 as yytype_int16, 237i32 as yytype_int16,
     207i32 as yytype_int16, 82i32 as yytype_int16, 363i32 as yytype_int16,
     364i32 as yytype_int16, 0i32 as yytype_int16, -556i32 as yytype_int16,
     456i32 as yytype_int16, -463i32 as yytype_int16, 632i32 as yytype_int16,
     761i32 as yytype_int16, -556i32 as yytype_int16, 734i32 as yytype_int16,
     -282i32 as yytype_int16, 601i32 as yytype_int16, -463i32 as yytype_int16,
     -557i32 as yytype_int16, 813i32 as yytype_int16, -467i32 as yytype_int16,
     0i32 as yytype_int16, -282i32 as yytype_int16, -557i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     -467i32 as yytype_int16, 0i32 as yytype_int16, 238i32 as yytype_int16,
     258i32 as yytype_int16, 239i32 as yytype_int16, 0i32 as yytype_int16,
     -563i32 as yytype_int16, 0i32 as yytype_int16, -563i32 as yytype_int16,
     207i32 as yytype_int16, 0i32 as yytype_int16, -559i32 as yytype_int16,
     254i32 as yytype_int16, 254i32 as yytype_int16, 726i32 as yytype_int16,
     -563i32 as yytype_int16, 254i32 as yytype_int16, 370i32 as yytype_int16,
     371i32 as yytype_int16, 372i32 as yytype_int16, 373i32 as yytype_int16,
     374i32 as yytype_int16, 375i32 as yytype_int16, 0i32 as yytype_int16,
     953i32 as yytype_int16, 813i32 as yytype_int16, 0i32 as yytype_int16,
     813i32 as yytype_int16, 377i32 as yytype_int16, 813i32 as yytype_int16,
     492i32 as yytype_int16, 813i32 as yytype_int16, 493i32 as yytype_int16,
     494i32 as yytype_int16, 495i32 as yytype_int16, 496i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 377i32 as yytype_int16,
     602i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     277i32 as yytype_int16, 279i32 as yytype_int16, 969i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 254i32 as yytype_int16,
     295i32 as yytype_int16, 940i32 as yytype_int16, 497i32 as yytype_int16,
     493i32 as yytype_int16, 494i32 as yytype_int16, 495i32 as yytype_int16,
     496i32 as yytype_int16, 100i32 as yytype_int16, 813i32 as yytype_int16,
     0i32 as yytype_int16, 377i32 as yytype_int16, 331i32 as yytype_int16,
     332i32 as yytype_int16, 204i32 as yytype_int16, 204i32 as yytype_int16,
     727i32 as yytype_int16, 0i32 as yytype_int16, 100i32 as yytype_int16,
     100i32 as yytype_int16, 204i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 379i32 as yytype_int16, 498i32 as yytype_int16,
     235i32 as yytype_int16, 402i32 as yytype_int16, 82i32 as yytype_int16,
     236i32 as yytype_int16, 237i32 as yytype_int16, 499i32 as yytype_int16,
     500i32 as yytype_int16, 501i32 as yytype_int16, 379i32 as yytype_int16,
     302i32 as yytype_int16, 82i32 as yytype_int16, 562i32 as yytype_int16,
     534i32 as yytype_int16, 0i32 as yytype_int16, 207i32 as yytype_int16,
     314i32 as yytype_int16, 315i32 as yytype_int16, 562i32 as yytype_int16,
     207i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     970i32 as yytype_int16, 0i32 as yytype_int16, 562i32 as yytype_int16,
     562i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 379i32 as yytype_int16, 82i32 as yytype_int16,
     82i32 as yytype_int16, 238i32 as yytype_int16, 502i32 as yytype_int16,
     239i32 as yytype_int16, 0i32 as yytype_int16, 503i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 787i32 as yytype_int16,
     82i32 as yytype_int16, 493i32 as yytype_int16, 494i32 as yytype_int16,
     495i32 as yytype_int16, 496i32 as yytype_int16, 100i32 as yytype_int16,
     0i32 as yytype_int16, 82i32 as yytype_int16, 504i32 as yytype_int16,
     100i32 as yytype_int16, 207i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 100i32 as yytype_int16, 100i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     100i32 as yytype_int16, 82i32 as yytype_int16, 82i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 100i32 as yytype_int16,
     100i32 as yytype_int16, 316i32 as yytype_int16, 317i32 as yytype_int16,
     82i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 100i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 611i32 as yytype_int16,
     613i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 498i32 as yytype_int16, 82i32 as yytype_int16,
     82i32 as yytype_int16, 0i32 as yytype_int16, 807i32 as yytype_int16,
     0i32 as yytype_int16, 493i32 as yytype_int16, 494i32 as yytype_int16,
     495i32 as yytype_int16, 496i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 393i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 492i32 as yytype_int16, 0i32 as yytype_int16,
     493i32 as yytype_int16, 494i32 as yytype_int16, 495i32 as yytype_int16,
     496i32 as yytype_int16, 898i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 497i32 as yytype_int16, 0i32 as yytype_int16,
     904i32 as yytype_int16, 611i32 as yytype_int16, 613i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 320i32 as yytype_int16,
     314i32 as yytype_int16, 315i32 as yytype_int16, 0i32 as yytype_int16,
     497i32 as yytype_int16, 100i32 as yytype_int16, 100i32 as yytype_int16,
     100i32 as yytype_int16, 100i32 as yytype_int16, 100i32 as yytype_int16,
     100i32 as yytype_int16, 100i32 as yytype_int16, 100i32 as yytype_int16,
     0i32 as yytype_int16, 498i32 as yytype_int16, 100i32 as yytype_int16,
     0i32 as yytype_int16, 100i32 as yytype_int16, 0i32 as yytype_int16,
     562i32 as yytype_int16, 100i32 as yytype_int16, 500i32 as yytype_int16,
     501i32 as yytype_int16, 235i32 as yytype_int16, 0i32 as yytype_int16,
     498i32 as yytype_int16, 236i32 as yytype_int16, 237i32 as yytype_int16,
     0i32 as yytype_int16, 82i32 as yytype_int16, 82i32 as yytype_int16,
     499i32 as yytype_int16, 500i32 as yytype_int16, 501i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     925i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 82i32 as yytype_int16, 0i32 as yytype_int16,
     675i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 502i32 as yytype_int16, 0i32 as yytype_int16,
     100i32 as yytype_int16, 316i32 as yytype_int16, 317i32 as yytype_int16,
     -243i32 as yytype_int16, -243i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, -243i32 as yytype_int16, 0i32 as yytype_int16,
     502i32 as yytype_int16, 100i32 as yytype_int16, 100i32 as yytype_int16,
     503i32 as yytype_int16, 0i32 as yytype_int16, 440i32 as yytype_int16,
     441i32 as yytype_int16, 442i32 as yytype_int16, 331i32 as yytype_int16,
     322i32 as yytype_int16, 314i32 as yytype_int16, 315i32 as yytype_int16,
     0i32 as yytype_int16, 956i32 as yytype_int16, 350i32 as yytype_int16,
     100i32 as yytype_int16, 0i32 as yytype_int16, 100i32 as yytype_int16,
     100i32 as yytype_int16, 254i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 350i32 as yytype_int16, 254i32 as yytype_int16,
     204i32 as yytype_int16, 204i32 as yytype_int16, 0i32 as yytype_int16,
     100i32 as yytype_int16, 0i32 as yytype_int16, 363i32 as yytype_int16,
     364i32 as yytype_int16, 100i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 100i32 as yytype_int16,
     0i32 as yytype_int16, 363i32 as yytype_int16, 364i32 as yytype_int16,
     0i32 as yytype_int16, 100i32 as yytype_int16, 82i32 as yytype_int16,
     246i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     100i32 as yytype_int16, 0i32 as yytype_int16, 82i32 as yytype_int16,
     0i32 as yytype_int16, 82i32 as yytype_int16, 0i32 as yytype_int16,
     787i32 as yytype_int16, 82i32 as yytype_int16, 493i32 as yytype_int16,
     494i32 as yytype_int16, 495i32 as yytype_int16, 496i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 316i32 as yytype_int16,
     317i32 as yytype_int16, 335i32 as yytype_int16, 336i32 as yytype_int16,
     337i32 as yytype_int16, 338i32 as yytype_int16, 339i32 as yytype_int16,
     368i32 as yytype_int16, 369i32 as yytype_int16, 370i32 as yytype_int16,
     371i32 as yytype_int16, 372i32 as yytype_int16, 373i32 as yytype_int16,
     374i32 as yytype_int16, 375i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 100i32 as yytype_int16, 371i32 as yytype_int16,
     372i32 as yytype_int16, 373i32 as yytype_int16, 374i32 as yytype_int16,
     375i32 as yytype_int16, 0i32 as yytype_int16, 458i32 as yytype_int16,
     461i32 as yytype_int16, 100i32 as yytype_int16, 324i32 as yytype_int16,
     314i32 as yytype_int16, 315i32 as yytype_int16, 207i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 498i32 as yytype_int16,
     246i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 788i32 as yytype_int16,
     0i32 as yytype_int16, 548i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 100i32 as yytype_int16, 0i32 as yytype_int16,
     559i32 as yytype_int16, 564i32 as yytype_int16, 565i32 as yytype_int16,
     566i32 as yytype_int16, 567i32 as yytype_int16, 568i32 as yytype_int16,
     569i32 as yytype_int16, 570i32 as yytype_int16, 571i32 as yytype_int16,
     572i32 as yytype_int16, 573i32 as yytype_int16, 574i32 as yytype_int16,
     575i32 as yytype_int16, 576i32 as yytype_int16, 577i32 as yytype_int16,
     578i32 as yytype_int16, 579i32 as yytype_int16, 580i32 as yytype_int16,
     581i32 as yytype_int16, 582i32 as yytype_int16, 583i32 as yytype_int16,
     584i32 as yytype_int16, 585i32 as yytype_int16, 586i32 as yytype_int16,
     587i32 as yytype_int16, 588i32 as yytype_int16, 589i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 254i32 as yytype_int16,
     0i32 as yytype_int16, 316i32 as yytype_int16, 317i32 as yytype_int16,
     0i32 as yytype_int16, 100i32 as yytype_int16, 524i32 as yytype_int16,
     314i32 as yytype_int16, 315i32 as yytype_int16, 0i32 as yytype_int16,
     610i32 as yytype_int16, 610i32 as yytype_int16, 0i32 as yytype_int16,
     204i32 as yytype_int16, 204i32 as yytype_int16, 204i32 as yytype_int16,
     204i32 as yytype_int16, 0i32 as yytype_int16, 543i32 as yytype_int16,
     544i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 254i32 as yytype_int16,
     0i32 as yytype_int16, 492i32 as yytype_int16, 0i32 as yytype_int16,
     493i32 as yytype_int16, 494i32 as yytype_int16, 495i32 as yytype_int16,
     496i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     531i32 as yytype_int16, 314i32 as yytype_int16, 315i32 as yytype_int16,
     0i32 as yytype_int16, 610i32 as yytype_int16, 0i32 as yytype_int16,
     254i32 as yytype_int16, 0i32 as yytype_int16, 610i32 as yytype_int16,
     610i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     497i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     254i32 as yytype_int16, 0i32 as yytype_int16, 532i32 as yytype_int16,
     314i32 as yytype_int16, 315i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 316i32 as yytype_int16, 317i32 as yytype_int16,
     654i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     657i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 658i32 as yytype_int16, 0i32 as yytype_int16,
     498i32 as yytype_int16, 661i32 as yytype_int16, 0i32 as yytype_int16,
     664i32 as yytype_int16, 295i32 as yytype_int16, 0i32 as yytype_int16,
     499i32 as yytype_int16, 500i32 as yytype_int16, 501i32 as yytype_int16,
     99i32 as yytype_int16, 0i32 as yytype_int16, 99i32 as yytype_int16,
     120i32 as yytype_int16, 120i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 626i32 as yytype_int16, 316i32 as yytype_int16,
     317i32 as yytype_int16, 0i32 as yytype_int16, 220i32 as yytype_int16,
     0i32 as yytype_int16, 610i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 906i32 as yytype_int16,
     908i32 as yytype_int16, 0i32 as yytype_int16, 100i32 as yytype_int16,
     100i32 as yytype_int16, 246i32 as yytype_int16, 661i32 as yytype_int16,
     502i32 as yytype_int16, 316i32 as yytype_int16, 317i32 as yytype_int16,
     503i32 as yytype_int16, 246i32 as yytype_int16, 533i32 as yytype_int16,
     314i32 as yytype_int16, 315i32 as yytype_int16, 0i32 as yytype_int16,
     708i32 as yytype_int16, 314i32 as yytype_int16, 315i32 as yytype_int16,
     254i32 as yytype_int16, 0i32 as yytype_int16, 837i32 as yytype_int16,
     839i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 844i32 as yytype_int16,
     846i32 as yytype_int16, 0i32 as yytype_int16, 99i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     304i32 as yytype_int16, 692i32 as yytype_int16, 100i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     246i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     701i32 as yytype_int16, 246i32 as yytype_int16, 787i32 as yytype_int16,
     0i32 as yytype_int16, 493i32 as yytype_int16, 494i32 as yytype_int16,
     495i32 as yytype_int16, 496i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 837i32 as yytype_int16, 839i32 as yytype_int16,
     304i32 as yytype_int16, 844i32 as yytype_int16, 846i32 as yytype_int16,
     0i32 as yytype_int16, 316i32 as yytype_int16, 317i32 as yytype_int16,
     711i32 as yytype_int16, 712i32 as yytype_int16, 316i32 as yytype_int16,
     317i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 718i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     958i32 as yytype_int16, 0i32 as yytype_int16, 246i32 as yytype_int16,
     0i32 as yytype_int16, 790i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 498i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 479i32 as yytype_int16, 479i32 as yytype_int16,
     99i32 as yytype_int16, 939i32 as yytype_int16, 0i32 as yytype_int16,
     479i32 as yytype_int16, 0i32 as yytype_int16, 804i32 as yytype_int16,
     0i32 as yytype_int16, 100i32 as yytype_int16, 808i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     100i32 as yytype_int16, 100i32 as yytype_int16, 817i32 as yytype_int16,
     0i32 as yytype_int16, 100i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 100i32 as yytype_int16, 100i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 100i32 as yytype_int16, 100i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 100i32 as yytype_int16, 100i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     915i32 as yytype_int16, 246i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 100i32 as yytype_int16,
     990i32 as yytype_int16, 992i32 as yytype_int16, 994i32 as yytype_int16,
     0i32 as yytype_int16, 996i32 as yytype_int16, 997i32 as yytype_int16,
     100i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     100i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     100i32 as yytype_int16, 100i32 as yytype_int16, 755i32 as yytype_int16,
     915i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 100i32 as yytype_int16,
     492i32 as yytype_int16, 0i32 as yytype_int16, 493i32 as yytype_int16,
     494i32 as yytype_int16, 495i32 as yytype_int16, 496i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 100i32 as yytype_int16, 100i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 99i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 497i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 780i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 1019i32 as yytype_int16,
     1021i32 as yytype_int16, 1022i32 as yytype_int16,
     1023i32 as yytype_int16, 0i32 as yytype_int16, 661i32 as yytype_int16,
     295i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 204i32 as yytype_int16, 0i32 as yytype_int16,
     1025i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     498i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     499i32 as yytype_int16, 500i32 as yytype_int16, 501i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 246i32 as yytype_int16, 246i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     100i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 204i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 100i32 as yytype_int16, 100i32 as yytype_int16,
     502i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     503i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 825i32 as yytype_int16,
     0i32 as yytype_int16, 100i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 610i32 as yytype_int16, 828i32 as yytype_int16,
     751i32 as yytype_int16, 254i32 as yytype_int16, 99i32 as yytype_int16,
     0i32 as yytype_int16, 610i32 as yytype_int16, 610i32 as yytype_int16,
     0i32 as yytype_int16, 99i32 as yytype_int16, 99i32 as yytype_int16,
     0i32 as yytype_int16, 610i32 as yytype_int16, 610i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     99i32 as yytype_int16, 96i32 as yytype_int16, 246i32 as yytype_int16,
     96i32 as yytype_int16, 119i32 as yytype_int16, 119i32 as yytype_int16,
     119i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 304i32 as yytype_int16,
     219i32 as yytype_int16, 946i32 as yytype_int16, 0i32 as yytype_int16,
     948i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 949i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     610i32 as yytype_int16, 610i32 as yytype_int16, 0i32 as yytype_int16,
     610i32 as yytype_int16, 610i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 961i32 as yytype_int16,
     0i32 as yytype_int16, 964i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 874i32 as yytype_int16, 100i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 100i32 as yytype_int16,
     99i32 as yytype_int16, 100i32 as yytype_int16, 0i32 as yytype_int16,
     96i32 as yytype_int16, 100i32 as yytype_int16, 99i32 as yytype_int16,
     0i32 as yytype_int16, 303i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     99i32 as yytype_int16, 304i32 as yytype_int16, 0i32 as yytype_int16,
     563i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 975i32 as yytype_int16, 976i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 303i32 as yytype_int16, 204i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 910i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 100i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     912i32 as yytype_int16, 913i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     563i32 as yytype_int16, 563i32 as yytype_int16, 610i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 1008i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     79i32 as yytype_int16, 1011i32 as yytype_int16, 79i32 as yytype_int16,
     0i32 as yytype_int16, 96i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 99i32 as yytype_int16, 1012i32 as yytype_int16,
     0i32 as yytype_int16, 1014i32 as yytype_int16, 216i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 1015i32 as yytype_int16,
     0i32 as yytype_int16, -587i32 as yytype_int16, 99i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 610i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     97i32 as yytype_int16, 99i32 as yytype_int16, 97i32 as yytype_int16,
     295i32 as yytype_int16, 1017i32 as yytype_int16, -587i32 as yytype_int16,
     -587i32 as yytype_int16, -587i32 as yytype_int16,
     -587i32 as yytype_int16, -587i32 as yytype_int16,
     -587i32 as yytype_int16, 99i32 as yytype_int16, -587i32 as yytype_int16,
     0i32 as yytype_int16, 246i32 as yytype_int16, 1024i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, -587i32 as yytype_int16,
     -587i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 79i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, -587i32 as yytype_int16, -587i32 as yytype_int16,
     0i32 as yytype_int16, -587i32 as yytype_int16, -587i32 as yytype_int16,
     -587i32 as yytype_int16, -587i32 as yytype_int16,
     -587i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     99i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 97i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     99i32 as yytype_int16, 0i32 as yytype_int16, 246i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 304i32 as yytype_int16,
     0i32 as yytype_int16, 304i32 as yytype_int16, 0i32 as yytype_int16,
     96i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 479i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, -587i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     79i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, -587i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 254i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, -587i32 as yytype_int16,
     99i32 as yytype_int16, 0i32 as yytype_int16, -587i32 as yytype_int16,
     -587i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     97i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, -587i32 as yytype_int16, -587i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 304i32 as yytype_int16,
     263i32 as yytype_int16, -587i32 as yytype_int16, 0i32 as yytype_int16,
     -587i32 as yytype_int16, -587i32 as yytype_int16,
     -587i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     96i32 as yytype_int16, 246i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 96i32 as yytype_int16,
     96i32 as yytype_int16, 725i32 as yytype_int16, 246i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 96i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     303i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 246i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     79i32 as yytype_int16, 350i32 as yytype_int16, 351i32 as yytype_int16,
     352i32 as yytype_int16, 353i32 as yytype_int16, 354i32 as yytype_int16,
     355i32 as yytype_int16, 356i32 as yytype_int16, 357i32 as yytype_int16,
     358i32 as yytype_int16, 359i32 as yytype_int16, 360i32 as yytype_int16,
     361i32 as yytype_int16, 362i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 363i32 as yytype_int16, 364i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     99i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     97i32 as yytype_int16, 96i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     96i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 96i32 as yytype_int16, 303i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 365i32 as yytype_int16, 0i32 as yytype_int16,
     366i32 as yytype_int16, 367i32 as yytype_int16, 368i32 as yytype_int16,
     369i32 as yytype_int16, 370i32 as yytype_int16, 371i32 as yytype_int16,
     372i32 as yytype_int16, 373i32 as yytype_int16, 374i32 as yytype_int16,
     375i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, -258i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 79i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 79i32 as yytype_int16, 79i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 246i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     79i32 as yytype_int16, 0i32 as yytype_int16, 246i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 96i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 97i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 97i32 as yytype_int16, 97i32 as yytype_int16,
     96i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     97i32 as yytype_int16, 0i32 as yytype_int16, 96i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 99i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     96i32 as yytype_int16, 0i32 as yytype_int16, 304i32 as yytype_int16,
     99i32 as yytype_int16, 563i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     79i32 as yytype_int16, 563i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 79i32 as yytype_int16,
     0i32 as yytype_int16, 563i32 as yytype_int16, 563i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     79i32 as yytype_int16, 99i32 as yytype_int16, 99i32 as yytype_int16,
     558i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 96i32 as yytype_int16, 99i32 as yytype_int16,
     97i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 97i32 as yytype_int16,
     99i32 as yytype_int16, 96i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     97i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     97i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     99i32 as yytype_int16, 99i32 as yytype_int16, 0i32 as yytype_int16,
     303i32 as yytype_int16, 0i32 as yytype_int16, 303i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 99i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     558i32 as yytype_int16, 558i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 99i32 as yytype_int16, 99i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 79i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     97i32 as yytype_int16, 97i32 as yytype_int16, 79i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     120i32 as yytype_int16, 96i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 79i32 as yytype_int16, 120i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 97i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 79i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 97i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     303i32 as yytype_int16, 97i32 as yytype_int16, 563i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 97i32 as yytype_int16,
     99i32 as yytype_int16, 99i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     79i32 as yytype_int16, 0i32 as yytype_int16, 927i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     99i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     79i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     590i32 as yytype_int16, 591i32 as yytype_int16, 0i32 as yytype_int16,
     97i32 as yytype_int16, 592i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     97i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     166i32 as yytype_int16, 167i32 as yytype_int16, 168i32 as yytype_int16,
     169i32 as yytype_int16, 170i32 as yytype_int16, 171i32 as yytype_int16,
     172i32 as yytype_int16, 173i32 as yytype_int16, 174i32 as yytype_int16,
     96i32 as yytype_int16, 0i32 as yytype_int16, 175i32 as yytype_int16,
     176i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     177i32 as yytype_int16, 178i32 as yytype_int16, 179i32 as yytype_int16,
     180i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     79i32 as yytype_int16, 99i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 181i32 as yytype_int16,
     182i32 as yytype_int16, 99i32 as yytype_int16, 0i32 as yytype_int16,
     99i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     99i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     725i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     97i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 183i32 as yytype_int16, 184i32 as yytype_int16,
     185i32 as yytype_int16, 186i32 as yytype_int16, 187i32 as yytype_int16,
     188i32 as yytype_int16, 189i32 as yytype_int16, 190i32 as yytype_int16,
     191i32 as yytype_int16, 192i32 as yytype_int16, 0i32 as yytype_int16,
     193i32 as yytype_int16, 194i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 195i32 as yytype_int16, 263i32 as yytype_int16,
     350i32 as yytype_int16, 351i32 as yytype_int16, 352i32 as yytype_int16,
     353i32 as yytype_int16, 354i32 as yytype_int16, 355i32 as yytype_int16,
     356i32 as yytype_int16, 357i32 as yytype_int16, 358i32 as yytype_int16,
     359i32 as yytype_int16, 360i32 as yytype_int16, 361i32 as yytype_int16,
     362i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     363i32 as yytype_int16, 364i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 96i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 303i32 as yytype_int16,
     96i32 as yytype_int16, 0i32 as yytype_int16, 79i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     365i32 as yytype_int16, 0i32 as yytype_int16, 366i32 as yytype_int16,
     367i32 as yytype_int16, 368i32 as yytype_int16, 369i32 as yytype_int16,
     370i32 as yytype_int16, 371i32 as yytype_int16, 372i32 as yytype_int16,
     373i32 as yytype_int16, 374i32 as yytype_int16, 375i32 as yytype_int16,
     0i32 as yytype_int16, 96i32 as yytype_int16, 96i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 97i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 96i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     96i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     96i32 as yytype_int16, 96i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 96i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 96i32 as yytype_int16, 96i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     119i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 119i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     79i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 79i32 as yytype_int16,
     558i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     558i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     558i32 as yytype_int16, 558i32 as yytype_int16, 0i32 as yytype_int16,
     97i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     79i32 as yytype_int16, 79i32 as yytype_int16, 0i32 as yytype_int16,
     96i32 as yytype_int16, 96i32 as yytype_int16, 97i32 as yytype_int16,
     97i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 79i32 as yytype_int16, 926i32 as yytype_int16,
     97i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     96i32 as yytype_int16, 0i32 as yytype_int16, 79i32 as yytype_int16,
     97i32 as yytype_int16, 97i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     97i32 as yytype_int16, 97i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 79i32 as yytype_int16,
     79i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 97i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 79i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 97i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     79i32 as yytype_int16, 79i32 as yytype_int16, 97i32 as yytype_int16,
     97i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 97i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 96i32 as yytype_int16, 0i32 as yytype_int16,
     97i32 as yytype_int16, 97i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 96i32 as yytype_int16, 0i32 as yytype_int16,
     96i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     96i32 as yytype_int16, 0i32 as yytype_int16, 350i32 as yytype_int16,
     351i32 as yytype_int16, 352i32 as yytype_int16, 353i32 as yytype_int16,
     354i32 as yytype_int16, 355i32 as yytype_int16, 356i32 as yytype_int16,
     357i32 as yytype_int16, 358i32 as yytype_int16, 359i32 as yytype_int16,
     360i32 as yytype_int16, -588i32 as yytype_int16, -588i32 as yytype_int16,
     0i32 as yytype_int16, 558i32 as yytype_int16, 363i32 as yytype_int16,
     364i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 79i32 as yytype_int16,
     79i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 924i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 79i32 as yytype_int16,
     0i32 as yytype_int16, 97i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 97i32 as yytype_int16,
     97i32 as yytype_int16, 366i32 as yytype_int16, 367i32 as yytype_int16,
     368i32 as yytype_int16, 369i32 as yytype_int16, 370i32 as yytype_int16,
     371i32 as yytype_int16, 372i32 as yytype_int16, 373i32 as yytype_int16,
     374i32 as yytype_int16, 375i32 as yytype_int16, 97i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     79i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     79i32 as yytype_int16, 0i32 as yytype_int16, 79i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 79i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     97i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     97i32 as yytype_int16, 0i32 as yytype_int16, 97i32 as yytype_int16,
     -587i32 as yytype_int16, 4i32 as yytype_int16, 97i32 as yytype_int16,
     5i32 as yytype_int16, 6i32 as yytype_int16, 7i32 as yytype_int16,
     8i32 as yytype_int16, 9i32 as yytype_int16, 10i32 as yytype_int16,
     11i32 as yytype_int16, 12i32 as yytype_int16, 13i32 as yytype_int16,
     14i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 15i32 as yytype_int16, 0i32 as yytype_int16,
     16i32 as yytype_int16, 17i32 as yytype_int16, 18i32 as yytype_int16,
     19i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     20i32 as yytype_int16, 21i32 as yytype_int16, 22i32 as yytype_int16,
     23i32 as yytype_int16, 24i32 as yytype_int16, 25i32 as yytype_int16,
     26i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     27i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     28i32 as yytype_int16, 29i32 as yytype_int16, 30i32 as yytype_int16,
     31i32 as yytype_int16, 32i32 as yytype_int16, 33i32 as yytype_int16,
     34i32 as yytype_int16, 35i32 as yytype_int16, 36i32 as yytype_int16,
     37i32 as yytype_int16, 38i32 as yytype_int16, 39i32 as yytype_int16,
     0i32 as yytype_int16, 40i32 as yytype_int16, 41i32 as yytype_int16,
     42i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     43i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     44i32 as yytype_int16, 45i32 as yytype_int16, 0i32 as yytype_int16,
     46i32 as yytype_int16, 47i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 48i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 49i32 as yytype_int16,
     50i32 as yytype_int16, 0i32 as yytype_int16, 51i32 as yytype_int16,
     52i32 as yytype_int16, 0i32 as yytype_int16, 53i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 54i32 as yytype_int16,
     0i32 as yytype_int16, 55i32 as yytype_int16, 56i32 as yytype_int16,
     57i32 as yytype_int16, 58i32 as yytype_int16, 59i32 as yytype_int16,
     60i32 as yytype_int16, -463i32 as yytype_int16, 0i32 as yytype_int16,
     61i32 as yytype_int16, -587i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, -587i32 as yytype_int16, -587i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, -463i32 as yytype_int16,
     -463i32 as yytype_int16, -463i32 as yytype_int16,
     -463i32 as yytype_int16, -463i32 as yytype_int16,
     -463i32 as yytype_int16, 0i32 as yytype_int16, -463i32 as yytype_int16,
     0i32 as yytype_int16, 62i32 as yytype_int16, 63i32 as yytype_int16,
     64i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     -463i32 as yytype_int16, -463i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, -587i32 as yytype_int16, 0i32 as yytype_int16,
     -587i32 as yytype_int16, -463i32 as yytype_int16,
     -463i32 as yytype_int16, 0i32 as yytype_int16, -463i32 as yytype_int16,
     -463i32 as yytype_int16, -463i32 as yytype_int16,
     -463i32 as yytype_int16, -463i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 439i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, -463i32 as yytype_int16, -463i32 as yytype_int16,
     -463i32 as yytype_int16, -463i32 as yytype_int16,
     -463i32 as yytype_int16, -463i32 as yytype_int16,
     -463i32 as yytype_int16, -463i32 as yytype_int16,
     -463i32 as yytype_int16, -463i32 as yytype_int16,
     -463i32 as yytype_int16, -463i32 as yytype_int16,
     -463i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     -463i32 as yytype_int16, -463i32 as yytype_int16,
     -463i32 as yytype_int16, 0i32 as yytype_int16, -463i32 as yytype_int16,
     -463i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     -463i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, -463i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     -463i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     -463i32 as yytype_int16, -463i32 as yytype_int16, 0i32 as yytype_int16,
     -463i32 as yytype_int16, -463i32 as yytype_int16, 0i32 as yytype_int16,
     -463i32 as yytype_int16, -463i32 as yytype_int16,
     -463i32 as yytype_int16, -463i32 as yytype_int16,
     -463i32 as yytype_int16, -463i32 as yytype_int16,
     -463i32 as yytype_int16, -463i32 as yytype_int16,
     -463i32 as yytype_int16, -463i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, -587i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, -463i32 as yytype_int16, -463i32 as yytype_int16,
     -463i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     -463i32 as yytype_int16, -463i32 as yytype_int16,
     -463i32 as yytype_int16, -463i32 as yytype_int16,
     -463i32 as yytype_int16, -587i32 as yytype_int16,
     -587i32 as yytype_int16, -587i32 as yytype_int16,
     -587i32 as yytype_int16, -587i32 as yytype_int16,
     -587i32 as yytype_int16, 0i32 as yytype_int16, -587i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     -587i32 as yytype_int16, -587i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, -587i32 as yytype_int16, -587i32 as yytype_int16,
     0i32 as yytype_int16, -587i32 as yytype_int16, -587i32 as yytype_int16,
     -587i32 as yytype_int16, -587i32 as yytype_int16,
     -587i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     -587i32 as yytype_int16, -587i32 as yytype_int16,
     -587i32 as yytype_int16, -587i32 as yytype_int16,
     -587i32 as yytype_int16, -587i32 as yytype_int16,
     -587i32 as yytype_int16, -587i32 as yytype_int16,
     -587i32 as yytype_int16, -587i32 as yytype_int16,
     -587i32 as yytype_int16, -587i32 as yytype_int16,
     -587i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     -587i32 as yytype_int16, -587i32 as yytype_int16,
     -587i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     -587i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     -587i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, -587i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     -587i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     -587i32 as yytype_int16, -587i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, -587i32 as yytype_int16, 0i32 as yytype_int16,
     -587i32 as yytype_int16, -587i32 as yytype_int16,
     -587i32 as yytype_int16, -587i32 as yytype_int16,
     -587i32 as yytype_int16, -587i32 as yytype_int16,
     -587i32 as yytype_int16, -587i32 as yytype_int16,
     -587i32 as yytype_int16, -587i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, -563i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, -587i32 as yytype_int16, -587i32 as yytype_int16,
     -587i32 as yytype_int16, 0i32 as yytype_int16, 263i32 as yytype_int16,
     -587i32 as yytype_int16, -587i32 as yytype_int16,
     -587i32 as yytype_int16, -587i32 as yytype_int16,
     -587i32 as yytype_int16, -563i32 as yytype_int16,
     -563i32 as yytype_int16, -563i32 as yytype_int16, 0i32 as yytype_int16,
     -563i32 as yytype_int16, -563i32 as yytype_int16, 0i32 as yytype_int16,
     -563i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     -563i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, -563i32 as yytype_int16,
     -563i32 as yytype_int16, 0i32 as yytype_int16, -563i32 as yytype_int16,
     -563i32 as yytype_int16, -563i32 as yytype_int16,
     -563i32 as yytype_int16, -563i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, -563i32 as yytype_int16, -563i32 as yytype_int16,
     -563i32 as yytype_int16, -563i32 as yytype_int16,
     -563i32 as yytype_int16, -563i32 as yytype_int16,
     -563i32 as yytype_int16, -563i32 as yytype_int16,
     -563i32 as yytype_int16, -563i32 as yytype_int16,
     -563i32 as yytype_int16, -563i32 as yytype_int16,
     -563i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     -563i32 as yytype_int16, -563i32 as yytype_int16,
     -563i32 as yytype_int16, 0i32 as yytype_int16, 730i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, -563i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     -563i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     -563i32 as yytype_int16, -563i32 as yytype_int16, 0i32 as yytype_int16,
     -99i32 as yytype_int16, -563i32 as yytype_int16, 0i32 as yytype_int16,
     -563i32 as yytype_int16, -563i32 as yytype_int16,
     -563i32 as yytype_int16, -563i32 as yytype_int16,
     -563i32 as yytype_int16, -563i32 as yytype_int16,
     -563i32 as yytype_int16, -563i32 as yytype_int16,
     -563i32 as yytype_int16, -563i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, -563i32 as yytype_int16, 0i32 as yytype_int16,
     -563i32 as yytype_int16, -563i32 as yytype_int16,
     -563i32 as yytype_int16, -91i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, -563i32 as yytype_int16, 0i32 as yytype_int16,
     -563i32 as yytype_int16, -563i32 as yytype_int16,
     -563i32 as yytype_int16, -563i32 as yytype_int16,
     -563i32 as yytype_int16, -563i32 as yytype_int16, 0i32 as yytype_int16,
     -563i32 as yytype_int16, -563i32 as yytype_int16, 0i32 as yytype_int16,
     -563i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     -563i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, -563i32 as yytype_int16,
     -563i32 as yytype_int16, 0i32 as yytype_int16, -563i32 as yytype_int16,
     -563i32 as yytype_int16, -563i32 as yytype_int16,
     -563i32 as yytype_int16, -563i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, -563i32 as yytype_int16, -563i32 as yytype_int16,
     -563i32 as yytype_int16, -563i32 as yytype_int16,
     -563i32 as yytype_int16, -563i32 as yytype_int16,
     -563i32 as yytype_int16, -563i32 as yytype_int16,
     -563i32 as yytype_int16, -563i32 as yytype_int16,
     -563i32 as yytype_int16, -563i32 as yytype_int16,
     -563i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     -563i32 as yytype_int16, -563i32 as yytype_int16,
     -563i32 as yytype_int16, 0i32 as yytype_int16, 730i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, -563i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     -563i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     -563i32 as yytype_int16, -563i32 as yytype_int16, 0i32 as yytype_int16,
     -99i32 as yytype_int16, -563i32 as yytype_int16, 0i32 as yytype_int16,
     -563i32 as yytype_int16, -563i32 as yytype_int16,
     -563i32 as yytype_int16, -563i32 as yytype_int16,
     -563i32 as yytype_int16, -563i32 as yytype_int16,
     -563i32 as yytype_int16, -563i32 as yytype_int16,
     -563i32 as yytype_int16, -563i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, -281i32 as yytype_int16, 0i32 as yytype_int16,
     -563i32 as yytype_int16, -563i32 as yytype_int16,
     -563i32 as yytype_int16, -563i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, -563i32 as yytype_int16, 0i32 as yytype_int16,
     -563i32 as yytype_int16, -563i32 as yytype_int16,
     -563i32 as yytype_int16, -281i32 as yytype_int16,
     -281i32 as yytype_int16, -281i32 as yytype_int16, 0i32 as yytype_int16,
     -281i32 as yytype_int16, -281i32 as yytype_int16, 0i32 as yytype_int16,
     -281i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, -281i32 as yytype_int16,
     -281i32 as yytype_int16, 0i32 as yytype_int16, -281i32 as yytype_int16,
     -281i32 as yytype_int16, -281i32 as yytype_int16,
     -281i32 as yytype_int16, -281i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, -281i32 as yytype_int16, -281i32 as yytype_int16,
     -281i32 as yytype_int16, -281i32 as yytype_int16,
     -281i32 as yytype_int16, -281i32 as yytype_int16,
     -281i32 as yytype_int16, -281i32 as yytype_int16,
     -281i32 as yytype_int16, -281i32 as yytype_int16,
     -281i32 as yytype_int16, -281i32 as yytype_int16,
     -281i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     -281i32 as yytype_int16, -281i32 as yytype_int16,
     -281i32 as yytype_int16, 0i32 as yytype_int16, 731i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, -281i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     -281i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     -281i32 as yytype_int16, -281i32 as yytype_int16, 0i32 as yytype_int16,
     -101i32 as yytype_int16, -281i32 as yytype_int16, 0i32 as yytype_int16,
     -281i32 as yytype_int16, -281i32 as yytype_int16,
     -281i32 as yytype_int16, -281i32 as yytype_int16,
     -281i32 as yytype_int16, -281i32 as yytype_int16,
     -281i32 as yytype_int16, -281i32 as yytype_int16,
     -281i32 as yytype_int16, -281i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, -281i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, -281i32 as yytype_int16, -281i32 as yytype_int16,
     -93i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     -281i32 as yytype_int16, 0i32 as yytype_int16, -281i32 as yytype_int16,
     -281i32 as yytype_int16, -281i32 as yytype_int16,
     -281i32 as yytype_int16, -281i32 as yytype_int16,
     -281i32 as yytype_int16, 0i32 as yytype_int16, -281i32 as yytype_int16,
     -281i32 as yytype_int16, 0i32 as yytype_int16, -281i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, -281i32 as yytype_int16, -281i32 as yytype_int16,
     0i32 as yytype_int16, -281i32 as yytype_int16, -281i32 as yytype_int16,
     -281i32 as yytype_int16, -281i32 as yytype_int16,
     -281i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     -281i32 as yytype_int16, -281i32 as yytype_int16,
     -281i32 as yytype_int16, -281i32 as yytype_int16,
     -281i32 as yytype_int16, -281i32 as yytype_int16,
     -281i32 as yytype_int16, -281i32 as yytype_int16,
     -281i32 as yytype_int16, -281i32 as yytype_int16,
     -281i32 as yytype_int16, -281i32 as yytype_int16,
     -281i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     -281i32 as yytype_int16, -281i32 as yytype_int16,
     -281i32 as yytype_int16, 0i32 as yytype_int16, 731i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, -281i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     -281i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     -281i32 as yytype_int16, -281i32 as yytype_int16, 0i32 as yytype_int16,
     -101i32 as yytype_int16, -281i32 as yytype_int16, 0i32 as yytype_int16,
     -281i32 as yytype_int16, -281i32 as yytype_int16,
     -281i32 as yytype_int16, -281i32 as yytype_int16,
     -281i32 as yytype_int16, -281i32 as yytype_int16,
     -281i32 as yytype_int16, -281i32 as yytype_int16,
     -281i32 as yytype_int16, -281i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, -281i32 as yytype_int16, -281i32 as yytype_int16,
     -281i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     -281i32 as yytype_int16, 0i32 as yytype_int16, -281i32 as yytype_int16,
     -281i32 as yytype_int16, -281i32 as yytype_int16, 281i32 as yytype_int16,
     0i32 as yytype_int16, 5i32 as yytype_int16, 6i32 as yytype_int16,
     7i32 as yytype_int16, 8i32 as yytype_int16, 9i32 as yytype_int16,
     10i32 as yytype_int16, 11i32 as yytype_int16, 12i32 as yytype_int16,
     13i32 as yytype_int16, 14i32 as yytype_int16, -587i32 as yytype_int16,
     -587i32 as yytype_int16, -587i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, -587i32 as yytype_int16, 15i32 as yytype_int16,
     0i32 as yytype_int16, 16i32 as yytype_int16, 17i32 as yytype_int16,
     18i32 as yytype_int16, 19i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 20i32 as yytype_int16, 21i32 as yytype_int16,
     22i32 as yytype_int16, 23i32 as yytype_int16, 24i32 as yytype_int16,
     25i32 as yytype_int16, 26i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 27i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 28i32 as yytype_int16, 0i32 as yytype_int16,
     30i32 as yytype_int16, 31i32 as yytype_int16, 32i32 as yytype_int16,
     33i32 as yytype_int16, 34i32 as yytype_int16, 35i32 as yytype_int16,
     36i32 as yytype_int16, 37i32 as yytype_int16, 38i32 as yytype_int16,
     39i32 as yytype_int16, 0i32 as yytype_int16, 40i32 as yytype_int16,
     41i32 as yytype_int16, 42i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 43i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 44i32 as yytype_int16, 45i32 as yytype_int16,
     0i32 as yytype_int16, 46i32 as yytype_int16, 47i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     48i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     49i32 as yytype_int16, 50i32 as yytype_int16, 0i32 as yytype_int16,
     51i32 as yytype_int16, 52i32 as yytype_int16, 0i32 as yytype_int16,
     53i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     54i32 as yytype_int16, 0i32 as yytype_int16, 55i32 as yytype_int16,
     56i32 as yytype_int16, 57i32 as yytype_int16, 58i32 as yytype_int16,
     59i32 as yytype_int16, 60i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 61i32 as yytype_int16, -587i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, -587i32 as yytype_int16,
     -587i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     62i32 as yytype_int16, 63i32 as yytype_int16, 64i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     -587i32 as yytype_int16, 281i32 as yytype_int16, -587i32 as yytype_int16,
     5i32 as yytype_int16, 6i32 as yytype_int16, 7i32 as yytype_int16,
     8i32 as yytype_int16, 9i32 as yytype_int16, 10i32 as yytype_int16,
     11i32 as yytype_int16, 12i32 as yytype_int16, 13i32 as yytype_int16,
     14i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     -587i32 as yytype_int16, 0i32 as yytype_int16, -587i32 as yytype_int16,
     -587i32 as yytype_int16, 15i32 as yytype_int16, 0i32 as yytype_int16,
     16i32 as yytype_int16, 17i32 as yytype_int16, 18i32 as yytype_int16,
     19i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     20i32 as yytype_int16, 21i32 as yytype_int16, 22i32 as yytype_int16,
     23i32 as yytype_int16, 24i32 as yytype_int16, 25i32 as yytype_int16,
     26i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     27i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     28i32 as yytype_int16, 0i32 as yytype_int16, 30i32 as yytype_int16,
     31i32 as yytype_int16, 32i32 as yytype_int16, 33i32 as yytype_int16,
     34i32 as yytype_int16, 35i32 as yytype_int16, 36i32 as yytype_int16,
     37i32 as yytype_int16, 38i32 as yytype_int16, 39i32 as yytype_int16,
     0i32 as yytype_int16, 40i32 as yytype_int16, 41i32 as yytype_int16,
     42i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     43i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     44i32 as yytype_int16, 45i32 as yytype_int16, 0i32 as yytype_int16,
     46i32 as yytype_int16, 47i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 48i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 49i32 as yytype_int16,
     50i32 as yytype_int16, 0i32 as yytype_int16, 51i32 as yytype_int16,
     52i32 as yytype_int16, 0i32 as yytype_int16, 53i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 54i32 as yytype_int16,
     0i32 as yytype_int16, 55i32 as yytype_int16, 56i32 as yytype_int16,
     57i32 as yytype_int16, 58i32 as yytype_int16, 59i32 as yytype_int16,
     60i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     61i32 as yytype_int16, -587i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, -587i32 as yytype_int16, -587i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 62i32 as yytype_int16,
     63i32 as yytype_int16, 64i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, -587i32 as yytype_int16,
     281i32 as yytype_int16, -587i32 as yytype_int16, 5i32 as yytype_int16,
     6i32 as yytype_int16, 7i32 as yytype_int16, 8i32 as yytype_int16,
     9i32 as yytype_int16, 10i32 as yytype_int16, 11i32 as yytype_int16,
     12i32 as yytype_int16, 13i32 as yytype_int16, 14i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, -587i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, -587i32 as yytype_int16,
     15i32 as yytype_int16, -587i32 as yytype_int16, 16i32 as yytype_int16,
     17i32 as yytype_int16, 18i32 as yytype_int16, 19i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 20i32 as yytype_int16,
     21i32 as yytype_int16, 22i32 as yytype_int16, 23i32 as yytype_int16,
     24i32 as yytype_int16, 25i32 as yytype_int16, 26i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 27i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 28i32 as yytype_int16,
     0i32 as yytype_int16, 30i32 as yytype_int16, 31i32 as yytype_int16,
     32i32 as yytype_int16, 33i32 as yytype_int16, 34i32 as yytype_int16,
     35i32 as yytype_int16, 36i32 as yytype_int16, 37i32 as yytype_int16,
     38i32 as yytype_int16, 39i32 as yytype_int16, 0i32 as yytype_int16,
     40i32 as yytype_int16, 41i32 as yytype_int16, 42i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 43i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 44i32 as yytype_int16,
     45i32 as yytype_int16, 0i32 as yytype_int16, 46i32 as yytype_int16,
     47i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 48i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 49i32 as yytype_int16, 50i32 as yytype_int16,
     0i32 as yytype_int16, 51i32 as yytype_int16, 52i32 as yytype_int16,
     0i32 as yytype_int16, 53i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 54i32 as yytype_int16, 0i32 as yytype_int16,
     55i32 as yytype_int16, 56i32 as yytype_int16, 57i32 as yytype_int16,
     58i32 as yytype_int16, 59i32 as yytype_int16, 60i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 61i32 as yytype_int16,
     -587i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     -587i32 as yytype_int16, -587i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 62i32 as yytype_int16, 63i32 as yytype_int16,
     64i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, -587i32 as yytype_int16, 281i32 as yytype_int16,
     -587i32 as yytype_int16, 5i32 as yytype_int16, 6i32 as yytype_int16,
     7i32 as yytype_int16, 8i32 as yytype_int16, 9i32 as yytype_int16,
     10i32 as yytype_int16, 11i32 as yytype_int16, 12i32 as yytype_int16,
     13i32 as yytype_int16, 14i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, -587i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, -587i32 as yytype_int16, 15i32 as yytype_int16,
     0i32 as yytype_int16, 16i32 as yytype_int16, 17i32 as yytype_int16,
     18i32 as yytype_int16, 19i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 20i32 as yytype_int16, 21i32 as yytype_int16,
     22i32 as yytype_int16, 23i32 as yytype_int16, 24i32 as yytype_int16,
     25i32 as yytype_int16, 26i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 27i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 28i32 as yytype_int16, 0i32 as yytype_int16,
     30i32 as yytype_int16, 31i32 as yytype_int16, 32i32 as yytype_int16,
     33i32 as yytype_int16, 34i32 as yytype_int16, 35i32 as yytype_int16,
     36i32 as yytype_int16, 37i32 as yytype_int16, 38i32 as yytype_int16,
     39i32 as yytype_int16, 0i32 as yytype_int16, 40i32 as yytype_int16,
     41i32 as yytype_int16, 42i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 43i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 44i32 as yytype_int16, 45i32 as yytype_int16,
     0i32 as yytype_int16, 46i32 as yytype_int16, 47i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     48i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     49i32 as yytype_int16, 50i32 as yytype_int16, 0i32 as yytype_int16,
     51i32 as yytype_int16, 52i32 as yytype_int16, 0i32 as yytype_int16,
     53i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     54i32 as yytype_int16, 0i32 as yytype_int16, 55i32 as yytype_int16,
     56i32 as yytype_int16, 57i32 as yytype_int16, 58i32 as yytype_int16,
     59i32 as yytype_int16, 60i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 61i32 as yytype_int16, -587i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, -587i32 as yytype_int16,
     -587i32 as yytype_int16, 4i32 as yytype_int16, 0i32 as yytype_int16,
     5i32 as yytype_int16, 6i32 as yytype_int16, 7i32 as yytype_int16,
     8i32 as yytype_int16, 9i32 as yytype_int16, 10i32 as yytype_int16,
     11i32 as yytype_int16, 12i32 as yytype_int16, 13i32 as yytype_int16,
     14i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     62i32 as yytype_int16, 63i32 as yytype_int16, 64i32 as yytype_int16,
     0i32 as yytype_int16, 15i32 as yytype_int16, 0i32 as yytype_int16,
     16i32 as yytype_int16, 17i32 as yytype_int16, 18i32 as yytype_int16,
     19i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     -587i32 as yytype_int16, 0i32 as yytype_int16, -587i32 as yytype_int16,
     20i32 as yytype_int16, 21i32 as yytype_int16, 22i32 as yytype_int16,
     23i32 as yytype_int16, 24i32 as yytype_int16, 25i32 as yytype_int16,
     26i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     27i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     28i32 as yytype_int16, 29i32 as yytype_int16, 30i32 as yytype_int16,
     31i32 as yytype_int16, 32i32 as yytype_int16, 33i32 as yytype_int16,
     34i32 as yytype_int16, 35i32 as yytype_int16, 36i32 as yytype_int16,
     37i32 as yytype_int16, 38i32 as yytype_int16, 39i32 as yytype_int16,
     0i32 as yytype_int16, 40i32 as yytype_int16, 41i32 as yytype_int16,
     42i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     43i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     44i32 as yytype_int16, 45i32 as yytype_int16, 0i32 as yytype_int16,
     46i32 as yytype_int16, 47i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 48i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 49i32 as yytype_int16,
     50i32 as yytype_int16, 0i32 as yytype_int16, 51i32 as yytype_int16,
     52i32 as yytype_int16, 0i32 as yytype_int16, 53i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 54i32 as yytype_int16,
     0i32 as yytype_int16, 55i32 as yytype_int16, 56i32 as yytype_int16,
     57i32 as yytype_int16, 58i32 as yytype_int16, 59i32 as yytype_int16,
     60i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     61i32 as yytype_int16, -587i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, -587i32 as yytype_int16, -587i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 62i32 as yytype_int16,
     63i32 as yytype_int16, 64i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, -587i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, -587i32 as yytype_int16,
     281i32 as yytype_int16, -587i32 as yytype_int16, 5i32 as yytype_int16,
     6i32 as yytype_int16, 7i32 as yytype_int16, 8i32 as yytype_int16,
     9i32 as yytype_int16, 10i32 as yytype_int16, 11i32 as yytype_int16,
     12i32 as yytype_int16, 13i32 as yytype_int16, 14i32 as yytype_int16,
     0i32 as yytype_int16, -587i32 as yytype_int16, -587i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     15i32 as yytype_int16, 0i32 as yytype_int16, 16i32 as yytype_int16,
     17i32 as yytype_int16, 18i32 as yytype_int16, 19i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 20i32 as yytype_int16,
     21i32 as yytype_int16, 22i32 as yytype_int16, 23i32 as yytype_int16,
     24i32 as yytype_int16, 25i32 as yytype_int16, 26i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 27i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 28i32 as yytype_int16,
     0i32 as yytype_int16, 30i32 as yytype_int16, 31i32 as yytype_int16,
     32i32 as yytype_int16, 33i32 as yytype_int16, 34i32 as yytype_int16,
     35i32 as yytype_int16, 36i32 as yytype_int16, 37i32 as yytype_int16,
     38i32 as yytype_int16, 39i32 as yytype_int16, 0i32 as yytype_int16,
     40i32 as yytype_int16, 41i32 as yytype_int16, 42i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 43i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 44i32 as yytype_int16,
     45i32 as yytype_int16, 0i32 as yytype_int16, 46i32 as yytype_int16,
     47i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 48i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 49i32 as yytype_int16, 50i32 as yytype_int16,
     0i32 as yytype_int16, 51i32 as yytype_int16, 52i32 as yytype_int16,
     0i32 as yytype_int16, 53i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 54i32 as yytype_int16, 0i32 as yytype_int16,
     55i32 as yytype_int16, 56i32 as yytype_int16, 57i32 as yytype_int16,
     58i32 as yytype_int16, 59i32 as yytype_int16, 60i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 61i32 as yytype_int16,
     -587i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     -587i32 as yytype_int16, -587i32 as yytype_int16, 281i32 as yytype_int16,
     0i32 as yytype_int16, 5i32 as yytype_int16, 6i32 as yytype_int16,
     7i32 as yytype_int16, 8i32 as yytype_int16, 9i32 as yytype_int16,
     10i32 as yytype_int16, 11i32 as yytype_int16, 12i32 as yytype_int16,
     13i32 as yytype_int16, 14i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 62i32 as yytype_int16, 63i32 as yytype_int16,
     64i32 as yytype_int16, 0i32 as yytype_int16, 15i32 as yytype_int16,
     0i32 as yytype_int16, 16i32 as yytype_int16, 17i32 as yytype_int16,
     18i32 as yytype_int16, 19i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, -587i32 as yytype_int16, 0i32 as yytype_int16,
     -587i32 as yytype_int16, 20i32 as yytype_int16, 21i32 as yytype_int16,
     22i32 as yytype_int16, 23i32 as yytype_int16, 24i32 as yytype_int16,
     25i32 as yytype_int16, 26i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 27i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 28i32 as yytype_int16, 0i32 as yytype_int16,
     30i32 as yytype_int16, 31i32 as yytype_int16, 32i32 as yytype_int16,
     33i32 as yytype_int16, 34i32 as yytype_int16, 35i32 as yytype_int16,
     36i32 as yytype_int16, 37i32 as yytype_int16, 38i32 as yytype_int16,
     39i32 as yytype_int16, 0i32 as yytype_int16, 40i32 as yytype_int16,
     41i32 as yytype_int16, 42i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 43i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 44i32 as yytype_int16, 45i32 as yytype_int16,
     0i32 as yytype_int16, 46i32 as yytype_int16, 47i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     48i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     282i32 as yytype_int16, 50i32 as yytype_int16, 0i32 as yytype_int16,
     51i32 as yytype_int16, 52i32 as yytype_int16, 0i32 as yytype_int16,
     53i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     54i32 as yytype_int16, 0i32 as yytype_int16, 55i32 as yytype_int16,
     56i32 as yytype_int16, 57i32 as yytype_int16, 58i32 as yytype_int16,
     59i32 as yytype_int16, 60i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 61i32 as yytype_int16, -587i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, -587i32 as yytype_int16,
     -587i32 as yytype_int16, 281i32 as yytype_int16, 0i32 as yytype_int16,
     5i32 as yytype_int16, 6i32 as yytype_int16, 7i32 as yytype_int16,
     8i32 as yytype_int16, 9i32 as yytype_int16, 10i32 as yytype_int16,
     11i32 as yytype_int16, 12i32 as yytype_int16, 13i32 as yytype_int16,
     14i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     62i32 as yytype_int16, 63i32 as yytype_int16, 64i32 as yytype_int16,
     0i32 as yytype_int16, 15i32 as yytype_int16, 0i32 as yytype_int16,
     16i32 as yytype_int16, 17i32 as yytype_int16, 18i32 as yytype_int16,
     19i32 as yytype_int16, -587i32 as yytype_int16, 0i32 as yytype_int16,
     -587i32 as yytype_int16, 0i32 as yytype_int16, -587i32 as yytype_int16,
     20i32 as yytype_int16, 21i32 as yytype_int16, 22i32 as yytype_int16,
     23i32 as yytype_int16, 24i32 as yytype_int16, 25i32 as yytype_int16,
     26i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     27i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     28i32 as yytype_int16, 0i32 as yytype_int16, 30i32 as yytype_int16,
     31i32 as yytype_int16, 32i32 as yytype_int16, 33i32 as yytype_int16,
     34i32 as yytype_int16, 35i32 as yytype_int16, 36i32 as yytype_int16,
     37i32 as yytype_int16, 38i32 as yytype_int16, 39i32 as yytype_int16,
     0i32 as yytype_int16, 40i32 as yytype_int16, 41i32 as yytype_int16,
     42i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     43i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     44i32 as yytype_int16, 45i32 as yytype_int16, 0i32 as yytype_int16,
     46i32 as yytype_int16, 47i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 48i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 49i32 as yytype_int16,
     50i32 as yytype_int16, 0i32 as yytype_int16, 51i32 as yytype_int16,
     52i32 as yytype_int16, 0i32 as yytype_int16, 53i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 54i32 as yytype_int16,
     0i32 as yytype_int16, 55i32 as yytype_int16, 56i32 as yytype_int16,
     57i32 as yytype_int16, 58i32 as yytype_int16, 59i32 as yytype_int16,
     60i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     61i32 as yytype_int16, -587i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, -587i32 as yytype_int16, -587i32 as yytype_int16,
     281i32 as yytype_int16, 0i32 as yytype_int16, 5i32 as yytype_int16,
     6i32 as yytype_int16, 7i32 as yytype_int16, 8i32 as yytype_int16,
     9i32 as yytype_int16, 10i32 as yytype_int16, 11i32 as yytype_int16,
     12i32 as yytype_int16, 13i32 as yytype_int16, 14i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 62i32 as yytype_int16,
     63i32 as yytype_int16, 64i32 as yytype_int16, 0i32 as yytype_int16,
     15i32 as yytype_int16, 0i32 as yytype_int16, 16i32 as yytype_int16,
     17i32 as yytype_int16, 18i32 as yytype_int16, 19i32 as yytype_int16,
     -587i32 as yytype_int16, 0i32 as yytype_int16, -587i32 as yytype_int16,
     0i32 as yytype_int16, -587i32 as yytype_int16, 20i32 as yytype_int16,
     21i32 as yytype_int16, 22i32 as yytype_int16, 23i32 as yytype_int16,
     24i32 as yytype_int16, 25i32 as yytype_int16, 26i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 27i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 28i32 as yytype_int16,
     0i32 as yytype_int16, 30i32 as yytype_int16, 31i32 as yytype_int16,
     32i32 as yytype_int16, 33i32 as yytype_int16, 34i32 as yytype_int16,
     35i32 as yytype_int16, 36i32 as yytype_int16, 37i32 as yytype_int16,
     38i32 as yytype_int16, 39i32 as yytype_int16, 0i32 as yytype_int16,
     40i32 as yytype_int16, 41i32 as yytype_int16, 42i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 43i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 44i32 as yytype_int16,
     45i32 as yytype_int16, 0i32 as yytype_int16, 46i32 as yytype_int16,
     47i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 48i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 49i32 as yytype_int16, 50i32 as yytype_int16,
     0i32 as yytype_int16, 51i32 as yytype_int16, 52i32 as yytype_int16,
     0i32 as yytype_int16, 53i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 54i32 as yytype_int16, 0i32 as yytype_int16,
     55i32 as yytype_int16, 56i32 as yytype_int16, 57i32 as yytype_int16,
     58i32 as yytype_int16, 59i32 as yytype_int16, 60i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 61i32 as yytype_int16,
     -587i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     -587i32 as yytype_int16, -587i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 62i32 as yytype_int16, 63i32 as yytype_int16,
     64i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     -587i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, -587i32 as yytype_int16, 281i32 as yytype_int16,
     -587i32 as yytype_int16, 5i32 as yytype_int16, 6i32 as yytype_int16,
     7i32 as yytype_int16, 8i32 as yytype_int16, 9i32 as yytype_int16,
     10i32 as yytype_int16, 11i32 as yytype_int16, 12i32 as yytype_int16,
     13i32 as yytype_int16, 14i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, -587i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 15i32 as yytype_int16,
     0i32 as yytype_int16, 16i32 as yytype_int16, 17i32 as yytype_int16,
     18i32 as yytype_int16, 19i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 20i32 as yytype_int16, 21i32 as yytype_int16,
     22i32 as yytype_int16, 23i32 as yytype_int16, 24i32 as yytype_int16,
     25i32 as yytype_int16, 26i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 27i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 28i32 as yytype_int16, 0i32 as yytype_int16,
     30i32 as yytype_int16, 31i32 as yytype_int16, 32i32 as yytype_int16,
     33i32 as yytype_int16, 34i32 as yytype_int16, 35i32 as yytype_int16,
     36i32 as yytype_int16, 37i32 as yytype_int16, 38i32 as yytype_int16,
     39i32 as yytype_int16, 0i32 as yytype_int16, 40i32 as yytype_int16,
     41i32 as yytype_int16, 42i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 43i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 44i32 as yytype_int16, 45i32 as yytype_int16,
     0i32 as yytype_int16, 46i32 as yytype_int16, 47i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     48i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     49i32 as yytype_int16, 50i32 as yytype_int16, 0i32 as yytype_int16,
     51i32 as yytype_int16, 52i32 as yytype_int16, 0i32 as yytype_int16,
     53i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     54i32 as yytype_int16, 0i32 as yytype_int16, 55i32 as yytype_int16,
     56i32 as yytype_int16, 57i32 as yytype_int16, 58i32 as yytype_int16,
     59i32 as yytype_int16, 60i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 61i32 as yytype_int16, -587i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, -587i32 as yytype_int16,
     -587i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     5i32 as yytype_int16, 6i32 as yytype_int16, 7i32 as yytype_int16,
     8i32 as yytype_int16, 9i32 as yytype_int16, 10i32 as yytype_int16,
     11i32 as yytype_int16, 12i32 as yytype_int16, 13i32 as yytype_int16,
     14i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     62i32 as yytype_int16, 63i32 as yytype_int16, 64i32 as yytype_int16,
     0i32 as yytype_int16, 15i32 as yytype_int16, 0i32 as yytype_int16,
     16i32 as yytype_int16, 17i32 as yytype_int16, 18i32 as yytype_int16,
     19i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     -587i32 as yytype_int16, 0i32 as yytype_int16, -587i32 as yytype_int16,
     20i32 as yytype_int16, 21i32 as yytype_int16, 22i32 as yytype_int16,
     23i32 as yytype_int16, 24i32 as yytype_int16, 25i32 as yytype_int16,
     26i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     27i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     28i32 as yytype_int16, 29i32 as yytype_int16, 30i32 as yytype_int16,
     31i32 as yytype_int16, 32i32 as yytype_int16, 33i32 as yytype_int16,
     34i32 as yytype_int16, 35i32 as yytype_int16, 36i32 as yytype_int16,
     37i32 as yytype_int16, 38i32 as yytype_int16, 39i32 as yytype_int16,
     0i32 as yytype_int16, 40i32 as yytype_int16, 41i32 as yytype_int16,
     42i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     43i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     44i32 as yytype_int16, 45i32 as yytype_int16, 0i32 as yytype_int16,
     46i32 as yytype_int16, 47i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 48i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 49i32 as yytype_int16,
     50i32 as yytype_int16, 0i32 as yytype_int16, 51i32 as yytype_int16,
     52i32 as yytype_int16, 0i32 as yytype_int16, 53i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 54i32 as yytype_int16,
     0i32 as yytype_int16, 55i32 as yytype_int16, 56i32 as yytype_int16,
     57i32 as yytype_int16, 58i32 as yytype_int16, 59i32 as yytype_int16,
     60i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     61i32 as yytype_int16, 235i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 236i32 as yytype_int16, 237i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 5i32 as yytype_int16,
     6i32 as yytype_int16, 7i32 as yytype_int16, 8i32 as yytype_int16,
     9i32 as yytype_int16, 10i32 as yytype_int16, 11i32 as yytype_int16,
     12i32 as yytype_int16, 13i32 as yytype_int16, 14i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 62i32 as yytype_int16,
     63i32 as yytype_int16, 64i32 as yytype_int16, 0i32 as yytype_int16,
     15i32 as yytype_int16, 0i32 as yytype_int16, 16i32 as yytype_int16,
     17i32 as yytype_int16, 18i32 as yytype_int16, 19i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 238i32 as yytype_int16,
     0i32 as yytype_int16, 239i32 as yytype_int16, 20i32 as yytype_int16,
     21i32 as yytype_int16, 22i32 as yytype_int16, 23i32 as yytype_int16,
     24i32 as yytype_int16, 25i32 as yytype_int16, 26i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 27i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 28i32 as yytype_int16,
     0i32 as yytype_int16, 30i32 as yytype_int16, 31i32 as yytype_int16,
     32i32 as yytype_int16, 33i32 as yytype_int16, 34i32 as yytype_int16,
     35i32 as yytype_int16, 36i32 as yytype_int16, 37i32 as yytype_int16,
     38i32 as yytype_int16, 39i32 as yytype_int16, 0i32 as yytype_int16,
     40i32 as yytype_int16, 41i32 as yytype_int16, 42i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 43i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 44i32 as yytype_int16,
     45i32 as yytype_int16, 0i32 as yytype_int16, 46i32 as yytype_int16,
     47i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 48i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 49i32 as yytype_int16, 50i32 as yytype_int16,
     0i32 as yytype_int16, 51i32 as yytype_int16, 52i32 as yytype_int16,
     0i32 as yytype_int16, 53i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 54i32 as yytype_int16, 0i32 as yytype_int16,
     55i32 as yytype_int16, 56i32 as yytype_int16, 57i32 as yytype_int16,
     58i32 as yytype_int16, 59i32 as yytype_int16, 60i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 61i32 as yytype_int16,
     235i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     236i32 as yytype_int16, 237i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 5i32 as yytype_int16, 6i32 as yytype_int16,
     7i32 as yytype_int16, 8i32 as yytype_int16, 9i32 as yytype_int16,
     10i32 as yytype_int16, 11i32 as yytype_int16, 12i32 as yytype_int16,
     13i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 62i32 as yytype_int16, 63i32 as yytype_int16,
     64i32 as yytype_int16, 0i32 as yytype_int16, 15i32 as yytype_int16,
     0i32 as yytype_int16, 16i32 as yytype_int16, 17i32 as yytype_int16,
     18i32 as yytype_int16, 19i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 238i32 as yytype_int16, 0i32 as yytype_int16,
     239i32 as yytype_int16, 20i32 as yytype_int16, 21i32 as yytype_int16,
     22i32 as yytype_int16, 23i32 as yytype_int16, 24i32 as yytype_int16,
     25i32 as yytype_int16, 26i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 27i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 31i32 as yytype_int16, 32i32 as yytype_int16,
     33i32 as yytype_int16, 34i32 as yytype_int16, 35i32 as yytype_int16,
     36i32 as yytype_int16, 37i32 as yytype_int16, 38i32 as yytype_int16,
     39i32 as yytype_int16, 0i32 as yytype_int16, 40i32 as yytype_int16,
     41i32 as yytype_int16, 42i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 43i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 44i32 as yytype_int16, 45i32 as yytype_int16,
     0i32 as yytype_int16, 46i32 as yytype_int16, 47i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     203i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     113i32 as yytype_int16, 50i32 as yytype_int16, 0i32 as yytype_int16,
     51i32 as yytype_int16, 52i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     54i32 as yytype_int16, 0i32 as yytype_int16, 55i32 as yytype_int16,
     56i32 as yytype_int16, 57i32 as yytype_int16, 58i32 as yytype_int16,
     59i32 as yytype_int16, 60i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 61i32 as yytype_int16, 235i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 236i32 as yytype_int16,
     237i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     5i32 as yytype_int16, 6i32 as yytype_int16, 7i32 as yytype_int16,
     8i32 as yytype_int16, 9i32 as yytype_int16, 10i32 as yytype_int16,
     11i32 as yytype_int16, 12i32 as yytype_int16, 13i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     62i32 as yytype_int16, 63i32 as yytype_int16, 64i32 as yytype_int16,
     0i32 as yytype_int16, 15i32 as yytype_int16, 0i32 as yytype_int16,
     16i32 as yytype_int16, 17i32 as yytype_int16, 18i32 as yytype_int16,
     19i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     238i32 as yytype_int16, 0i32 as yytype_int16, 239i32 as yytype_int16,
     20i32 as yytype_int16, 21i32 as yytype_int16, 22i32 as yytype_int16,
     23i32 as yytype_int16, 24i32 as yytype_int16, 25i32 as yytype_int16,
     26i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     27i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     31i32 as yytype_int16, 32i32 as yytype_int16, 33i32 as yytype_int16,
     34i32 as yytype_int16, 35i32 as yytype_int16, 36i32 as yytype_int16,
     37i32 as yytype_int16, 38i32 as yytype_int16, 39i32 as yytype_int16,
     0i32 as yytype_int16, 40i32 as yytype_int16, 41i32 as yytype_int16,
     42i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     43i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     44i32 as yytype_int16, 45i32 as yytype_int16, 0i32 as yytype_int16,
     46i32 as yytype_int16, 47i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 203i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 113i32 as yytype_int16,
     50i32 as yytype_int16, 0i32 as yytype_int16, 51i32 as yytype_int16,
     52i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 54i32 as yytype_int16,
     0i32 as yytype_int16, 55i32 as yytype_int16, 56i32 as yytype_int16,
     57i32 as yytype_int16, 58i32 as yytype_int16, 59i32 as yytype_int16,
     60i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     61i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 62i32 as yytype_int16,
     63i32 as yytype_int16, 64i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 239i32 as yytype_int16, 123i32 as yytype_int16,
     124i32 as yytype_int16, 125i32 as yytype_int16, 126i32 as yytype_int16,
     127i32 as yytype_int16, 128i32 as yytype_int16, 129i32 as yytype_int16,
     130i32 as yytype_int16, 131i32 as yytype_int16, 132i32 as yytype_int16,
     133i32 as yytype_int16, 134i32 as yytype_int16, 135i32 as yytype_int16,
     136i32 as yytype_int16, 137i32 as yytype_int16, 138i32 as yytype_int16,
     139i32 as yytype_int16, 140i32 as yytype_int16, 141i32 as yytype_int16,
     142i32 as yytype_int16, 143i32 as yytype_int16, 144i32 as yytype_int16,
     145i32 as yytype_int16, 146i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 147i32 as yytype_int16,
     148i32 as yytype_int16, 149i32 as yytype_int16, 150i32 as yytype_int16,
     151i32 as yytype_int16, 152i32 as yytype_int16, 153i32 as yytype_int16,
     154i32 as yytype_int16, 155i32 as yytype_int16, 156i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 157i32 as yytype_int16,
     158i32 as yytype_int16, 159i32 as yytype_int16, 160i32 as yytype_int16,
     161i32 as yytype_int16, 162i32 as yytype_int16, 163i32 as yytype_int16,
     164i32 as yytype_int16, 36i32 as yytype_int16, 37i32 as yytype_int16,
     165i32 as yytype_int16, 39i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 166i32 as yytype_int16,
     167i32 as yytype_int16, 168i32 as yytype_int16, 169i32 as yytype_int16,
     170i32 as yytype_int16, 171i32 as yytype_int16, 172i32 as yytype_int16,
     173i32 as yytype_int16, 174i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 175i32 as yytype_int16, 176i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 177i32 as yytype_int16,
     178i32 as yytype_int16, 179i32 as yytype_int16, 180i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 181i32 as yytype_int16, 182i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     183i32 as yytype_int16, 184i32 as yytype_int16, 185i32 as yytype_int16,
     186i32 as yytype_int16, 187i32 as yytype_int16, 188i32 as yytype_int16,
     189i32 as yytype_int16, 190i32 as yytype_int16, 191i32 as yytype_int16,
     192i32 as yytype_int16, 0i32 as yytype_int16, 193i32 as yytype_int16,
     194i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     195i32 as yytype_int16, 196i32 as yytype_int16, -556i32 as yytype_int16,
     -556i32 as yytype_int16, -556i32 as yytype_int16,
     -556i32 as yytype_int16, -556i32 as yytype_int16,
     -556i32 as yytype_int16, -556i32 as yytype_int16,
     -556i32 as yytype_int16, -556i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     -556i32 as yytype_int16, 0i32 as yytype_int16, -556i32 as yytype_int16,
     -556i32 as yytype_int16, -556i32 as yytype_int16,
     -556i32 as yytype_int16, 0i32 as yytype_int16, -556i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     -556i32 as yytype_int16, -556i32 as yytype_int16,
     -556i32 as yytype_int16, -556i32 as yytype_int16,
     -556i32 as yytype_int16, -556i32 as yytype_int16,
     -556i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     -556i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     -556i32 as yytype_int16, -556i32 as yytype_int16,
     -556i32 as yytype_int16, -556i32 as yytype_int16,
     -556i32 as yytype_int16, -556i32 as yytype_int16,
     -556i32 as yytype_int16, -556i32 as yytype_int16,
     -556i32 as yytype_int16, 0i32 as yytype_int16, -556i32 as yytype_int16,
     -556i32 as yytype_int16, -556i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, -556i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, -556i32 as yytype_int16, -556i32 as yytype_int16,
     0i32 as yytype_int16, -556i32 as yytype_int16, -556i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     -556i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     -556i32 as yytype_int16, -556i32 as yytype_int16, 0i32 as yytype_int16,
     -556i32 as yytype_int16, -556i32 as yytype_int16, 0i32 as yytype_int16,
     -556i32 as yytype_int16, -556i32 as yytype_int16,
     -556i32 as yytype_int16, -556i32 as yytype_int16, 0i32 as yytype_int16,
     -556i32 as yytype_int16, -556i32 as yytype_int16,
     -556i32 as yytype_int16, -556i32 as yytype_int16,
     -556i32 as yytype_int16, -556i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, -556i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, -558i32 as yytype_int16,
     -558i32 as yytype_int16, -558i32 as yytype_int16,
     -558i32 as yytype_int16, -558i32 as yytype_int16,
     -558i32 as yytype_int16, -558i32 as yytype_int16,
     -558i32 as yytype_int16, -558i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     -556i32 as yytype_int16, -556i32 as yytype_int16,
     -556i32 as yytype_int16, -558i32 as yytype_int16,
     -556i32 as yytype_int16, -558i32 as yytype_int16,
     -558i32 as yytype_int16, -558i32 as yytype_int16,
     -558i32 as yytype_int16, -556i32 as yytype_int16,
     -558i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, -558i32 as yytype_int16, -558i32 as yytype_int16,
     -558i32 as yytype_int16, -558i32 as yytype_int16,
     -558i32 as yytype_int16, -558i32 as yytype_int16,
     -558i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     -558i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     -558i32 as yytype_int16, -558i32 as yytype_int16,
     -558i32 as yytype_int16, -558i32 as yytype_int16,
     -558i32 as yytype_int16, -558i32 as yytype_int16,
     -558i32 as yytype_int16, -558i32 as yytype_int16,
     -558i32 as yytype_int16, 0i32 as yytype_int16, -558i32 as yytype_int16,
     -558i32 as yytype_int16, -558i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, -558i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, -558i32 as yytype_int16, -558i32 as yytype_int16,
     0i32 as yytype_int16, -558i32 as yytype_int16, -558i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     -558i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     -558i32 as yytype_int16, -558i32 as yytype_int16, 0i32 as yytype_int16,
     -558i32 as yytype_int16, -558i32 as yytype_int16, 0i32 as yytype_int16,
     -558i32 as yytype_int16, -558i32 as yytype_int16,
     -558i32 as yytype_int16, -558i32 as yytype_int16, 0i32 as yytype_int16,
     -558i32 as yytype_int16, -558i32 as yytype_int16,
     -558i32 as yytype_int16, -558i32 as yytype_int16,
     -558i32 as yytype_int16, -558i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, -558i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, -557i32 as yytype_int16,
     -557i32 as yytype_int16, -557i32 as yytype_int16,
     -557i32 as yytype_int16, -557i32 as yytype_int16,
     -557i32 as yytype_int16, -557i32 as yytype_int16,
     -557i32 as yytype_int16, -557i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     -558i32 as yytype_int16, -558i32 as yytype_int16,
     -558i32 as yytype_int16, -557i32 as yytype_int16,
     -558i32 as yytype_int16, -557i32 as yytype_int16,
     -557i32 as yytype_int16, -557i32 as yytype_int16,
     -557i32 as yytype_int16, -558i32 as yytype_int16,
     -557i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, -557i32 as yytype_int16, -557i32 as yytype_int16,
     -557i32 as yytype_int16, -557i32 as yytype_int16,
     -557i32 as yytype_int16, -557i32 as yytype_int16,
     -557i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     -557i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     -557i32 as yytype_int16, -557i32 as yytype_int16,
     -557i32 as yytype_int16, -557i32 as yytype_int16,
     -557i32 as yytype_int16, -557i32 as yytype_int16,
     -557i32 as yytype_int16, -557i32 as yytype_int16,
     -557i32 as yytype_int16, 0i32 as yytype_int16, -557i32 as yytype_int16,
     -557i32 as yytype_int16, -557i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, -557i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, -557i32 as yytype_int16, -557i32 as yytype_int16,
     0i32 as yytype_int16, -557i32 as yytype_int16, -557i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     -557i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     -557i32 as yytype_int16, -557i32 as yytype_int16, 0i32 as yytype_int16,
     -557i32 as yytype_int16, -557i32 as yytype_int16, 0i32 as yytype_int16,
     -557i32 as yytype_int16, -557i32 as yytype_int16,
     -557i32 as yytype_int16, -557i32 as yytype_int16, 0i32 as yytype_int16,
     -557i32 as yytype_int16, -557i32 as yytype_int16,
     -557i32 as yytype_int16, -557i32 as yytype_int16,
     -557i32 as yytype_int16, -557i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, -557i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, -559i32 as yytype_int16,
     -559i32 as yytype_int16, -559i32 as yytype_int16,
     -559i32 as yytype_int16, -559i32 as yytype_int16,
     -559i32 as yytype_int16, -559i32 as yytype_int16,
     -559i32 as yytype_int16, -559i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     -557i32 as yytype_int16, -557i32 as yytype_int16,
     -557i32 as yytype_int16, -559i32 as yytype_int16,
     -557i32 as yytype_int16, -559i32 as yytype_int16,
     -559i32 as yytype_int16, -559i32 as yytype_int16,
     -559i32 as yytype_int16, -557i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     -559i32 as yytype_int16, -559i32 as yytype_int16,
     -559i32 as yytype_int16, -559i32 as yytype_int16,
     -559i32 as yytype_int16, -559i32 as yytype_int16,
     -559i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     -559i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     -559i32 as yytype_int16, -559i32 as yytype_int16,
     -559i32 as yytype_int16, -559i32 as yytype_int16,
     -559i32 as yytype_int16, -559i32 as yytype_int16,
     -559i32 as yytype_int16, -559i32 as yytype_int16,
     -559i32 as yytype_int16, 0i32 as yytype_int16, -559i32 as yytype_int16,
     -559i32 as yytype_int16, -559i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, -559i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, -559i32 as yytype_int16, -559i32 as yytype_int16,
     0i32 as yytype_int16, -559i32 as yytype_int16, -559i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     -559i32 as yytype_int16, 765i32 as yytype_int16, 0i32 as yytype_int16,
     -559i32 as yytype_int16, -559i32 as yytype_int16, 0i32 as yytype_int16,
     -559i32 as yytype_int16, -559i32 as yytype_int16, 0i32 as yytype_int16,
     -559i32 as yytype_int16, -559i32 as yytype_int16,
     -559i32 as yytype_int16, -559i32 as yytype_int16, 0i32 as yytype_int16,
     -559i32 as yytype_int16, -559i32 as yytype_int16,
     -559i32 as yytype_int16, -559i32 as yytype_int16,
     -559i32 as yytype_int16, -559i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, -559i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, -99i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     -559i32 as yytype_int16, -559i32 as yytype_int16,
     -559i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, -559i32 as yytype_int16, -560i32 as yytype_int16,
     -560i32 as yytype_int16, -560i32 as yytype_int16,
     -560i32 as yytype_int16, -560i32 as yytype_int16,
     -560i32 as yytype_int16, -560i32 as yytype_int16,
     -560i32 as yytype_int16, -560i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     -560i32 as yytype_int16, 0i32 as yytype_int16, -560i32 as yytype_int16,
     -560i32 as yytype_int16, -560i32 as yytype_int16,
     -560i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     -560i32 as yytype_int16, -560i32 as yytype_int16,
     -560i32 as yytype_int16, -560i32 as yytype_int16,
     -560i32 as yytype_int16, -560i32 as yytype_int16,
     -560i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     -560i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     -560i32 as yytype_int16, -560i32 as yytype_int16,
     -560i32 as yytype_int16, -560i32 as yytype_int16,
     -560i32 as yytype_int16, -560i32 as yytype_int16,
     -560i32 as yytype_int16, -560i32 as yytype_int16,
     -560i32 as yytype_int16, 0i32 as yytype_int16, -560i32 as yytype_int16,
     -560i32 as yytype_int16, -560i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, -560i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, -560i32 as yytype_int16, -560i32 as yytype_int16,
     0i32 as yytype_int16, -560i32 as yytype_int16, -560i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     -560i32 as yytype_int16, 766i32 as yytype_int16, 0i32 as yytype_int16,
     -560i32 as yytype_int16, -560i32 as yytype_int16, 0i32 as yytype_int16,
     -560i32 as yytype_int16, -560i32 as yytype_int16, 0i32 as yytype_int16,
     -560i32 as yytype_int16, -560i32 as yytype_int16,
     -560i32 as yytype_int16, -560i32 as yytype_int16, 0i32 as yytype_int16,
     -560i32 as yytype_int16, -560i32 as yytype_int16,
     -560i32 as yytype_int16, -560i32 as yytype_int16,
     -560i32 as yytype_int16, -560i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, -560i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, -101i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     -560i32 as yytype_int16, -560i32 as yytype_int16,
     -560i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, -560i32 as yytype_int16, -251i32 as yytype_int16,
     -251i32 as yytype_int16, -251i32 as yytype_int16,
     -251i32 as yytype_int16, -251i32 as yytype_int16,
     -251i32 as yytype_int16, -251i32 as yytype_int16,
     -251i32 as yytype_int16, -251i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     -251i32 as yytype_int16, 0i32 as yytype_int16, -251i32 as yytype_int16,
     -251i32 as yytype_int16, -251i32 as yytype_int16,
     -251i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     -251i32 as yytype_int16, -251i32 as yytype_int16,
     -251i32 as yytype_int16, -251i32 as yytype_int16,
     -251i32 as yytype_int16, -251i32 as yytype_int16,
     -251i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     -251i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     -251i32 as yytype_int16, -251i32 as yytype_int16,
     -251i32 as yytype_int16, -251i32 as yytype_int16,
     -251i32 as yytype_int16, -251i32 as yytype_int16,
     -251i32 as yytype_int16, -251i32 as yytype_int16,
     -251i32 as yytype_int16, 0i32 as yytype_int16, -251i32 as yytype_int16,
     -251i32 as yytype_int16, -251i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, -251i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, -251i32 as yytype_int16, -251i32 as yytype_int16,
     0i32 as yytype_int16, -251i32 as yytype_int16, -251i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     -251i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     -251i32 as yytype_int16, -251i32 as yytype_int16, 0i32 as yytype_int16,
     -251i32 as yytype_int16, -251i32 as yytype_int16, 0i32 as yytype_int16,
     -251i32 as yytype_int16, -251i32 as yytype_int16,
     -251i32 as yytype_int16, -251i32 as yytype_int16, 0i32 as yytype_int16,
     -251i32 as yytype_int16, -251i32 as yytype_int16,
     -251i32 as yytype_int16, -251i32 as yytype_int16,
     -251i32 as yytype_int16, -251i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, -251i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, -561i32 as yytype_int16,
     -561i32 as yytype_int16, -561i32 as yytype_int16,
     -561i32 as yytype_int16, -561i32 as yytype_int16,
     -561i32 as yytype_int16, -561i32 as yytype_int16,
     -561i32 as yytype_int16, -561i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     -251i32 as yytype_int16, -251i32 as yytype_int16,
     -251i32 as yytype_int16, -561i32 as yytype_int16, 0i32 as yytype_int16,
     -561i32 as yytype_int16, -561i32 as yytype_int16,
     -561i32 as yytype_int16, -561i32 as yytype_int16, 263i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, -561i32 as yytype_int16, -561i32 as yytype_int16,
     -561i32 as yytype_int16, -561i32 as yytype_int16,
     -561i32 as yytype_int16, -561i32 as yytype_int16,
     -561i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     -561i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     -561i32 as yytype_int16, -561i32 as yytype_int16,
     -561i32 as yytype_int16, -561i32 as yytype_int16,
     -561i32 as yytype_int16, -561i32 as yytype_int16,
     -561i32 as yytype_int16, -561i32 as yytype_int16,
     -561i32 as yytype_int16, 0i32 as yytype_int16, -561i32 as yytype_int16,
     -561i32 as yytype_int16, -561i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, -561i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, -561i32 as yytype_int16, -561i32 as yytype_int16,
     0i32 as yytype_int16, -561i32 as yytype_int16, -561i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     -561i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     -561i32 as yytype_int16, -561i32 as yytype_int16, 0i32 as yytype_int16,
     -561i32 as yytype_int16, -561i32 as yytype_int16, 0i32 as yytype_int16,
     -561i32 as yytype_int16, -561i32 as yytype_int16,
     -561i32 as yytype_int16, -561i32 as yytype_int16, 0i32 as yytype_int16,
     -561i32 as yytype_int16, -561i32 as yytype_int16,
     -561i32 as yytype_int16, -561i32 as yytype_int16,
     -561i32 as yytype_int16, -561i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, -561i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, -562i32 as yytype_int16,
     -562i32 as yytype_int16, -562i32 as yytype_int16,
     -562i32 as yytype_int16, -562i32 as yytype_int16,
     -562i32 as yytype_int16, -562i32 as yytype_int16,
     -562i32 as yytype_int16, -562i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     -561i32 as yytype_int16, -561i32 as yytype_int16,
     -561i32 as yytype_int16, -562i32 as yytype_int16, 0i32 as yytype_int16,
     -562i32 as yytype_int16, -562i32 as yytype_int16,
     -562i32 as yytype_int16, -562i32 as yytype_int16,
     -561i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, -562i32 as yytype_int16,
     -562i32 as yytype_int16, -562i32 as yytype_int16,
     -562i32 as yytype_int16, -562i32 as yytype_int16,
     -562i32 as yytype_int16, -562i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, -562i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, -562i32 as yytype_int16, -562i32 as yytype_int16,
     -562i32 as yytype_int16, -562i32 as yytype_int16,
     -562i32 as yytype_int16, -562i32 as yytype_int16,
     -562i32 as yytype_int16, -562i32 as yytype_int16,
     -562i32 as yytype_int16, 0i32 as yytype_int16, -562i32 as yytype_int16,
     -562i32 as yytype_int16, -562i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, -562i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, -562i32 as yytype_int16, -562i32 as yytype_int16,
     0i32 as yytype_int16, -562i32 as yytype_int16, -562i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     -562i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     -562i32 as yytype_int16, -562i32 as yytype_int16, 0i32 as yytype_int16,
     -562i32 as yytype_int16, -562i32 as yytype_int16, 0i32 as yytype_int16,
     -562i32 as yytype_int16, -562i32 as yytype_int16,
     -562i32 as yytype_int16, -562i32 as yytype_int16, 0i32 as yytype_int16,
     -562i32 as yytype_int16, -562i32 as yytype_int16,
     -562i32 as yytype_int16, -562i32 as yytype_int16,
     -562i32 as yytype_int16, -562i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, -562i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     -562i32 as yytype_int16, -562i32 as yytype_int16,
     -562i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, -562i32 as yytype_int16, 123i32 as yytype_int16,
     124i32 as yytype_int16, 125i32 as yytype_int16, 126i32 as yytype_int16,
     127i32 as yytype_int16, 128i32 as yytype_int16, 129i32 as yytype_int16,
     130i32 as yytype_int16, 131i32 as yytype_int16, 132i32 as yytype_int16,
     133i32 as yytype_int16, 134i32 as yytype_int16, 135i32 as yytype_int16,
     136i32 as yytype_int16, 137i32 as yytype_int16, 138i32 as yytype_int16,
     139i32 as yytype_int16, 140i32 as yytype_int16, 141i32 as yytype_int16,
     142i32 as yytype_int16, 143i32 as yytype_int16, 144i32 as yytype_int16,
     145i32 as yytype_int16, 146i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 147i32 as yytype_int16,
     148i32 as yytype_int16, 149i32 as yytype_int16, 221i32 as yytype_int16,
     222i32 as yytype_int16, 223i32 as yytype_int16, 224i32 as yytype_int16,
     154i32 as yytype_int16, 155i32 as yytype_int16, 156i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 157i32 as yytype_int16,
     158i32 as yytype_int16, 159i32 as yytype_int16, 225i32 as yytype_int16,
     226i32 as yytype_int16, 227i32 as yytype_int16, 228i32 as yytype_int16,
     164i32 as yytype_int16, 306i32 as yytype_int16, 307i32 as yytype_int16,
     229i32 as yytype_int16, 308i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 309i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 166i32 as yytype_int16,
     167i32 as yytype_int16, 168i32 as yytype_int16, 169i32 as yytype_int16,
     170i32 as yytype_int16, 171i32 as yytype_int16, 172i32 as yytype_int16,
     173i32 as yytype_int16, 174i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 175i32 as yytype_int16, 176i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 177i32 as yytype_int16,
     178i32 as yytype_int16, 179i32 as yytype_int16, 180i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 181i32 as yytype_int16, 182i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 310i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     183i32 as yytype_int16, 184i32 as yytype_int16, 185i32 as yytype_int16,
     186i32 as yytype_int16, 187i32 as yytype_int16, 188i32 as yytype_int16,
     189i32 as yytype_int16, 190i32 as yytype_int16, 191i32 as yytype_int16,
     192i32 as yytype_int16, 0i32 as yytype_int16, 193i32 as yytype_int16,
     194i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     195i32 as yytype_int16, 123i32 as yytype_int16, 124i32 as yytype_int16,
     125i32 as yytype_int16, 126i32 as yytype_int16, 127i32 as yytype_int16,
     128i32 as yytype_int16, 129i32 as yytype_int16, 130i32 as yytype_int16,
     131i32 as yytype_int16, 132i32 as yytype_int16, 133i32 as yytype_int16,
     134i32 as yytype_int16, 135i32 as yytype_int16, 136i32 as yytype_int16,
     137i32 as yytype_int16, 138i32 as yytype_int16, 139i32 as yytype_int16,
     140i32 as yytype_int16, 141i32 as yytype_int16, 142i32 as yytype_int16,
     143i32 as yytype_int16, 144i32 as yytype_int16, 145i32 as yytype_int16,
     146i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 147i32 as yytype_int16, 148i32 as yytype_int16,
     149i32 as yytype_int16, 221i32 as yytype_int16, 222i32 as yytype_int16,
     223i32 as yytype_int16, 224i32 as yytype_int16, 154i32 as yytype_int16,
     155i32 as yytype_int16, 156i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 157i32 as yytype_int16, 158i32 as yytype_int16,
     159i32 as yytype_int16, 225i32 as yytype_int16, 226i32 as yytype_int16,
     227i32 as yytype_int16, 228i32 as yytype_int16, 164i32 as yytype_int16,
     306i32 as yytype_int16, 307i32 as yytype_int16, 229i32 as yytype_int16,
     308i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 309i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 166i32 as yytype_int16, 167i32 as yytype_int16,
     168i32 as yytype_int16, 169i32 as yytype_int16, 170i32 as yytype_int16,
     171i32 as yytype_int16, 172i32 as yytype_int16, 173i32 as yytype_int16,
     174i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     175i32 as yytype_int16, 176i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 177i32 as yytype_int16, 178i32 as yytype_int16,
     179i32 as yytype_int16, 180i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     181i32 as yytype_int16, 182i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     430i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 183i32 as yytype_int16,
     184i32 as yytype_int16, 185i32 as yytype_int16, 186i32 as yytype_int16,
     187i32 as yytype_int16, 188i32 as yytype_int16, 189i32 as yytype_int16,
     190i32 as yytype_int16, 191i32 as yytype_int16, 192i32 as yytype_int16,
     0i32 as yytype_int16, 193i32 as yytype_int16, 194i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 195i32 as yytype_int16,
     123i32 as yytype_int16, 124i32 as yytype_int16, 125i32 as yytype_int16,
     126i32 as yytype_int16, 127i32 as yytype_int16, 128i32 as yytype_int16,
     129i32 as yytype_int16, 130i32 as yytype_int16, 131i32 as yytype_int16,
     132i32 as yytype_int16, 133i32 as yytype_int16, 134i32 as yytype_int16,
     135i32 as yytype_int16, 136i32 as yytype_int16, 137i32 as yytype_int16,
     138i32 as yytype_int16, 139i32 as yytype_int16, 140i32 as yytype_int16,
     141i32 as yytype_int16, 142i32 as yytype_int16, 143i32 as yytype_int16,
     144i32 as yytype_int16, 145i32 as yytype_int16, 146i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     147i32 as yytype_int16, 148i32 as yytype_int16, 149i32 as yytype_int16,
     221i32 as yytype_int16, 222i32 as yytype_int16, 223i32 as yytype_int16,
     224i32 as yytype_int16, 154i32 as yytype_int16, 155i32 as yytype_int16,
     156i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     157i32 as yytype_int16, 158i32 as yytype_int16, 159i32 as yytype_int16,
     225i32 as yytype_int16, 226i32 as yytype_int16, 227i32 as yytype_int16,
     228i32 as yytype_int16, 164i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 229i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     166i32 as yytype_int16, 167i32 as yytype_int16, 168i32 as yytype_int16,
     169i32 as yytype_int16, 170i32 as yytype_int16, 171i32 as yytype_int16,
     172i32 as yytype_int16, 173i32 as yytype_int16, 174i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 175i32 as yytype_int16,
     176i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     177i32 as yytype_int16, 178i32 as yytype_int16, 179i32 as yytype_int16,
     180i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 181i32 as yytype_int16,
     182i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 230i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 183i32 as yytype_int16, 184i32 as yytype_int16,
     185i32 as yytype_int16, 186i32 as yytype_int16, 187i32 as yytype_int16,
     188i32 as yytype_int16, 189i32 as yytype_int16, 190i32 as yytype_int16,
     191i32 as yytype_int16, 192i32 as yytype_int16, 0i32 as yytype_int16,
     193i32 as yytype_int16, 194i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 195i32 as yytype_int16, 123i32 as yytype_int16,
     124i32 as yytype_int16, 125i32 as yytype_int16, 126i32 as yytype_int16,
     127i32 as yytype_int16, 128i32 as yytype_int16, 129i32 as yytype_int16,
     130i32 as yytype_int16, 131i32 as yytype_int16, 132i32 as yytype_int16,
     133i32 as yytype_int16, 134i32 as yytype_int16, 135i32 as yytype_int16,
     136i32 as yytype_int16, 137i32 as yytype_int16, 138i32 as yytype_int16,
     139i32 as yytype_int16, 140i32 as yytype_int16, 141i32 as yytype_int16,
     142i32 as yytype_int16, 143i32 as yytype_int16, 144i32 as yytype_int16,
     145i32 as yytype_int16, 146i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 147i32 as yytype_int16,
     148i32 as yytype_int16, 149i32 as yytype_int16, 221i32 as yytype_int16,
     222i32 as yytype_int16, 223i32 as yytype_int16, 224i32 as yytype_int16,
     154i32 as yytype_int16, 155i32 as yytype_int16, 156i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 157i32 as yytype_int16,
     158i32 as yytype_int16, 159i32 as yytype_int16, 225i32 as yytype_int16,
     226i32 as yytype_int16, 227i32 as yytype_int16, 228i32 as yytype_int16,
     164i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     229i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 166i32 as yytype_int16,
     167i32 as yytype_int16, 168i32 as yytype_int16, 169i32 as yytype_int16,
     170i32 as yytype_int16, 171i32 as yytype_int16, 172i32 as yytype_int16,
     173i32 as yytype_int16, 174i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 175i32 as yytype_int16, 176i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 177i32 as yytype_int16,
     178i32 as yytype_int16, 179i32 as yytype_int16, 180i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 181i32 as yytype_int16, 182i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     183i32 as yytype_int16, 184i32 as yytype_int16, 185i32 as yytype_int16,
     186i32 as yytype_int16, 187i32 as yytype_int16, 188i32 as yytype_int16,
     189i32 as yytype_int16, 190i32 as yytype_int16, 191i32 as yytype_int16,
     192i32 as yytype_int16, 0i32 as yytype_int16, 193i32 as yytype_int16,
     194i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     195i32 as yytype_int16, 5i32 as yytype_int16, 6i32 as yytype_int16,
     7i32 as yytype_int16, 8i32 as yytype_int16, 9i32 as yytype_int16,
     10i32 as yytype_int16, 11i32 as yytype_int16, 12i32 as yytype_int16,
     13i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 15i32 as yytype_int16,
     0i32 as yytype_int16, 103i32 as yytype_int16, 104i32 as yytype_int16,
     18i32 as yytype_int16, 19i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 105i32 as yytype_int16, 106i32 as yytype_int16,
     107i32 as yytype_int16, 23i32 as yytype_int16, 24i32 as yytype_int16,
     25i32 as yytype_int16, 26i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 108i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 31i32 as yytype_int16, 32i32 as yytype_int16,
     33i32 as yytype_int16, 34i32 as yytype_int16, 35i32 as yytype_int16,
     36i32 as yytype_int16, 37i32 as yytype_int16, 38i32 as yytype_int16,
     39i32 as yytype_int16, 0i32 as yytype_int16, 40i32 as yytype_int16,
     41i32 as yytype_int16, 42i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 43i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 44i32 as yytype_int16, 45i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     299i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     113i32 as yytype_int16, 50i32 as yytype_int16, 0i32 as yytype_int16,
     51i32 as yytype_int16, 52i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     54i32 as yytype_int16, 0i32 as yytype_int16, 55i32 as yytype_int16,
     56i32 as yytype_int16, 57i32 as yytype_int16, 58i32 as yytype_int16,
     59i32 as yytype_int16, 60i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 61i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 5i32 as yytype_int16, 6i32 as yytype_int16,
     7i32 as yytype_int16, 8i32 as yytype_int16, 9i32 as yytype_int16,
     10i32 as yytype_int16, 11i32 as yytype_int16, 12i32 as yytype_int16,
     13i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 15i32 as yytype_int16,
     114i32 as yytype_int16, 103i32 as yytype_int16, 104i32 as yytype_int16,
     18i32 as yytype_int16, 19i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 300i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 105i32 as yytype_int16, 106i32 as yytype_int16,
     107i32 as yytype_int16, 23i32 as yytype_int16, 24i32 as yytype_int16,
     25i32 as yytype_int16, 26i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 108i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 31i32 as yytype_int16, 32i32 as yytype_int16,
     33i32 as yytype_int16, 34i32 as yytype_int16, 35i32 as yytype_int16,
     36i32 as yytype_int16, 37i32 as yytype_int16, 38i32 as yytype_int16,
     39i32 as yytype_int16, 0i32 as yytype_int16, 40i32 as yytype_int16,
     41i32 as yytype_int16, 42i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 43i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 44i32 as yytype_int16, 45i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     299i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     113i32 as yytype_int16, 50i32 as yytype_int16, 0i32 as yytype_int16,
     51i32 as yytype_int16, 52i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     54i32 as yytype_int16, 0i32 as yytype_int16, 55i32 as yytype_int16,
     56i32 as yytype_int16, 57i32 as yytype_int16, 58i32 as yytype_int16,
     59i32 as yytype_int16, 60i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 61i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 5i32 as yytype_int16, 6i32 as yytype_int16,
     7i32 as yytype_int16, 8i32 as yytype_int16, 9i32 as yytype_int16,
     10i32 as yytype_int16, 11i32 as yytype_int16, 12i32 as yytype_int16,
     13i32 as yytype_int16, 14i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 15i32 as yytype_int16,
     114i32 as yytype_int16, 16i32 as yytype_int16, 17i32 as yytype_int16,
     18i32 as yytype_int16, 19i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 552i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 20i32 as yytype_int16, 21i32 as yytype_int16,
     22i32 as yytype_int16, 23i32 as yytype_int16, 24i32 as yytype_int16,
     25i32 as yytype_int16, 26i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 27i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 28i32 as yytype_int16, 29i32 as yytype_int16,
     30i32 as yytype_int16, 31i32 as yytype_int16, 32i32 as yytype_int16,
     33i32 as yytype_int16, 34i32 as yytype_int16, 35i32 as yytype_int16,
     36i32 as yytype_int16, 37i32 as yytype_int16, 38i32 as yytype_int16,
     39i32 as yytype_int16, 0i32 as yytype_int16, 40i32 as yytype_int16,
     41i32 as yytype_int16, 42i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 43i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 44i32 as yytype_int16, 45i32 as yytype_int16,
     0i32 as yytype_int16, 46i32 as yytype_int16, 47i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     48i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     49i32 as yytype_int16, 50i32 as yytype_int16, 0i32 as yytype_int16,
     51i32 as yytype_int16, 52i32 as yytype_int16, 0i32 as yytype_int16,
     53i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     54i32 as yytype_int16, 0i32 as yytype_int16, 55i32 as yytype_int16,
     56i32 as yytype_int16, 57i32 as yytype_int16, 58i32 as yytype_int16,
     59i32 as yytype_int16, 60i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 61i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 5i32 as yytype_int16,
     6i32 as yytype_int16, 7i32 as yytype_int16, 8i32 as yytype_int16,
     9i32 as yytype_int16, 10i32 as yytype_int16, 11i32 as yytype_int16,
     12i32 as yytype_int16, 13i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     62i32 as yytype_int16, 63i32 as yytype_int16, 64i32 as yytype_int16,
     15i32 as yytype_int16, 0i32 as yytype_int16, 103i32 as yytype_int16,
     104i32 as yytype_int16, 18i32 as yytype_int16, 19i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 105i32 as yytype_int16,
     106i32 as yytype_int16, 107i32 as yytype_int16, 23i32 as yytype_int16,
     24i32 as yytype_int16, 25i32 as yytype_int16, 26i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 108i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 31i32 as yytype_int16,
     32i32 as yytype_int16, 33i32 as yytype_int16, 248i32 as yytype_int16,
     35i32 as yytype_int16, 36i32 as yytype_int16, 37i32 as yytype_int16,
     38i32 as yytype_int16, 39i32 as yytype_int16, 0i32 as yytype_int16,
     40i32 as yytype_int16, 41i32 as yytype_int16, 42i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 43i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 44i32 as yytype_int16,
     45i32 as yytype_int16, 0i32 as yytype_int16, 46i32 as yytype_int16,
     47i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 203i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 113i32 as yytype_int16, 50i32 as yytype_int16,
     0i32 as yytype_int16, 51i32 as yytype_int16, 52i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 250i32 as yytype_int16,
     -256i32 as yytype_int16, 54i32 as yytype_int16, 0i32 as yytype_int16,
     55i32 as yytype_int16, 56i32 as yytype_int16, 57i32 as yytype_int16,
     58i32 as yytype_int16, 59i32 as yytype_int16, 60i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 61i32 as yytype_int16,
     235i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     236i32 as yytype_int16, 237i32 as yytype_int16, 0i32 as yytype_int16,
     5i32 as yytype_int16, 6i32 as yytype_int16, 7i32 as yytype_int16,
     8i32 as yytype_int16, 9i32 as yytype_int16, 10i32 as yytype_int16,
     11i32 as yytype_int16, 12i32 as yytype_int16, 13i32 as yytype_int16,
     14i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 62i32 as yytype_int16, 252i32 as yytype_int16,
     64i32 as yytype_int16, 15i32 as yytype_int16, 0i32 as yytype_int16,
     16i32 as yytype_int16, 17i32 as yytype_int16, 18i32 as yytype_int16,
     19i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     20i32 as yytype_int16, 21i32 as yytype_int16, 22i32 as yytype_int16,
     23i32 as yytype_int16, 24i32 as yytype_int16, 25i32 as yytype_int16,
     26i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     27i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     28i32 as yytype_int16, 0i32 as yytype_int16, 30i32 as yytype_int16,
     31i32 as yytype_int16, 32i32 as yytype_int16, 33i32 as yytype_int16,
     34i32 as yytype_int16, 35i32 as yytype_int16, 36i32 as yytype_int16,
     37i32 as yytype_int16, 38i32 as yytype_int16, 39i32 as yytype_int16,
     0i32 as yytype_int16, 40i32 as yytype_int16, 41i32 as yytype_int16,
     42i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     43i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     44i32 as yytype_int16, 45i32 as yytype_int16, 0i32 as yytype_int16,
     46i32 as yytype_int16, 47i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 48i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 49i32 as yytype_int16,
     50i32 as yytype_int16, 0i32 as yytype_int16, 51i32 as yytype_int16,
     52i32 as yytype_int16, 0i32 as yytype_int16, 53i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 54i32 as yytype_int16,
     0i32 as yytype_int16, 55i32 as yytype_int16, 56i32 as yytype_int16,
     57i32 as yytype_int16, 58i32 as yytype_int16, 59i32 as yytype_int16,
     60i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     61i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 5i32 as yytype_int16, 6i32 as yytype_int16,
     7i32 as yytype_int16, 8i32 as yytype_int16, 9i32 as yytype_int16,
     10i32 as yytype_int16, 11i32 as yytype_int16, 12i32 as yytype_int16,
     13i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 62i32 as yytype_int16,
     63i32 as yytype_int16, 64i32 as yytype_int16, 15i32 as yytype_int16,
     0i32 as yytype_int16, 103i32 as yytype_int16, 104i32 as yytype_int16,
     18i32 as yytype_int16, 19i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 105i32 as yytype_int16, 106i32 as yytype_int16,
     107i32 as yytype_int16, 23i32 as yytype_int16, 24i32 as yytype_int16,
     25i32 as yytype_int16, 26i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 108i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 31i32 as yytype_int16, 32i32 as yytype_int16,
     33i32 as yytype_int16, 248i32 as yytype_int16, 35i32 as yytype_int16,
     36i32 as yytype_int16, 37i32 as yytype_int16, 38i32 as yytype_int16,
     39i32 as yytype_int16, 0i32 as yytype_int16, 40i32 as yytype_int16,
     41i32 as yytype_int16, 42i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 43i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 44i32 as yytype_int16, 45i32 as yytype_int16,
     0i32 as yytype_int16, 46i32 as yytype_int16, 47i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     203i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     113i32 as yytype_int16, 50i32 as yytype_int16, 0i32 as yytype_int16,
     51i32 as yytype_int16, 52i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 250i32 as yytype_int16, 0i32 as yytype_int16,
     54i32 as yytype_int16, 0i32 as yytype_int16, 55i32 as yytype_int16,
     56i32 as yytype_int16, 57i32 as yytype_int16, 58i32 as yytype_int16,
     59i32 as yytype_int16, 60i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 61i32 as yytype_int16, 235i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 236i32 as yytype_int16,
     237i32 as yytype_int16, 0i32 as yytype_int16, 5i32 as yytype_int16,
     6i32 as yytype_int16, 7i32 as yytype_int16, 8i32 as yytype_int16,
     9i32 as yytype_int16, 10i32 as yytype_int16, 11i32 as yytype_int16,
     12i32 as yytype_int16, 13i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     62i32 as yytype_int16, 252i32 as yytype_int16, 64i32 as yytype_int16,
     15i32 as yytype_int16, 0i32 as yytype_int16, 16i32 as yytype_int16,
     17i32 as yytype_int16, 18i32 as yytype_int16, 19i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 20i32 as yytype_int16,
     21i32 as yytype_int16, 22i32 as yytype_int16, 23i32 as yytype_int16,
     24i32 as yytype_int16, 25i32 as yytype_int16, 26i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 108i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 31i32 as yytype_int16,
     32i32 as yytype_int16, 33i32 as yytype_int16, 248i32 as yytype_int16,
     35i32 as yytype_int16, 36i32 as yytype_int16, 37i32 as yytype_int16,
     38i32 as yytype_int16, 39i32 as yytype_int16, 0i32 as yytype_int16,
     40i32 as yytype_int16, 41i32 as yytype_int16, 42i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 43i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 44i32 as yytype_int16,
     45i32 as yytype_int16, 0i32 as yytype_int16, 46i32 as yytype_int16,
     47i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 203i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 113i32 as yytype_int16, 50i32 as yytype_int16,
     0i32 as yytype_int16, 51i32 as yytype_int16, 52i32 as yytype_int16,
     0i32 as yytype_int16, 249i32 as yytype_int16, 250i32 as yytype_int16,
     251i32 as yytype_int16, 54i32 as yytype_int16, 0i32 as yytype_int16,
     55i32 as yytype_int16, 56i32 as yytype_int16, 57i32 as yytype_int16,
     58i32 as yytype_int16, 59i32 as yytype_int16, 60i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 61i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     5i32 as yytype_int16, 6i32 as yytype_int16, 7i32 as yytype_int16,
     8i32 as yytype_int16, 9i32 as yytype_int16, 10i32 as yytype_int16,
     11i32 as yytype_int16, 12i32 as yytype_int16, 13i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 62i32 as yytype_int16, 252i32 as yytype_int16,
     64i32 as yytype_int16, 15i32 as yytype_int16, 0i32 as yytype_int16,
     103i32 as yytype_int16, 104i32 as yytype_int16, 18i32 as yytype_int16,
     19i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     105i32 as yytype_int16, 106i32 as yytype_int16, 107i32 as yytype_int16,
     23i32 as yytype_int16, 24i32 as yytype_int16, 25i32 as yytype_int16,
     26i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     108i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     31i32 as yytype_int16, 32i32 as yytype_int16, 33i32 as yytype_int16,
     248i32 as yytype_int16, 35i32 as yytype_int16, 36i32 as yytype_int16,
     37i32 as yytype_int16, 38i32 as yytype_int16, 39i32 as yytype_int16,
     0i32 as yytype_int16, 40i32 as yytype_int16, 41i32 as yytype_int16,
     42i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     43i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     44i32 as yytype_int16, 45i32 as yytype_int16, 0i32 as yytype_int16,
     46i32 as yytype_int16, 47i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 203i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 113i32 as yytype_int16,
     50i32 as yytype_int16, 0i32 as yytype_int16, 51i32 as yytype_int16,
     52i32 as yytype_int16, 0i32 as yytype_int16, 660i32 as yytype_int16,
     250i32 as yytype_int16, 251i32 as yytype_int16, 54i32 as yytype_int16,
     0i32 as yytype_int16, 55i32 as yytype_int16, 56i32 as yytype_int16,
     57i32 as yytype_int16, 58i32 as yytype_int16, 59i32 as yytype_int16,
     60i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     61i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 5i32 as yytype_int16, 6i32 as yytype_int16,
     7i32 as yytype_int16, 8i32 as yytype_int16, 9i32 as yytype_int16,
     10i32 as yytype_int16, 11i32 as yytype_int16, 12i32 as yytype_int16,
     13i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 62i32 as yytype_int16,
     252i32 as yytype_int16, 64i32 as yytype_int16, 15i32 as yytype_int16,
     0i32 as yytype_int16, 103i32 as yytype_int16, 104i32 as yytype_int16,
     18i32 as yytype_int16, 19i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 105i32 as yytype_int16, 106i32 as yytype_int16,
     107i32 as yytype_int16, 23i32 as yytype_int16, 24i32 as yytype_int16,
     25i32 as yytype_int16, 26i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 108i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 31i32 as yytype_int16, 32i32 as yytype_int16,
     33i32 as yytype_int16, 248i32 as yytype_int16, 35i32 as yytype_int16,
     36i32 as yytype_int16, 37i32 as yytype_int16, 38i32 as yytype_int16,
     39i32 as yytype_int16, 0i32 as yytype_int16, 40i32 as yytype_int16,
     41i32 as yytype_int16, 42i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 43i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 44i32 as yytype_int16, 45i32 as yytype_int16,
     0i32 as yytype_int16, 46i32 as yytype_int16, 47i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     203i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     113i32 as yytype_int16, 50i32 as yytype_int16, 0i32 as yytype_int16,
     51i32 as yytype_int16, 52i32 as yytype_int16, 0i32 as yytype_int16,
     249i32 as yytype_int16, 250i32 as yytype_int16, 0i32 as yytype_int16,
     54i32 as yytype_int16, 0i32 as yytype_int16, 55i32 as yytype_int16,
     56i32 as yytype_int16, 57i32 as yytype_int16, 58i32 as yytype_int16,
     59i32 as yytype_int16, 60i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 61i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 5i32 as yytype_int16,
     6i32 as yytype_int16, 7i32 as yytype_int16, 8i32 as yytype_int16,
     9i32 as yytype_int16, 10i32 as yytype_int16, 11i32 as yytype_int16,
     12i32 as yytype_int16, 13i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     62i32 as yytype_int16, 252i32 as yytype_int16, 64i32 as yytype_int16,
     15i32 as yytype_int16, 0i32 as yytype_int16, 103i32 as yytype_int16,
     104i32 as yytype_int16, 18i32 as yytype_int16, 19i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 105i32 as yytype_int16,
     106i32 as yytype_int16, 107i32 as yytype_int16, 23i32 as yytype_int16,
     24i32 as yytype_int16, 25i32 as yytype_int16, 26i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 108i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 31i32 as yytype_int16,
     32i32 as yytype_int16, 33i32 as yytype_int16, 248i32 as yytype_int16,
     35i32 as yytype_int16, 36i32 as yytype_int16, 37i32 as yytype_int16,
     38i32 as yytype_int16, 39i32 as yytype_int16, 0i32 as yytype_int16,
     40i32 as yytype_int16, 41i32 as yytype_int16, 42i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 43i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 44i32 as yytype_int16,
     45i32 as yytype_int16, 0i32 as yytype_int16, 46i32 as yytype_int16,
     47i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 203i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 113i32 as yytype_int16, 50i32 as yytype_int16,
     0i32 as yytype_int16, 51i32 as yytype_int16, 52i32 as yytype_int16,
     0i32 as yytype_int16, 660i32 as yytype_int16, 250i32 as yytype_int16,
     0i32 as yytype_int16, 54i32 as yytype_int16, 0i32 as yytype_int16,
     55i32 as yytype_int16, 56i32 as yytype_int16, 57i32 as yytype_int16,
     58i32 as yytype_int16, 59i32 as yytype_int16, 60i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 61i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     5i32 as yytype_int16, 6i32 as yytype_int16, 7i32 as yytype_int16,
     8i32 as yytype_int16, 9i32 as yytype_int16, 10i32 as yytype_int16,
     11i32 as yytype_int16, 12i32 as yytype_int16, 13i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 62i32 as yytype_int16, 252i32 as yytype_int16,
     64i32 as yytype_int16, 15i32 as yytype_int16, 0i32 as yytype_int16,
     103i32 as yytype_int16, 104i32 as yytype_int16, 18i32 as yytype_int16,
     19i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     105i32 as yytype_int16, 106i32 as yytype_int16, 107i32 as yytype_int16,
     23i32 as yytype_int16, 24i32 as yytype_int16, 25i32 as yytype_int16,
     26i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     108i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     31i32 as yytype_int16, 32i32 as yytype_int16, 33i32 as yytype_int16,
     248i32 as yytype_int16, 35i32 as yytype_int16, 36i32 as yytype_int16,
     37i32 as yytype_int16, 38i32 as yytype_int16, 39i32 as yytype_int16,
     0i32 as yytype_int16, 40i32 as yytype_int16, 41i32 as yytype_int16,
     42i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     43i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     44i32 as yytype_int16, 45i32 as yytype_int16, 0i32 as yytype_int16,
     46i32 as yytype_int16, 47i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 203i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 113i32 as yytype_int16,
     50i32 as yytype_int16, 0i32 as yytype_int16, 51i32 as yytype_int16,
     52i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     250i32 as yytype_int16, 0i32 as yytype_int16, 54i32 as yytype_int16,
     0i32 as yytype_int16, 55i32 as yytype_int16, 56i32 as yytype_int16,
     57i32 as yytype_int16, 58i32 as yytype_int16, 59i32 as yytype_int16,
     60i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     61i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 5i32 as yytype_int16, 6i32 as yytype_int16,
     7i32 as yytype_int16, 8i32 as yytype_int16, 9i32 as yytype_int16,
     10i32 as yytype_int16, 11i32 as yytype_int16, 12i32 as yytype_int16,
     13i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 62i32 as yytype_int16,
     252i32 as yytype_int16, 64i32 as yytype_int16, 15i32 as yytype_int16,
     0i32 as yytype_int16, 16i32 as yytype_int16, 17i32 as yytype_int16,
     18i32 as yytype_int16, 19i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 20i32 as yytype_int16, 21i32 as yytype_int16,
     22i32 as yytype_int16, 23i32 as yytype_int16, 24i32 as yytype_int16,
     25i32 as yytype_int16, 26i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 108i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 31i32 as yytype_int16, 32i32 as yytype_int16,
     33i32 as yytype_int16, 34i32 as yytype_int16, 35i32 as yytype_int16,
     36i32 as yytype_int16, 37i32 as yytype_int16, 38i32 as yytype_int16,
     39i32 as yytype_int16, 0i32 as yytype_int16, 40i32 as yytype_int16,
     41i32 as yytype_int16, 42i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 43i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 44i32 as yytype_int16, 45i32 as yytype_int16,
     0i32 as yytype_int16, 46i32 as yytype_int16, 47i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     203i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     113i32 as yytype_int16, 50i32 as yytype_int16, 0i32 as yytype_int16,
     51i32 as yytype_int16, 52i32 as yytype_int16, 0i32 as yytype_int16,
     546i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     54i32 as yytype_int16, 0i32 as yytype_int16, 55i32 as yytype_int16,
     56i32 as yytype_int16, 57i32 as yytype_int16, 58i32 as yytype_int16,
     59i32 as yytype_int16, 60i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 61i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 5i32 as yytype_int16,
     6i32 as yytype_int16, 7i32 as yytype_int16, 8i32 as yytype_int16,
     9i32 as yytype_int16, 10i32 as yytype_int16, 11i32 as yytype_int16,
     12i32 as yytype_int16, 13i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     62i32 as yytype_int16, 252i32 as yytype_int16, 64i32 as yytype_int16,
     15i32 as yytype_int16, 0i32 as yytype_int16, 103i32 as yytype_int16,
     104i32 as yytype_int16, 18i32 as yytype_int16, 19i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 105i32 as yytype_int16,
     106i32 as yytype_int16, 107i32 as yytype_int16, 23i32 as yytype_int16,
     24i32 as yytype_int16, 25i32 as yytype_int16, 26i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 108i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 31i32 as yytype_int16,
     32i32 as yytype_int16, 33i32 as yytype_int16, 34i32 as yytype_int16,
     35i32 as yytype_int16, 36i32 as yytype_int16, 37i32 as yytype_int16,
     38i32 as yytype_int16, 39i32 as yytype_int16, 0i32 as yytype_int16,
     40i32 as yytype_int16, 41i32 as yytype_int16, 42i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 43i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 44i32 as yytype_int16,
     45i32 as yytype_int16, 0i32 as yytype_int16, 46i32 as yytype_int16,
     47i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 203i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 113i32 as yytype_int16, 50i32 as yytype_int16,
     0i32 as yytype_int16, 51i32 as yytype_int16, 52i32 as yytype_int16,
     0i32 as yytype_int16, 249i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 54i32 as yytype_int16, 0i32 as yytype_int16,
     55i32 as yytype_int16, 56i32 as yytype_int16, 57i32 as yytype_int16,
     58i32 as yytype_int16, 59i32 as yytype_int16, 60i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 61i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     5i32 as yytype_int16, 6i32 as yytype_int16, 7i32 as yytype_int16,
     8i32 as yytype_int16, 9i32 as yytype_int16, 10i32 as yytype_int16,
     11i32 as yytype_int16, 12i32 as yytype_int16, 13i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 62i32 as yytype_int16, 252i32 as yytype_int16,
     64i32 as yytype_int16, 15i32 as yytype_int16, 0i32 as yytype_int16,
     103i32 as yytype_int16, 104i32 as yytype_int16, 18i32 as yytype_int16,
     19i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     105i32 as yytype_int16, 106i32 as yytype_int16, 107i32 as yytype_int16,
     23i32 as yytype_int16, 24i32 as yytype_int16, 25i32 as yytype_int16,
     26i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     108i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     31i32 as yytype_int16, 32i32 as yytype_int16, 33i32 as yytype_int16,
     34i32 as yytype_int16, 35i32 as yytype_int16, 36i32 as yytype_int16,
     37i32 as yytype_int16, 38i32 as yytype_int16, 39i32 as yytype_int16,
     0i32 as yytype_int16, 40i32 as yytype_int16, 41i32 as yytype_int16,
     42i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     43i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     44i32 as yytype_int16, 45i32 as yytype_int16, 0i32 as yytype_int16,
     46i32 as yytype_int16, 47i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 203i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 113i32 as yytype_int16,
     50i32 as yytype_int16, 0i32 as yytype_int16, 51i32 as yytype_int16,
     52i32 as yytype_int16, 0i32 as yytype_int16, 546i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 54i32 as yytype_int16,
     0i32 as yytype_int16, 55i32 as yytype_int16, 56i32 as yytype_int16,
     57i32 as yytype_int16, 58i32 as yytype_int16, 59i32 as yytype_int16,
     60i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     61i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 5i32 as yytype_int16, 6i32 as yytype_int16,
     7i32 as yytype_int16, 8i32 as yytype_int16, 9i32 as yytype_int16,
     10i32 as yytype_int16, 11i32 as yytype_int16, 12i32 as yytype_int16,
     13i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 62i32 as yytype_int16,
     252i32 as yytype_int16, 64i32 as yytype_int16, 15i32 as yytype_int16,
     0i32 as yytype_int16, 103i32 as yytype_int16, 104i32 as yytype_int16,
     18i32 as yytype_int16, 19i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 105i32 as yytype_int16, 106i32 as yytype_int16,
     107i32 as yytype_int16, 23i32 as yytype_int16, 24i32 as yytype_int16,
     25i32 as yytype_int16, 26i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 108i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 31i32 as yytype_int16, 32i32 as yytype_int16,
     33i32 as yytype_int16, 34i32 as yytype_int16, 35i32 as yytype_int16,
     36i32 as yytype_int16, 37i32 as yytype_int16, 38i32 as yytype_int16,
     39i32 as yytype_int16, 0i32 as yytype_int16, 40i32 as yytype_int16,
     41i32 as yytype_int16, 42i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 43i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 44i32 as yytype_int16, 45i32 as yytype_int16,
     0i32 as yytype_int16, 46i32 as yytype_int16, 47i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     203i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     113i32 as yytype_int16, 50i32 as yytype_int16, 0i32 as yytype_int16,
     51i32 as yytype_int16, 52i32 as yytype_int16, 0i32 as yytype_int16,
     824i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     54i32 as yytype_int16, 0i32 as yytype_int16, 55i32 as yytype_int16,
     56i32 as yytype_int16, 57i32 as yytype_int16, 58i32 as yytype_int16,
     59i32 as yytype_int16, 60i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 61i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 5i32 as yytype_int16,
     6i32 as yytype_int16, 7i32 as yytype_int16, 8i32 as yytype_int16,
     9i32 as yytype_int16, 10i32 as yytype_int16, 11i32 as yytype_int16,
     12i32 as yytype_int16, 13i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     62i32 as yytype_int16, 252i32 as yytype_int16, 64i32 as yytype_int16,
     15i32 as yytype_int16, 0i32 as yytype_int16, 103i32 as yytype_int16,
     104i32 as yytype_int16, 18i32 as yytype_int16, 19i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 105i32 as yytype_int16,
     106i32 as yytype_int16, 107i32 as yytype_int16, 23i32 as yytype_int16,
     24i32 as yytype_int16, 25i32 as yytype_int16, 26i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 108i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 31i32 as yytype_int16,
     32i32 as yytype_int16, 33i32 as yytype_int16, 34i32 as yytype_int16,
     35i32 as yytype_int16, 36i32 as yytype_int16, 37i32 as yytype_int16,
     38i32 as yytype_int16, 39i32 as yytype_int16, 0i32 as yytype_int16,
     40i32 as yytype_int16, 41i32 as yytype_int16, 42i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 43i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 44i32 as yytype_int16,
     45i32 as yytype_int16, 0i32 as yytype_int16, 46i32 as yytype_int16,
     47i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 203i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 113i32 as yytype_int16, 50i32 as yytype_int16,
     0i32 as yytype_int16, 51i32 as yytype_int16, 52i32 as yytype_int16,
     0i32 as yytype_int16, 660i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 54i32 as yytype_int16, 0i32 as yytype_int16,
     55i32 as yytype_int16, 56i32 as yytype_int16, 57i32 as yytype_int16,
     58i32 as yytype_int16, 59i32 as yytype_int16, 60i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 61i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     5i32 as yytype_int16, 6i32 as yytype_int16, 7i32 as yytype_int16,
     8i32 as yytype_int16, 9i32 as yytype_int16, 10i32 as yytype_int16,
     11i32 as yytype_int16, 12i32 as yytype_int16, 13i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 62i32 as yytype_int16, 252i32 as yytype_int16,
     64i32 as yytype_int16, 15i32 as yytype_int16, 0i32 as yytype_int16,
     16i32 as yytype_int16, 17i32 as yytype_int16, 18i32 as yytype_int16,
     19i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     20i32 as yytype_int16, 21i32 as yytype_int16, 22i32 as yytype_int16,
     23i32 as yytype_int16, 24i32 as yytype_int16, 25i32 as yytype_int16,
     26i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     27i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     31i32 as yytype_int16, 32i32 as yytype_int16, 33i32 as yytype_int16,
     34i32 as yytype_int16, 35i32 as yytype_int16, 36i32 as yytype_int16,
     37i32 as yytype_int16, 38i32 as yytype_int16, 39i32 as yytype_int16,
     0i32 as yytype_int16, 40i32 as yytype_int16, 41i32 as yytype_int16,
     42i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     43i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     44i32 as yytype_int16, 45i32 as yytype_int16, 0i32 as yytype_int16,
     46i32 as yytype_int16, 47i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 203i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 113i32 as yytype_int16,
     50i32 as yytype_int16, 0i32 as yytype_int16, 51i32 as yytype_int16,
     52i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 54i32 as yytype_int16,
     0i32 as yytype_int16, 55i32 as yytype_int16, 56i32 as yytype_int16,
     57i32 as yytype_int16, 58i32 as yytype_int16, 59i32 as yytype_int16,
     60i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     61i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 5i32 as yytype_int16, 6i32 as yytype_int16,
     7i32 as yytype_int16, 8i32 as yytype_int16, 9i32 as yytype_int16,
     10i32 as yytype_int16, 11i32 as yytype_int16, 12i32 as yytype_int16,
     13i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 62i32 as yytype_int16,
     63i32 as yytype_int16, 64i32 as yytype_int16, 15i32 as yytype_int16,
     0i32 as yytype_int16, 103i32 as yytype_int16, 104i32 as yytype_int16,
     18i32 as yytype_int16, 19i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 105i32 as yytype_int16, 106i32 as yytype_int16,
     107i32 as yytype_int16, 23i32 as yytype_int16, 24i32 as yytype_int16,
     25i32 as yytype_int16, 26i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 108i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 31i32 as yytype_int16, 32i32 as yytype_int16,
     33i32 as yytype_int16, 34i32 as yytype_int16, 35i32 as yytype_int16,
     36i32 as yytype_int16, 37i32 as yytype_int16, 38i32 as yytype_int16,
     39i32 as yytype_int16, 0i32 as yytype_int16, 40i32 as yytype_int16,
     41i32 as yytype_int16, 42i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 43i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 44i32 as yytype_int16, 45i32 as yytype_int16,
     0i32 as yytype_int16, 46i32 as yytype_int16, 47i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     203i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     113i32 as yytype_int16, 50i32 as yytype_int16, 0i32 as yytype_int16,
     51i32 as yytype_int16, 52i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     54i32 as yytype_int16, 0i32 as yytype_int16, 55i32 as yytype_int16,
     56i32 as yytype_int16, 57i32 as yytype_int16, 58i32 as yytype_int16,
     59i32 as yytype_int16, 60i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 61i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 5i32 as yytype_int16,
     6i32 as yytype_int16, 7i32 as yytype_int16, 8i32 as yytype_int16,
     9i32 as yytype_int16, 10i32 as yytype_int16, 11i32 as yytype_int16,
     12i32 as yytype_int16, 13i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     62i32 as yytype_int16, 252i32 as yytype_int16, 64i32 as yytype_int16,
     15i32 as yytype_int16, 0i32 as yytype_int16, 16i32 as yytype_int16,
     17i32 as yytype_int16, 18i32 as yytype_int16, 19i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 20i32 as yytype_int16,
     21i32 as yytype_int16, 22i32 as yytype_int16, 23i32 as yytype_int16,
     24i32 as yytype_int16, 25i32 as yytype_int16, 26i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 108i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 31i32 as yytype_int16,
     32i32 as yytype_int16, 33i32 as yytype_int16, 34i32 as yytype_int16,
     35i32 as yytype_int16, 36i32 as yytype_int16, 37i32 as yytype_int16,
     38i32 as yytype_int16, 39i32 as yytype_int16, 0i32 as yytype_int16,
     40i32 as yytype_int16, 41i32 as yytype_int16, 42i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 43i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 44i32 as yytype_int16,
     45i32 as yytype_int16, 0i32 as yytype_int16, 46i32 as yytype_int16,
     47i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 203i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 113i32 as yytype_int16, 50i32 as yytype_int16,
     0i32 as yytype_int16, 51i32 as yytype_int16, 52i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 54i32 as yytype_int16, 0i32 as yytype_int16,
     55i32 as yytype_int16, 56i32 as yytype_int16, 57i32 as yytype_int16,
     58i32 as yytype_int16, 59i32 as yytype_int16, 60i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 61i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     5i32 as yytype_int16, 6i32 as yytype_int16, 7i32 as yytype_int16,
     8i32 as yytype_int16, 9i32 as yytype_int16, 10i32 as yytype_int16,
     11i32 as yytype_int16, 12i32 as yytype_int16, 13i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 62i32 as yytype_int16, 252i32 as yytype_int16,
     64i32 as yytype_int16, 15i32 as yytype_int16, 0i32 as yytype_int16,
     103i32 as yytype_int16, 104i32 as yytype_int16, 18i32 as yytype_int16,
     19i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     105i32 as yytype_int16, 106i32 as yytype_int16, 107i32 as yytype_int16,
     23i32 as yytype_int16, 24i32 as yytype_int16, 25i32 as yytype_int16,
     26i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     108i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     31i32 as yytype_int16, 32i32 as yytype_int16, 33i32 as yytype_int16,
     109i32 as yytype_int16, 35i32 as yytype_int16, 36i32 as yytype_int16,
     37i32 as yytype_int16, 110i32 as yytype_int16, 39i32 as yytype_int16,
     0i32 as yytype_int16, 40i32 as yytype_int16, 41i32 as yytype_int16,
     42i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     43i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     44i32 as yytype_int16, 45i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 111i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 112i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 113i32 as yytype_int16,
     50i32 as yytype_int16, 0i32 as yytype_int16, 51i32 as yytype_int16,
     52i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 54i32 as yytype_int16,
     0i32 as yytype_int16, 55i32 as yytype_int16, 56i32 as yytype_int16,
     57i32 as yytype_int16, 58i32 as yytype_int16, 59i32 as yytype_int16,
     60i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     61i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     5i32 as yytype_int16, 6i32 as yytype_int16, 7i32 as yytype_int16,
     8i32 as yytype_int16, 9i32 as yytype_int16, 10i32 as yytype_int16,
     11i32 as yytype_int16, 12i32 as yytype_int16, 13i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 15i32 as yytype_int16, 114i32 as yytype_int16,
     103i32 as yytype_int16, 104i32 as yytype_int16, 18i32 as yytype_int16,
     19i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     105i32 as yytype_int16, 106i32 as yytype_int16, 107i32 as yytype_int16,
     23i32 as yytype_int16, 24i32 as yytype_int16, 25i32 as yytype_int16,
     26i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     108i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     31i32 as yytype_int16, 32i32 as yytype_int16, 33i32 as yytype_int16,
     34i32 as yytype_int16, 35i32 as yytype_int16, 36i32 as yytype_int16,
     37i32 as yytype_int16, 38i32 as yytype_int16, 39i32 as yytype_int16,
     0i32 as yytype_int16, 40i32 as yytype_int16, 41i32 as yytype_int16,
     42i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     43i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     44i32 as yytype_int16, 45i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 214i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 49i32 as yytype_int16,
     50i32 as yytype_int16, 0i32 as yytype_int16, 51i32 as yytype_int16,
     52i32 as yytype_int16, 0i32 as yytype_int16, 53i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 54i32 as yytype_int16,
     0i32 as yytype_int16, 55i32 as yytype_int16, 56i32 as yytype_int16,
     57i32 as yytype_int16, 58i32 as yytype_int16, 59i32 as yytype_int16,
     60i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     61i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     5i32 as yytype_int16, 6i32 as yytype_int16, 7i32 as yytype_int16,
     8i32 as yytype_int16, 9i32 as yytype_int16, 10i32 as yytype_int16,
     11i32 as yytype_int16, 12i32 as yytype_int16, 13i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 15i32 as yytype_int16, 114i32 as yytype_int16,
     103i32 as yytype_int16, 104i32 as yytype_int16, 18i32 as yytype_int16,
     19i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     105i32 as yytype_int16, 106i32 as yytype_int16, 107i32 as yytype_int16,
     23i32 as yytype_int16, 24i32 as yytype_int16, 25i32 as yytype_int16,
     26i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     108i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     31i32 as yytype_int16, 32i32 as yytype_int16, 33i32 as yytype_int16,
     34i32 as yytype_int16, 35i32 as yytype_int16, 36i32 as yytype_int16,
     37i32 as yytype_int16, 38i32 as yytype_int16, 39i32 as yytype_int16,
     0i32 as yytype_int16, 40i32 as yytype_int16, 41i32 as yytype_int16,
     42i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     43i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     44i32 as yytype_int16, 45i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 299i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 346i32 as yytype_int16,
     50i32 as yytype_int16, 0i32 as yytype_int16, 51i32 as yytype_int16,
     52i32 as yytype_int16, 0i32 as yytype_int16, 347i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 54i32 as yytype_int16,
     0i32 as yytype_int16, 55i32 as yytype_int16, 56i32 as yytype_int16,
     57i32 as yytype_int16, 58i32 as yytype_int16, 59i32 as yytype_int16,
     60i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     61i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     5i32 as yytype_int16, 6i32 as yytype_int16, 7i32 as yytype_int16,
     8i32 as yytype_int16, 9i32 as yytype_int16, 10i32 as yytype_int16,
     11i32 as yytype_int16, 12i32 as yytype_int16, 13i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 15i32 as yytype_int16, 114i32 as yytype_int16,
     103i32 as yytype_int16, 104i32 as yytype_int16, 18i32 as yytype_int16,
     19i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     105i32 as yytype_int16, 106i32 as yytype_int16, 107i32 as yytype_int16,
     23i32 as yytype_int16, 24i32 as yytype_int16, 25i32 as yytype_int16,
     26i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     108i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     31i32 as yytype_int16, 32i32 as yytype_int16, 33i32 as yytype_int16,
     109i32 as yytype_int16, 35i32 as yytype_int16, 36i32 as yytype_int16,
     37i32 as yytype_int16, 110i32 as yytype_int16, 39i32 as yytype_int16,
     0i32 as yytype_int16, 40i32 as yytype_int16, 41i32 as yytype_int16,
     42i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     43i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     44i32 as yytype_int16, 45i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 112i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 113i32 as yytype_int16,
     50i32 as yytype_int16, 0i32 as yytype_int16, 51i32 as yytype_int16,
     52i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 54i32 as yytype_int16,
     0i32 as yytype_int16, 55i32 as yytype_int16, 56i32 as yytype_int16,
     57i32 as yytype_int16, 58i32 as yytype_int16, 59i32 as yytype_int16,
     60i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     61i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     5i32 as yytype_int16, 6i32 as yytype_int16, 7i32 as yytype_int16,
     8i32 as yytype_int16, 9i32 as yytype_int16, 10i32 as yytype_int16,
     11i32 as yytype_int16, 12i32 as yytype_int16, 13i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 15i32 as yytype_int16, 114i32 as yytype_int16,
     103i32 as yytype_int16, 104i32 as yytype_int16, 18i32 as yytype_int16,
     19i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     105i32 as yytype_int16, 106i32 as yytype_int16, 107i32 as yytype_int16,
     23i32 as yytype_int16, 24i32 as yytype_int16, 25i32 as yytype_int16,
     26i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     108i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     31i32 as yytype_int16, 32i32 as yytype_int16, 33i32 as yytype_int16,
     34i32 as yytype_int16, 35i32 as yytype_int16, 36i32 as yytype_int16,
     37i32 as yytype_int16, 38i32 as yytype_int16, 39i32 as yytype_int16,
     0i32 as yytype_int16, 40i32 as yytype_int16, 41i32 as yytype_int16,
     42i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     43i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     44i32 as yytype_int16, 45i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 299i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 346i32 as yytype_int16,
     50i32 as yytype_int16, 0i32 as yytype_int16, 51i32 as yytype_int16,
     52i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 54i32 as yytype_int16,
     0i32 as yytype_int16, 55i32 as yytype_int16, 56i32 as yytype_int16,
     57i32 as yytype_int16, 58i32 as yytype_int16, 59i32 as yytype_int16,
     60i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     61i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     5i32 as yytype_int16, 6i32 as yytype_int16, 7i32 as yytype_int16,
     8i32 as yytype_int16, 9i32 as yytype_int16, 10i32 as yytype_int16,
     11i32 as yytype_int16, 12i32 as yytype_int16, 13i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 15i32 as yytype_int16, 114i32 as yytype_int16,
     103i32 as yytype_int16, 104i32 as yytype_int16, 18i32 as yytype_int16,
     19i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     105i32 as yytype_int16, 106i32 as yytype_int16, 107i32 as yytype_int16,
     23i32 as yytype_int16, 24i32 as yytype_int16, 25i32 as yytype_int16,
     26i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     108i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     31i32 as yytype_int16, 32i32 as yytype_int16, 33i32 as yytype_int16,
     34i32 as yytype_int16, 35i32 as yytype_int16, 36i32 as yytype_int16,
     37i32 as yytype_int16, 38i32 as yytype_int16, 39i32 as yytype_int16,
     0i32 as yytype_int16, 40i32 as yytype_int16, 41i32 as yytype_int16,
     42i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     43i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     44i32 as yytype_int16, 45i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 897i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 113i32 as yytype_int16,
     50i32 as yytype_int16, 0i32 as yytype_int16, 51i32 as yytype_int16,
     52i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 54i32 as yytype_int16,
     0i32 as yytype_int16, 55i32 as yytype_int16, 56i32 as yytype_int16,
     57i32 as yytype_int16, 58i32 as yytype_int16, 59i32 as yytype_int16,
     60i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     61i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     5i32 as yytype_int16, 6i32 as yytype_int16, 7i32 as yytype_int16,
     8i32 as yytype_int16, 9i32 as yytype_int16, 10i32 as yytype_int16,
     11i32 as yytype_int16, 12i32 as yytype_int16, 13i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 15i32 as yytype_int16, 114i32 as yytype_int16,
     103i32 as yytype_int16, 104i32 as yytype_int16, 18i32 as yytype_int16,
     19i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     105i32 as yytype_int16, 106i32 as yytype_int16, 107i32 as yytype_int16,
     23i32 as yytype_int16, 24i32 as yytype_int16, 25i32 as yytype_int16,
     26i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     108i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     31i32 as yytype_int16, 32i32 as yytype_int16, 33i32 as yytype_int16,
     34i32 as yytype_int16, 35i32 as yytype_int16, 36i32 as yytype_int16,
     37i32 as yytype_int16, 38i32 as yytype_int16, 39i32 as yytype_int16,
     0i32 as yytype_int16, 40i32 as yytype_int16, 41i32 as yytype_int16,
     42i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     43i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     44i32 as yytype_int16, 45i32 as yytype_int16, 0i32 as yytype_int16,
     350i32 as yytype_int16, 351i32 as yytype_int16, 352i32 as yytype_int16,
     353i32 as yytype_int16, 354i32 as yytype_int16, 355i32 as yytype_int16,
     356i32 as yytype_int16, 357i32 as yytype_int16, 358i32 as yytype_int16,
     359i32 as yytype_int16, 360i32 as yytype_int16, 361i32 as yytype_int16,
     362i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     363i32 as yytype_int16, 364i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 923i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 113i32 as yytype_int16,
     50i32 as yytype_int16, 0i32 as yytype_int16, 51i32 as yytype_int16,
     52i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 54i32 as yytype_int16,
     0i32 as yytype_int16, 55i32 as yytype_int16, 56i32 as yytype_int16,
     57i32 as yytype_int16, 58i32 as yytype_int16, 59i32 as yytype_int16,
     60i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     61i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     598i32 as yytype_int16, 599i32 as yytype_int16, 0i32 as yytype_int16,
     365i32 as yytype_int16, 600i32 as yytype_int16, 366i32 as yytype_int16,
     367i32 as yytype_int16, 368i32 as yytype_int16, 369i32 as yytype_int16,
     370i32 as yytype_int16, 371i32 as yytype_int16, 372i32 as yytype_int16,
     373i32 as yytype_int16, 374i32 as yytype_int16, 375i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 114i32 as yytype_int16,
     166i32 as yytype_int16, 167i32 as yytype_int16, 168i32 as yytype_int16,
     169i32 as yytype_int16, 170i32 as yytype_int16, 171i32 as yytype_int16,
     172i32 as yytype_int16, 173i32 as yytype_int16, 174i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 175i32 as yytype_int16,
     176i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     177i32 as yytype_int16, 178i32 as yytype_int16, 179i32 as yytype_int16,
     180i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 350i32 as yytype_int16, -588i32 as yytype_int16,
     -588i32 as yytype_int16, -588i32 as yytype_int16,
     -588i32 as yytype_int16, 355i32 as yytype_int16, 356i32 as yytype_int16,
     181i32 as yytype_int16, 182i32 as yytype_int16, -588i32 as yytype_int16,
     -588i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 363i32 as yytype_int16,
     364i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 183i32 as yytype_int16,
     184i32 as yytype_int16, 185i32 as yytype_int16, 186i32 as yytype_int16,
     187i32 as yytype_int16, 188i32 as yytype_int16, 189i32 as yytype_int16,
     190i32 as yytype_int16, 191i32 as yytype_int16, 192i32 as yytype_int16,
     0i32 as yytype_int16, 193i32 as yytype_int16, 194i32 as yytype_int16,
     619i32 as yytype_int16, 591i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 620i32 as yytype_int16, 195i32 as yytype_int16,
     263i32 as yytype_int16, 366i32 as yytype_int16, 367i32 as yytype_int16,
     368i32 as yytype_int16, 369i32 as yytype_int16, 370i32 as yytype_int16,
     371i32 as yytype_int16, 372i32 as yytype_int16, 373i32 as yytype_int16,
     374i32 as yytype_int16, 375i32 as yytype_int16, 0i32 as yytype_int16,
     166i32 as yytype_int16, 167i32 as yytype_int16, 168i32 as yytype_int16,
     169i32 as yytype_int16, 170i32 as yytype_int16, 171i32 as yytype_int16,
     172i32 as yytype_int16, 173i32 as yytype_int16, 174i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 175i32 as yytype_int16,
     176i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     177i32 as yytype_int16, 178i32 as yytype_int16, 179i32 as yytype_int16,
     180i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 350i32 as yytype_int16, 351i32 as yytype_int16,
     352i32 as yytype_int16, 353i32 as yytype_int16, 354i32 as yytype_int16,
     355i32 as yytype_int16, 356i32 as yytype_int16, 181i32 as yytype_int16,
     182i32 as yytype_int16, 359i32 as yytype_int16, 360i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 363i32 as yytype_int16, 364i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 183i32 as yytype_int16, 184i32 as yytype_int16,
     185i32 as yytype_int16, 186i32 as yytype_int16, 187i32 as yytype_int16,
     188i32 as yytype_int16, 189i32 as yytype_int16, 190i32 as yytype_int16,
     191i32 as yytype_int16, 192i32 as yytype_int16, 0i32 as yytype_int16,
     193i32 as yytype_int16, 194i32 as yytype_int16, 604i32 as yytype_int16,
     599i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     605i32 as yytype_int16, 195i32 as yytype_int16, 263i32 as yytype_int16,
     366i32 as yytype_int16, 367i32 as yytype_int16, 368i32 as yytype_int16,
     369i32 as yytype_int16, 370i32 as yytype_int16, 371i32 as yytype_int16,
     372i32 as yytype_int16, 373i32 as yytype_int16, 374i32 as yytype_int16,
     375i32 as yytype_int16, 0i32 as yytype_int16, 166i32 as yytype_int16,
     167i32 as yytype_int16, 168i32 as yytype_int16, 169i32 as yytype_int16,
     170i32 as yytype_int16, 171i32 as yytype_int16, 172i32 as yytype_int16,
     173i32 as yytype_int16, 174i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 175i32 as yytype_int16, 176i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 177i32 as yytype_int16,
     178i32 as yytype_int16, 179i32 as yytype_int16, 180i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 181i32 as yytype_int16, 182i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     183i32 as yytype_int16, 184i32 as yytype_int16, 185i32 as yytype_int16,
     186i32 as yytype_int16, 187i32 as yytype_int16, 188i32 as yytype_int16,
     189i32 as yytype_int16, 190i32 as yytype_int16, 191i32 as yytype_int16,
     192i32 as yytype_int16, 0i32 as yytype_int16, 193i32 as yytype_int16,
     194i32 as yytype_int16, 635i32 as yytype_int16, 591i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 636i32 as yytype_int16,
     195i32 as yytype_int16, 263i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 166i32 as yytype_int16, 167i32 as yytype_int16,
     168i32 as yytype_int16, 169i32 as yytype_int16, 170i32 as yytype_int16,
     171i32 as yytype_int16, 172i32 as yytype_int16, 173i32 as yytype_int16,
     174i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     175i32 as yytype_int16, 176i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 177i32 as yytype_int16, 178i32 as yytype_int16,
     179i32 as yytype_int16, 180i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     181i32 as yytype_int16, 182i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 183i32 as yytype_int16,
     184i32 as yytype_int16, 185i32 as yytype_int16, 186i32 as yytype_int16,
     187i32 as yytype_int16, 188i32 as yytype_int16, 189i32 as yytype_int16,
     190i32 as yytype_int16, 191i32 as yytype_int16, 192i32 as yytype_int16,
     0i32 as yytype_int16, 193i32 as yytype_int16, 194i32 as yytype_int16,
     638i32 as yytype_int16, 599i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 639i32 as yytype_int16, 195i32 as yytype_int16,
     263i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     166i32 as yytype_int16, 167i32 as yytype_int16, 168i32 as yytype_int16,
     169i32 as yytype_int16, 170i32 as yytype_int16, 171i32 as yytype_int16,
     172i32 as yytype_int16, 173i32 as yytype_int16, 174i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 175i32 as yytype_int16,
     176i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     177i32 as yytype_int16, 178i32 as yytype_int16, 179i32 as yytype_int16,
     180i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 181i32 as yytype_int16,
     182i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 183i32 as yytype_int16, 184i32 as yytype_int16,
     185i32 as yytype_int16, 186i32 as yytype_int16, 187i32 as yytype_int16,
     188i32 as yytype_int16, 189i32 as yytype_int16, 190i32 as yytype_int16,
     191i32 as yytype_int16, 192i32 as yytype_int16, 0i32 as yytype_int16,
     193i32 as yytype_int16, 194i32 as yytype_int16, 645i32 as yytype_int16,
     591i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     646i32 as yytype_int16, 195i32 as yytype_int16, 263i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 166i32 as yytype_int16,
     167i32 as yytype_int16, 168i32 as yytype_int16, 169i32 as yytype_int16,
     170i32 as yytype_int16, 171i32 as yytype_int16, 172i32 as yytype_int16,
     173i32 as yytype_int16, 174i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 175i32 as yytype_int16, 176i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 177i32 as yytype_int16,
     178i32 as yytype_int16, 179i32 as yytype_int16, 180i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 181i32 as yytype_int16, 182i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     183i32 as yytype_int16, 184i32 as yytype_int16, 185i32 as yytype_int16,
     186i32 as yytype_int16, 187i32 as yytype_int16, 188i32 as yytype_int16,
     189i32 as yytype_int16, 190i32 as yytype_int16, 191i32 as yytype_int16,
     192i32 as yytype_int16, 0i32 as yytype_int16, 193i32 as yytype_int16,
     194i32 as yytype_int16, 648i32 as yytype_int16, 599i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 649i32 as yytype_int16,
     195i32 as yytype_int16, 263i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 166i32 as yytype_int16, 167i32 as yytype_int16,
     168i32 as yytype_int16, 169i32 as yytype_int16, 170i32 as yytype_int16,
     171i32 as yytype_int16, 172i32 as yytype_int16, 173i32 as yytype_int16,
     174i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     175i32 as yytype_int16, 176i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 177i32 as yytype_int16, 178i32 as yytype_int16,
     179i32 as yytype_int16, 180i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     181i32 as yytype_int16, 182i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 183i32 as yytype_int16,
     184i32 as yytype_int16, 185i32 as yytype_int16, 186i32 as yytype_int16,
     187i32 as yytype_int16, 188i32 as yytype_int16, 189i32 as yytype_int16,
     190i32 as yytype_int16, 191i32 as yytype_int16, 192i32 as yytype_int16,
     0i32 as yytype_int16, 193i32 as yytype_int16, 194i32 as yytype_int16,
     682i32 as yytype_int16, 591i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 683i32 as yytype_int16, 195i32 as yytype_int16,
     263i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     166i32 as yytype_int16, 167i32 as yytype_int16, 168i32 as yytype_int16,
     169i32 as yytype_int16, 170i32 as yytype_int16, 171i32 as yytype_int16,
     172i32 as yytype_int16, 173i32 as yytype_int16, 174i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 175i32 as yytype_int16,
     176i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     177i32 as yytype_int16, 178i32 as yytype_int16, 179i32 as yytype_int16,
     180i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 181i32 as yytype_int16,
     182i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 183i32 as yytype_int16, 184i32 as yytype_int16,
     185i32 as yytype_int16, 186i32 as yytype_int16, 187i32 as yytype_int16,
     188i32 as yytype_int16, 189i32 as yytype_int16, 190i32 as yytype_int16,
     191i32 as yytype_int16, 192i32 as yytype_int16, 0i32 as yytype_int16,
     193i32 as yytype_int16, 194i32 as yytype_int16, 685i32 as yytype_int16,
     599i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     686i32 as yytype_int16, 195i32 as yytype_int16, 263i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 166i32 as yytype_int16,
     167i32 as yytype_int16, 168i32 as yytype_int16, 169i32 as yytype_int16,
     170i32 as yytype_int16, 171i32 as yytype_int16, 172i32 as yytype_int16,
     173i32 as yytype_int16, 174i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 175i32 as yytype_int16, 176i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 177i32 as yytype_int16,
     178i32 as yytype_int16, 179i32 as yytype_int16, 180i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 181i32 as yytype_int16, 182i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     183i32 as yytype_int16, 184i32 as yytype_int16, 185i32 as yytype_int16,
     186i32 as yytype_int16, 187i32 as yytype_int16, 188i32 as yytype_int16,
     189i32 as yytype_int16, 190i32 as yytype_int16, 191i32 as yytype_int16,
     192i32 as yytype_int16, 0i32 as yytype_int16, 193i32 as yytype_int16,
     194i32 as yytype_int16, 829i32 as yytype_int16, 591i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 830i32 as yytype_int16,
     195i32 as yytype_int16, 263i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 166i32 as yytype_int16, 167i32 as yytype_int16,
     168i32 as yytype_int16, 169i32 as yytype_int16, 170i32 as yytype_int16,
     171i32 as yytype_int16, 172i32 as yytype_int16, 173i32 as yytype_int16,
     174i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     175i32 as yytype_int16, 176i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 177i32 as yytype_int16, 178i32 as yytype_int16,
     179i32 as yytype_int16, 180i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     181i32 as yytype_int16, 182i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 183i32 as yytype_int16,
     184i32 as yytype_int16, 185i32 as yytype_int16, 186i32 as yytype_int16,
     187i32 as yytype_int16, 188i32 as yytype_int16, 189i32 as yytype_int16,
     190i32 as yytype_int16, 191i32 as yytype_int16, 192i32 as yytype_int16,
     0i32 as yytype_int16, 193i32 as yytype_int16, 194i32 as yytype_int16,
     832i32 as yytype_int16, 599i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 833i32 as yytype_int16, 195i32 as yytype_int16,
     263i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     166i32 as yytype_int16, 167i32 as yytype_int16, 168i32 as yytype_int16,
     169i32 as yytype_int16, 170i32 as yytype_int16, 171i32 as yytype_int16,
     172i32 as yytype_int16, 173i32 as yytype_int16, 174i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 175i32 as yytype_int16,
     176i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     177i32 as yytype_int16, 178i32 as yytype_int16, 179i32 as yytype_int16,
     180i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 181i32 as yytype_int16,
     182i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 183i32 as yytype_int16, 184i32 as yytype_int16,
     185i32 as yytype_int16, 186i32 as yytype_int16, 187i32 as yytype_int16,
     188i32 as yytype_int16, 189i32 as yytype_int16, 190i32 as yytype_int16,
     191i32 as yytype_int16, 192i32 as yytype_int16, 0i32 as yytype_int16,
     193i32 as yytype_int16, 194i32 as yytype_int16, 986i32 as yytype_int16,
     591i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     987i32 as yytype_int16, 195i32 as yytype_int16, 263i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 166i32 as yytype_int16,
     167i32 as yytype_int16, 168i32 as yytype_int16, 169i32 as yytype_int16,
     170i32 as yytype_int16, 171i32 as yytype_int16, 172i32 as yytype_int16,
     173i32 as yytype_int16, 174i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 175i32 as yytype_int16, 176i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 177i32 as yytype_int16,
     178i32 as yytype_int16, 179i32 as yytype_int16, 180i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 181i32 as yytype_int16, 182i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     183i32 as yytype_int16, 184i32 as yytype_int16, 185i32 as yytype_int16,
     186i32 as yytype_int16, 187i32 as yytype_int16, 188i32 as yytype_int16,
     189i32 as yytype_int16, 190i32 as yytype_int16, 191i32 as yytype_int16,
     192i32 as yytype_int16, 0i32 as yytype_int16, 193i32 as yytype_int16,
     194i32 as yytype_int16, 999i32 as yytype_int16, 591i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 1000i32 as yytype_int16,
     195i32 as yytype_int16, 263i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 166i32 as yytype_int16, 167i32 as yytype_int16,
     168i32 as yytype_int16, 169i32 as yytype_int16, 170i32 as yytype_int16,
     171i32 as yytype_int16, 172i32 as yytype_int16, 173i32 as yytype_int16,
     174i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     175i32 as yytype_int16, 176i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 177i32 as yytype_int16, 178i32 as yytype_int16,
     179i32 as yytype_int16, 180i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     181i32 as yytype_int16, 182i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 183i32 as yytype_int16,
     184i32 as yytype_int16, 185i32 as yytype_int16, 186i32 as yytype_int16,
     187i32 as yytype_int16, 188i32 as yytype_int16, 189i32 as yytype_int16,
     190i32 as yytype_int16, 191i32 as yytype_int16, 192i32 as yytype_int16,
     0i32 as yytype_int16, 193i32 as yytype_int16, 194i32 as yytype_int16,
     1002i32 as yytype_int16, 599i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 1003i32 as yytype_int16, 195i32 as yytype_int16,
     263i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     166i32 as yytype_int16, 167i32 as yytype_int16, 168i32 as yytype_int16,
     169i32 as yytype_int16, 170i32 as yytype_int16, 171i32 as yytype_int16,
     172i32 as yytype_int16, 173i32 as yytype_int16, 174i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 175i32 as yytype_int16,
     176i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     177i32 as yytype_int16, 178i32 as yytype_int16, 179i32 as yytype_int16,
     180i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 181i32 as yytype_int16,
     182i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 183i32 as yytype_int16, 184i32 as yytype_int16,
     185i32 as yytype_int16, 186i32 as yytype_int16, 187i32 as yytype_int16,
     188i32 as yytype_int16, 189i32 as yytype_int16, 190i32 as yytype_int16,
     191i32 as yytype_int16, 192i32 as yytype_int16, 0i32 as yytype_int16,
     193i32 as yytype_int16, 194i32 as yytype_int16, 604i32 as yytype_int16,
     599i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     605i32 as yytype_int16, 195i32 as yytype_int16, 263i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 166i32 as yytype_int16,
     167i32 as yytype_int16, 168i32 as yytype_int16, 169i32 as yytype_int16,
     170i32 as yytype_int16, 171i32 as yytype_int16, 172i32 as yytype_int16,
     173i32 as yytype_int16, 174i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 175i32 as yytype_int16, 176i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 177i32 as yytype_int16,
     178i32 as yytype_int16, 179i32 as yytype_int16, 180i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 181i32 as yytype_int16, 182i32 as yytype_int16,
     350i32 as yytype_int16, 351i32 as yytype_int16, 352i32 as yytype_int16,
     353i32 as yytype_int16, 354i32 as yytype_int16, 355i32 as yytype_int16,
     356i32 as yytype_int16, 357i32 as yytype_int16, 358i32 as yytype_int16,
     359i32 as yytype_int16, 360i32 as yytype_int16, 361i32 as yytype_int16,
     362i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     363i32 as yytype_int16, 364i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     183i32 as yytype_int16, 184i32 as yytype_int16, 185i32 as yytype_int16,
     186i32 as yytype_int16, 187i32 as yytype_int16, 188i32 as yytype_int16,
     189i32 as yytype_int16, 190i32 as yytype_int16, 191i32 as yytype_int16,
     192i32 as yytype_int16, 0i32 as yytype_int16, 193i32 as yytype_int16,
     194i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     195i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     365i32 as yytype_int16, 0i32 as yytype_int16, 366i32 as yytype_int16,
     367i32 as yytype_int16, 368i32 as yytype_int16, 369i32 as yytype_int16,
     370i32 as yytype_int16, 371i32 as yytype_int16, 372i32 as yytype_int16,
     373i32 as yytype_int16, 374i32 as yytype_int16, 375i32 as yytype_int16,
     350i32 as yytype_int16, 351i32 as yytype_int16, 352i32 as yytype_int16,
     353i32 as yytype_int16, 354i32 as yytype_int16, 355i32 as yytype_int16,
     356i32 as yytype_int16, 357i32 as yytype_int16, 358i32 as yytype_int16,
     359i32 as yytype_int16, 360i32 as yytype_int16, 361i32 as yytype_int16,
     362i32 as yytype_int16, 0i32 as yytype_int16, 239i32 as yytype_int16,
     363i32 as yytype_int16, 364i32 as yytype_int16, 0i32 as yytype_int16,
     350i32 as yytype_int16, 351i32 as yytype_int16, 352i32 as yytype_int16,
     353i32 as yytype_int16, 354i32 as yytype_int16, 355i32 as yytype_int16,
     356i32 as yytype_int16, 357i32 as yytype_int16, 358i32 as yytype_int16,
     359i32 as yytype_int16, 360i32 as yytype_int16, 361i32 as yytype_int16,
     362i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     363i32 as yytype_int16, 364i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     365i32 as yytype_int16, 0i32 as yytype_int16, 366i32 as yytype_int16,
     367i32 as yytype_int16, 368i32 as yytype_int16, 369i32 as yytype_int16,
     370i32 as yytype_int16, 371i32 as yytype_int16, 372i32 as yytype_int16,
     373i32 as yytype_int16, 374i32 as yytype_int16, 375i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     365i32 as yytype_int16, -258i32 as yytype_int16, 366i32 as yytype_int16,
     367i32 as yytype_int16, 368i32 as yytype_int16, 369i32 as yytype_int16,
     370i32 as yytype_int16, 371i32 as yytype_int16, 372i32 as yytype_int16,
     373i32 as yytype_int16, 374i32 as yytype_int16, 375i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, -259i32 as yytype_int16, 350i32 as yytype_int16,
     351i32 as yytype_int16, 352i32 as yytype_int16, 353i32 as yytype_int16,
     354i32 as yytype_int16, 355i32 as yytype_int16, 356i32 as yytype_int16,
     357i32 as yytype_int16, 358i32 as yytype_int16, 359i32 as yytype_int16,
     360i32 as yytype_int16, 361i32 as yytype_int16, 362i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 363i32 as yytype_int16,
     364i32 as yytype_int16, 0i32 as yytype_int16, 350i32 as yytype_int16,
     351i32 as yytype_int16, 352i32 as yytype_int16, 353i32 as yytype_int16,
     354i32 as yytype_int16, 355i32 as yytype_int16, 356i32 as yytype_int16,
     357i32 as yytype_int16, 358i32 as yytype_int16, 359i32 as yytype_int16,
     360i32 as yytype_int16, 361i32 as yytype_int16, 362i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 363i32 as yytype_int16,
     364i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 365i32 as yytype_int16,
     0i32 as yytype_int16, 366i32 as yytype_int16, 367i32 as yytype_int16,
     368i32 as yytype_int16, 369i32 as yytype_int16, 370i32 as yytype_int16,
     371i32 as yytype_int16, 372i32 as yytype_int16, 373i32 as yytype_int16,
     374i32 as yytype_int16, 375i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 365i32 as yytype_int16,
     -260i32 as yytype_int16, 366i32 as yytype_int16, 367i32 as yytype_int16,
     368i32 as yytype_int16, 369i32 as yytype_int16, 370i32 as yytype_int16,
     371i32 as yytype_int16, 372i32 as yytype_int16, 373i32 as yytype_int16,
     374i32 as yytype_int16, 375i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     -261i32 as yytype_int16, 350i32 as yytype_int16, 351i32 as yytype_int16,
     352i32 as yytype_int16, 353i32 as yytype_int16, 354i32 as yytype_int16,
     355i32 as yytype_int16, 356i32 as yytype_int16, 357i32 as yytype_int16,
     358i32 as yytype_int16, 359i32 as yytype_int16, 360i32 as yytype_int16,
     361i32 as yytype_int16, 362i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 363i32 as yytype_int16, 364i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     443i32 as yytype_int16, 350i32 as yytype_int16, 351i32 as yytype_int16,
     352i32 as yytype_int16, 353i32 as yytype_int16, 354i32 as yytype_int16,
     355i32 as yytype_int16, 356i32 as yytype_int16, 357i32 as yytype_int16,
     0i32 as yytype_int16, 359i32 as yytype_int16, 360i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 363i32 as yytype_int16, 364i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 365i32 as yytype_int16, 0i32 as yytype_int16,
     366i32 as yytype_int16, 367i32 as yytype_int16, 368i32 as yytype_int16,
     369i32 as yytype_int16, 370i32 as yytype_int16, 371i32 as yytype_int16,
     372i32 as yytype_int16, 373i32 as yytype_int16, 374i32 as yytype_int16,
     375i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     0i32 as yytype_int16, 0i32 as yytype_int16, 0i32 as yytype_int16,
     366i32 as yytype_int16, 367i32 as yytype_int16, 368i32 as yytype_int16,
     369i32 as yytype_int16, 370i32 as yytype_int16, 371i32 as yytype_int16,
     372i32 as yytype_int16, 373i32 as yytype_int16, 374i32 as yytype_int16,
     375i32 as yytype_int16];
/* Line 1267 of yacc.c.  */
unsafe extern "C" fn yyerror(mut p: *mut parser_state,
                             mut s: *const libc::c_char) {
    let mut c: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut n: size_t = 0;
    if !(0 == (*p).capture_errors()) {
        if (*p).nerr <
               (::std::mem::size_of::<[mrb_parser_message; 10]>() as
                    libc::c_ulong).wrapping_div(::std::mem::size_of::<mrb_parser_message>()
                                                    as libc::c_ulong) {
            n = strlen(s);
            c =
                parser_palloc(p, n.wrapping_add(1i32 as libc::c_ulong)) as
                    *mut libc::c_char;
            memcpy(c as *mut libc::c_void, s as *const libc::c_void,
                   n.wrapping_add(1i32 as libc::c_ulong));
            (*p).error_buffer[(*p).nerr as usize].message = c;
            (*p).error_buffer[(*p).nerr as usize].lineno = (*p).lineno;
            (*p).error_buffer[(*p).nerr as usize].column = (*p).column
        }
    }
    (*p).nerr = (*p).nerr.wrapping_add(1);
}
unsafe extern "C" fn yyerror_c(mut p: *mut parser_state,
                               mut msg: *const libc::c_char,
                               mut c: libc::c_char) {
    let mut buf: [libc::c_char; 256] = [0; 256];
    strncpy(buf.as_mut_ptr(), msg,
            (::std::mem::size_of::<[libc::c_char; 256]>() as
                 libc::c_ulong).wrapping_sub(2i32 as libc::c_ulong));
    buf[(::std::mem::size_of::<[libc::c_char; 256]>() as
             libc::c_ulong).wrapping_sub(2i32 as libc::c_ulong) as usize] =
        '\u{0}' as i32 as libc::c_char;
    strncat(buf.as_mut_ptr(), &mut c, 1i32 as libc::c_ulong);
    yyerror(p, buf.as_mut_ptr());
}
unsafe extern "C" fn yywarn(mut p: *mut parser_state,
                            mut s: *const libc::c_char) {
    let mut c: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut n: size_t = 0;
    if !(0 == (*p).capture_errors()) {
        if (*p).nwarn <
               (::std::mem::size_of::<[mrb_parser_message; 10]>() as
                    libc::c_ulong).wrapping_div(::std::mem::size_of::<mrb_parser_message>()
                                                    as libc::c_ulong) {
            n = strlen(s);
            c =
                parser_palloc(p, n.wrapping_add(1i32 as libc::c_ulong)) as
                    *mut libc::c_char;
            memcpy(c as *mut libc::c_void, s as *const libc::c_void,
                   n.wrapping_add(1i32 as libc::c_ulong));
            (*p).warn_buffer[(*p).nwarn as usize].message = c;
            (*p).warn_buffer[(*p).nwarn as usize].lineno = (*p).lineno;
            (*p).warn_buffer[(*p).nwarn as usize].column = (*p).column
        }
    }
    (*p).nwarn = (*p).nwarn.wrapping_add(1);
}
/* C LALR(1) parser skeleton written by Richard Stallman, by
   simplifying the original so-called "semantic" parser.  */
unsafe extern "C" fn yywarning(mut p: *mut parser_state,
                               mut s: *const libc::c_char) {
    yywarn(p, s);
}
unsafe extern "C" fn yywarning_s(mut p: *mut parser_state,
                                 mut msg: *const libc::c_char,
                                 mut s: *const libc::c_char) {
    let mut buf: [libc::c_char; 256] = [0; 256];
    strncpy(buf.as_mut_ptr(), msg,
            (::std::mem::size_of::<[libc::c_char; 256]>() as
                 libc::c_ulong).wrapping_sub(1i32 as libc::c_ulong));
    buf[(::std::mem::size_of::<[libc::c_char; 256]>() as
             libc::c_ulong).wrapping_sub(1i32 as libc::c_ulong) as usize] =
        '\u{0}' as i32 as libc::c_char;
    strncat(buf.as_mut_ptr(), b": \x00" as *const u8 as *const libc::c_char,
            (::std::mem::size_of::<[libc::c_char; 256]>() as
                 libc::c_ulong).wrapping_sub(strlen(buf.as_mut_ptr())).wrapping_sub(1i32
                                                                                        as
                                                                                        libc::c_ulong));
    strncat(buf.as_mut_ptr(), s,
            (::std::mem::size_of::<[libc::c_char; 256]>() as
                 libc::c_ulong).wrapping_sub(strlen(buf.as_mut_ptr())).wrapping_sub(1i32
                                                                                        as
                                                                                        libc::c_ulong));
    yywarning(p, buf.as_mut_ptr());
}
unsafe extern "C" fn backref_error(mut p: *mut parser_state,
                                   mut n: *mut node) {
    let mut c: libc::c_int = 0;
    c = (*n).car as intptr_t as libc::c_int;
    if c == NODE_NTH_REF as libc::c_int {
        yyerror_c(p,
                  b"can\'t set variable $\x00" as *const u8 as
                      *const libc::c_char,
                  ((*n).cdr as intptr_t as libc::c_int as libc::c_char as
                       libc::c_int + '0' as i32) as libc::c_char);
    } else if c == NODE_BACK_REF as libc::c_int {
        yyerror_c(p,
                  b"can\'t set variable $\x00" as *const u8 as
                      *const libc::c_char,
                  (*n).cdr as intptr_t as libc::c_int as libc::c_char);
    } else {
        mrb_bug((*p).mrb,
                b"Internal error in backref_error() : n=>car == %d\x00" as
                    *const u8 as *const libc::c_char, c);
    };
}
unsafe extern "C" fn void_expr_error(mut p: *mut parser_state,
                                     mut n: *mut node) {
    let mut c: libc::c_int = 0;
    if n.is_null() { return }
    c = (*n).car as intptr_t as libc::c_int;
    match c {
        10 | 35 | 11 | 12 | 13 => {
            yyerror(p,
                    b"void value expression\x00" as *const u8 as
                        *const libc::c_char);
        }
        17 | 18 => {
            if !(*n).cdr.is_null() {
                void_expr_error(p, (*(*n).cdr).car);
                void_expr_error(p, (*(*n).cdr).cdr);
            }
        }
        14 => {
            if !(*n).cdr.is_null() {
                while !(*n).cdr.is_null() { n = (*n).cdr }
                void_expr_error(p, (*n).car);
            }
        }
        _ => { }
    };
}
#[inline]
unsafe extern "C" fn nextc(mut p: *mut parser_state) -> libc::c_int {
    let mut c: libc::c_int = 0;
    if !(*p).pb.is_null() {
        let mut tmp: *mut node = 0 as *mut node;
        c = (*(*p).pb).car as intptr_t as libc::c_int;
        tmp = (*p).pb;
        (*p).pb = (*(*p).pb).cdr;
        cons_free_gen(p, tmp);
    } else if (*p).s.is_null() || (*p).s >= (*p).send {
        if (*p).cxt.is_null() {
            return -1i32
        } else {
            if (*(*p).cxt).partial_hook.expect("non-null function pointer")(p)
                   < 0i32 {
                /* end of program(s) */
                return -1i32
            }
            /* end of a file in the program files */
            return -2i32
        }
    } else {
        let fresh4 = (*p).s;
        (*p).s = (*p).s.offset(1);
        c = *fresh4 as libc::c_uchar as libc::c_int
    }
    if c >= 0i32 { (*p).column += 1 }
    return c;
}
static mut yycheck: [yytype_int16; 11646] =
    [27i32 as yytype_int16, 2i32 as yytype_int16, 259i32 as yytype_int16,
     16i32 as yytype_int16, 17i32 as yytype_int16, 82i32 as yytype_int16,
     83i32 as yytype_int16, 20i32 as yytype_int16, 84i32 as yytype_int16,
     49i32 as yytype_int16, 7i32 as yytype_int16, 28i32 as yytype_int16,
     7i32 as yytype_int16, 22i32 as yytype_int16, 449i32 as yytype_int16,
     14i32 as yytype_int16, 211i32 as yytype_int16, 293i32 as yytype_int16,
     305i32 as yytype_int16, 14i32 as yytype_int16, 21i32 as yytype_int16,
     297i32 as yytype_int16, 305i32 as yytype_int16, 433i32 as yytype_int16,
     49i32 as yytype_int16, 77i32 as yytype_int16, 16i32 as yytype_int16,
     17i32 as yytype_int16, 424i32 as yytype_int16, 28i32 as yytype_int16,
     20i32 as yytype_int16, 317i32 as yytype_int16, 53i32 as yytype_int16,
     28i32 as yytype_int16, 4i32 as yytype_int16, 349i32 as yytype_int16,
     16i32 as yytype_int16, 17i32 as yytype_int16, 112i32 as yytype_int16,
     300i32 as yytype_int16, 20i32 as yytype_int16, 15i32 as yytype_int16,
     66i32 as yytype_int16, 63i32 as yytype_int16, 702i32 as yytype_int16,
     5i32 as yytype_int16, 6i32 as yytype_int16, 66i32 as yytype_int16,
     388i32 as yytype_int16, 389i32 as yytype_int16, 51i32 as yytype_int16,
     52i32 as yytype_int16, 488i32 as yytype_int16, 13i32 as yytype_int16,
     2i32 as yytype_int16, 378i32 as yytype_int16, 4i32 as yytype_int16,
     788i32 as yytype_int16, 55i32 as yytype_int16, 631i32 as yytype_int16,
     55i32 as yytype_int16, 51i32 as yytype_int16, 52i32 as yytype_int16,
     26i32 as yytype_int16, 623i32 as yytype_int16, 26i32 as yytype_int16,
     510i32 as yytype_int16, 25i32 as yytype_int16, 640i32 as yytype_int16,
     607i32 as yytype_int16, 608i32 as yytype_int16, 51i32 as yytype_int16,
     52i32 as yytype_int16, 113i32 as yytype_int16, 57i32 as yytype_int16,
     25i32 as yytype_int16, 21i32 as yytype_int16, 22i32 as yytype_int16,
     637i32 as yytype_int16, 402i32 as yytype_int16, 905i32 as yytype_int16,
     286i32 as yytype_int16, 882i32 as yytype_int16, 16i32 as yytype_int16,
     17i32 as yytype_int16, 290i32 as yytype_int16, 25i32 as yytype_int16,
     20i32 as yytype_int16, 647i32 as yytype_int16, 25i32 as yytype_int16,
     282i32 as yytype_int16, 100i32 as yytype_int16, 66i32 as yytype_int16,
     53i32 as yytype_int16, 699i32 as yytype_int16, 418i32 as yytype_int16,
     376i32 as yytype_int16, 702i32 as yytype_int16, 0i32 as yytype_int16,
     25i32 as yytype_int16, 380i32 as yytype_int16, 714i32 as yytype_int16,
     10i32 as yytype_int16, 383i32 as yytype_int16, 427i32 as yytype_int16,
     106i32 as yytype_int16, 86i32 as yytype_int16, 15i32 as yytype_int16,
     446i32 as yytype_int16, 714i32 as yytype_int16, 257i32 as yytype_int16,
     25i32 as yytype_int16, 29i32 as yytype_int16, 451i32 as yytype_int16,
     733i32 as yytype_int16, 57i32 as yytype_int16, 552i32 as yytype_int16,
     77i32 as yytype_int16, 51i32 as yytype_int16, 25i32 as yytype_int16,
     739i32 as yytype_int16, 37i32 as yytype_int16, 38i32 as yytype_int16,
     403i32 as yytype_int16, 25i32 as yytype_int16, 684i32 as yytype_int16,
     57i32 as yytype_int16, 58i32 as yytype_int16, 59i32 as yytype_int16,
     60i32 as yytype_int16, 207i32 as yytype_int16, 349i32 as yytype_int16,
     100i32 as yytype_int16, 135i32 as yytype_int16, 26i32 as yytype_int16,
     118i32 as yytype_int16, 25i32 as yytype_int16, 417i32 as yytype_int16,
     25i32 as yytype_int16, 419i32 as yytype_int16, 217i32 as yytype_int16,
     88i32 as yytype_int16, 25i32 as yytype_int16, 16i32 as yytype_int16,
     17i32 as yytype_int16, 292i32 as yytype_int16, 293i32 as yytype_int16,
     20i32 as yytype_int16, 428i32 as yytype_int16, 18i32 as yytype_int16,
     297i32 as yytype_int16, 20i32 as yytype_int16, 138i32 as yytype_int16,
     90i32 as yytype_int16, 346i32 as yytype_int16, 100i32 as yytype_int16,
     90i32 as yytype_int16, 125i32 as yytype_int16, 444i32 as yytype_int16,
     145i32 as yytype_int16, 118i32 as yytype_int16, 106i32 as yytype_int16,
     107i32 as yytype_int16, 449i32 as yytype_int16, 989i32 as yytype_int16,
     118i32 as yytype_int16, 60i32 as yytype_int16, 490i32 as yytype_int16,
     118i32 as yytype_int16, 63i32 as yytype_int16, 388i32 as yytype_int16,
     389i32 as yytype_int16, 135i32 as yytype_int16, 55i32 as yytype_int16,
     135i32 as yytype_int16, 88i32 as yytype_int16, 121i32 as yytype_int16,
     140i32 as yytype_int16, 120i32 as yytype_int16, 979i32 as yytype_int16,
     138i32 as yytype_int16, 118i32 as yytype_int16, 140i32 as yytype_int16,
     141i32 as yytype_int16, 118i32 as yytype_int16, 138i32 as yytype_int16,
     466i32 as yytype_int16, 145i32 as yytype_int16, 138i32 as yytype_int16,
     102i32 as yytype_int16, 88i32 as yytype_int16, 141i32 as yytype_int16,
     118i32 as yytype_int16, 110i32 as yytype_int16, 79i32 as yytype_int16,
     145i32 as yytype_int16, 88i32 as yytype_int16, 144i32 as yytype_int16,
     455i32 as yytype_int16, 138i32 as yytype_int16, 318i32 as yytype_int16,
     278i32 as yytype_int16, 138i32 as yytype_int16, 321i32 as yytype_int16,
     140i32 as yytype_int16, 323i32 as yytype_int16, 744i32 as yytype_int16,
     325i32 as yytype_int16, 939i32 as yytype_int16, 327i32 as yytype_int16,
     102i32 as yytype_int16, 491i32 as yytype_int16, 138i32 as yytype_int16,
     107i32 as yytype_int16, 88i32 as yytype_int16, 141i32 as yytype_int16,
     240i32 as yytype_int16, 504i32 as yytype_int16, 16i32 as yytype_int16,
     145i32 as yytype_int16, 51i32 as yytype_int16, 504i32 as yytype_int16,
     25i32 as yytype_int16, 88i32 as yytype_int16, 138i32 as yytype_int16,
     302i32 as yytype_int16, 404i32 as yytype_int16, 488i32 as yytype_int16,
     886i32 as yytype_int16, 145i32 as yytype_int16, 118i32 as yytype_int16,
     144i32 as yytype_int16, 138i32 as yytype_int16, 230i32 as yytype_int16,
     669i32 as yytype_int16, 230i32 as yytype_int16, 276i32 as yytype_int16,
     138i32 as yytype_int16, 123i32 as yytype_int16, 140i32 as yytype_int16,
     71i32 as yytype_int16, 527i32 as yytype_int16, 282i32 as yytype_int16,
     135i32 as yytype_int16, 28i32 as yytype_int16, 137i32 as yytype_int16,
     144i32 as yytype_int16, 452i32 as yytype_int16, 300i32 as yytype_int16,
     138i32 as yytype_int16, 263i32 as yytype_int16, 138i32 as yytype_int16,
     144i32 as yytype_int16, 458i32 as yytype_int16, 267i32 as yytype_int16,
     138i32 as yytype_int16, 257i32 as yytype_int16, 282i32 as yytype_int16,
     259i32 as yytype_int16, 138i32 as yytype_int16, 284i32 as yytype_int16,
     118i32 as yytype_int16, 263i32 as yytype_int16, 88i32 as yytype_int16,
     469i32 as yytype_int16, 284i32 as yytype_int16, 240i32 as yytype_int16,
     88i32 as yytype_int16, 99i32 as yytype_int16, 100i32 as yytype_int16,
     144i32 as yytype_int16, 90i32 as yytype_int16, 831i32 as yytype_int16,
     247i32 as yytype_int16, 90i32 as yytype_int16, 88i32 as yytype_int16,
     140i32 as yytype_int16, 267i32 as yytype_int16, 519i32 as yytype_int16,
     144i32 as yytype_int16, 521i32 as yytype_int16, 886i32 as yytype_int16,
     140i32 as yytype_int16, 263i32 as yytype_int16, 90i32 as yytype_int16,
     90i32 as yytype_int16, 722i32 as yytype_int16, 267i32 as yytype_int16,
     138i32 as yytype_int16, 902i32 as yytype_int16, 122i32 as yytype_int16,
     552i32 as yytype_int16, 905i32 as yytype_int16, 88i32 as yytype_int16,
     125i32 as yytype_int16, 145i32 as yytype_int16, 55i32 as yytype_int16,
     902i32 as yytype_int16, 118i32 as yytype_int16, 118i32 as yytype_int16,
     905i32 as yytype_int16, 88i32 as yytype_int16, 88i32 as yytype_int16,
     875i32 as yytype_int16, 212i32 as yytype_int16, 213i32 as yytype_int16,
     346i32 as yytype_int16, 454i32 as yytype_int16, 90i32 as yytype_int16,
     90i32 as yytype_int16, 284i32 as yytype_int16, 90i32 as yytype_int16,
     118i32 as yytype_int16, 118i32 as yytype_int16, 112i32 as yytype_int16,
     118i32 as yytype_int16, 630i32 as yytype_int16, 115i32 as yytype_int16,
     116i32 as yytype_int16, 144i32 as yytype_int16, 55i32 as yytype_int16,
     346i32 as yytype_int16, 90i32 as yytype_int16, 144i32 as yytype_int16,
     344i32 as yytype_int16, 90i32 as yytype_int16, 347i32 as yytype_int16,
     401i32 as yytype_int16, 25i32 as yytype_int16, 349i32 as yytype_int16,
     668i32 as yytype_int16, 144i32 as yytype_int16, 699i32 as yytype_int16,
     281i32 as yytype_int16, 267i32 as yytype_int16, 138i32 as yytype_int16,
     118i32 as yytype_int16, 118i32 as yytype_int16, 141i32 as yytype_int16,
     118i32 as yytype_int16, 300i32 as yytype_int16, 289i32 as yytype_int16,
     145i32 as yytype_int16, 20i32 as yytype_int16, 627i32 as yytype_int16,
     143i32 as yytype_int16, 551i32 as yytype_int16, 145i32 as yytype_int16,
     2i32 as yytype_int16, 144i32 as yytype_int16, 4i32 as yytype_int16,
     5i32 as yytype_int16, 6i32 as yytype_int16, 118i32 as yytype_int16,
     798i32 as yytype_int16, 9i32 as yytype_int16, 10i32 as yytype_int16,
     144i32 as yytype_int16, 144i32 as yytype_int16, 13i32 as yytype_int16,
     334i32 as yytype_int16, 15i32 as yytype_int16, 16i32 as yytype_int16,
     17i32 as yytype_int16, 334i32 as yytype_int16, 378i32 as yytype_int16,
     20i32 as yytype_int16, 138i32 as yytype_int16, 388i32 as yytype_int16,
     389i32 as yytype_int16, 140i32 as yytype_int16, 815i32 as yytype_int16,
     816i32 as yytype_int16, 659i32 as yytype_int16, 414i32 as yytype_int16,
     145i32 as yytype_int16, 989i32 as yytype_int16, 378i32 as yytype_int16,
     774i32 as yytype_int16, 310i32 as yytype_int16, 138i32 as yytype_int16,
     667i32 as yytype_int16, 422i32 as yytype_int16, 669i32 as yytype_int16,
     989i32 as yytype_int16, 380i32 as yytype_int16, 334i32 as yytype_int16,
     347i32 as yytype_int16, 383i32 as yytype_int16, 402i32 as yytype_int16,
     730i32 as yytype_int16, 339i32 as yytype_int16, 432i32 as yytype_int16,
     138i32 as yytype_int16, 267i32 as yytype_int16, 49i32 as yytype_int16,
     736i32 as yytype_int16, 737i32 as yytype_int16, 378i32 as yytype_int16,
     53i32 as yytype_int16, 145i32 as yytype_int16, 402i32 as yytype_int16,
     549i32 as yytype_int16, 679i32 as yytype_int16, 727i32 as yytype_int16,
     418i32 as yytype_int16, 663i32 as yytype_int16, 525i32 as yytype_int16,
     403i32 as yytype_int16, 63i32 as yytype_int16, 411i32 as yytype_int16,
     344i32 as yytype_int16, 58i32 as yytype_int16, 59i32 as yytype_int16,
     427i32 as yytype_int16, 90i32 as yytype_int16, 349i32 as yytype_int16,
     418i32 as yytype_int16, 37i32 as yytype_int16, 38i32 as yytype_int16,
     57i32 as yytype_int16, 626i32 as yytype_int16, 402i32 as yytype_int16,
     77i32 as yytype_int16, 419i32 as yytype_int16, 138i32 as yytype_int16,
     427i32 as yytype_int16, 335i32 as yytype_int16, 336i32 as yytype_int16,
     337i32 as yytype_int16, 338i32 as yytype_int16, 58i32 as yytype_int16,
     59i32 as yytype_int16, 428i32 as yytype_int16, 486i32 as yytype_int16,
     380i32 as yytype_int16, 488i32 as yytype_int16, 135i32 as yytype_int16,
     418i32 as yytype_int16, 71i32 as yytype_int16, 618i32 as yytype_int16,
     876i32 as yytype_int16, 1001i32 as yytype_int16, 118i32 as yytype_int16,
     145i32 as yytype_int16, 462i32 as yytype_int16, 726i32 as yytype_int16,
     427i32 as yytype_int16, 728i32 as yytype_int16, 423i32 as yytype_int16,
     424i32 as yytype_int16, 90i32 as yytype_int16, 141i32 as yytype_int16,
     454i32 as yytype_int16, 455i32 as yytype_int16, 118i32 as yytype_int16,
     446i32 as yytype_int16, 111i32 as yytype_int16, 403i32 as yytype_int16,
     113i32 as yytype_int16, 655i32 as yytype_int16, 722i32 as yytype_int16,
     463i32 as yytype_int16, 462i32 as yytype_int16, 751i32 as yytype_int16,
     875i32 as yytype_int16, 446i32 as yytype_int16, 462i32 as yytype_int16,
     751i32 as yytype_int16, 449i32 as yytype_int16, 142i32 as yytype_int16,
     466i32 as yytype_int16, 71i32 as yytype_int16, 678i32 as yytype_int16,
     419i32 as yytype_int16, 136i32 as yytype_int16, 141i32 as yytype_int16,
     490i32 as yytype_int16, 112i32 as yytype_int16, 118i32 as yytype_int16,
     145i32 as yytype_int16, 115i32 as yytype_int16, 116i32 as yytype_int16,
     428i32 as yytype_int16, 55i32 as yytype_int16, 562i32 as yytype_int16,
     526i32 as yytype_int16, 477i32 as yytype_int16, 51i32 as yytype_int16,
     490i32 as yytype_int16, 53i32 as yytype_int16, 54i32 as yytype_int16,
     55i32 as yytype_int16, 56i32 as yytype_int16, 17i32 as yytype_int16,
     18i32 as yytype_int16, 491i32 as yytype_int16, 477i32 as yytype_int16,
     472i32 as yytype_int16, 138i32 as yytype_int16, 552i32 as yytype_int16,
     112i32 as yytype_int16, 842i32 as yytype_int16, 436i32 as yytype_int16,
     115i32 as yytype_int16, 116i32 as yytype_int16, 724i32 as yytype_int16,
     508i32 as yytype_int16, 655i32 as yytype_int16, 510i32 as yytype_int16,
     490i32 as yytype_int16, 955i32 as yytype_int16, 730i32 as yytype_int16,
     880i32 as yytype_int16, 138i32 as yytype_int16, 463i32 as yytype_int16,
     51i32 as yytype_int16, 71i32 as yytype_int16, 736i32 as yytype_int16,
     737i32 as yytype_int16, 55i32 as yytype_int16, 466i32 as yytype_int16,
     88i32 as yytype_int16, 890i32 as yytype_int16, 472i32 as yytype_int16,
     782i32 as yytype_int16, 486i32 as yytype_int16, 71i32 as yytype_int16,
     488i32 as yytype_int16, 128i32 as yytype_int16, 129i32 as yytype_int16,
     130i32 as yytype_int16, 679i32 as yytype_int16, 811i32 as yytype_int16,
     812i32 as yytype_int16, 902i32 as yytype_int16, 102i32 as yytype_int16,
     715i32 as yytype_int16, 51i32 as yytype_int16, 88i32 as yytype_int16,
     53i32 as yytype_int16, 54i32 as yytype_int16, 55i32 as yytype_int16,
     56i32 as yytype_int16, 545i32 as yytype_int16, 90i32 as yytype_int16,
     491i32 as yytype_int16, 62i32 as yytype_int16, 202i32 as yytype_int16,
     64i32 as yytype_int16, 65i32 as yytype_int16, 138i32 as yytype_int16,
     579i32 as yytype_int16, 102i32 as yytype_int16, 97i32 as yytype_int16,
     88i32 as yytype_int16, 15i32 as yytype_int16, 13i32 as yytype_int16,
     212i32 as yytype_int16, 213i32 as yytype_int16, 63i32 as yytype_int16,
     802i32 as yytype_int16, 803i32 as yytype_int16, 804i32 as yytype_int16,
     742i32 as yytype_int16, 806i32 as yytype_int16, 16i32 as yytype_int16,
     808i32 as yytype_int16, 693i32 as yytype_int16, 102i32 as yytype_int16,
     597i32 as yytype_int16, 137i32 as yytype_int16, 697i32 as yytype_int16,
     118i32 as yytype_int16, 752i32 as yytype_int16, 138i32 as yytype_int16,
     859i32 as yytype_int16, 15i32 as yytype_int16, 144i32 as yytype_int16,
     100i32 as yytype_int16, 693i32 as yytype_int16, 138i32 as yytype_int16,
     138i32 as yytype_int16, 141i32 as yytype_int16, 789i32 as yytype_int16,
     136i32 as yytype_int16, 595i32 as yytype_int16, 51i32 as yytype_int16,
     137i32 as yytype_int16, 714i32 as yytype_int16, 876i32 as yytype_int16,
     140i32 as yytype_int16, 552i32 as yytype_int16, 138i32 as yytype_int16,
     603i32 as yytype_int16, 144i32 as yytype_int16, 623i32 as yytype_int16,
     606i32 as yytype_int16, 113i32 as yytype_int16, 114i32 as yytype_int16,
     16i32 as yytype_int16, 714i32 as yytype_int16, 603i32 as yytype_int16,
     51i32 as yytype_int16, 137i32 as yytype_int16, 606i32 as yytype_int16,
     607i32 as yytype_int16, 608i32 as yytype_int16, 138i32 as yytype_int16,
     263i32 as yytype_int16, 637i32 as yytype_int16, 144i32 as yytype_int16,
     138i32 as yytype_int16, 267i32 as yytype_int16, 138i32 as yytype_int16,
     793i32 as yytype_int16, 603i32 as yytype_int16, 271i32 as yytype_int16,
     272i32 as yytype_int16, 606i32 as yytype_int16, 647i32 as yytype_int16,
     90i32 as yytype_int16, 276i32 as yytype_int16, 624i32 as yytype_int16,
     842i32 as yytype_int16, 138i32 as yytype_int16, 993i32 as yytype_int16,
     281i32 as yytype_int16, 282i32 as yytype_int16, 630i32 as yytype_int16,
     631i32 as yytype_int16, 628i32 as yytype_int16, 633i32 as yytype_int16,
     628i32 as yytype_int16, 651i32 as yytype_int16, 289i32 as yytype_int16,
     138i32 as yytype_int16, 624i32 as yytype_int16, 138i32 as yytype_int16,
     640i32 as yytype_int16, 1007i32 as yytype_int16, 138i32 as yytype_int16,
     616i32 as yytype_int16, 51i32 as yytype_int16, 138i32 as yytype_int16,
     88i32 as yytype_int16, 300i32 as yytype_int16, 970i32 as yytype_int16,
     44i32 as yytype_int16, 118i32 as yytype_int16, 595i32 as yytype_int16,
     856i32 as yytype_int16, 651i32 as yytype_int16, 118i32 as yytype_int16,
     15i32 as yytype_int16, 18i32 as yytype_int16, 651i32 as yytype_int16,
     684i32 as yytype_int16, 603i32 as yytype_int16, 102i32 as yytype_int16,
     136i32 as yytype_int16, 606i32 as yytype_int16, 663i32 as yytype_int16,
     690i32 as yytype_int16, 740i32 as yytype_int16, 15i32 as yytype_int16,
     861i32 as yytype_int16, 142i32 as yytype_int16, 136i32 as yytype_int16,
     138i32 as yytype_int16, 722i32 as yytype_int16, 15i32 as yytype_int16,
     867i32 as yytype_int16, 136i32 as yytype_int16, 91i32 as yytype_int16,
     853i32 as yytype_int16, 14i32 as yytype_int16, 622i32 as yytype_int16,
     668i32 as yytype_int16, 624i32 as yytype_int16, 334i32 as yytype_int16,
     335i32 as yytype_int16, 336i32 as yytype_int16, 337i32 as yytype_int16,
     338i32 as yytype_int16, 339i32 as yytype_int16, 340i32 as yytype_int16,
     341i32 as yytype_int16, 668i32 as yytype_int16, 669i32 as yytype_int16,
     344i32 as yytype_int16, 971i32 as yytype_int16, 346i32 as yytype_int16,
     347i32 as yytype_int16, 137i32 as yytype_int16, 349i32 as yytype_int16,
     112i32 as yytype_int16, 630i32 as yytype_int16, 15i32 as yytype_int16,
     115i32 as yytype_int16, 116i32 as yytype_int16, 144i32 as yytype_int16,
     15i32 as yytype_int16, 743i32 as yytype_int16, 724i32 as yytype_int16,
     946i32 as yytype_int16, 947i32 as yytype_int16, 948i32 as yytype_int16,
     949i32 as yytype_int16, 617i32 as yytype_int16, 730i32 as yytype_int16,
     731i32 as yytype_int16, 138i32 as yytype_int16, 90i32 as yytype_int16,
     727i32 as yytype_int16, 138i32 as yytype_int16, 736i32 as yytype_int16,
     737i32 as yytype_int16, 143i32 as yytype_int16, 759i32 as yytype_int16,
     141i32 as yytype_int16, 90i32 as yytype_int16, 138i32 as yytype_int16,
     57i32 as yytype_int16, 378i32 as yytype_int16, 138i32 as yytype_int16,
     727i32 as yytype_int16, 143i32 as yytype_int16, 138i32 as yytype_int16,
     145i32 as yytype_int16, 15i32 as yytype_int16, 771i32 as yytype_int16,
     772i32 as yytype_int16, 728i32 as yytype_int16, 388i32 as yytype_int16,
     389i32 as yytype_int16, 138i32 as yytype_int16, 714i32 as yytype_int16,
     138i32 as yytype_int16, 779i32 as yytype_int16, 138i32 as yytype_int16,
     118i32 as yytype_int16, 650i32 as yytype_int16, 744i32 as yytype_int16,
     922i32 as yytype_int16, 138i32 as yytype_int16, 138i32 as yytype_int16,
     727i32 as yytype_int16, 402i32 as yytype_int16, 118i32 as yytype_int16,
     404i32 as yytype_int16, 405i32 as yytype_int16, 88i32 as yytype_int16,
     138i32 as yytype_int16, 794i32 as yytype_int16, 62i32 as yytype_int16,
     757i32 as yytype_int16, 64i32 as yytype_int16, 65i32 as yytype_int16,
     760i32 as yytype_int16, 414i32 as yytype_int16, 138i32 as yytype_int16,
     722i32 as yytype_int16, 15i32 as yytype_int16, 418i32 as yytype_int16,
     90i32 as yytype_int16, 102i32 as yytype_int16, 15i32 as yytype_int16,
     422i32 as yytype_int16, 138i32 as yytype_int16, 1011i32 as yytype_int16,
     71i32 as yytype_int16, 746i32 as yytype_int16, 427i32 as yytype_int16,
     899i32 as yytype_int16, 723i32 as yytype_int16, 136i32 as yytype_int16,
     902i32 as yytype_int16, 432i32 as yytype_int16, 753i32 as yytype_int16,
     905i32 as yytype_int16, 782i32 as yytype_int16, 907i32 as yytype_int16,
     728i32 as yytype_int16, 811i32 as yytype_int16, 812i32 as yytype_int16,
     899i32 as yytype_int16, 61i32 as yytype_int16, 15i32 as yytype_int16,
     902i32 as yytype_int16, 64i32 as yytype_int16, 65i32 as yytype_int16,
     905i32 as yytype_int16, 118i32 as yytype_int16, 907i32 as yytype_int16,
     15i32 as yytype_int16, 138i32 as yytype_int16, 798i32 as yytype_int16,
     55i32 as yytype_int16, 15i32 as yytype_int16, 774i32 as yytype_int16,
     137i32 as yytype_int16, 123i32 as yytype_int16, 136i32 as yytype_int16,
     831i32 as yytype_int16, 16i32 as yytype_int16, 113i32 as yytype_int16,
     114i32 as yytype_int16, 144i32 as yytype_int16, 463i32 as yytype_int16,
     16i32 as yytype_int16, 123i32 as yytype_int16, 852i32 as yytype_int16,
     138i32 as yytype_int16, 815i32 as yytype_int16, 816i32 as yytype_int16,
     136i32 as yytype_int16, 15i32 as yytype_int16, 472i32 as yytype_int16,
     55i32 as yytype_int16, 138i32 as yytype_int16, 15i32 as yytype_int16,
     842i32 as yytype_int16, 138i32 as yytype_int16, 864i32 as yytype_int16,
     15i32 as yytype_int16, 126i32 as yytype_int16, 127i32 as yytype_int16,
     128i32 as yytype_int16, 129i32 as yytype_int16, 130i32 as yytype_int16,
     956i32 as yytype_int16, 486i32 as yytype_int16, 138i32 as yytype_int16,
     488i32 as yytype_int16, 138i32 as yytype_int16, 490i32 as yytype_int16,
     138i32 as yytype_int16, 88i32 as yytype_int16, 113i32 as yytype_int16,
     114i32 as yytype_int16, 138i32 as yytype_int16, 2i32 as yytype_int16,
     956i32 as yytype_int16, 4i32 as yytype_int16, 138i32 as yytype_int16,
     140i32 as yytype_int16, 138i32 as yytype_int16, 925i32 as yytype_int16,
     9i32 as yytype_int16, 10i32 as yytype_int16, 140i32 as yytype_int16,
     102i32 as yytype_int16, 813i32 as yytype_int16, 762i32 as yytype_int16,
     15i32 as yytype_int16, 16i32 as yytype_int16, 17i32 as yytype_int16,
     818i32 as yytype_int16, 26i32 as yytype_int16, 20i32 as yytype_int16,
     463i32 as yytype_int16, 13i32 as yytype_int16, 88i32 as yytype_int16,
     989i32 as yytype_int16, 6i32 as yytype_int16, 991i32 as yytype_int16,
     88i32 as yytype_int16, 993i32 as yytype_int16, 26i32 as yytype_int16,
     995i32 as yytype_int16, 88i32 as yytype_int16, 526i32 as yytype_int16,
     27i32 as yytype_int16, 875i32 as yytype_int16, 973i32 as yytype_int16,
     989i32 as yytype_int16, 102i32 as yytype_int16, 991i32 as yytype_int16,
     714i32 as yytype_int16, 993i32 as yytype_int16, 102i32 as yytype_int16,
     995i32 as yytype_int16, 979i32 as yytype_int16, 26i32 as yytype_int16,
     102i32 as yytype_int16, 741i32 as yytype_int16, 137i32 as yytype_int16,
     928i32 as yytype_int16, 49i32 as yytype_int16, 930i32 as yytype_int16,
     972i32 as yytype_int16, 7i32 as yytype_int16, 933i32 as yytype_int16,
     144i32 as yytype_int16, 1020i32 as yytype_int16, 876i32 as yytype_int16,
     317i32 as yytype_int16, 552i32 as yytype_int16, 88i32 as yytype_int16,
     860i32 as yytype_int16, 112i32 as yytype_int16, 242i32 as yytype_int16,
     63i32 as yytype_int16, 115i32 as yytype_int16, 116i32 as yytype_int16,
     112i32 as yytype_int16, 1020i32 as yytype_int16, 859i32 as yytype_int16,
     115i32 as yytype_int16, 116i32 as yytype_int16, 899i32 as yytype_int16,
     137i32 as yytype_int16, 102i32 as yytype_int16, 941i32 as yytype_int16,
     693i32 as yytype_int16, 137i32 as yytype_int16, 902i32 as yytype_int16,
     -1i32 as yytype_int16, 144i32 as yytype_int16, 137i32 as yytype_int16,
     88i32 as yytype_int16, 899i32 as yytype_int16, 144i32 as yytype_int16,
     699i32 as yytype_int16, 902i32 as yytype_int16, 88i32 as yytype_int16,
     144i32 as yytype_int16, 905i32 as yytype_int16, -1i32 as yytype_int16,
     907i32 as yytype_int16, 88i32 as yytype_int16, 143i32 as yytype_int16,
     -1i32 as yytype_int16, 145i32 as yytype_int16, 102i32 as yytype_int16,
     -1i32 as yytype_int16, 143i32 as yytype_int16, -1i32 as yytype_int16,
     145i32 as yytype_int16, 102i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     102i32 as yytype_int16, 88i32 as yytype_int16, -1i32 as yytype_int16,
     137i32 as yytype_int16, -1i32 as yytype_int16, 71i32 as yytype_int16,
     111i32 as yytype_int16, -1i32 as yytype_int16, 113i32 as yytype_int16,
     955i32 as yytype_int16, 144i32 as yytype_int16, -1i32 as yytype_int16,
     970i32 as yytype_int16, 112i32 as yytype_int16, -1i32 as yytype_int16,
     102i32 as yytype_int16, 115i32 as yytype_int16, 116i32 as yytype_int16,
     617i32 as yytype_int16, 618i32 as yytype_int16, 86i32 as yytype_int16,
     87i32 as yytype_int16, -1i32 as yytype_int16, 135i32 as yytype_int16,
     970i32 as yytype_int16, 137i32 as yytype_int16, 972i32 as yytype_int16,
     973i32 as yytype_int16, 140i32 as yytype_int16, 1001i32 as yytype_int16,
     137i32 as yytype_int16, 971i32 as yytype_int16, 144i32 as yytype_int16,
     135i32 as yytype_int16, 956i32 as yytype_int16, 137i32 as yytype_int16,
     -1i32 as yytype_int16, 144i32 as yytype_int16, 140i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     144i32 as yytype_int16, -1i32 as yytype_int16, 143i32 as yytype_int16,
     970i32 as yytype_int16, 145i32 as yytype_int16, -1i32 as yytype_int16,
     135i32 as yytype_int16, -1i32 as yytype_int16, 137i32 as yytype_int16,
     650i32 as yytype_int16, -1i32 as yytype_int16, 140i32 as yytype_int16,
     16i32 as yytype_int16, 17i32 as yytype_int16, 88i32 as yytype_int16,
     144i32 as yytype_int16, 20i32 as yytype_int16, 125i32 as yytype_int16,
     126i32 as yytype_int16, 127i32 as yytype_int16, 128i32 as yytype_int16,
     129i32 as yytype_int16, 130i32 as yytype_int16, -1i32 as yytype_int16,
     88i32 as yytype_int16, 989i32 as yytype_int16, -1i32 as yytype_int16,
     991i32 as yytype_int16, 102i32 as yytype_int16, 993i32 as yytype_int16,
     51i32 as yytype_int16, 995i32 as yytype_int16, 53i32 as yytype_int16,
     54i32 as yytype_int16, 55i32 as yytype_int16, 56i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 102i32 as yytype_int16,
     971i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     46i32 as yytype_int16, 47i32 as yytype_int16, 88i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 51i32 as yytype_int16,
     52i32 as yytype_int16, 51i32 as yytype_int16, 71i32 as yytype_int16,
     53i32 as yytype_int16, 54i32 as yytype_int16, 55i32 as yytype_int16,
     56i32 as yytype_int16, 202i32 as yytype_int16, 1020i32 as yytype_int16,
     -1i32 as yytype_int16, 102i32 as yytype_int16, 63i32 as yytype_int16,
     64i32 as yytype_int16, 9i32 as yytype_int16, 10i32 as yytype_int16,
     137i32 as yytype_int16, -1i32 as yytype_int16, 212i32 as yytype_int16,
     213i32 as yytype_int16, 15i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 144i32 as yytype_int16, 92i32 as yytype_int16,
     112i32 as yytype_int16, 137i32 as yytype_int16, 715i32 as yytype_int16,
     115i32 as yytype_int16, 116i32 as yytype_int16, 98i32 as yytype_int16,
     99i32 as yytype_int16, 100i32 as yytype_int16, 144i32 as yytype_int16,
     722i32 as yytype_int16, 723i32 as yytype_int16, 724i32 as yytype_int16,
     61i32 as yytype_int16, -1i32 as yytype_int16, 727i32 as yytype_int16,
     64i32 as yytype_int16, 65i32 as yytype_int16, 730i32 as yytype_int16,
     731i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     137i32 as yytype_int16, -1i32 as yytype_int16, 736i32 as yytype_int16,
     737i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 144i32 as yytype_int16, 742i32 as yytype_int16,
     743i32 as yytype_int16, 143i32 as yytype_int16, 125i32 as yytype_int16,
     145i32 as yytype_int16, -1i32 as yytype_int16, 128i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 51i32 as yytype_int16,
     752i32 as yytype_int16, 53i32 as yytype_int16, 54i32 as yytype_int16,
     55i32 as yytype_int16, 56i32 as yytype_int16, 263i32 as yytype_int16,
     -1i32 as yytype_int16, 759i32 as yytype_int16, 140i32 as yytype_int16,
     267i32 as yytype_int16, 762i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 271i32 as yytype_int16, 272i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     276i32 as yytype_int16, 771i32 as yytype_int16, 772i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 281i32 as yytype_int16,
     282i32 as yytype_int16, 113i32 as yytype_int16, 114i32 as yytype_int16,
     779i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 289i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 388i32 as yytype_int16,
     389i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 92i32 as yytype_int16, 793i32 as yytype_int16,
     794i32 as yytype_int16, -1i32 as yytype_int16, 51i32 as yytype_int16,
     -1i32 as yytype_int16, 53i32 as yytype_int16, 54i32 as yytype_int16,
     55i32 as yytype_int16, 56i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 111i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 51i32 as yytype_int16, -1i32 as yytype_int16,
     53i32 as yytype_int16, 54i32 as yytype_int16, 55i32 as yytype_int16,
     56i32 as yytype_int16, 813i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 71i32 as yytype_int16, -1i32 as yytype_int16,
     818i32 as yytype_int16, 420i32 as yytype_int16, 421i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 63i32 as yytype_int16,
     64i32 as yytype_int16, 65i32 as yytype_int16, -1i32 as yytype_int16,
     71i32 as yytype_int16, 334i32 as yytype_int16, 335i32 as yytype_int16,
     336i32 as yytype_int16, 337i32 as yytype_int16, 338i32 as yytype_int16,
     339i32 as yytype_int16, 340i32 as yytype_int16, 341i32 as yytype_int16,
     -1i32 as yytype_int16, 92i32 as yytype_int16, 344i32 as yytype_int16,
     -1i32 as yytype_int16, 346i32 as yytype_int16, -1i32 as yytype_int16,
     842i32 as yytype_int16, 349i32 as yytype_int16, 99i32 as yytype_int16,
     100i32 as yytype_int16, 112i32 as yytype_int16, -1i32 as yytype_int16,
     92i32 as yytype_int16, 115i32 as yytype_int16, 116i32 as yytype_int16,
     -1i32 as yytype_int16, 852i32 as yytype_int16, 853i32 as yytype_int16,
     98i32 as yytype_int16, 99i32 as yytype_int16, 100i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     860i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 864i32 as yytype_int16, -1i32 as yytype_int16,
     467i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 125i32 as yytype_int16, -1i32 as yytype_int16,
     378i32 as yytype_int16, 113i32 as yytype_int16, 114i32 as yytype_int16,
     141i32 as yytype_int16, 142i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 145i32 as yytype_int16, -1i32 as yytype_int16,
     125i32 as yytype_int16, 388i32 as yytype_int16, 389i32 as yytype_int16,
     128i32 as yytype_int16, -1i32 as yytype_int16, 249i32 as yytype_int16,
     250i32 as yytype_int16, 251i32 as yytype_int16, 252i32 as yytype_int16,
     63i32 as yytype_int16, 64i32 as yytype_int16, 65i32 as yytype_int16,
     -1i32 as yytype_int16, 138i32 as yytype_int16, 71i32 as yytype_int16,
     402i32 as yytype_int16, -1i32 as yytype_int16, 404i32 as yytype_int16,
     405i32 as yytype_int16, 263i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 71i32 as yytype_int16, 267i32 as yytype_int16,
     212i32 as yytype_int16, 213i32 as yytype_int16, -1i32 as yytype_int16,
     414i32 as yytype_int16, -1i32 as yytype_int16, 86i32 as yytype_int16,
     87i32 as yytype_int16, 418i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 422i32 as yytype_int16,
     -1i32 as yytype_int16, 86i32 as yytype_int16, 87i32 as yytype_int16,
     -1i32 as yytype_int16, 427i32 as yytype_int16, 922i32 as yytype_int16,
     15i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     432i32 as yytype_int16, -1i32 as yytype_int16, 928i32 as yytype_int16,
     -1i32 as yytype_int16, 930i32 as yytype_int16, -1i32 as yytype_int16,
     51i32 as yytype_int16, 933i32 as yytype_int16, 53i32 as yytype_int16,
     54i32 as yytype_int16, 55i32 as yytype_int16, 56i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 113i32 as yytype_int16,
     114i32 as yytype_int16, 40i32 as yytype_int16, 41i32 as yytype_int16,
     42i32 as yytype_int16, 43i32 as yytype_int16, 44i32 as yytype_int16,
     123i32 as yytype_int16, 124i32 as yytype_int16, 125i32 as yytype_int16,
     126i32 as yytype_int16, 127i32 as yytype_int16, 128i32 as yytype_int16,
     129i32 as yytype_int16, 130i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 463i32 as yytype_int16, 126i32 as yytype_int16,
     127i32 as yytype_int16, 128i32 as yytype_int16, 129i32 as yytype_int16,
     130i32 as yytype_int16, -1i32 as yytype_int16, 271i32 as yytype_int16,
     272i32 as yytype_int16, 472i32 as yytype_int16, 63i32 as yytype_int16,
     64i32 as yytype_int16, 65i32 as yytype_int16, 970i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 92i32 as yytype_int16,
     66i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 98i32 as yytype_int16,
     -1i32 as yytype_int16, 344i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 490i32 as yytype_int16, -1i32 as yytype_int16,
     349i32 as yytype_int16, 350i32 as yytype_int16, 351i32 as yytype_int16,
     352i32 as yytype_int16, 353i32 as yytype_int16, 354i32 as yytype_int16,
     355i32 as yytype_int16, 356i32 as yytype_int16, 357i32 as yytype_int16,
     358i32 as yytype_int16, 359i32 as yytype_int16, 360i32 as yytype_int16,
     361i32 as yytype_int16, 362i32 as yytype_int16, 363i32 as yytype_int16,
     364i32 as yytype_int16, 365i32 as yytype_int16, 366i32 as yytype_int16,
     367i32 as yytype_int16, 368i32 as yytype_int16, 369i32 as yytype_int16,
     370i32 as yytype_int16, 371i32 as yytype_int16, 372i32 as yytype_int16,
     373i32 as yytype_int16, 374i32 as yytype_int16, 375i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 378i32 as yytype_int16,
     -1i32 as yytype_int16, 113i32 as yytype_int16, 114i32 as yytype_int16,
     -1i32 as yytype_int16, 526i32 as yytype_int16, 63i32 as yytype_int16,
     64i32 as yytype_int16, 65i32 as yytype_int16, -1i32 as yytype_int16,
     388i32 as yytype_int16, 389i32 as yytype_int16, -1i32 as yytype_int16,
     335i32 as yytype_int16, 336i32 as yytype_int16, 337i32 as yytype_int16,
     338i32 as yytype_int16, -1i32 as yytype_int16, 340i32 as yytype_int16,
     341i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 402i32 as yytype_int16,
     -1i32 as yytype_int16, 51i32 as yytype_int16, -1i32 as yytype_int16,
     53i32 as yytype_int16, 54i32 as yytype_int16, 55i32 as yytype_int16,
     56i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     63i32 as yytype_int16, 64i32 as yytype_int16, 65i32 as yytype_int16,
     -1i32 as yytype_int16, 416i32 as yytype_int16, -1i32 as yytype_int16,
     418i32 as yytype_int16, -1i32 as yytype_int16, 420i32 as yytype_int16,
     421i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     71i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     427i32 as yytype_int16, -1i32 as yytype_int16, 63i32 as yytype_int16,
     64i32 as yytype_int16, 65i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 113i32 as yytype_int16, 114i32 as yytype_int16,
     436i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     439i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 443i32 as yytype_int16, -1i32 as yytype_int16,
     92i32 as yytype_int16, 446i32 as yytype_int16, -1i32 as yytype_int16,
     448i32 as yytype_int16, 449i32 as yytype_int16, -1i32 as yytype_int16,
     98i32 as yytype_int16, 99i32 as yytype_int16, 100i32 as yytype_int16,
     2i32 as yytype_int16, -1i32 as yytype_int16, 4i32 as yytype_int16,
     5i32 as yytype_int16, 6i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 405i32 as yytype_int16, 113i32 as yytype_int16,
     114i32 as yytype_int16, -1i32 as yytype_int16, 13i32 as yytype_int16,
     -1i32 as yytype_int16, 467i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 820i32 as yytype_int16,
     821i32 as yytype_int16, -1i32 as yytype_int16, 617i32 as yytype_int16,
     618i32 as yytype_int16, 205i32 as yytype_int16, 477i32 as yytype_int16,
     125i32 as yytype_int16, 113i32 as yytype_int16, 114i32 as yytype_int16,
     128i32 as yytype_int16, 211i32 as yytype_int16, 63i32 as yytype_int16,
     64i32 as yytype_int16, 65i32 as yytype_int16, -1i32 as yytype_int16,
     63i32 as yytype_int16, 64i32 as yytype_int16, 65i32 as yytype_int16,
     490i32 as yytype_int16, -1i32 as yytype_int16, 730i32 as yytype_int16,
     731i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 736i32 as yytype_int16,
     737i32 as yytype_int16, -1i32 as yytype_int16, 49i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     53i32 as yytype_int16, 506i32 as yytype_int16, 650i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     240i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     517i32 as yytype_int16, 247i32 as yytype_int16, 51i32 as yytype_int16,
     -1i32 as yytype_int16, 53i32 as yytype_int16, 54i32 as yytype_int16,
     55i32 as yytype_int16, 56i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 765i32 as yytype_int16, 766i32 as yytype_int16,
     77i32 as yytype_int16, 768i32 as yytype_int16, 769i32 as yytype_int16,
     -1i32 as yytype_int16, 113i32 as yytype_int16, 114i32 as yytype_int16,
     535i32 as yytype_int16, 536i32 as yytype_int16, 113i32 as yytype_int16,
     114i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 546i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     902i32 as yytype_int16, -1i32 as yytype_int16, 284i32 as yytype_int16,
     -1i32 as yytype_int16, 689i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 92i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 292i32 as yytype_int16, 293i32 as yytype_int16,
     113i32 as yytype_int16, 98i32 as yytype_int16, -1i32 as yytype_int16,
     297i32 as yytype_int16, -1i32 as yytype_int16, 702i32 as yytype_int16,
     -1i32 as yytype_int16, 715i32 as yytype_int16, 705i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     723i32 as yytype_int16, 724i32 as yytype_int16, 714i32 as yytype_int16,
     -1i32 as yytype_int16, 727i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 730i32 as yytype_int16, 731i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 736i32 as yytype_int16, 737i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 742i32 as yytype_int16, 743i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     842i32 as yytype_int16, 334i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 752i32 as yytype_int16,
     959i32 as yytype_int16, 960i32 as yytype_int16, 961i32 as yytype_int16,
     -1i32 as yytype_int16, 963i32 as yytype_int16, 964i32 as yytype_int16,
     759i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     762i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     771i32 as yytype_int16, 772i32 as yytype_int16, 630i32 as yytype_int16,
     869i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 779i32 as yytype_int16,
     51i32 as yytype_int16, -1i32 as yytype_int16, 53i32 as yytype_int16,
     54i32 as yytype_int16, 55i32 as yytype_int16, 56i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 793i32 as yytype_int16, 794i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 202i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 71i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 660i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 1012i32 as yytype_int16,
     1013i32 as yytype_int16, 1014i32 as yytype_int16,
     1015i32 as yytype_int16, -1i32 as yytype_int16, 668i32 as yytype_int16,
     669i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 617i32 as yytype_int16, -1i32 as yytype_int16,
     1024i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     92i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     98i32 as yytype_int16, 99i32 as yytype_int16, 100i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 423i32 as yytype_int16, 424i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     842i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 650i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 852i32 as yytype_int16, 853i32 as yytype_int16,
     125i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     128i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 719i32 as yytype_int16,
     -1i32 as yytype_int16, 864i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 724i32 as yytype_int16, 725i32 as yytype_int16,
     140i32 as yytype_int16, 727i32 as yytype_int16, 276i32 as yytype_int16,
     -1i32 as yytype_int16, 730i32 as yytype_int16, 731i32 as yytype_int16,
     -1i32 as yytype_int16, 281i32 as yytype_int16, 282i32 as yytype_int16,
     -1i32 as yytype_int16, 736i32 as yytype_int16, 737i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     289i32 as yytype_int16, 2i32 as yytype_int16, 472i32 as yytype_int16,
     4i32 as yytype_int16, 5i32 as yytype_int16, 6i32 as yytype_int16,
     7i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 300i32 as yytype_int16,
     13i32 as yytype_int16, 886i32 as yytype_int16, -1i32 as yytype_int16,
     888i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 892i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     765i32 as yytype_int16, 766i32 as yytype_int16, -1i32 as yytype_int16,
     768i32 as yytype_int16, 769i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 905i32 as yytype_int16,
     -1i32 as yytype_int16, 907i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 778i32 as yytype_int16, 922i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 928i32 as yytype_int16,
     334i32 as yytype_int16, 930i32 as yytype_int16, -1i32 as yytype_int16,
     49i32 as yytype_int16, 933i32 as yytype_int16, 339i32 as yytype_int16,
     -1i32 as yytype_int16, 53i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     346i32 as yytype_int16, 347i32 as yytype_int16, -1i32 as yytype_int16,
     349i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 937i32 as yytype_int16, 938i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 77i32 as yytype_int16, 762i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 824i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 970i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     834i32 as yytype_int16, 835i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     388i32 as yytype_int16, 389i32 as yytype_int16, 842i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 977i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     2i32 as yytype_int16, 982i32 as yytype_int16, 4i32 as yytype_int16,
     -1i32 as yytype_int16, 113i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 404i32 as yytype_int16, 989i32 as yytype_int16,
     -1i32 as yytype_int16, 991i32 as yytype_int16, 13i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 995i32 as yytype_int16,
     -1i32 as yytype_int16, 0i32 as yytype_int16, 414i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 869i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     2i32 as yytype_int16, 422i32 as yytype_int16, 4i32 as yytype_int16,
     876i32 as yytype_int16, 1009i32 as yytype_int16, 13i32 as yytype_int16,
     14i32 as yytype_int16, 15i32 as yytype_int16, 16i32 as yytype_int16,
     17i32 as yytype_int16, 18i32 as yytype_int16, 432i32 as yytype_int16,
     20i32 as yytype_int16, -1i32 as yytype_int16, 616i32 as yytype_int16,
     1020i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     26i32 as yytype_int16, 27i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 49i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 37i32 as yytype_int16,
     38i32 as yytype_int16, -1i32 as yytype_int16, 40i32 as yytype_int16,
     41i32 as yytype_int16, 42i32 as yytype_int16, 43i32 as yytype_int16,
     44i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     463i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 49i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     472i32 as yytype_int16, -1i32 as yytype_int16, 655i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 486i32 as yytype_int16,
     -1i32 as yytype_int16, 488i32 as yytype_int16, -1i32 as yytype_int16,
     202i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 679i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 88i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     113i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 102i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 970i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 112i32 as yytype_int16,
     526i32 as yytype_int16, -1i32 as yytype_int16, 115i32 as yytype_int16,
     116i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     113i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 135i32 as yytype_int16, 136i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 552i32 as yytype_int16,
     140i32 as yytype_int16, 141i32 as yytype_int16, -1i32 as yytype_int16,
     143i32 as yytype_int16, 144i32 as yytype_int16, 145i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 276i32 as yytype_int16,
     746i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 281i32 as yytype_int16, 282i32 as yytype_int16,
     44i32 as yytype_int16, 753i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     289i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 300i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 774i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 202i32 as yytype_int16,
     71i32 as yytype_int16, 72i32 as yytype_int16, 73i32 as yytype_int16,
     74i32 as yytype_int16, 75i32 as yytype_int16, 76i32 as yytype_int16,
     77i32 as yytype_int16, 78i32 as yytype_int16, 79i32 as yytype_int16,
     80i32 as yytype_int16, 81i32 as yytype_int16, 82i32 as yytype_int16,
     83i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     86i32 as yytype_int16, 87i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 618i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 202i32 as yytype_int16,
     334i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 339i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     346i32 as yytype_int16, 347i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     119i32 as yytype_int16, -1i32 as yytype_int16, 121i32 as yytype_int16,
     122i32 as yytype_int16, 123i32 as yytype_int16, 124i32 as yytype_int16,
     125i32 as yytype_int16, 126i32 as yytype_int16, 127i32 as yytype_int16,
     128i32 as yytype_int16, 129i32 as yytype_int16, 130i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 138i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 276i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     281i32 as yytype_int16, 282i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 861i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 289i32 as yytype_int16,
     -1i32 as yytype_int16, 867i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 404i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 276i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     281i32 as yytype_int16, 282i32 as yytype_int16, 414i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 289i32 as yytype_int16,
     -1i32 as yytype_int16, 422i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     715i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 432i32 as yytype_int16,
     -1i32 as yytype_int16, 722i32 as yytype_int16, 723i32 as yytype_int16,
     724i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 334i32 as yytype_int16,
     730i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 339i32 as yytype_int16, -1i32 as yytype_int16,
     736i32 as yytype_int16, 737i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 346i32 as yytype_int16,
     742i32 as yytype_int16, 743i32 as yytype_int16, 349i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     463i32 as yytype_int16, 752i32 as yytype_int16, 334i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 339i32 as yytype_int16, 759i32 as yytype_int16,
     472i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 346i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 349i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 771i32 as yytype_int16,
     772i32 as yytype_int16, -1i32 as yytype_int16, 486i32 as yytype_int16,
     -1i32 as yytype_int16, 488i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 779i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 388i32 as yytype_int16,
     389i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     793i32 as yytype_int16, 794i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     404i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 388i32 as yytype_int16,
     389i32 as yytype_int16, 414i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 813i32 as yytype_int16,
     526i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     422i32 as yytype_int16, 818i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     404i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 432i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 414i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 552i32 as yytype_int16,
     422i32 as yytype_int16, 842i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 432i32 as yytype_int16, 852i32 as yytype_int16,
     853i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 463i32 as yytype_int16,
     -1i32 as yytype_int16, 860i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 864i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 472i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 51i32 as yytype_int16,
     52i32 as yytype_int16, -1i32 as yytype_int16, 463i32 as yytype_int16,
     55i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 472i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 69i32 as yytype_int16,
     70i32 as yytype_int16, 71i32 as yytype_int16, 72i32 as yytype_int16,
     73i32 as yytype_int16, 74i32 as yytype_int16, 75i32 as yytype_int16,
     76i32 as yytype_int16, 77i32 as yytype_int16, 618i32 as yytype_int16,
     -1i32 as yytype_int16, 80i32 as yytype_int16, 81i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 84i32 as yytype_int16,
     85i32 as yytype_int16, 86i32 as yytype_int16, 87i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 526i32 as yytype_int16,
     922i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 98i32 as yytype_int16, 99i32 as yytype_int16,
     928i32 as yytype_int16, -1i32 as yytype_int16, 930i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 933i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 44i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 526i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     121i32 as yytype_int16, 122i32 as yytype_int16, 123i32 as yytype_int16,
     124i32 as yytype_int16, 125i32 as yytype_int16, 126i32 as yytype_int16,
     127i32 as yytype_int16, 128i32 as yytype_int16, 129i32 as yytype_int16,
     130i32 as yytype_int16, -1i32 as yytype_int16, 132i32 as yytype_int16,
     133i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     139i32 as yytype_int16, 140i32 as yytype_int16, 71i32 as yytype_int16,
     72i32 as yytype_int16, 73i32 as yytype_int16, 74i32 as yytype_int16,
     75i32 as yytype_int16, 76i32 as yytype_int16, 77i32 as yytype_int16,
     78i32 as yytype_int16, 79i32 as yytype_int16, 80i32 as yytype_int16,
     81i32 as yytype_int16, 82i32 as yytype_int16, 83i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 86i32 as yytype_int16,
     87i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     715i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 722i32 as yytype_int16, 723i32 as yytype_int16,
     -1i32 as yytype_int16, 618i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 119i32 as yytype_int16,
     -1i32 as yytype_int16, 121i32 as yytype_int16, 122i32 as yytype_int16,
     123i32 as yytype_int16, 124i32 as yytype_int16, 125i32 as yytype_int16,
     126i32 as yytype_int16, 127i32 as yytype_int16, 128i32 as yytype_int16,
     129i32 as yytype_int16, 130i32 as yytype_int16, -1i32 as yytype_int16,
     742i32 as yytype_int16, 743i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 618i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 752i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 759i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 771i32 as yytype_int16,
     772i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 779i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     793i32 as yytype_int16, 794i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 813i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 818i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 715i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 723i32 as yytype_int16, 724i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 730i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 736i32 as yytype_int16,
     737i32 as yytype_int16, -1i32 as yytype_int16, 715i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 742i32 as yytype_int16,
     743i32 as yytype_int16, -1i32 as yytype_int16, 852i32 as yytype_int16,
     853i32 as yytype_int16, 723i32 as yytype_int16, 724i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     752i32 as yytype_int16, 860i32 as yytype_int16, 730i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 864i32 as yytype_int16,
     -1i32 as yytype_int16, 759i32 as yytype_int16, 736i32 as yytype_int16,
     737i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 742i32 as yytype_int16,
     743i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 771i32 as yytype_int16, 772i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     752i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     779i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 759i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 793i32 as yytype_int16,
     794i32 as yytype_int16, 771i32 as yytype_int16, 772i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     779i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     922i32 as yytype_int16, -1i32 as yytype_int16, 793i32 as yytype_int16,
     794i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     928i32 as yytype_int16, -1i32 as yytype_int16, 930i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 933i32 as yytype_int16,
     -1i32 as yytype_int16, 71i32 as yytype_int16, 72i32 as yytype_int16,
     73i32 as yytype_int16, 74i32 as yytype_int16, 75i32 as yytype_int16,
     76i32 as yytype_int16, 77i32 as yytype_int16, 78i32 as yytype_int16,
     79i32 as yytype_int16, 80i32 as yytype_int16, 81i32 as yytype_int16,
     82i32 as yytype_int16, 83i32 as yytype_int16, -1i32 as yytype_int16,
     842i32 as yytype_int16, 86i32 as yytype_int16, 87i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 852i32 as yytype_int16, 853i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     860i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 864i32 as yytype_int16, -1i32 as yytype_int16,
     842i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 852i32 as yytype_int16, 853i32 as yytype_int16,
     121i32 as yytype_int16, 122i32 as yytype_int16, 123i32 as yytype_int16,
     124i32 as yytype_int16, 125i32 as yytype_int16, 126i32 as yytype_int16,
     127i32 as yytype_int16, 128i32 as yytype_int16, 129i32 as yytype_int16,
     130i32 as yytype_int16, 864i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 922i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 928i32 as yytype_int16,
     -1i32 as yytype_int16, 930i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 933i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 922i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 928i32 as yytype_int16,
     -1i32 as yytype_int16, 930i32 as yytype_int16, 0i32 as yytype_int16,
     1i32 as yytype_int16, 933i32 as yytype_int16, 3i32 as yytype_int16,
     4i32 as yytype_int16, 5i32 as yytype_int16, 6i32 as yytype_int16,
     7i32 as yytype_int16, 8i32 as yytype_int16, 9i32 as yytype_int16,
     10i32 as yytype_int16, 11i32 as yytype_int16, 12i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     19i32 as yytype_int16, -1i32 as yytype_int16, 21i32 as yytype_int16,
     22i32 as yytype_int16, 23i32 as yytype_int16, 24i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 30i32 as yytype_int16,
     31i32 as yytype_int16, 32i32 as yytype_int16, 33i32 as yytype_int16,
     34i32 as yytype_int16, 35i32 as yytype_int16, 36i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 39i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 45i32 as yytype_int16,
     46i32 as yytype_int16, 47i32 as yytype_int16, 48i32 as yytype_int16,
     49i32 as yytype_int16, 50i32 as yytype_int16, 51i32 as yytype_int16,
     52i32 as yytype_int16, 53i32 as yytype_int16, 54i32 as yytype_int16,
     55i32 as yytype_int16, 56i32 as yytype_int16, -1i32 as yytype_int16,
     58i32 as yytype_int16, 59i32 as yytype_int16, 60i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 63i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 66i32 as yytype_int16,
     67i32 as yytype_int16, -1i32 as yytype_int16, 69i32 as yytype_int16,
     70i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 89i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 92i32 as yytype_int16, 93i32 as yytype_int16,
     -1i32 as yytype_int16, 95i32 as yytype_int16, 96i32 as yytype_int16,
     -1i32 as yytype_int16, 98i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 101i32 as yytype_int16, -1i32 as yytype_int16,
     103i32 as yytype_int16, 104i32 as yytype_int16, 105i32 as yytype_int16,
     106i32 as yytype_int16, 107i32 as yytype_int16, 108i32 as yytype_int16,
     0i32 as yytype_int16, -1i32 as yytype_int16, 111i32 as yytype_int16,
     112i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     115i32 as yytype_int16, 116i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 13i32 as yytype_int16, 14i32 as yytype_int16,
     15i32 as yytype_int16, 16i32 as yytype_int16, 17i32 as yytype_int16,
     18i32 as yytype_int16, -1i32 as yytype_int16, 20i32 as yytype_int16,
     -1i32 as yytype_int16, 131i32 as yytype_int16, 132i32 as yytype_int16,
     133i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     27i32 as yytype_int16, 28i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 143i32 as yytype_int16, -1i32 as yytype_int16,
     145i32 as yytype_int16, 37i32 as yytype_int16, 38i32 as yytype_int16,
     -1i32 as yytype_int16, 40i32 as yytype_int16, 41i32 as yytype_int16,
     42i32 as yytype_int16, 43i32 as yytype_int16, 44i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     57i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 71i32 as yytype_int16,
     72i32 as yytype_int16, 73i32 as yytype_int16, 74i32 as yytype_int16,
     75i32 as yytype_int16, 76i32 as yytype_int16, 77i32 as yytype_int16,
     78i32 as yytype_int16, 79i32 as yytype_int16, 80i32 as yytype_int16,
     81i32 as yytype_int16, 82i32 as yytype_int16, 83i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 86i32 as yytype_int16,
     87i32 as yytype_int16, 88i32 as yytype_int16, -1i32 as yytype_int16,
     90i32 as yytype_int16, 91i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 97i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     102i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 112i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 115i32 as yytype_int16, 116i32 as yytype_int16,
     -1i32 as yytype_int16, 118i32 as yytype_int16, 119i32 as yytype_int16,
     -1i32 as yytype_int16, 121i32 as yytype_int16, 122i32 as yytype_int16,
     123i32 as yytype_int16, 124i32 as yytype_int16, 125i32 as yytype_int16,
     126i32 as yytype_int16, 127i32 as yytype_int16, 128i32 as yytype_int16,
     129i32 as yytype_int16, 130i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 0i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 136i32 as yytype_int16, 137i32 as yytype_int16,
     138i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     141i32 as yytype_int16, 142i32 as yytype_int16, 143i32 as yytype_int16,
     144i32 as yytype_int16, 145i32 as yytype_int16, 13i32 as yytype_int16,
     14i32 as yytype_int16, 15i32 as yytype_int16, 16i32 as yytype_int16,
     17i32 as yytype_int16, 18i32 as yytype_int16, -1i32 as yytype_int16,
     20i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 27i32 as yytype_int16, 28i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 37i32 as yytype_int16,
     38i32 as yytype_int16, -1i32 as yytype_int16, 40i32 as yytype_int16,
     41i32 as yytype_int16, 42i32 as yytype_int16, 43i32 as yytype_int16,
     44i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     71i32 as yytype_int16, 72i32 as yytype_int16, 73i32 as yytype_int16,
     74i32 as yytype_int16, 75i32 as yytype_int16, 76i32 as yytype_int16,
     77i32 as yytype_int16, 78i32 as yytype_int16, 79i32 as yytype_int16,
     80i32 as yytype_int16, 81i32 as yytype_int16, 82i32 as yytype_int16,
     83i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     86i32 as yytype_int16, 87i32 as yytype_int16, 88i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 91i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 97i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 102i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 112i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 115i32 as yytype_int16,
     116i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     119i32 as yytype_int16, -1i32 as yytype_int16, 121i32 as yytype_int16,
     122i32 as yytype_int16, 123i32 as yytype_int16, 124i32 as yytype_int16,
     125i32 as yytype_int16, 126i32 as yytype_int16, 127i32 as yytype_int16,
     128i32 as yytype_int16, 129i32 as yytype_int16, 130i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 0i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 136i32 as yytype_int16,
     137i32 as yytype_int16, 138i32 as yytype_int16, -1i32 as yytype_int16,
     140i32 as yytype_int16, 141i32 as yytype_int16, 142i32 as yytype_int16,
     143i32 as yytype_int16, 144i32 as yytype_int16, 145i32 as yytype_int16,
     13i32 as yytype_int16, 14i32 as yytype_int16, 15i32 as yytype_int16,
     -1i32 as yytype_int16, 17i32 as yytype_int16, 18i32 as yytype_int16,
     -1i32 as yytype_int16, 20i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 26i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     37i32 as yytype_int16, 38i32 as yytype_int16, -1i32 as yytype_int16,
     40i32 as yytype_int16, 41i32 as yytype_int16, 42i32 as yytype_int16,
     43i32 as yytype_int16, 44i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 71i32 as yytype_int16, 72i32 as yytype_int16,
     73i32 as yytype_int16, 74i32 as yytype_int16, 75i32 as yytype_int16,
     76i32 as yytype_int16, 77i32 as yytype_int16, 78i32 as yytype_int16,
     79i32 as yytype_int16, 80i32 as yytype_int16, 81i32 as yytype_int16,
     82i32 as yytype_int16, 83i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 86i32 as yytype_int16, 87i32 as yytype_int16,
     88i32 as yytype_int16, -1i32 as yytype_int16, 90i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 102i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     112i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     115i32 as yytype_int16, 116i32 as yytype_int16, -1i32 as yytype_int16,
     118i32 as yytype_int16, 119i32 as yytype_int16, -1i32 as yytype_int16,
     121i32 as yytype_int16, 122i32 as yytype_int16, 123i32 as yytype_int16,
     124i32 as yytype_int16, 125i32 as yytype_int16, 126i32 as yytype_int16,
     127i32 as yytype_int16, 128i32 as yytype_int16, 129i32 as yytype_int16,
     130i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     0i32 as yytype_int16, -1i32 as yytype_int16, 135i32 as yytype_int16,
     136i32 as yytype_int16, 137i32 as yytype_int16, 138i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 141i32 as yytype_int16,
     -1i32 as yytype_int16, 143i32 as yytype_int16, 144i32 as yytype_int16,
     145i32 as yytype_int16, 13i32 as yytype_int16, 14i32 as yytype_int16,
     15i32 as yytype_int16, -1i32 as yytype_int16, 17i32 as yytype_int16,
     18i32 as yytype_int16, -1i32 as yytype_int16, 20i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 26i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 37i32 as yytype_int16, 38i32 as yytype_int16,
     -1i32 as yytype_int16, 40i32 as yytype_int16, 41i32 as yytype_int16,
     42i32 as yytype_int16, 43i32 as yytype_int16, 44i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 71i32 as yytype_int16,
     72i32 as yytype_int16, 73i32 as yytype_int16, 74i32 as yytype_int16,
     75i32 as yytype_int16, 76i32 as yytype_int16, 77i32 as yytype_int16,
     78i32 as yytype_int16, 79i32 as yytype_int16, 80i32 as yytype_int16,
     81i32 as yytype_int16, 82i32 as yytype_int16, 83i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 86i32 as yytype_int16,
     87i32 as yytype_int16, 88i32 as yytype_int16, -1i32 as yytype_int16,
     90i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     102i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 112i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 115i32 as yytype_int16, 116i32 as yytype_int16,
     -1i32 as yytype_int16, 118i32 as yytype_int16, 119i32 as yytype_int16,
     -1i32 as yytype_int16, 121i32 as yytype_int16, 122i32 as yytype_int16,
     123i32 as yytype_int16, 124i32 as yytype_int16, 125i32 as yytype_int16,
     126i32 as yytype_int16, 127i32 as yytype_int16, 128i32 as yytype_int16,
     129i32 as yytype_int16, 130i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 0i32 as yytype_int16, -1i32 as yytype_int16,
     135i32 as yytype_int16, 136i32 as yytype_int16, 137i32 as yytype_int16,
     138i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     141i32 as yytype_int16, -1i32 as yytype_int16, 143i32 as yytype_int16,
     144i32 as yytype_int16, 145i32 as yytype_int16, 13i32 as yytype_int16,
     14i32 as yytype_int16, 15i32 as yytype_int16, -1i32 as yytype_int16,
     17i32 as yytype_int16, 18i32 as yytype_int16, -1i32 as yytype_int16,
     20i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 37i32 as yytype_int16,
     38i32 as yytype_int16, -1i32 as yytype_int16, 40i32 as yytype_int16,
     41i32 as yytype_int16, 42i32 as yytype_int16, 43i32 as yytype_int16,
     44i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     71i32 as yytype_int16, 72i32 as yytype_int16, 73i32 as yytype_int16,
     74i32 as yytype_int16, 75i32 as yytype_int16, 76i32 as yytype_int16,
     77i32 as yytype_int16, 78i32 as yytype_int16, 79i32 as yytype_int16,
     80i32 as yytype_int16, 81i32 as yytype_int16, 82i32 as yytype_int16,
     83i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     86i32 as yytype_int16, 87i32 as yytype_int16, 88i32 as yytype_int16,
     -1i32 as yytype_int16, 90i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 102i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 112i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 115i32 as yytype_int16,
     116i32 as yytype_int16, -1i32 as yytype_int16, 118i32 as yytype_int16,
     119i32 as yytype_int16, -1i32 as yytype_int16, 121i32 as yytype_int16,
     122i32 as yytype_int16, 123i32 as yytype_int16, 124i32 as yytype_int16,
     125i32 as yytype_int16, 126i32 as yytype_int16, 127i32 as yytype_int16,
     128i32 as yytype_int16, 129i32 as yytype_int16, 130i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 0i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 136i32 as yytype_int16,
     137i32 as yytype_int16, 138i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 141i32 as yytype_int16, -1i32 as yytype_int16,
     143i32 as yytype_int16, 144i32 as yytype_int16, 145i32 as yytype_int16,
     13i32 as yytype_int16, 14i32 as yytype_int16, 15i32 as yytype_int16,
     -1i32 as yytype_int16, 17i32 as yytype_int16, 18i32 as yytype_int16,
     -1i32 as yytype_int16, 20i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     37i32 as yytype_int16, 38i32 as yytype_int16, -1i32 as yytype_int16,
     40i32 as yytype_int16, 41i32 as yytype_int16, 42i32 as yytype_int16,
     43i32 as yytype_int16, 44i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 71i32 as yytype_int16, 72i32 as yytype_int16,
     73i32 as yytype_int16, 74i32 as yytype_int16, 75i32 as yytype_int16,
     76i32 as yytype_int16, 77i32 as yytype_int16, 78i32 as yytype_int16,
     79i32 as yytype_int16, 80i32 as yytype_int16, 81i32 as yytype_int16,
     82i32 as yytype_int16, 83i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 86i32 as yytype_int16, 87i32 as yytype_int16,
     88i32 as yytype_int16, -1i32 as yytype_int16, 90i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 102i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     112i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     115i32 as yytype_int16, 116i32 as yytype_int16, -1i32 as yytype_int16,
     118i32 as yytype_int16, 119i32 as yytype_int16, -1i32 as yytype_int16,
     121i32 as yytype_int16, 122i32 as yytype_int16, 123i32 as yytype_int16,
     124i32 as yytype_int16, 125i32 as yytype_int16, 126i32 as yytype_int16,
     127i32 as yytype_int16, 128i32 as yytype_int16, 129i32 as yytype_int16,
     130i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     136i32 as yytype_int16, 137i32 as yytype_int16, 138i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 141i32 as yytype_int16,
     -1i32 as yytype_int16, 143i32 as yytype_int16, 144i32 as yytype_int16,
     145i32 as yytype_int16, 1i32 as yytype_int16, -1i32 as yytype_int16,
     3i32 as yytype_int16, 4i32 as yytype_int16, 5i32 as yytype_int16,
     6i32 as yytype_int16, 7i32 as yytype_int16, 8i32 as yytype_int16,
     9i32 as yytype_int16, 10i32 as yytype_int16, 11i32 as yytype_int16,
     12i32 as yytype_int16, 13i32 as yytype_int16, 14i32 as yytype_int16,
     15i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     18i32 as yytype_int16, 19i32 as yytype_int16, -1i32 as yytype_int16,
     21i32 as yytype_int16, 22i32 as yytype_int16, 23i32 as yytype_int16,
     24i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     30i32 as yytype_int16, 31i32 as yytype_int16, 32i32 as yytype_int16,
     33i32 as yytype_int16, 34i32 as yytype_int16, 35i32 as yytype_int16,
     36i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     39i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     45i32 as yytype_int16, -1i32 as yytype_int16, 47i32 as yytype_int16,
     48i32 as yytype_int16, 49i32 as yytype_int16, 50i32 as yytype_int16,
     51i32 as yytype_int16, 52i32 as yytype_int16, 53i32 as yytype_int16,
     54i32 as yytype_int16, 55i32 as yytype_int16, 56i32 as yytype_int16,
     -1i32 as yytype_int16, 58i32 as yytype_int16, 59i32 as yytype_int16,
     60i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     63i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     66i32 as yytype_int16, 67i32 as yytype_int16, -1i32 as yytype_int16,
     69i32 as yytype_int16, 70i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 89i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 92i32 as yytype_int16,
     93i32 as yytype_int16, -1i32 as yytype_int16, 95i32 as yytype_int16,
     96i32 as yytype_int16, -1i32 as yytype_int16, 98i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 101i32 as yytype_int16,
     -1i32 as yytype_int16, 103i32 as yytype_int16, 104i32 as yytype_int16,
     105i32 as yytype_int16, 106i32 as yytype_int16, 107i32 as yytype_int16,
     108i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     111i32 as yytype_int16, 112i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 115i32 as yytype_int16, 116i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 131i32 as yytype_int16,
     132i32 as yytype_int16, 133i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 143i32 as yytype_int16,
     1i32 as yytype_int16, 145i32 as yytype_int16, 3i32 as yytype_int16,
     4i32 as yytype_int16, 5i32 as yytype_int16, 6i32 as yytype_int16,
     7i32 as yytype_int16, 8i32 as yytype_int16, 9i32 as yytype_int16,
     10i32 as yytype_int16, 11i32 as yytype_int16, 12i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 15i32 as yytype_int16,
     -1i32 as yytype_int16, 17i32 as yytype_int16, 18i32 as yytype_int16,
     19i32 as yytype_int16, -1i32 as yytype_int16, 21i32 as yytype_int16,
     22i32 as yytype_int16, 23i32 as yytype_int16, 24i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 30i32 as yytype_int16,
     31i32 as yytype_int16, 32i32 as yytype_int16, 33i32 as yytype_int16,
     34i32 as yytype_int16, 35i32 as yytype_int16, 36i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 39i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 45i32 as yytype_int16,
     -1i32 as yytype_int16, 47i32 as yytype_int16, 48i32 as yytype_int16,
     49i32 as yytype_int16, 50i32 as yytype_int16, 51i32 as yytype_int16,
     52i32 as yytype_int16, 53i32 as yytype_int16, 54i32 as yytype_int16,
     55i32 as yytype_int16, 56i32 as yytype_int16, -1i32 as yytype_int16,
     58i32 as yytype_int16, 59i32 as yytype_int16, 60i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 63i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 66i32 as yytype_int16,
     67i32 as yytype_int16, -1i32 as yytype_int16, 69i32 as yytype_int16,
     70i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 89i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 92i32 as yytype_int16, 93i32 as yytype_int16,
     -1i32 as yytype_int16, 95i32 as yytype_int16, 96i32 as yytype_int16,
     -1i32 as yytype_int16, 98i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 101i32 as yytype_int16, -1i32 as yytype_int16,
     103i32 as yytype_int16, 104i32 as yytype_int16, 105i32 as yytype_int16,
     106i32 as yytype_int16, 107i32 as yytype_int16, 108i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 111i32 as yytype_int16,
     112i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     115i32 as yytype_int16, 116i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 131i32 as yytype_int16, 132i32 as yytype_int16,
     133i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 143i32 as yytype_int16, 1i32 as yytype_int16,
     145i32 as yytype_int16, 3i32 as yytype_int16, 4i32 as yytype_int16,
     5i32 as yytype_int16, 6i32 as yytype_int16, 7i32 as yytype_int16,
     8i32 as yytype_int16, 9i32 as yytype_int16, 10i32 as yytype_int16,
     11i32 as yytype_int16, 12i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 15i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 18i32 as yytype_int16, 19i32 as yytype_int16,
     20i32 as yytype_int16, 21i32 as yytype_int16, 22i32 as yytype_int16,
     23i32 as yytype_int16, 24i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 30i32 as yytype_int16, 31i32 as yytype_int16,
     32i32 as yytype_int16, 33i32 as yytype_int16, 34i32 as yytype_int16,
     35i32 as yytype_int16, 36i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 39i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 45i32 as yytype_int16, -1i32 as yytype_int16,
     47i32 as yytype_int16, 48i32 as yytype_int16, 49i32 as yytype_int16,
     50i32 as yytype_int16, 51i32 as yytype_int16, 52i32 as yytype_int16,
     53i32 as yytype_int16, 54i32 as yytype_int16, 55i32 as yytype_int16,
     56i32 as yytype_int16, -1i32 as yytype_int16, 58i32 as yytype_int16,
     59i32 as yytype_int16, 60i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 63i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 66i32 as yytype_int16, 67i32 as yytype_int16,
     -1i32 as yytype_int16, 69i32 as yytype_int16, 70i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     89i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     92i32 as yytype_int16, 93i32 as yytype_int16, -1i32 as yytype_int16,
     95i32 as yytype_int16, 96i32 as yytype_int16, -1i32 as yytype_int16,
     98i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     101i32 as yytype_int16, -1i32 as yytype_int16, 103i32 as yytype_int16,
     104i32 as yytype_int16, 105i32 as yytype_int16, 106i32 as yytype_int16,
     107i32 as yytype_int16, 108i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 111i32 as yytype_int16, 112i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 115i32 as yytype_int16,
     116i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     131i32 as yytype_int16, 132i32 as yytype_int16, 133i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     143i32 as yytype_int16, 1i32 as yytype_int16, 145i32 as yytype_int16,
     3i32 as yytype_int16, 4i32 as yytype_int16, 5i32 as yytype_int16,
     6i32 as yytype_int16, 7i32 as yytype_int16, 8i32 as yytype_int16,
     9i32 as yytype_int16, 10i32 as yytype_int16, 11i32 as yytype_int16,
     12i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     15i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     18i32 as yytype_int16, 19i32 as yytype_int16, -1i32 as yytype_int16,
     21i32 as yytype_int16, 22i32 as yytype_int16, 23i32 as yytype_int16,
     24i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     30i32 as yytype_int16, 31i32 as yytype_int16, 32i32 as yytype_int16,
     33i32 as yytype_int16, 34i32 as yytype_int16, 35i32 as yytype_int16,
     36i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     39i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     45i32 as yytype_int16, -1i32 as yytype_int16, 47i32 as yytype_int16,
     48i32 as yytype_int16, 49i32 as yytype_int16, 50i32 as yytype_int16,
     51i32 as yytype_int16, 52i32 as yytype_int16, 53i32 as yytype_int16,
     54i32 as yytype_int16, 55i32 as yytype_int16, 56i32 as yytype_int16,
     -1i32 as yytype_int16, 58i32 as yytype_int16, 59i32 as yytype_int16,
     60i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     63i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     66i32 as yytype_int16, 67i32 as yytype_int16, -1i32 as yytype_int16,
     69i32 as yytype_int16, 70i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 89i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 92i32 as yytype_int16,
     93i32 as yytype_int16, -1i32 as yytype_int16, 95i32 as yytype_int16,
     96i32 as yytype_int16, -1i32 as yytype_int16, 98i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 101i32 as yytype_int16,
     -1i32 as yytype_int16, 103i32 as yytype_int16, 104i32 as yytype_int16,
     105i32 as yytype_int16, 106i32 as yytype_int16, 107i32 as yytype_int16,
     108i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     111i32 as yytype_int16, 112i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 115i32 as yytype_int16, 116i32 as yytype_int16,
     1i32 as yytype_int16, -1i32 as yytype_int16, 3i32 as yytype_int16,
     4i32 as yytype_int16, 5i32 as yytype_int16, 6i32 as yytype_int16,
     7i32 as yytype_int16, 8i32 as yytype_int16, 9i32 as yytype_int16,
     10i32 as yytype_int16, 11i32 as yytype_int16, 12i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 131i32 as yytype_int16,
     132i32 as yytype_int16, 133i32 as yytype_int16, -1i32 as yytype_int16,
     19i32 as yytype_int16, -1i32 as yytype_int16, 21i32 as yytype_int16,
     22i32 as yytype_int16, 23i32 as yytype_int16, 24i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 143i32 as yytype_int16,
     -1i32 as yytype_int16, 145i32 as yytype_int16, 30i32 as yytype_int16,
     31i32 as yytype_int16, 32i32 as yytype_int16, 33i32 as yytype_int16,
     34i32 as yytype_int16, 35i32 as yytype_int16, 36i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 39i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 45i32 as yytype_int16,
     46i32 as yytype_int16, 47i32 as yytype_int16, 48i32 as yytype_int16,
     49i32 as yytype_int16, 50i32 as yytype_int16, 51i32 as yytype_int16,
     52i32 as yytype_int16, 53i32 as yytype_int16, 54i32 as yytype_int16,
     55i32 as yytype_int16, 56i32 as yytype_int16, -1i32 as yytype_int16,
     58i32 as yytype_int16, 59i32 as yytype_int16, 60i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 63i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 66i32 as yytype_int16,
     67i32 as yytype_int16, -1i32 as yytype_int16, 69i32 as yytype_int16,
     70i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 89i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 92i32 as yytype_int16, 93i32 as yytype_int16,
     -1i32 as yytype_int16, 95i32 as yytype_int16, 96i32 as yytype_int16,
     -1i32 as yytype_int16, 98i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 101i32 as yytype_int16, -1i32 as yytype_int16,
     103i32 as yytype_int16, 104i32 as yytype_int16, 105i32 as yytype_int16,
     106i32 as yytype_int16, 107i32 as yytype_int16, 108i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 111i32 as yytype_int16,
     112i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     115i32 as yytype_int16, 116i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 131i32 as yytype_int16, 132i32 as yytype_int16,
     133i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     136i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 143i32 as yytype_int16, 1i32 as yytype_int16,
     145i32 as yytype_int16, 3i32 as yytype_int16, 4i32 as yytype_int16,
     5i32 as yytype_int16, 6i32 as yytype_int16, 7i32 as yytype_int16,
     8i32 as yytype_int16, 9i32 as yytype_int16, 10i32 as yytype_int16,
     11i32 as yytype_int16, 12i32 as yytype_int16, -1i32 as yytype_int16,
     14i32 as yytype_int16, 15i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 19i32 as yytype_int16,
     -1i32 as yytype_int16, 21i32 as yytype_int16, 22i32 as yytype_int16,
     23i32 as yytype_int16, 24i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 30i32 as yytype_int16, 31i32 as yytype_int16,
     32i32 as yytype_int16, 33i32 as yytype_int16, 34i32 as yytype_int16,
     35i32 as yytype_int16, 36i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 39i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 45i32 as yytype_int16, -1i32 as yytype_int16,
     47i32 as yytype_int16, 48i32 as yytype_int16, 49i32 as yytype_int16,
     50i32 as yytype_int16, 51i32 as yytype_int16, 52i32 as yytype_int16,
     53i32 as yytype_int16, 54i32 as yytype_int16, 55i32 as yytype_int16,
     56i32 as yytype_int16, -1i32 as yytype_int16, 58i32 as yytype_int16,
     59i32 as yytype_int16, 60i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 63i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 66i32 as yytype_int16, 67i32 as yytype_int16,
     -1i32 as yytype_int16, 69i32 as yytype_int16, 70i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     89i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     92i32 as yytype_int16, 93i32 as yytype_int16, -1i32 as yytype_int16,
     95i32 as yytype_int16, 96i32 as yytype_int16, -1i32 as yytype_int16,
     98i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     101i32 as yytype_int16, -1i32 as yytype_int16, 103i32 as yytype_int16,
     104i32 as yytype_int16, 105i32 as yytype_int16, 106i32 as yytype_int16,
     107i32 as yytype_int16, 108i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 111i32 as yytype_int16, 112i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 115i32 as yytype_int16,
     116i32 as yytype_int16, 1i32 as yytype_int16, -1i32 as yytype_int16,
     3i32 as yytype_int16, 4i32 as yytype_int16, 5i32 as yytype_int16,
     6i32 as yytype_int16, 7i32 as yytype_int16, 8i32 as yytype_int16,
     9i32 as yytype_int16, 10i32 as yytype_int16, 11i32 as yytype_int16,
     12i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     131i32 as yytype_int16, 132i32 as yytype_int16, 133i32 as yytype_int16,
     -1i32 as yytype_int16, 19i32 as yytype_int16, -1i32 as yytype_int16,
     21i32 as yytype_int16, 22i32 as yytype_int16, 23i32 as yytype_int16,
     24i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     143i32 as yytype_int16, -1i32 as yytype_int16, 145i32 as yytype_int16,
     30i32 as yytype_int16, 31i32 as yytype_int16, 32i32 as yytype_int16,
     33i32 as yytype_int16, 34i32 as yytype_int16, 35i32 as yytype_int16,
     36i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     39i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     45i32 as yytype_int16, -1i32 as yytype_int16, 47i32 as yytype_int16,
     48i32 as yytype_int16, 49i32 as yytype_int16, 50i32 as yytype_int16,
     51i32 as yytype_int16, 52i32 as yytype_int16, 53i32 as yytype_int16,
     54i32 as yytype_int16, 55i32 as yytype_int16, 56i32 as yytype_int16,
     -1i32 as yytype_int16, 58i32 as yytype_int16, 59i32 as yytype_int16,
     60i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     63i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     66i32 as yytype_int16, 67i32 as yytype_int16, -1i32 as yytype_int16,
     69i32 as yytype_int16, 70i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 89i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 92i32 as yytype_int16,
     93i32 as yytype_int16, -1i32 as yytype_int16, 95i32 as yytype_int16,
     96i32 as yytype_int16, -1i32 as yytype_int16, 98i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 101i32 as yytype_int16,
     -1i32 as yytype_int16, 103i32 as yytype_int16, 104i32 as yytype_int16,
     105i32 as yytype_int16, 106i32 as yytype_int16, 107i32 as yytype_int16,
     108i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     111i32 as yytype_int16, 112i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 115i32 as yytype_int16, 116i32 as yytype_int16,
     1i32 as yytype_int16, -1i32 as yytype_int16, 3i32 as yytype_int16,
     4i32 as yytype_int16, 5i32 as yytype_int16, 6i32 as yytype_int16,
     7i32 as yytype_int16, 8i32 as yytype_int16, 9i32 as yytype_int16,
     10i32 as yytype_int16, 11i32 as yytype_int16, 12i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 131i32 as yytype_int16,
     132i32 as yytype_int16, 133i32 as yytype_int16, -1i32 as yytype_int16,
     19i32 as yytype_int16, -1i32 as yytype_int16, 21i32 as yytype_int16,
     22i32 as yytype_int16, 23i32 as yytype_int16, 24i32 as yytype_int16,
     141i32 as yytype_int16, -1i32 as yytype_int16, 143i32 as yytype_int16,
     -1i32 as yytype_int16, 145i32 as yytype_int16, 30i32 as yytype_int16,
     31i32 as yytype_int16, 32i32 as yytype_int16, 33i32 as yytype_int16,
     34i32 as yytype_int16, 35i32 as yytype_int16, 36i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 39i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 45i32 as yytype_int16,
     -1i32 as yytype_int16, 47i32 as yytype_int16, 48i32 as yytype_int16,
     49i32 as yytype_int16, 50i32 as yytype_int16, 51i32 as yytype_int16,
     52i32 as yytype_int16, 53i32 as yytype_int16, 54i32 as yytype_int16,
     55i32 as yytype_int16, 56i32 as yytype_int16, -1i32 as yytype_int16,
     58i32 as yytype_int16, 59i32 as yytype_int16, 60i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 63i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 66i32 as yytype_int16,
     67i32 as yytype_int16, -1i32 as yytype_int16, 69i32 as yytype_int16,
     70i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 89i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 92i32 as yytype_int16, 93i32 as yytype_int16,
     -1i32 as yytype_int16, 95i32 as yytype_int16, 96i32 as yytype_int16,
     -1i32 as yytype_int16, 98i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 101i32 as yytype_int16, -1i32 as yytype_int16,
     103i32 as yytype_int16, 104i32 as yytype_int16, 105i32 as yytype_int16,
     106i32 as yytype_int16, 107i32 as yytype_int16, 108i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 111i32 as yytype_int16,
     112i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     115i32 as yytype_int16, 116i32 as yytype_int16, 1i32 as yytype_int16,
     -1i32 as yytype_int16, 3i32 as yytype_int16, 4i32 as yytype_int16,
     5i32 as yytype_int16, 6i32 as yytype_int16, 7i32 as yytype_int16,
     8i32 as yytype_int16, 9i32 as yytype_int16, 10i32 as yytype_int16,
     11i32 as yytype_int16, 12i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 131i32 as yytype_int16, 132i32 as yytype_int16,
     133i32 as yytype_int16, -1i32 as yytype_int16, 19i32 as yytype_int16,
     -1i32 as yytype_int16, 21i32 as yytype_int16, 22i32 as yytype_int16,
     23i32 as yytype_int16, 24i32 as yytype_int16, 141i32 as yytype_int16,
     -1i32 as yytype_int16, 143i32 as yytype_int16, -1i32 as yytype_int16,
     145i32 as yytype_int16, 30i32 as yytype_int16, 31i32 as yytype_int16,
     32i32 as yytype_int16, 33i32 as yytype_int16, 34i32 as yytype_int16,
     35i32 as yytype_int16, 36i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 39i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 45i32 as yytype_int16, -1i32 as yytype_int16,
     47i32 as yytype_int16, 48i32 as yytype_int16, 49i32 as yytype_int16,
     50i32 as yytype_int16, 51i32 as yytype_int16, 52i32 as yytype_int16,
     53i32 as yytype_int16, 54i32 as yytype_int16, 55i32 as yytype_int16,
     56i32 as yytype_int16, -1i32 as yytype_int16, 58i32 as yytype_int16,
     59i32 as yytype_int16, 60i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 63i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 66i32 as yytype_int16, 67i32 as yytype_int16,
     -1i32 as yytype_int16, 69i32 as yytype_int16, 70i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     89i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     92i32 as yytype_int16, 93i32 as yytype_int16, -1i32 as yytype_int16,
     95i32 as yytype_int16, 96i32 as yytype_int16, -1i32 as yytype_int16,
     98i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     101i32 as yytype_int16, -1i32 as yytype_int16, 103i32 as yytype_int16,
     104i32 as yytype_int16, 105i32 as yytype_int16, 106i32 as yytype_int16,
     107i32 as yytype_int16, 108i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 111i32 as yytype_int16, 112i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 115i32 as yytype_int16,
     116i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     131i32 as yytype_int16, 132i32 as yytype_int16, 133i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 136i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     143i32 as yytype_int16, 1i32 as yytype_int16, 145i32 as yytype_int16,
     3i32 as yytype_int16, 4i32 as yytype_int16, 5i32 as yytype_int16,
     6i32 as yytype_int16, 7i32 as yytype_int16, 8i32 as yytype_int16,
     9i32 as yytype_int16, 10i32 as yytype_int16, 11i32 as yytype_int16,
     12i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     15i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 19i32 as yytype_int16, -1i32 as yytype_int16,
     21i32 as yytype_int16, 22i32 as yytype_int16, 23i32 as yytype_int16,
     24i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     30i32 as yytype_int16, 31i32 as yytype_int16, 32i32 as yytype_int16,
     33i32 as yytype_int16, 34i32 as yytype_int16, 35i32 as yytype_int16,
     36i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     39i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     45i32 as yytype_int16, -1i32 as yytype_int16, 47i32 as yytype_int16,
     48i32 as yytype_int16, 49i32 as yytype_int16, 50i32 as yytype_int16,
     51i32 as yytype_int16, 52i32 as yytype_int16, 53i32 as yytype_int16,
     54i32 as yytype_int16, 55i32 as yytype_int16, 56i32 as yytype_int16,
     -1i32 as yytype_int16, 58i32 as yytype_int16, 59i32 as yytype_int16,
     60i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     63i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     66i32 as yytype_int16, 67i32 as yytype_int16, -1i32 as yytype_int16,
     69i32 as yytype_int16, 70i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 89i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 92i32 as yytype_int16,
     93i32 as yytype_int16, -1i32 as yytype_int16, 95i32 as yytype_int16,
     96i32 as yytype_int16, -1i32 as yytype_int16, 98i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 101i32 as yytype_int16,
     -1i32 as yytype_int16, 103i32 as yytype_int16, 104i32 as yytype_int16,
     105i32 as yytype_int16, 106i32 as yytype_int16, 107i32 as yytype_int16,
     108i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     111i32 as yytype_int16, 112i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 115i32 as yytype_int16, 116i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 3i32 as yytype_int16,
     4i32 as yytype_int16, 5i32 as yytype_int16, 6i32 as yytype_int16,
     7i32 as yytype_int16, 8i32 as yytype_int16, 9i32 as yytype_int16,
     10i32 as yytype_int16, 11i32 as yytype_int16, 12i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 131i32 as yytype_int16,
     132i32 as yytype_int16, 133i32 as yytype_int16, -1i32 as yytype_int16,
     19i32 as yytype_int16, -1i32 as yytype_int16, 21i32 as yytype_int16,
     22i32 as yytype_int16, 23i32 as yytype_int16, 24i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 143i32 as yytype_int16,
     -1i32 as yytype_int16, 145i32 as yytype_int16, 30i32 as yytype_int16,
     31i32 as yytype_int16, 32i32 as yytype_int16, 33i32 as yytype_int16,
     34i32 as yytype_int16, 35i32 as yytype_int16, 36i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 39i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 45i32 as yytype_int16,
     46i32 as yytype_int16, 47i32 as yytype_int16, 48i32 as yytype_int16,
     49i32 as yytype_int16, 50i32 as yytype_int16, 51i32 as yytype_int16,
     52i32 as yytype_int16, 53i32 as yytype_int16, 54i32 as yytype_int16,
     55i32 as yytype_int16, 56i32 as yytype_int16, -1i32 as yytype_int16,
     58i32 as yytype_int16, 59i32 as yytype_int16, 60i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 63i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 66i32 as yytype_int16,
     67i32 as yytype_int16, -1i32 as yytype_int16, 69i32 as yytype_int16,
     70i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 89i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 92i32 as yytype_int16, 93i32 as yytype_int16,
     -1i32 as yytype_int16, 95i32 as yytype_int16, 96i32 as yytype_int16,
     -1i32 as yytype_int16, 98i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 101i32 as yytype_int16, -1i32 as yytype_int16,
     103i32 as yytype_int16, 104i32 as yytype_int16, 105i32 as yytype_int16,
     106i32 as yytype_int16, 107i32 as yytype_int16, 108i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 111i32 as yytype_int16,
     112i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     115i32 as yytype_int16, 116i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 3i32 as yytype_int16, 4i32 as yytype_int16,
     5i32 as yytype_int16, 6i32 as yytype_int16, 7i32 as yytype_int16,
     8i32 as yytype_int16, 9i32 as yytype_int16, 10i32 as yytype_int16,
     11i32 as yytype_int16, 12i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 131i32 as yytype_int16, 132i32 as yytype_int16,
     133i32 as yytype_int16, -1i32 as yytype_int16, 19i32 as yytype_int16,
     -1i32 as yytype_int16, 21i32 as yytype_int16, 22i32 as yytype_int16,
     23i32 as yytype_int16, 24i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 143i32 as yytype_int16, -1i32 as yytype_int16,
     145i32 as yytype_int16, 30i32 as yytype_int16, 31i32 as yytype_int16,
     32i32 as yytype_int16, 33i32 as yytype_int16, 34i32 as yytype_int16,
     35i32 as yytype_int16, 36i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 39i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 45i32 as yytype_int16, -1i32 as yytype_int16,
     47i32 as yytype_int16, 48i32 as yytype_int16, 49i32 as yytype_int16,
     50i32 as yytype_int16, 51i32 as yytype_int16, 52i32 as yytype_int16,
     53i32 as yytype_int16, 54i32 as yytype_int16, 55i32 as yytype_int16,
     56i32 as yytype_int16, -1i32 as yytype_int16, 58i32 as yytype_int16,
     59i32 as yytype_int16, 60i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 63i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 66i32 as yytype_int16, 67i32 as yytype_int16,
     -1i32 as yytype_int16, 69i32 as yytype_int16, 70i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     89i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     92i32 as yytype_int16, 93i32 as yytype_int16, -1i32 as yytype_int16,
     95i32 as yytype_int16, 96i32 as yytype_int16, -1i32 as yytype_int16,
     98i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     101i32 as yytype_int16, -1i32 as yytype_int16, 103i32 as yytype_int16,
     104i32 as yytype_int16, 105i32 as yytype_int16, 106i32 as yytype_int16,
     107i32 as yytype_int16, 108i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 111i32 as yytype_int16, 112i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 115i32 as yytype_int16,
     116i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     3i32 as yytype_int16, 4i32 as yytype_int16, 5i32 as yytype_int16,
     6i32 as yytype_int16, 7i32 as yytype_int16, 8i32 as yytype_int16,
     9i32 as yytype_int16, 10i32 as yytype_int16, 11i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     131i32 as yytype_int16, 132i32 as yytype_int16, 133i32 as yytype_int16,
     -1i32 as yytype_int16, 19i32 as yytype_int16, -1i32 as yytype_int16,
     21i32 as yytype_int16, 22i32 as yytype_int16, 23i32 as yytype_int16,
     24i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     143i32 as yytype_int16, -1i32 as yytype_int16, 145i32 as yytype_int16,
     30i32 as yytype_int16, 31i32 as yytype_int16, 32i32 as yytype_int16,
     33i32 as yytype_int16, 34i32 as yytype_int16, 35i32 as yytype_int16,
     36i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     39i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     48i32 as yytype_int16, 49i32 as yytype_int16, 50i32 as yytype_int16,
     51i32 as yytype_int16, 52i32 as yytype_int16, 53i32 as yytype_int16,
     54i32 as yytype_int16, 55i32 as yytype_int16, 56i32 as yytype_int16,
     -1i32 as yytype_int16, 58i32 as yytype_int16, 59i32 as yytype_int16,
     60i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     63i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     66i32 as yytype_int16, 67i32 as yytype_int16, -1i32 as yytype_int16,
     69i32 as yytype_int16, 70i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 89i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 92i32 as yytype_int16,
     93i32 as yytype_int16, -1i32 as yytype_int16, 95i32 as yytype_int16,
     96i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 101i32 as yytype_int16,
     -1i32 as yytype_int16, 103i32 as yytype_int16, 104i32 as yytype_int16,
     105i32 as yytype_int16, 106i32 as yytype_int16, 107i32 as yytype_int16,
     108i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     111i32 as yytype_int16, 112i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 115i32 as yytype_int16, 116i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 3i32 as yytype_int16,
     4i32 as yytype_int16, 5i32 as yytype_int16, 6i32 as yytype_int16,
     7i32 as yytype_int16, 8i32 as yytype_int16, 9i32 as yytype_int16,
     10i32 as yytype_int16, 11i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 131i32 as yytype_int16,
     132i32 as yytype_int16, 133i32 as yytype_int16, -1i32 as yytype_int16,
     19i32 as yytype_int16, -1i32 as yytype_int16, 21i32 as yytype_int16,
     22i32 as yytype_int16, 23i32 as yytype_int16, 24i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 143i32 as yytype_int16,
     -1i32 as yytype_int16, 145i32 as yytype_int16, 30i32 as yytype_int16,
     31i32 as yytype_int16, 32i32 as yytype_int16, 33i32 as yytype_int16,
     34i32 as yytype_int16, 35i32 as yytype_int16, 36i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 39i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 48i32 as yytype_int16,
     49i32 as yytype_int16, 50i32 as yytype_int16, 51i32 as yytype_int16,
     52i32 as yytype_int16, 53i32 as yytype_int16, 54i32 as yytype_int16,
     55i32 as yytype_int16, 56i32 as yytype_int16, -1i32 as yytype_int16,
     58i32 as yytype_int16, 59i32 as yytype_int16, 60i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 63i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 66i32 as yytype_int16,
     67i32 as yytype_int16, -1i32 as yytype_int16, 69i32 as yytype_int16,
     70i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 89i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 92i32 as yytype_int16, 93i32 as yytype_int16,
     -1i32 as yytype_int16, 95i32 as yytype_int16, 96i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 101i32 as yytype_int16, -1i32 as yytype_int16,
     103i32 as yytype_int16, 104i32 as yytype_int16, 105i32 as yytype_int16,
     106i32 as yytype_int16, 107i32 as yytype_int16, 108i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 111i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 131i32 as yytype_int16, 132i32 as yytype_int16,
     133i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     145i32 as yytype_int16, 3i32 as yytype_int16, 4i32 as yytype_int16,
     5i32 as yytype_int16, 6i32 as yytype_int16, 7i32 as yytype_int16,
     8i32 as yytype_int16, 9i32 as yytype_int16, 10i32 as yytype_int16,
     11i32 as yytype_int16, 12i32 as yytype_int16, 13i32 as yytype_int16,
     14i32 as yytype_int16, 15i32 as yytype_int16, 16i32 as yytype_int16,
     17i32 as yytype_int16, 18i32 as yytype_int16, 19i32 as yytype_int16,
     20i32 as yytype_int16, 21i32 as yytype_int16, 22i32 as yytype_int16,
     23i32 as yytype_int16, 24i32 as yytype_int16, 25i32 as yytype_int16,
     26i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 30i32 as yytype_int16, 31i32 as yytype_int16,
     32i32 as yytype_int16, 33i32 as yytype_int16, 34i32 as yytype_int16,
     35i32 as yytype_int16, 36i32 as yytype_int16, 37i32 as yytype_int16,
     38i32 as yytype_int16, 39i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 45i32 as yytype_int16, 46i32 as yytype_int16,
     47i32 as yytype_int16, 48i32 as yytype_int16, 49i32 as yytype_int16,
     50i32 as yytype_int16, 51i32 as yytype_int16, 52i32 as yytype_int16,
     53i32 as yytype_int16, 54i32 as yytype_int16, 55i32 as yytype_int16,
     56i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 69i32 as yytype_int16, 70i32 as yytype_int16,
     71i32 as yytype_int16, 72i32 as yytype_int16, 73i32 as yytype_int16,
     74i32 as yytype_int16, 75i32 as yytype_int16, 76i32 as yytype_int16,
     77i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     80i32 as yytype_int16, 81i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 84i32 as yytype_int16, 85i32 as yytype_int16,
     86i32 as yytype_int16, 87i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     98i32 as yytype_int16, 99i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 121i32 as yytype_int16,
     122i32 as yytype_int16, 123i32 as yytype_int16, 124i32 as yytype_int16,
     125i32 as yytype_int16, 126i32 as yytype_int16, 127i32 as yytype_int16,
     128i32 as yytype_int16, 129i32 as yytype_int16, 130i32 as yytype_int16,
     -1i32 as yytype_int16, 132i32 as yytype_int16, 133i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 139i32 as yytype_int16,
     140i32 as yytype_int16, 3i32 as yytype_int16, 4i32 as yytype_int16,
     5i32 as yytype_int16, 6i32 as yytype_int16, 7i32 as yytype_int16,
     8i32 as yytype_int16, 9i32 as yytype_int16, 10i32 as yytype_int16,
     11i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 19i32 as yytype_int16,
     -1i32 as yytype_int16, 21i32 as yytype_int16, 22i32 as yytype_int16,
     23i32 as yytype_int16, 24i32 as yytype_int16, -1i32 as yytype_int16,
     26i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 30i32 as yytype_int16, 31i32 as yytype_int16,
     32i32 as yytype_int16, 33i32 as yytype_int16, 34i32 as yytype_int16,
     35i32 as yytype_int16, 36i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 39i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 48i32 as yytype_int16, 49i32 as yytype_int16,
     50i32 as yytype_int16, 51i32 as yytype_int16, 52i32 as yytype_int16,
     53i32 as yytype_int16, 54i32 as yytype_int16, 55i32 as yytype_int16,
     56i32 as yytype_int16, -1i32 as yytype_int16, 58i32 as yytype_int16,
     59i32 as yytype_int16, 60i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 63i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 66i32 as yytype_int16, 67i32 as yytype_int16,
     -1i32 as yytype_int16, 69i32 as yytype_int16, 70i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     89i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     92i32 as yytype_int16, 93i32 as yytype_int16, -1i32 as yytype_int16,
     95i32 as yytype_int16, 96i32 as yytype_int16, -1i32 as yytype_int16,
     98i32 as yytype_int16, 99i32 as yytype_int16, 100i32 as yytype_int16,
     101i32 as yytype_int16, -1i32 as yytype_int16, 103i32 as yytype_int16,
     104i32 as yytype_int16, 105i32 as yytype_int16, 106i32 as yytype_int16,
     107i32 as yytype_int16, 108i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 111i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 3i32 as yytype_int16,
     4i32 as yytype_int16, 5i32 as yytype_int16, 6i32 as yytype_int16,
     7i32 as yytype_int16, 8i32 as yytype_int16, 9i32 as yytype_int16,
     10i32 as yytype_int16, 11i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     131i32 as yytype_int16, 132i32 as yytype_int16, 133i32 as yytype_int16,
     19i32 as yytype_int16, 135i32 as yytype_int16, 21i32 as yytype_int16,
     22i32 as yytype_int16, 23i32 as yytype_int16, 24i32 as yytype_int16,
     140i32 as yytype_int16, 26i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 30i32 as yytype_int16,
     31i32 as yytype_int16, 32i32 as yytype_int16, 33i32 as yytype_int16,
     34i32 as yytype_int16, 35i32 as yytype_int16, 36i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 39i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 48i32 as yytype_int16,
     49i32 as yytype_int16, 50i32 as yytype_int16, 51i32 as yytype_int16,
     52i32 as yytype_int16, 53i32 as yytype_int16, 54i32 as yytype_int16,
     55i32 as yytype_int16, 56i32 as yytype_int16, -1i32 as yytype_int16,
     58i32 as yytype_int16, 59i32 as yytype_int16, 60i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 63i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 66i32 as yytype_int16,
     67i32 as yytype_int16, -1i32 as yytype_int16, 69i32 as yytype_int16,
     70i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 89i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 92i32 as yytype_int16, 93i32 as yytype_int16,
     -1i32 as yytype_int16, 95i32 as yytype_int16, 96i32 as yytype_int16,
     -1i32 as yytype_int16, 98i32 as yytype_int16, 99i32 as yytype_int16,
     100i32 as yytype_int16, 101i32 as yytype_int16, -1i32 as yytype_int16,
     103i32 as yytype_int16, 104i32 as yytype_int16, 105i32 as yytype_int16,
     106i32 as yytype_int16, 107i32 as yytype_int16, 108i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 111i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     3i32 as yytype_int16, 4i32 as yytype_int16, 5i32 as yytype_int16,
     6i32 as yytype_int16, 7i32 as yytype_int16, 8i32 as yytype_int16,
     9i32 as yytype_int16, 10i32 as yytype_int16, 11i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 131i32 as yytype_int16, 132i32 as yytype_int16,
     133i32 as yytype_int16, 19i32 as yytype_int16, 135i32 as yytype_int16,
     21i32 as yytype_int16, 22i32 as yytype_int16, 23i32 as yytype_int16,
     24i32 as yytype_int16, 140i32 as yytype_int16, 26i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     30i32 as yytype_int16, 31i32 as yytype_int16, 32i32 as yytype_int16,
     33i32 as yytype_int16, 34i32 as yytype_int16, 35i32 as yytype_int16,
     36i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     39i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     48i32 as yytype_int16, 49i32 as yytype_int16, 50i32 as yytype_int16,
     51i32 as yytype_int16, 52i32 as yytype_int16, 53i32 as yytype_int16,
     54i32 as yytype_int16, 55i32 as yytype_int16, 56i32 as yytype_int16,
     -1i32 as yytype_int16, 58i32 as yytype_int16, 59i32 as yytype_int16,
     60i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     63i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     66i32 as yytype_int16, 67i32 as yytype_int16, -1i32 as yytype_int16,
     69i32 as yytype_int16, 70i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 89i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 92i32 as yytype_int16,
     93i32 as yytype_int16, -1i32 as yytype_int16, 95i32 as yytype_int16,
     96i32 as yytype_int16, -1i32 as yytype_int16, 98i32 as yytype_int16,
     99i32 as yytype_int16, 100i32 as yytype_int16, 101i32 as yytype_int16,
     -1i32 as yytype_int16, 103i32 as yytype_int16, 104i32 as yytype_int16,
     105i32 as yytype_int16, 106i32 as yytype_int16, 107i32 as yytype_int16,
     108i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     111i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 3i32 as yytype_int16, 4i32 as yytype_int16,
     5i32 as yytype_int16, 6i32 as yytype_int16, 7i32 as yytype_int16,
     8i32 as yytype_int16, 9i32 as yytype_int16, 10i32 as yytype_int16,
     11i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 131i32 as yytype_int16,
     132i32 as yytype_int16, 133i32 as yytype_int16, 19i32 as yytype_int16,
     135i32 as yytype_int16, 21i32 as yytype_int16, 22i32 as yytype_int16,
     23i32 as yytype_int16, 24i32 as yytype_int16, 140i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 30i32 as yytype_int16, 31i32 as yytype_int16,
     32i32 as yytype_int16, 33i32 as yytype_int16, 34i32 as yytype_int16,
     35i32 as yytype_int16, 36i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 39i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 48i32 as yytype_int16, 49i32 as yytype_int16,
     50i32 as yytype_int16, 51i32 as yytype_int16, 52i32 as yytype_int16,
     53i32 as yytype_int16, 54i32 as yytype_int16, 55i32 as yytype_int16,
     56i32 as yytype_int16, -1i32 as yytype_int16, 58i32 as yytype_int16,
     59i32 as yytype_int16, 60i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 63i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 66i32 as yytype_int16, 67i32 as yytype_int16,
     -1i32 as yytype_int16, 69i32 as yytype_int16, 70i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     89i32 as yytype_int16, 90i32 as yytype_int16, -1i32 as yytype_int16,
     92i32 as yytype_int16, 93i32 as yytype_int16, -1i32 as yytype_int16,
     95i32 as yytype_int16, 96i32 as yytype_int16, -1i32 as yytype_int16,
     98i32 as yytype_int16, 99i32 as yytype_int16, 100i32 as yytype_int16,
     101i32 as yytype_int16, -1i32 as yytype_int16, 103i32 as yytype_int16,
     104i32 as yytype_int16, 105i32 as yytype_int16, 106i32 as yytype_int16,
     107i32 as yytype_int16, 108i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 111i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 118i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     131i32 as yytype_int16, 132i32 as yytype_int16, 133i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     140i32 as yytype_int16, 3i32 as yytype_int16, 4i32 as yytype_int16,
     5i32 as yytype_int16, 6i32 as yytype_int16, 7i32 as yytype_int16,
     8i32 as yytype_int16, 9i32 as yytype_int16, 10i32 as yytype_int16,
     11i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 19i32 as yytype_int16,
     -1i32 as yytype_int16, 21i32 as yytype_int16, 22i32 as yytype_int16,
     23i32 as yytype_int16, 24i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 30i32 as yytype_int16, 31i32 as yytype_int16,
     32i32 as yytype_int16, 33i32 as yytype_int16, 34i32 as yytype_int16,
     35i32 as yytype_int16, 36i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 39i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 48i32 as yytype_int16, 49i32 as yytype_int16,
     50i32 as yytype_int16, 51i32 as yytype_int16, 52i32 as yytype_int16,
     53i32 as yytype_int16, 54i32 as yytype_int16, 55i32 as yytype_int16,
     56i32 as yytype_int16, -1i32 as yytype_int16, 58i32 as yytype_int16,
     59i32 as yytype_int16, 60i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 63i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 66i32 as yytype_int16, 67i32 as yytype_int16,
     -1i32 as yytype_int16, 69i32 as yytype_int16, 70i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     89i32 as yytype_int16, 90i32 as yytype_int16, -1i32 as yytype_int16,
     92i32 as yytype_int16, 93i32 as yytype_int16, -1i32 as yytype_int16,
     95i32 as yytype_int16, 96i32 as yytype_int16, -1i32 as yytype_int16,
     98i32 as yytype_int16, 99i32 as yytype_int16, 100i32 as yytype_int16,
     101i32 as yytype_int16, -1i32 as yytype_int16, 103i32 as yytype_int16,
     104i32 as yytype_int16, 105i32 as yytype_int16, 106i32 as yytype_int16,
     107i32 as yytype_int16, 108i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 111i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 118i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     131i32 as yytype_int16, 132i32 as yytype_int16, 133i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     140i32 as yytype_int16, 3i32 as yytype_int16, 4i32 as yytype_int16,
     5i32 as yytype_int16, 6i32 as yytype_int16, 7i32 as yytype_int16,
     8i32 as yytype_int16, 9i32 as yytype_int16, 10i32 as yytype_int16,
     11i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 19i32 as yytype_int16,
     -1i32 as yytype_int16, 21i32 as yytype_int16, 22i32 as yytype_int16,
     23i32 as yytype_int16, 24i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 30i32 as yytype_int16, 31i32 as yytype_int16,
     32i32 as yytype_int16, 33i32 as yytype_int16, 34i32 as yytype_int16,
     35i32 as yytype_int16, 36i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 39i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 48i32 as yytype_int16, 49i32 as yytype_int16,
     50i32 as yytype_int16, 51i32 as yytype_int16, 52i32 as yytype_int16,
     53i32 as yytype_int16, 54i32 as yytype_int16, 55i32 as yytype_int16,
     56i32 as yytype_int16, -1i32 as yytype_int16, 58i32 as yytype_int16,
     59i32 as yytype_int16, 60i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 63i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 66i32 as yytype_int16, 67i32 as yytype_int16,
     -1i32 as yytype_int16, 69i32 as yytype_int16, 70i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     89i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     92i32 as yytype_int16, 93i32 as yytype_int16, -1i32 as yytype_int16,
     95i32 as yytype_int16, 96i32 as yytype_int16, -1i32 as yytype_int16,
     98i32 as yytype_int16, 99i32 as yytype_int16, 100i32 as yytype_int16,
     101i32 as yytype_int16, -1i32 as yytype_int16, 103i32 as yytype_int16,
     104i32 as yytype_int16, 105i32 as yytype_int16, 106i32 as yytype_int16,
     107i32 as yytype_int16, 108i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 111i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 3i32 as yytype_int16,
     4i32 as yytype_int16, 5i32 as yytype_int16, 6i32 as yytype_int16,
     7i32 as yytype_int16, 8i32 as yytype_int16, 9i32 as yytype_int16,
     10i32 as yytype_int16, 11i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     131i32 as yytype_int16, 132i32 as yytype_int16, 133i32 as yytype_int16,
     19i32 as yytype_int16, -1i32 as yytype_int16, 21i32 as yytype_int16,
     22i32 as yytype_int16, 23i32 as yytype_int16, 24i32 as yytype_int16,
     140i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 30i32 as yytype_int16,
     31i32 as yytype_int16, 32i32 as yytype_int16, 33i32 as yytype_int16,
     34i32 as yytype_int16, 35i32 as yytype_int16, 36i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 39i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 48i32 as yytype_int16,
     49i32 as yytype_int16, 50i32 as yytype_int16, 51i32 as yytype_int16,
     52i32 as yytype_int16, 53i32 as yytype_int16, 54i32 as yytype_int16,
     55i32 as yytype_int16, 56i32 as yytype_int16, -1i32 as yytype_int16,
     58i32 as yytype_int16, 59i32 as yytype_int16, 60i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 63i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 66i32 as yytype_int16,
     67i32 as yytype_int16, -1i32 as yytype_int16, 69i32 as yytype_int16,
     70i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 89i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 92i32 as yytype_int16, 93i32 as yytype_int16,
     -1i32 as yytype_int16, 95i32 as yytype_int16, 96i32 as yytype_int16,
     -1i32 as yytype_int16, 98i32 as yytype_int16, 99i32 as yytype_int16,
     100i32 as yytype_int16, 101i32 as yytype_int16, -1i32 as yytype_int16,
     103i32 as yytype_int16, 104i32 as yytype_int16, 105i32 as yytype_int16,
     106i32 as yytype_int16, 107i32 as yytype_int16, 108i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 111i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     3i32 as yytype_int16, 4i32 as yytype_int16, 5i32 as yytype_int16,
     6i32 as yytype_int16, 7i32 as yytype_int16, 8i32 as yytype_int16,
     9i32 as yytype_int16, 10i32 as yytype_int16, 11i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 131i32 as yytype_int16, 132i32 as yytype_int16,
     133i32 as yytype_int16, 19i32 as yytype_int16, -1i32 as yytype_int16,
     21i32 as yytype_int16, 22i32 as yytype_int16, 23i32 as yytype_int16,
     24i32 as yytype_int16, 140i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     30i32 as yytype_int16, 31i32 as yytype_int16, 32i32 as yytype_int16,
     33i32 as yytype_int16, 34i32 as yytype_int16, 35i32 as yytype_int16,
     36i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     39i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     48i32 as yytype_int16, 49i32 as yytype_int16, 50i32 as yytype_int16,
     51i32 as yytype_int16, 52i32 as yytype_int16, 53i32 as yytype_int16,
     54i32 as yytype_int16, 55i32 as yytype_int16, 56i32 as yytype_int16,
     -1i32 as yytype_int16, 58i32 as yytype_int16, 59i32 as yytype_int16,
     60i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     63i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     66i32 as yytype_int16, 67i32 as yytype_int16, -1i32 as yytype_int16,
     69i32 as yytype_int16, 70i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 89i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 92i32 as yytype_int16,
     93i32 as yytype_int16, -1i32 as yytype_int16, 95i32 as yytype_int16,
     96i32 as yytype_int16, -1i32 as yytype_int16, 98i32 as yytype_int16,
     99i32 as yytype_int16, 100i32 as yytype_int16, 101i32 as yytype_int16,
     -1i32 as yytype_int16, 103i32 as yytype_int16, 104i32 as yytype_int16,
     105i32 as yytype_int16, 106i32 as yytype_int16, 107i32 as yytype_int16,
     108i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     111i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 131i32 as yytype_int16,
     132i32 as yytype_int16, 133i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 140i32 as yytype_int16,
     3i32 as yytype_int16, 4i32 as yytype_int16, 5i32 as yytype_int16,
     6i32 as yytype_int16, 7i32 as yytype_int16, 8i32 as yytype_int16,
     9i32 as yytype_int16, 10i32 as yytype_int16, 11i32 as yytype_int16,
     12i32 as yytype_int16, 13i32 as yytype_int16, 14i32 as yytype_int16,
     15i32 as yytype_int16, 16i32 as yytype_int16, 17i32 as yytype_int16,
     18i32 as yytype_int16, 19i32 as yytype_int16, 20i32 as yytype_int16,
     21i32 as yytype_int16, 22i32 as yytype_int16, 23i32 as yytype_int16,
     24i32 as yytype_int16, 25i32 as yytype_int16, 26i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     30i32 as yytype_int16, 31i32 as yytype_int16, 32i32 as yytype_int16,
     33i32 as yytype_int16, 34i32 as yytype_int16, 35i32 as yytype_int16,
     36i32 as yytype_int16, 37i32 as yytype_int16, 38i32 as yytype_int16,
     39i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     45i32 as yytype_int16, 46i32 as yytype_int16, 47i32 as yytype_int16,
     48i32 as yytype_int16, 49i32 as yytype_int16, 50i32 as yytype_int16,
     51i32 as yytype_int16, 52i32 as yytype_int16, 53i32 as yytype_int16,
     54i32 as yytype_int16, 55i32 as yytype_int16, 56i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     63i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     69i32 as yytype_int16, 70i32 as yytype_int16, 71i32 as yytype_int16,
     72i32 as yytype_int16, 73i32 as yytype_int16, 74i32 as yytype_int16,
     75i32 as yytype_int16, 76i32 as yytype_int16, 77i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 80i32 as yytype_int16,
     81i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     84i32 as yytype_int16, 85i32 as yytype_int16, 86i32 as yytype_int16,
     87i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 98i32 as yytype_int16,
     99i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 107i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 121i32 as yytype_int16, 122i32 as yytype_int16,
     123i32 as yytype_int16, 124i32 as yytype_int16, 125i32 as yytype_int16,
     126i32 as yytype_int16, 127i32 as yytype_int16, 128i32 as yytype_int16,
     129i32 as yytype_int16, 130i32 as yytype_int16, -1i32 as yytype_int16,
     132i32 as yytype_int16, 133i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 139i32 as yytype_int16, 3i32 as yytype_int16,
     4i32 as yytype_int16, 5i32 as yytype_int16, 6i32 as yytype_int16,
     7i32 as yytype_int16, 8i32 as yytype_int16, 9i32 as yytype_int16,
     10i32 as yytype_int16, 11i32 as yytype_int16, 12i32 as yytype_int16,
     13i32 as yytype_int16, 14i32 as yytype_int16, 15i32 as yytype_int16,
     16i32 as yytype_int16, 17i32 as yytype_int16, 18i32 as yytype_int16,
     19i32 as yytype_int16, 20i32 as yytype_int16, 21i32 as yytype_int16,
     22i32 as yytype_int16, 23i32 as yytype_int16, 24i32 as yytype_int16,
     25i32 as yytype_int16, 26i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 30i32 as yytype_int16,
     31i32 as yytype_int16, 32i32 as yytype_int16, 33i32 as yytype_int16,
     34i32 as yytype_int16, 35i32 as yytype_int16, 36i32 as yytype_int16,
     37i32 as yytype_int16, 38i32 as yytype_int16, 39i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 45i32 as yytype_int16,
     46i32 as yytype_int16, 47i32 as yytype_int16, 48i32 as yytype_int16,
     49i32 as yytype_int16, 50i32 as yytype_int16, 51i32 as yytype_int16,
     52i32 as yytype_int16, 53i32 as yytype_int16, 54i32 as yytype_int16,
     55i32 as yytype_int16, 56i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 63i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 69i32 as yytype_int16,
     70i32 as yytype_int16, 71i32 as yytype_int16, 72i32 as yytype_int16,
     73i32 as yytype_int16, 74i32 as yytype_int16, 75i32 as yytype_int16,
     76i32 as yytype_int16, 77i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 80i32 as yytype_int16, 81i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 84i32 as yytype_int16,
     85i32 as yytype_int16, 86i32 as yytype_int16, 87i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 98i32 as yytype_int16, 99i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 107i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     121i32 as yytype_int16, 122i32 as yytype_int16, 123i32 as yytype_int16,
     124i32 as yytype_int16, 125i32 as yytype_int16, 126i32 as yytype_int16,
     127i32 as yytype_int16, 128i32 as yytype_int16, 129i32 as yytype_int16,
     130i32 as yytype_int16, -1i32 as yytype_int16, 132i32 as yytype_int16,
     133i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     139i32 as yytype_int16, 3i32 as yytype_int16, 4i32 as yytype_int16,
     5i32 as yytype_int16, 6i32 as yytype_int16, 7i32 as yytype_int16,
     8i32 as yytype_int16, 9i32 as yytype_int16, 10i32 as yytype_int16,
     11i32 as yytype_int16, 12i32 as yytype_int16, 13i32 as yytype_int16,
     14i32 as yytype_int16, 15i32 as yytype_int16, 16i32 as yytype_int16,
     17i32 as yytype_int16, 18i32 as yytype_int16, 19i32 as yytype_int16,
     20i32 as yytype_int16, 21i32 as yytype_int16, 22i32 as yytype_int16,
     23i32 as yytype_int16, 24i32 as yytype_int16, 25i32 as yytype_int16,
     26i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 30i32 as yytype_int16, 31i32 as yytype_int16,
     32i32 as yytype_int16, 33i32 as yytype_int16, 34i32 as yytype_int16,
     35i32 as yytype_int16, 36i32 as yytype_int16, 37i32 as yytype_int16,
     38i32 as yytype_int16, 39i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 45i32 as yytype_int16, 46i32 as yytype_int16,
     47i32 as yytype_int16, 48i32 as yytype_int16, 49i32 as yytype_int16,
     50i32 as yytype_int16, 51i32 as yytype_int16, 52i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 55i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 69i32 as yytype_int16, 70i32 as yytype_int16,
     71i32 as yytype_int16, 72i32 as yytype_int16, 73i32 as yytype_int16,
     74i32 as yytype_int16, 75i32 as yytype_int16, 76i32 as yytype_int16,
     77i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     80i32 as yytype_int16, 81i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 84i32 as yytype_int16, 85i32 as yytype_int16,
     86i32 as yytype_int16, 87i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     98i32 as yytype_int16, 99i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 103i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 121i32 as yytype_int16,
     122i32 as yytype_int16, 123i32 as yytype_int16, 124i32 as yytype_int16,
     125i32 as yytype_int16, 126i32 as yytype_int16, 127i32 as yytype_int16,
     128i32 as yytype_int16, 129i32 as yytype_int16, 130i32 as yytype_int16,
     -1i32 as yytype_int16, 132i32 as yytype_int16, 133i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 139i32 as yytype_int16,
     3i32 as yytype_int16, 4i32 as yytype_int16, 5i32 as yytype_int16,
     6i32 as yytype_int16, 7i32 as yytype_int16, 8i32 as yytype_int16,
     9i32 as yytype_int16, 10i32 as yytype_int16, 11i32 as yytype_int16,
     12i32 as yytype_int16, 13i32 as yytype_int16, 14i32 as yytype_int16,
     15i32 as yytype_int16, 16i32 as yytype_int16, 17i32 as yytype_int16,
     18i32 as yytype_int16, 19i32 as yytype_int16, 20i32 as yytype_int16,
     21i32 as yytype_int16, 22i32 as yytype_int16, 23i32 as yytype_int16,
     24i32 as yytype_int16, 25i32 as yytype_int16, 26i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     30i32 as yytype_int16, 31i32 as yytype_int16, 32i32 as yytype_int16,
     33i32 as yytype_int16, 34i32 as yytype_int16, 35i32 as yytype_int16,
     36i32 as yytype_int16, 37i32 as yytype_int16, 38i32 as yytype_int16,
     39i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     45i32 as yytype_int16, 46i32 as yytype_int16, 47i32 as yytype_int16,
     48i32 as yytype_int16, 49i32 as yytype_int16, 50i32 as yytype_int16,
     51i32 as yytype_int16, 52i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 55i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     69i32 as yytype_int16, 70i32 as yytype_int16, 71i32 as yytype_int16,
     72i32 as yytype_int16, 73i32 as yytype_int16, 74i32 as yytype_int16,
     75i32 as yytype_int16, 76i32 as yytype_int16, 77i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 80i32 as yytype_int16,
     81i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     84i32 as yytype_int16, 85i32 as yytype_int16, 86i32 as yytype_int16,
     87i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 98i32 as yytype_int16,
     99i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 121i32 as yytype_int16, 122i32 as yytype_int16,
     123i32 as yytype_int16, 124i32 as yytype_int16, 125i32 as yytype_int16,
     126i32 as yytype_int16, 127i32 as yytype_int16, 128i32 as yytype_int16,
     129i32 as yytype_int16, 130i32 as yytype_int16, -1i32 as yytype_int16,
     132i32 as yytype_int16, 133i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 139i32 as yytype_int16, 3i32 as yytype_int16,
     4i32 as yytype_int16, 5i32 as yytype_int16, 6i32 as yytype_int16,
     7i32 as yytype_int16, 8i32 as yytype_int16, 9i32 as yytype_int16,
     10i32 as yytype_int16, 11i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     19i32 as yytype_int16, -1i32 as yytype_int16, 21i32 as yytype_int16,
     22i32 as yytype_int16, 23i32 as yytype_int16, 24i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 30i32 as yytype_int16,
     31i32 as yytype_int16, 32i32 as yytype_int16, 33i32 as yytype_int16,
     34i32 as yytype_int16, 35i32 as yytype_int16, 36i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 39i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 48i32 as yytype_int16,
     49i32 as yytype_int16, 50i32 as yytype_int16, 51i32 as yytype_int16,
     52i32 as yytype_int16, 53i32 as yytype_int16, 54i32 as yytype_int16,
     55i32 as yytype_int16, 56i32 as yytype_int16, -1i32 as yytype_int16,
     58i32 as yytype_int16, 59i32 as yytype_int16, 60i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 63i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 66i32 as yytype_int16,
     67i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 89i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 92i32 as yytype_int16, 93i32 as yytype_int16,
     -1i32 as yytype_int16, 95i32 as yytype_int16, 96i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 101i32 as yytype_int16, -1i32 as yytype_int16,
     103i32 as yytype_int16, 104i32 as yytype_int16, 105i32 as yytype_int16,
     106i32 as yytype_int16, 107i32 as yytype_int16, 108i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 111i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 3i32 as yytype_int16,
     4i32 as yytype_int16, 5i32 as yytype_int16, 6i32 as yytype_int16,
     7i32 as yytype_int16, 8i32 as yytype_int16, 9i32 as yytype_int16,
     10i32 as yytype_int16, 11i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     19i32 as yytype_int16, 131i32 as yytype_int16, 21i32 as yytype_int16,
     22i32 as yytype_int16, 23i32 as yytype_int16, 24i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 138i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 30i32 as yytype_int16,
     31i32 as yytype_int16, 32i32 as yytype_int16, 33i32 as yytype_int16,
     34i32 as yytype_int16, 35i32 as yytype_int16, 36i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 39i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 48i32 as yytype_int16,
     49i32 as yytype_int16, 50i32 as yytype_int16, 51i32 as yytype_int16,
     52i32 as yytype_int16, 53i32 as yytype_int16, 54i32 as yytype_int16,
     55i32 as yytype_int16, 56i32 as yytype_int16, -1i32 as yytype_int16,
     58i32 as yytype_int16, 59i32 as yytype_int16, 60i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 63i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 66i32 as yytype_int16,
     67i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 89i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 92i32 as yytype_int16, 93i32 as yytype_int16,
     -1i32 as yytype_int16, 95i32 as yytype_int16, 96i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 101i32 as yytype_int16, -1i32 as yytype_int16,
     103i32 as yytype_int16, 104i32 as yytype_int16, 105i32 as yytype_int16,
     106i32 as yytype_int16, 107i32 as yytype_int16, 108i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 111i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 3i32 as yytype_int16,
     4i32 as yytype_int16, 5i32 as yytype_int16, 6i32 as yytype_int16,
     7i32 as yytype_int16, 8i32 as yytype_int16, 9i32 as yytype_int16,
     10i32 as yytype_int16, 11i32 as yytype_int16, 12i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     19i32 as yytype_int16, 131i32 as yytype_int16, 21i32 as yytype_int16,
     22i32 as yytype_int16, 23i32 as yytype_int16, 24i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 138i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 30i32 as yytype_int16,
     31i32 as yytype_int16, 32i32 as yytype_int16, 33i32 as yytype_int16,
     34i32 as yytype_int16, 35i32 as yytype_int16, 36i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 39i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 45i32 as yytype_int16,
     46i32 as yytype_int16, 47i32 as yytype_int16, 48i32 as yytype_int16,
     49i32 as yytype_int16, 50i32 as yytype_int16, 51i32 as yytype_int16,
     52i32 as yytype_int16, 53i32 as yytype_int16, 54i32 as yytype_int16,
     55i32 as yytype_int16, 56i32 as yytype_int16, -1i32 as yytype_int16,
     58i32 as yytype_int16, 59i32 as yytype_int16, 60i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 63i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 66i32 as yytype_int16,
     67i32 as yytype_int16, -1i32 as yytype_int16, 69i32 as yytype_int16,
     70i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 89i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 92i32 as yytype_int16, 93i32 as yytype_int16,
     -1i32 as yytype_int16, 95i32 as yytype_int16, 96i32 as yytype_int16,
     -1i32 as yytype_int16, 98i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 101i32 as yytype_int16, -1i32 as yytype_int16,
     103i32 as yytype_int16, 104i32 as yytype_int16, 105i32 as yytype_int16,
     106i32 as yytype_int16, 107i32 as yytype_int16, 108i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 111i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     3i32 as yytype_int16, 4i32 as yytype_int16, 5i32 as yytype_int16,
     6i32 as yytype_int16, 7i32 as yytype_int16, 8i32 as yytype_int16,
     9i32 as yytype_int16, 10i32 as yytype_int16, 11i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 131i32 as yytype_int16, 132i32 as yytype_int16,
     133i32 as yytype_int16, 19i32 as yytype_int16, -1i32 as yytype_int16,
     21i32 as yytype_int16, 22i32 as yytype_int16, 23i32 as yytype_int16,
     24i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     30i32 as yytype_int16, 31i32 as yytype_int16, 32i32 as yytype_int16,
     33i32 as yytype_int16, 34i32 as yytype_int16, 35i32 as yytype_int16,
     36i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     39i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     48i32 as yytype_int16, 49i32 as yytype_int16, 50i32 as yytype_int16,
     51i32 as yytype_int16, 52i32 as yytype_int16, 53i32 as yytype_int16,
     54i32 as yytype_int16, 55i32 as yytype_int16, 56i32 as yytype_int16,
     -1i32 as yytype_int16, 58i32 as yytype_int16, 59i32 as yytype_int16,
     60i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     63i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     66i32 as yytype_int16, 67i32 as yytype_int16, -1i32 as yytype_int16,
     69i32 as yytype_int16, 70i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 89i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 92i32 as yytype_int16,
     93i32 as yytype_int16, -1i32 as yytype_int16, 95i32 as yytype_int16,
     96i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     99i32 as yytype_int16, 100i32 as yytype_int16, 101i32 as yytype_int16,
     -1i32 as yytype_int16, 103i32 as yytype_int16, 104i32 as yytype_int16,
     105i32 as yytype_int16, 106i32 as yytype_int16, 107i32 as yytype_int16,
     108i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     111i32 as yytype_int16, 112i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 115i32 as yytype_int16, 116i32 as yytype_int16,
     -1i32 as yytype_int16, 3i32 as yytype_int16, 4i32 as yytype_int16,
     5i32 as yytype_int16, 6i32 as yytype_int16, 7i32 as yytype_int16,
     8i32 as yytype_int16, 9i32 as yytype_int16, 10i32 as yytype_int16,
     11i32 as yytype_int16, 12i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 131i32 as yytype_int16,
     132i32 as yytype_int16, 133i32 as yytype_int16, 19i32 as yytype_int16,
     -1i32 as yytype_int16, 21i32 as yytype_int16, 22i32 as yytype_int16,
     23i32 as yytype_int16, 24i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 30i32 as yytype_int16, 31i32 as yytype_int16,
     32i32 as yytype_int16, 33i32 as yytype_int16, 34i32 as yytype_int16,
     35i32 as yytype_int16, 36i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 39i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 45i32 as yytype_int16, -1i32 as yytype_int16,
     47i32 as yytype_int16, 48i32 as yytype_int16, 49i32 as yytype_int16,
     50i32 as yytype_int16, 51i32 as yytype_int16, 52i32 as yytype_int16,
     53i32 as yytype_int16, 54i32 as yytype_int16, 55i32 as yytype_int16,
     56i32 as yytype_int16, -1i32 as yytype_int16, 58i32 as yytype_int16,
     59i32 as yytype_int16, 60i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 63i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 66i32 as yytype_int16, 67i32 as yytype_int16,
     -1i32 as yytype_int16, 69i32 as yytype_int16, 70i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     89i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     92i32 as yytype_int16, 93i32 as yytype_int16, -1i32 as yytype_int16,
     95i32 as yytype_int16, 96i32 as yytype_int16, -1i32 as yytype_int16,
     98i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     101i32 as yytype_int16, -1i32 as yytype_int16, 103i32 as yytype_int16,
     104i32 as yytype_int16, 105i32 as yytype_int16, 106i32 as yytype_int16,
     107i32 as yytype_int16, 108i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 111i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 3i32 as yytype_int16,
     4i32 as yytype_int16, 5i32 as yytype_int16, 6i32 as yytype_int16,
     7i32 as yytype_int16, 8i32 as yytype_int16, 9i32 as yytype_int16,
     10i32 as yytype_int16, 11i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     131i32 as yytype_int16, 132i32 as yytype_int16, 133i32 as yytype_int16,
     19i32 as yytype_int16, -1i32 as yytype_int16, 21i32 as yytype_int16,
     22i32 as yytype_int16, 23i32 as yytype_int16, 24i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 30i32 as yytype_int16,
     31i32 as yytype_int16, 32i32 as yytype_int16, 33i32 as yytype_int16,
     34i32 as yytype_int16, 35i32 as yytype_int16, 36i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 39i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 48i32 as yytype_int16,
     49i32 as yytype_int16, 50i32 as yytype_int16, 51i32 as yytype_int16,
     52i32 as yytype_int16, 53i32 as yytype_int16, 54i32 as yytype_int16,
     55i32 as yytype_int16, 56i32 as yytype_int16, -1i32 as yytype_int16,
     58i32 as yytype_int16, 59i32 as yytype_int16, 60i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 63i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 66i32 as yytype_int16,
     67i32 as yytype_int16, -1i32 as yytype_int16, 69i32 as yytype_int16,
     70i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 89i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 92i32 as yytype_int16, 93i32 as yytype_int16,
     -1i32 as yytype_int16, 95i32 as yytype_int16, 96i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 99i32 as yytype_int16,
     -1i32 as yytype_int16, 101i32 as yytype_int16, -1i32 as yytype_int16,
     103i32 as yytype_int16, 104i32 as yytype_int16, 105i32 as yytype_int16,
     106i32 as yytype_int16, 107i32 as yytype_int16, 108i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 111i32 as yytype_int16,
     112i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     115i32 as yytype_int16, 116i32 as yytype_int16, -1i32 as yytype_int16,
     3i32 as yytype_int16, 4i32 as yytype_int16, 5i32 as yytype_int16,
     6i32 as yytype_int16, 7i32 as yytype_int16, 8i32 as yytype_int16,
     9i32 as yytype_int16, 10i32 as yytype_int16, 11i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 131i32 as yytype_int16, 132i32 as yytype_int16,
     133i32 as yytype_int16, 19i32 as yytype_int16, -1i32 as yytype_int16,
     21i32 as yytype_int16, 22i32 as yytype_int16, 23i32 as yytype_int16,
     24i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     30i32 as yytype_int16, 31i32 as yytype_int16, 32i32 as yytype_int16,
     33i32 as yytype_int16, 34i32 as yytype_int16, 35i32 as yytype_int16,
     36i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     39i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     48i32 as yytype_int16, 49i32 as yytype_int16, 50i32 as yytype_int16,
     51i32 as yytype_int16, 52i32 as yytype_int16, 53i32 as yytype_int16,
     54i32 as yytype_int16, 55i32 as yytype_int16, 56i32 as yytype_int16,
     -1i32 as yytype_int16, 58i32 as yytype_int16, 59i32 as yytype_int16,
     60i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     63i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     66i32 as yytype_int16, 67i32 as yytype_int16, -1i32 as yytype_int16,
     69i32 as yytype_int16, 70i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 89i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 92i32 as yytype_int16,
     93i32 as yytype_int16, -1i32 as yytype_int16, 95i32 as yytype_int16,
     96i32 as yytype_int16, -1i32 as yytype_int16, 98i32 as yytype_int16,
     99i32 as yytype_int16, 100i32 as yytype_int16, 101i32 as yytype_int16,
     -1i32 as yytype_int16, 103i32 as yytype_int16, 104i32 as yytype_int16,
     105i32 as yytype_int16, 106i32 as yytype_int16, 107i32 as yytype_int16,
     108i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     111i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 3i32 as yytype_int16, 4i32 as yytype_int16,
     5i32 as yytype_int16, 6i32 as yytype_int16, 7i32 as yytype_int16,
     8i32 as yytype_int16, 9i32 as yytype_int16, 10i32 as yytype_int16,
     11i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 131i32 as yytype_int16,
     132i32 as yytype_int16, 133i32 as yytype_int16, 19i32 as yytype_int16,
     -1i32 as yytype_int16, 21i32 as yytype_int16, 22i32 as yytype_int16,
     23i32 as yytype_int16, 24i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 30i32 as yytype_int16, 31i32 as yytype_int16,
     32i32 as yytype_int16, 33i32 as yytype_int16, 34i32 as yytype_int16,
     35i32 as yytype_int16, 36i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 39i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 48i32 as yytype_int16, 49i32 as yytype_int16,
     50i32 as yytype_int16, 51i32 as yytype_int16, 52i32 as yytype_int16,
     53i32 as yytype_int16, 54i32 as yytype_int16, 55i32 as yytype_int16,
     56i32 as yytype_int16, -1i32 as yytype_int16, 58i32 as yytype_int16,
     59i32 as yytype_int16, 60i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 63i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 66i32 as yytype_int16, 67i32 as yytype_int16,
     -1i32 as yytype_int16, 69i32 as yytype_int16, 70i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     89i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     92i32 as yytype_int16, 93i32 as yytype_int16, -1i32 as yytype_int16,
     95i32 as yytype_int16, 96i32 as yytype_int16, -1i32 as yytype_int16,
     98i32 as yytype_int16, 99i32 as yytype_int16, 100i32 as yytype_int16,
     101i32 as yytype_int16, -1i32 as yytype_int16, 103i32 as yytype_int16,
     104i32 as yytype_int16, 105i32 as yytype_int16, 106i32 as yytype_int16,
     107i32 as yytype_int16, 108i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 111i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 3i32 as yytype_int16,
     4i32 as yytype_int16, 5i32 as yytype_int16, 6i32 as yytype_int16,
     7i32 as yytype_int16, 8i32 as yytype_int16, 9i32 as yytype_int16,
     10i32 as yytype_int16, 11i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     131i32 as yytype_int16, 132i32 as yytype_int16, 133i32 as yytype_int16,
     19i32 as yytype_int16, -1i32 as yytype_int16, 21i32 as yytype_int16,
     22i32 as yytype_int16, 23i32 as yytype_int16, 24i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 30i32 as yytype_int16,
     31i32 as yytype_int16, 32i32 as yytype_int16, 33i32 as yytype_int16,
     34i32 as yytype_int16, 35i32 as yytype_int16, 36i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 39i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 48i32 as yytype_int16,
     49i32 as yytype_int16, 50i32 as yytype_int16, 51i32 as yytype_int16,
     52i32 as yytype_int16, 53i32 as yytype_int16, 54i32 as yytype_int16,
     55i32 as yytype_int16, 56i32 as yytype_int16, -1i32 as yytype_int16,
     58i32 as yytype_int16, 59i32 as yytype_int16, 60i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 63i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 66i32 as yytype_int16,
     67i32 as yytype_int16, -1i32 as yytype_int16, 69i32 as yytype_int16,
     70i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 89i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 92i32 as yytype_int16, 93i32 as yytype_int16,
     -1i32 as yytype_int16, 95i32 as yytype_int16, 96i32 as yytype_int16,
     -1i32 as yytype_int16, 98i32 as yytype_int16, 99i32 as yytype_int16,
     -1i32 as yytype_int16, 101i32 as yytype_int16, -1i32 as yytype_int16,
     103i32 as yytype_int16, 104i32 as yytype_int16, 105i32 as yytype_int16,
     106i32 as yytype_int16, 107i32 as yytype_int16, 108i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 111i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     3i32 as yytype_int16, 4i32 as yytype_int16, 5i32 as yytype_int16,
     6i32 as yytype_int16, 7i32 as yytype_int16, 8i32 as yytype_int16,
     9i32 as yytype_int16, 10i32 as yytype_int16, 11i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 131i32 as yytype_int16, 132i32 as yytype_int16,
     133i32 as yytype_int16, 19i32 as yytype_int16, -1i32 as yytype_int16,
     21i32 as yytype_int16, 22i32 as yytype_int16, 23i32 as yytype_int16,
     24i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     30i32 as yytype_int16, 31i32 as yytype_int16, 32i32 as yytype_int16,
     33i32 as yytype_int16, 34i32 as yytype_int16, 35i32 as yytype_int16,
     36i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     39i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     48i32 as yytype_int16, 49i32 as yytype_int16, 50i32 as yytype_int16,
     51i32 as yytype_int16, 52i32 as yytype_int16, 53i32 as yytype_int16,
     54i32 as yytype_int16, 55i32 as yytype_int16, 56i32 as yytype_int16,
     -1i32 as yytype_int16, 58i32 as yytype_int16, 59i32 as yytype_int16,
     60i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     63i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     66i32 as yytype_int16, 67i32 as yytype_int16, -1i32 as yytype_int16,
     69i32 as yytype_int16, 70i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 89i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 92i32 as yytype_int16,
     93i32 as yytype_int16, -1i32 as yytype_int16, 95i32 as yytype_int16,
     96i32 as yytype_int16, -1i32 as yytype_int16, 98i32 as yytype_int16,
     99i32 as yytype_int16, -1i32 as yytype_int16, 101i32 as yytype_int16,
     -1i32 as yytype_int16, 103i32 as yytype_int16, 104i32 as yytype_int16,
     105i32 as yytype_int16, 106i32 as yytype_int16, 107i32 as yytype_int16,
     108i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     111i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 3i32 as yytype_int16, 4i32 as yytype_int16,
     5i32 as yytype_int16, 6i32 as yytype_int16, 7i32 as yytype_int16,
     8i32 as yytype_int16, 9i32 as yytype_int16, 10i32 as yytype_int16,
     11i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 131i32 as yytype_int16,
     132i32 as yytype_int16, 133i32 as yytype_int16, 19i32 as yytype_int16,
     -1i32 as yytype_int16, 21i32 as yytype_int16, 22i32 as yytype_int16,
     23i32 as yytype_int16, 24i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 30i32 as yytype_int16, 31i32 as yytype_int16,
     32i32 as yytype_int16, 33i32 as yytype_int16, 34i32 as yytype_int16,
     35i32 as yytype_int16, 36i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 39i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 48i32 as yytype_int16, 49i32 as yytype_int16,
     50i32 as yytype_int16, 51i32 as yytype_int16, 52i32 as yytype_int16,
     53i32 as yytype_int16, 54i32 as yytype_int16, 55i32 as yytype_int16,
     56i32 as yytype_int16, -1i32 as yytype_int16, 58i32 as yytype_int16,
     59i32 as yytype_int16, 60i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 63i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 66i32 as yytype_int16, 67i32 as yytype_int16,
     -1i32 as yytype_int16, 69i32 as yytype_int16, 70i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     89i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     92i32 as yytype_int16, 93i32 as yytype_int16, -1i32 as yytype_int16,
     95i32 as yytype_int16, 96i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 99i32 as yytype_int16, -1i32 as yytype_int16,
     101i32 as yytype_int16, -1i32 as yytype_int16, 103i32 as yytype_int16,
     104i32 as yytype_int16, 105i32 as yytype_int16, 106i32 as yytype_int16,
     107i32 as yytype_int16, 108i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 111i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 3i32 as yytype_int16,
     4i32 as yytype_int16, 5i32 as yytype_int16, 6i32 as yytype_int16,
     7i32 as yytype_int16, 8i32 as yytype_int16, 9i32 as yytype_int16,
     10i32 as yytype_int16, 11i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     131i32 as yytype_int16, 132i32 as yytype_int16, 133i32 as yytype_int16,
     19i32 as yytype_int16, -1i32 as yytype_int16, 21i32 as yytype_int16,
     22i32 as yytype_int16, 23i32 as yytype_int16, 24i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 30i32 as yytype_int16,
     31i32 as yytype_int16, 32i32 as yytype_int16, 33i32 as yytype_int16,
     34i32 as yytype_int16, 35i32 as yytype_int16, 36i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 39i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 48i32 as yytype_int16,
     49i32 as yytype_int16, 50i32 as yytype_int16, 51i32 as yytype_int16,
     52i32 as yytype_int16, 53i32 as yytype_int16, 54i32 as yytype_int16,
     55i32 as yytype_int16, 56i32 as yytype_int16, -1i32 as yytype_int16,
     58i32 as yytype_int16, 59i32 as yytype_int16, 60i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 63i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 66i32 as yytype_int16,
     67i32 as yytype_int16, -1i32 as yytype_int16, 69i32 as yytype_int16,
     70i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 89i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 92i32 as yytype_int16, 93i32 as yytype_int16,
     -1i32 as yytype_int16, 95i32 as yytype_int16, 96i32 as yytype_int16,
     -1i32 as yytype_int16, 98i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 101i32 as yytype_int16, -1i32 as yytype_int16,
     103i32 as yytype_int16, 104i32 as yytype_int16, 105i32 as yytype_int16,
     106i32 as yytype_int16, 107i32 as yytype_int16, 108i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 111i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     3i32 as yytype_int16, 4i32 as yytype_int16, 5i32 as yytype_int16,
     6i32 as yytype_int16, 7i32 as yytype_int16, 8i32 as yytype_int16,
     9i32 as yytype_int16, 10i32 as yytype_int16, 11i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 131i32 as yytype_int16, 132i32 as yytype_int16,
     133i32 as yytype_int16, 19i32 as yytype_int16, -1i32 as yytype_int16,
     21i32 as yytype_int16, 22i32 as yytype_int16, 23i32 as yytype_int16,
     24i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     30i32 as yytype_int16, 31i32 as yytype_int16, 32i32 as yytype_int16,
     33i32 as yytype_int16, 34i32 as yytype_int16, 35i32 as yytype_int16,
     36i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     39i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     48i32 as yytype_int16, 49i32 as yytype_int16, 50i32 as yytype_int16,
     51i32 as yytype_int16, 52i32 as yytype_int16, 53i32 as yytype_int16,
     54i32 as yytype_int16, 55i32 as yytype_int16, 56i32 as yytype_int16,
     -1i32 as yytype_int16, 58i32 as yytype_int16, 59i32 as yytype_int16,
     60i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     63i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     66i32 as yytype_int16, 67i32 as yytype_int16, -1i32 as yytype_int16,
     69i32 as yytype_int16, 70i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 89i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 92i32 as yytype_int16,
     93i32 as yytype_int16, -1i32 as yytype_int16, 95i32 as yytype_int16,
     96i32 as yytype_int16, -1i32 as yytype_int16, 98i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 101i32 as yytype_int16,
     -1i32 as yytype_int16, 103i32 as yytype_int16, 104i32 as yytype_int16,
     105i32 as yytype_int16, 106i32 as yytype_int16, 107i32 as yytype_int16,
     108i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     111i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 3i32 as yytype_int16, 4i32 as yytype_int16,
     5i32 as yytype_int16, 6i32 as yytype_int16, 7i32 as yytype_int16,
     8i32 as yytype_int16, 9i32 as yytype_int16, 10i32 as yytype_int16,
     11i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 131i32 as yytype_int16,
     132i32 as yytype_int16, 133i32 as yytype_int16, 19i32 as yytype_int16,
     -1i32 as yytype_int16, 21i32 as yytype_int16, 22i32 as yytype_int16,
     23i32 as yytype_int16, 24i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 30i32 as yytype_int16, 31i32 as yytype_int16,
     32i32 as yytype_int16, 33i32 as yytype_int16, 34i32 as yytype_int16,
     35i32 as yytype_int16, 36i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 39i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 48i32 as yytype_int16, 49i32 as yytype_int16,
     50i32 as yytype_int16, 51i32 as yytype_int16, 52i32 as yytype_int16,
     53i32 as yytype_int16, 54i32 as yytype_int16, 55i32 as yytype_int16,
     56i32 as yytype_int16, -1i32 as yytype_int16, 58i32 as yytype_int16,
     59i32 as yytype_int16, 60i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 63i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 66i32 as yytype_int16, 67i32 as yytype_int16,
     -1i32 as yytype_int16, 69i32 as yytype_int16, 70i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     89i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     92i32 as yytype_int16, 93i32 as yytype_int16, -1i32 as yytype_int16,
     95i32 as yytype_int16, 96i32 as yytype_int16, -1i32 as yytype_int16,
     98i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     101i32 as yytype_int16, -1i32 as yytype_int16, 103i32 as yytype_int16,
     104i32 as yytype_int16, 105i32 as yytype_int16, 106i32 as yytype_int16,
     107i32 as yytype_int16, 108i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 111i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 3i32 as yytype_int16,
     4i32 as yytype_int16, 5i32 as yytype_int16, 6i32 as yytype_int16,
     7i32 as yytype_int16, 8i32 as yytype_int16, 9i32 as yytype_int16,
     10i32 as yytype_int16, 11i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     131i32 as yytype_int16, 132i32 as yytype_int16, 133i32 as yytype_int16,
     19i32 as yytype_int16, -1i32 as yytype_int16, 21i32 as yytype_int16,
     22i32 as yytype_int16, 23i32 as yytype_int16, 24i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 30i32 as yytype_int16,
     31i32 as yytype_int16, 32i32 as yytype_int16, 33i32 as yytype_int16,
     34i32 as yytype_int16, 35i32 as yytype_int16, 36i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 39i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 48i32 as yytype_int16,
     49i32 as yytype_int16, 50i32 as yytype_int16, 51i32 as yytype_int16,
     52i32 as yytype_int16, 53i32 as yytype_int16, 54i32 as yytype_int16,
     55i32 as yytype_int16, 56i32 as yytype_int16, -1i32 as yytype_int16,
     58i32 as yytype_int16, 59i32 as yytype_int16, 60i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 63i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 66i32 as yytype_int16,
     67i32 as yytype_int16, -1i32 as yytype_int16, 69i32 as yytype_int16,
     70i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 89i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 92i32 as yytype_int16, 93i32 as yytype_int16,
     -1i32 as yytype_int16, 95i32 as yytype_int16, 96i32 as yytype_int16,
     -1i32 as yytype_int16, 98i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 101i32 as yytype_int16, -1i32 as yytype_int16,
     103i32 as yytype_int16, 104i32 as yytype_int16, 105i32 as yytype_int16,
     106i32 as yytype_int16, 107i32 as yytype_int16, 108i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 111i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     3i32 as yytype_int16, 4i32 as yytype_int16, 5i32 as yytype_int16,
     6i32 as yytype_int16, 7i32 as yytype_int16, 8i32 as yytype_int16,
     9i32 as yytype_int16, 10i32 as yytype_int16, 11i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 131i32 as yytype_int16, 132i32 as yytype_int16,
     133i32 as yytype_int16, 19i32 as yytype_int16, -1i32 as yytype_int16,
     21i32 as yytype_int16, 22i32 as yytype_int16, 23i32 as yytype_int16,
     24i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     30i32 as yytype_int16, 31i32 as yytype_int16, 32i32 as yytype_int16,
     33i32 as yytype_int16, 34i32 as yytype_int16, 35i32 as yytype_int16,
     36i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     39i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     48i32 as yytype_int16, 49i32 as yytype_int16, 50i32 as yytype_int16,
     51i32 as yytype_int16, 52i32 as yytype_int16, 53i32 as yytype_int16,
     54i32 as yytype_int16, 55i32 as yytype_int16, 56i32 as yytype_int16,
     -1i32 as yytype_int16, 58i32 as yytype_int16, 59i32 as yytype_int16,
     60i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     63i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     66i32 as yytype_int16, 67i32 as yytype_int16, -1i32 as yytype_int16,
     69i32 as yytype_int16, 70i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 89i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 92i32 as yytype_int16,
     93i32 as yytype_int16, -1i32 as yytype_int16, 95i32 as yytype_int16,
     96i32 as yytype_int16, -1i32 as yytype_int16, 98i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 101i32 as yytype_int16,
     -1i32 as yytype_int16, 103i32 as yytype_int16, 104i32 as yytype_int16,
     105i32 as yytype_int16, 106i32 as yytype_int16, 107i32 as yytype_int16,
     108i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     111i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 3i32 as yytype_int16, 4i32 as yytype_int16,
     5i32 as yytype_int16, 6i32 as yytype_int16, 7i32 as yytype_int16,
     8i32 as yytype_int16, 9i32 as yytype_int16, 10i32 as yytype_int16,
     11i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 131i32 as yytype_int16,
     132i32 as yytype_int16, 133i32 as yytype_int16, 19i32 as yytype_int16,
     -1i32 as yytype_int16, 21i32 as yytype_int16, 22i32 as yytype_int16,
     23i32 as yytype_int16, 24i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 30i32 as yytype_int16, 31i32 as yytype_int16,
     32i32 as yytype_int16, 33i32 as yytype_int16, 34i32 as yytype_int16,
     35i32 as yytype_int16, 36i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 39i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 48i32 as yytype_int16, 49i32 as yytype_int16,
     50i32 as yytype_int16, 51i32 as yytype_int16, 52i32 as yytype_int16,
     53i32 as yytype_int16, 54i32 as yytype_int16, 55i32 as yytype_int16,
     56i32 as yytype_int16, -1i32 as yytype_int16, 58i32 as yytype_int16,
     59i32 as yytype_int16, 60i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 63i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 66i32 as yytype_int16, 67i32 as yytype_int16,
     -1i32 as yytype_int16, 69i32 as yytype_int16, 70i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     89i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     92i32 as yytype_int16, 93i32 as yytype_int16, -1i32 as yytype_int16,
     95i32 as yytype_int16, 96i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     101i32 as yytype_int16, -1i32 as yytype_int16, 103i32 as yytype_int16,
     104i32 as yytype_int16, 105i32 as yytype_int16, 106i32 as yytype_int16,
     107i32 as yytype_int16, 108i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 111i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 3i32 as yytype_int16,
     4i32 as yytype_int16, 5i32 as yytype_int16, 6i32 as yytype_int16,
     7i32 as yytype_int16, 8i32 as yytype_int16, 9i32 as yytype_int16,
     10i32 as yytype_int16, 11i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     131i32 as yytype_int16, 132i32 as yytype_int16, 133i32 as yytype_int16,
     19i32 as yytype_int16, -1i32 as yytype_int16, 21i32 as yytype_int16,
     22i32 as yytype_int16, 23i32 as yytype_int16, 24i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 30i32 as yytype_int16,
     31i32 as yytype_int16, 32i32 as yytype_int16, 33i32 as yytype_int16,
     34i32 as yytype_int16, 35i32 as yytype_int16, 36i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 39i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 48i32 as yytype_int16,
     49i32 as yytype_int16, 50i32 as yytype_int16, 51i32 as yytype_int16,
     52i32 as yytype_int16, 53i32 as yytype_int16, 54i32 as yytype_int16,
     55i32 as yytype_int16, 56i32 as yytype_int16, -1i32 as yytype_int16,
     58i32 as yytype_int16, 59i32 as yytype_int16, 60i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 63i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 66i32 as yytype_int16,
     67i32 as yytype_int16, -1i32 as yytype_int16, 69i32 as yytype_int16,
     70i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 89i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 92i32 as yytype_int16, 93i32 as yytype_int16,
     -1i32 as yytype_int16, 95i32 as yytype_int16, 96i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 101i32 as yytype_int16, -1i32 as yytype_int16,
     103i32 as yytype_int16, 104i32 as yytype_int16, 105i32 as yytype_int16,
     106i32 as yytype_int16, 107i32 as yytype_int16, 108i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 111i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     3i32 as yytype_int16, 4i32 as yytype_int16, 5i32 as yytype_int16,
     6i32 as yytype_int16, 7i32 as yytype_int16, 8i32 as yytype_int16,
     9i32 as yytype_int16, 10i32 as yytype_int16, 11i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 131i32 as yytype_int16, 132i32 as yytype_int16,
     133i32 as yytype_int16, 19i32 as yytype_int16, -1i32 as yytype_int16,
     21i32 as yytype_int16, 22i32 as yytype_int16, 23i32 as yytype_int16,
     24i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     30i32 as yytype_int16, 31i32 as yytype_int16, 32i32 as yytype_int16,
     33i32 as yytype_int16, 34i32 as yytype_int16, 35i32 as yytype_int16,
     36i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     39i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     48i32 as yytype_int16, 49i32 as yytype_int16, 50i32 as yytype_int16,
     51i32 as yytype_int16, 52i32 as yytype_int16, 53i32 as yytype_int16,
     54i32 as yytype_int16, 55i32 as yytype_int16, 56i32 as yytype_int16,
     -1i32 as yytype_int16, 58i32 as yytype_int16, 59i32 as yytype_int16,
     60i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     63i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     66i32 as yytype_int16, 67i32 as yytype_int16, -1i32 as yytype_int16,
     69i32 as yytype_int16, 70i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 89i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 92i32 as yytype_int16,
     93i32 as yytype_int16, -1i32 as yytype_int16, 95i32 as yytype_int16,
     96i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 101i32 as yytype_int16,
     -1i32 as yytype_int16, 103i32 as yytype_int16, 104i32 as yytype_int16,
     105i32 as yytype_int16, 106i32 as yytype_int16, 107i32 as yytype_int16,
     108i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     111i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 3i32 as yytype_int16, 4i32 as yytype_int16,
     5i32 as yytype_int16, 6i32 as yytype_int16, 7i32 as yytype_int16,
     8i32 as yytype_int16, 9i32 as yytype_int16, 10i32 as yytype_int16,
     11i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 131i32 as yytype_int16,
     132i32 as yytype_int16, 133i32 as yytype_int16, 19i32 as yytype_int16,
     -1i32 as yytype_int16, 21i32 as yytype_int16, 22i32 as yytype_int16,
     23i32 as yytype_int16, 24i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 30i32 as yytype_int16, 31i32 as yytype_int16,
     32i32 as yytype_int16, 33i32 as yytype_int16, 34i32 as yytype_int16,
     35i32 as yytype_int16, 36i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 39i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 48i32 as yytype_int16, 49i32 as yytype_int16,
     50i32 as yytype_int16, 51i32 as yytype_int16, 52i32 as yytype_int16,
     53i32 as yytype_int16, 54i32 as yytype_int16, 55i32 as yytype_int16,
     56i32 as yytype_int16, -1i32 as yytype_int16, 58i32 as yytype_int16,
     59i32 as yytype_int16, 60i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 63i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 66i32 as yytype_int16, 67i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     86i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     89i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     92i32 as yytype_int16, 93i32 as yytype_int16, -1i32 as yytype_int16,
     95i32 as yytype_int16, 96i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     101i32 as yytype_int16, -1i32 as yytype_int16, 103i32 as yytype_int16,
     104i32 as yytype_int16, 105i32 as yytype_int16, 106i32 as yytype_int16,
     107i32 as yytype_int16, 108i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 111i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 3i32 as yytype_int16, 4i32 as yytype_int16,
     5i32 as yytype_int16, 6i32 as yytype_int16, 7i32 as yytype_int16,
     8i32 as yytype_int16, 9i32 as yytype_int16, 10i32 as yytype_int16,
     11i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 19i32 as yytype_int16,
     131i32 as yytype_int16, 21i32 as yytype_int16, 22i32 as yytype_int16,
     23i32 as yytype_int16, 24i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 30i32 as yytype_int16, 31i32 as yytype_int16,
     32i32 as yytype_int16, 33i32 as yytype_int16, 34i32 as yytype_int16,
     35i32 as yytype_int16, 36i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 39i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 48i32 as yytype_int16, 49i32 as yytype_int16,
     50i32 as yytype_int16, 51i32 as yytype_int16, 52i32 as yytype_int16,
     53i32 as yytype_int16, 54i32 as yytype_int16, 55i32 as yytype_int16,
     56i32 as yytype_int16, -1i32 as yytype_int16, 58i32 as yytype_int16,
     59i32 as yytype_int16, 60i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 63i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 66i32 as yytype_int16, 67i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     89i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     92i32 as yytype_int16, 93i32 as yytype_int16, -1i32 as yytype_int16,
     95i32 as yytype_int16, 96i32 as yytype_int16, -1i32 as yytype_int16,
     98i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     101i32 as yytype_int16, -1i32 as yytype_int16, 103i32 as yytype_int16,
     104i32 as yytype_int16, 105i32 as yytype_int16, 106i32 as yytype_int16,
     107i32 as yytype_int16, 108i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 111i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 3i32 as yytype_int16, 4i32 as yytype_int16,
     5i32 as yytype_int16, 6i32 as yytype_int16, 7i32 as yytype_int16,
     8i32 as yytype_int16, 9i32 as yytype_int16, 10i32 as yytype_int16,
     11i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 19i32 as yytype_int16,
     131i32 as yytype_int16, 21i32 as yytype_int16, 22i32 as yytype_int16,
     23i32 as yytype_int16, 24i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 30i32 as yytype_int16, 31i32 as yytype_int16,
     32i32 as yytype_int16, 33i32 as yytype_int16, 34i32 as yytype_int16,
     35i32 as yytype_int16, 36i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 39i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 48i32 as yytype_int16, 49i32 as yytype_int16,
     50i32 as yytype_int16, 51i32 as yytype_int16, 52i32 as yytype_int16,
     53i32 as yytype_int16, 54i32 as yytype_int16, 55i32 as yytype_int16,
     56i32 as yytype_int16, -1i32 as yytype_int16, 58i32 as yytype_int16,
     59i32 as yytype_int16, 60i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 63i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 66i32 as yytype_int16, 67i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     89i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     92i32 as yytype_int16, 93i32 as yytype_int16, -1i32 as yytype_int16,
     95i32 as yytype_int16, 96i32 as yytype_int16, -1i32 as yytype_int16,
     98i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     101i32 as yytype_int16, -1i32 as yytype_int16, 103i32 as yytype_int16,
     104i32 as yytype_int16, 105i32 as yytype_int16, 106i32 as yytype_int16,
     107i32 as yytype_int16, 108i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 111i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 3i32 as yytype_int16, 4i32 as yytype_int16,
     5i32 as yytype_int16, 6i32 as yytype_int16, 7i32 as yytype_int16,
     8i32 as yytype_int16, 9i32 as yytype_int16, 10i32 as yytype_int16,
     11i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 19i32 as yytype_int16,
     131i32 as yytype_int16, 21i32 as yytype_int16, 22i32 as yytype_int16,
     23i32 as yytype_int16, 24i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 30i32 as yytype_int16, 31i32 as yytype_int16,
     32i32 as yytype_int16, 33i32 as yytype_int16, 34i32 as yytype_int16,
     35i32 as yytype_int16, 36i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 39i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 48i32 as yytype_int16, 49i32 as yytype_int16,
     50i32 as yytype_int16, 51i32 as yytype_int16, 52i32 as yytype_int16,
     53i32 as yytype_int16, 54i32 as yytype_int16, 55i32 as yytype_int16,
     56i32 as yytype_int16, -1i32 as yytype_int16, 58i32 as yytype_int16,
     59i32 as yytype_int16, 60i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 63i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 66i32 as yytype_int16, 67i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     89i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     92i32 as yytype_int16, 93i32 as yytype_int16, -1i32 as yytype_int16,
     95i32 as yytype_int16, 96i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     101i32 as yytype_int16, -1i32 as yytype_int16, 103i32 as yytype_int16,
     104i32 as yytype_int16, 105i32 as yytype_int16, 106i32 as yytype_int16,
     107i32 as yytype_int16, 108i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 111i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 3i32 as yytype_int16, 4i32 as yytype_int16,
     5i32 as yytype_int16, 6i32 as yytype_int16, 7i32 as yytype_int16,
     8i32 as yytype_int16, 9i32 as yytype_int16, 10i32 as yytype_int16,
     11i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 19i32 as yytype_int16,
     131i32 as yytype_int16, 21i32 as yytype_int16, 22i32 as yytype_int16,
     23i32 as yytype_int16, 24i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 30i32 as yytype_int16, 31i32 as yytype_int16,
     32i32 as yytype_int16, 33i32 as yytype_int16, 34i32 as yytype_int16,
     35i32 as yytype_int16, 36i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 39i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 48i32 as yytype_int16, 49i32 as yytype_int16,
     50i32 as yytype_int16, 51i32 as yytype_int16, 52i32 as yytype_int16,
     53i32 as yytype_int16, 54i32 as yytype_int16, 55i32 as yytype_int16,
     56i32 as yytype_int16, -1i32 as yytype_int16, 58i32 as yytype_int16,
     59i32 as yytype_int16, 60i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 63i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 66i32 as yytype_int16, 67i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     89i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     92i32 as yytype_int16, 93i32 as yytype_int16, -1i32 as yytype_int16,
     95i32 as yytype_int16, 96i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     101i32 as yytype_int16, -1i32 as yytype_int16, 103i32 as yytype_int16,
     104i32 as yytype_int16, 105i32 as yytype_int16, 106i32 as yytype_int16,
     107i32 as yytype_int16, 108i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 111i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 3i32 as yytype_int16, 4i32 as yytype_int16,
     5i32 as yytype_int16, 6i32 as yytype_int16, 7i32 as yytype_int16,
     8i32 as yytype_int16, 9i32 as yytype_int16, 10i32 as yytype_int16,
     11i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 19i32 as yytype_int16,
     131i32 as yytype_int16, 21i32 as yytype_int16, 22i32 as yytype_int16,
     23i32 as yytype_int16, 24i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 30i32 as yytype_int16, 31i32 as yytype_int16,
     32i32 as yytype_int16, 33i32 as yytype_int16, 34i32 as yytype_int16,
     35i32 as yytype_int16, 36i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 39i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 48i32 as yytype_int16, 49i32 as yytype_int16,
     50i32 as yytype_int16, 51i32 as yytype_int16, 52i32 as yytype_int16,
     53i32 as yytype_int16, 54i32 as yytype_int16, 55i32 as yytype_int16,
     56i32 as yytype_int16, -1i32 as yytype_int16, 58i32 as yytype_int16,
     59i32 as yytype_int16, 60i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 63i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 66i32 as yytype_int16, 67i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     89i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     92i32 as yytype_int16, 93i32 as yytype_int16, -1i32 as yytype_int16,
     95i32 as yytype_int16, 96i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     101i32 as yytype_int16, -1i32 as yytype_int16, 103i32 as yytype_int16,
     104i32 as yytype_int16, 105i32 as yytype_int16, 106i32 as yytype_int16,
     107i32 as yytype_int16, 108i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 111i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 3i32 as yytype_int16, 4i32 as yytype_int16,
     5i32 as yytype_int16, 6i32 as yytype_int16, 7i32 as yytype_int16,
     8i32 as yytype_int16, 9i32 as yytype_int16, 10i32 as yytype_int16,
     11i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 19i32 as yytype_int16,
     131i32 as yytype_int16, 21i32 as yytype_int16, 22i32 as yytype_int16,
     23i32 as yytype_int16, 24i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 30i32 as yytype_int16, 31i32 as yytype_int16,
     32i32 as yytype_int16, 33i32 as yytype_int16, 34i32 as yytype_int16,
     35i32 as yytype_int16, 36i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 39i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 48i32 as yytype_int16, 49i32 as yytype_int16,
     50i32 as yytype_int16, 51i32 as yytype_int16, 52i32 as yytype_int16,
     53i32 as yytype_int16, 54i32 as yytype_int16, 55i32 as yytype_int16,
     56i32 as yytype_int16, -1i32 as yytype_int16, 58i32 as yytype_int16,
     59i32 as yytype_int16, 60i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 63i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 66i32 as yytype_int16, 67i32 as yytype_int16,
     -1i32 as yytype_int16, 71i32 as yytype_int16, 72i32 as yytype_int16,
     73i32 as yytype_int16, 74i32 as yytype_int16, 75i32 as yytype_int16,
     76i32 as yytype_int16, 77i32 as yytype_int16, 78i32 as yytype_int16,
     79i32 as yytype_int16, 80i32 as yytype_int16, 81i32 as yytype_int16,
     82i32 as yytype_int16, 83i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 86i32 as yytype_int16, 87i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     89i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     92i32 as yytype_int16, 93i32 as yytype_int16, -1i32 as yytype_int16,
     95i32 as yytype_int16, 96i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     101i32 as yytype_int16, -1i32 as yytype_int16, 103i32 as yytype_int16,
     104i32 as yytype_int16, 105i32 as yytype_int16, 106i32 as yytype_int16,
     107i32 as yytype_int16, 108i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 111i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 51i32 as yytype_int16, 52i32 as yytype_int16,
     -1i32 as yytype_int16, 119i32 as yytype_int16, 55i32 as yytype_int16,
     121i32 as yytype_int16, 122i32 as yytype_int16, 123i32 as yytype_int16,
     124i32 as yytype_int16, 125i32 as yytype_int16, 126i32 as yytype_int16,
     127i32 as yytype_int16, 128i32 as yytype_int16, 129i32 as yytype_int16,
     130i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     131i32 as yytype_int16, 69i32 as yytype_int16, 70i32 as yytype_int16,
     71i32 as yytype_int16, 72i32 as yytype_int16, 73i32 as yytype_int16,
     74i32 as yytype_int16, 75i32 as yytype_int16, 76i32 as yytype_int16,
     77i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     80i32 as yytype_int16, 81i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 84i32 as yytype_int16, 85i32 as yytype_int16,
     86i32 as yytype_int16, 87i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 71i32 as yytype_int16,
     72i32 as yytype_int16, 73i32 as yytype_int16, 74i32 as yytype_int16,
     75i32 as yytype_int16, 76i32 as yytype_int16, 77i32 as yytype_int16,
     98i32 as yytype_int16, 99i32 as yytype_int16, 80i32 as yytype_int16,
     81i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 86i32 as yytype_int16,
     87i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 121i32 as yytype_int16,
     122i32 as yytype_int16, 123i32 as yytype_int16, 124i32 as yytype_int16,
     125i32 as yytype_int16, 126i32 as yytype_int16, 127i32 as yytype_int16,
     128i32 as yytype_int16, 129i32 as yytype_int16, 130i32 as yytype_int16,
     -1i32 as yytype_int16, 132i32 as yytype_int16, 133i32 as yytype_int16,
     51i32 as yytype_int16, 52i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 55i32 as yytype_int16, 139i32 as yytype_int16,
     140i32 as yytype_int16, 121i32 as yytype_int16, 122i32 as yytype_int16,
     123i32 as yytype_int16, 124i32 as yytype_int16, 125i32 as yytype_int16,
     126i32 as yytype_int16, 127i32 as yytype_int16, 128i32 as yytype_int16,
     129i32 as yytype_int16, 130i32 as yytype_int16, -1i32 as yytype_int16,
     69i32 as yytype_int16, 70i32 as yytype_int16, 71i32 as yytype_int16,
     72i32 as yytype_int16, 73i32 as yytype_int16, 74i32 as yytype_int16,
     75i32 as yytype_int16, 76i32 as yytype_int16, 77i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 80i32 as yytype_int16,
     81i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     84i32 as yytype_int16, 85i32 as yytype_int16, 86i32 as yytype_int16,
     87i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 71i32 as yytype_int16, 72i32 as yytype_int16,
     73i32 as yytype_int16, 74i32 as yytype_int16, 75i32 as yytype_int16,
     76i32 as yytype_int16, 77i32 as yytype_int16, 98i32 as yytype_int16,
     99i32 as yytype_int16, 80i32 as yytype_int16, 81i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 86i32 as yytype_int16, 87i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 121i32 as yytype_int16, 122i32 as yytype_int16,
     123i32 as yytype_int16, 124i32 as yytype_int16, 125i32 as yytype_int16,
     126i32 as yytype_int16, 127i32 as yytype_int16, 128i32 as yytype_int16,
     129i32 as yytype_int16, 130i32 as yytype_int16, -1i32 as yytype_int16,
     132i32 as yytype_int16, 133i32 as yytype_int16, 51i32 as yytype_int16,
     52i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     55i32 as yytype_int16, 139i32 as yytype_int16, 140i32 as yytype_int16,
     121i32 as yytype_int16, 122i32 as yytype_int16, 123i32 as yytype_int16,
     124i32 as yytype_int16, 125i32 as yytype_int16, 126i32 as yytype_int16,
     127i32 as yytype_int16, 128i32 as yytype_int16, 129i32 as yytype_int16,
     130i32 as yytype_int16, -1i32 as yytype_int16, 69i32 as yytype_int16,
     70i32 as yytype_int16, 71i32 as yytype_int16, 72i32 as yytype_int16,
     73i32 as yytype_int16, 74i32 as yytype_int16, 75i32 as yytype_int16,
     76i32 as yytype_int16, 77i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 80i32 as yytype_int16, 81i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 84i32 as yytype_int16,
     85i32 as yytype_int16, 86i32 as yytype_int16, 87i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 98i32 as yytype_int16, 99i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     121i32 as yytype_int16, 122i32 as yytype_int16, 123i32 as yytype_int16,
     124i32 as yytype_int16, 125i32 as yytype_int16, 126i32 as yytype_int16,
     127i32 as yytype_int16, 128i32 as yytype_int16, 129i32 as yytype_int16,
     130i32 as yytype_int16, -1i32 as yytype_int16, 132i32 as yytype_int16,
     133i32 as yytype_int16, 51i32 as yytype_int16, 52i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 55i32 as yytype_int16,
     139i32 as yytype_int16, 140i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 69i32 as yytype_int16, 70i32 as yytype_int16,
     71i32 as yytype_int16, 72i32 as yytype_int16, 73i32 as yytype_int16,
     74i32 as yytype_int16, 75i32 as yytype_int16, 76i32 as yytype_int16,
     77i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     80i32 as yytype_int16, 81i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 84i32 as yytype_int16, 85i32 as yytype_int16,
     86i32 as yytype_int16, 87i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     98i32 as yytype_int16, 99i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 121i32 as yytype_int16,
     122i32 as yytype_int16, 123i32 as yytype_int16, 124i32 as yytype_int16,
     125i32 as yytype_int16, 126i32 as yytype_int16, 127i32 as yytype_int16,
     128i32 as yytype_int16, 129i32 as yytype_int16, 130i32 as yytype_int16,
     -1i32 as yytype_int16, 132i32 as yytype_int16, 133i32 as yytype_int16,
     51i32 as yytype_int16, 52i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 55i32 as yytype_int16, 139i32 as yytype_int16,
     140i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     69i32 as yytype_int16, 70i32 as yytype_int16, 71i32 as yytype_int16,
     72i32 as yytype_int16, 73i32 as yytype_int16, 74i32 as yytype_int16,
     75i32 as yytype_int16, 76i32 as yytype_int16, 77i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 80i32 as yytype_int16,
     81i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     84i32 as yytype_int16, 85i32 as yytype_int16, 86i32 as yytype_int16,
     87i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 98i32 as yytype_int16,
     99i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 121i32 as yytype_int16, 122i32 as yytype_int16,
     123i32 as yytype_int16, 124i32 as yytype_int16, 125i32 as yytype_int16,
     126i32 as yytype_int16, 127i32 as yytype_int16, 128i32 as yytype_int16,
     129i32 as yytype_int16, 130i32 as yytype_int16, -1i32 as yytype_int16,
     132i32 as yytype_int16, 133i32 as yytype_int16, 51i32 as yytype_int16,
     52i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     55i32 as yytype_int16, 139i32 as yytype_int16, 140i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 69i32 as yytype_int16,
     70i32 as yytype_int16, 71i32 as yytype_int16, 72i32 as yytype_int16,
     73i32 as yytype_int16, 74i32 as yytype_int16, 75i32 as yytype_int16,
     76i32 as yytype_int16, 77i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 80i32 as yytype_int16, 81i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 84i32 as yytype_int16,
     85i32 as yytype_int16, 86i32 as yytype_int16, 87i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 98i32 as yytype_int16, 99i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     121i32 as yytype_int16, 122i32 as yytype_int16, 123i32 as yytype_int16,
     124i32 as yytype_int16, 125i32 as yytype_int16, 126i32 as yytype_int16,
     127i32 as yytype_int16, 128i32 as yytype_int16, 129i32 as yytype_int16,
     130i32 as yytype_int16, -1i32 as yytype_int16, 132i32 as yytype_int16,
     133i32 as yytype_int16, 51i32 as yytype_int16, 52i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 55i32 as yytype_int16,
     139i32 as yytype_int16, 140i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 69i32 as yytype_int16, 70i32 as yytype_int16,
     71i32 as yytype_int16, 72i32 as yytype_int16, 73i32 as yytype_int16,
     74i32 as yytype_int16, 75i32 as yytype_int16, 76i32 as yytype_int16,
     77i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     80i32 as yytype_int16, 81i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 84i32 as yytype_int16, 85i32 as yytype_int16,
     86i32 as yytype_int16, 87i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     98i32 as yytype_int16, 99i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 121i32 as yytype_int16,
     122i32 as yytype_int16, 123i32 as yytype_int16, 124i32 as yytype_int16,
     125i32 as yytype_int16, 126i32 as yytype_int16, 127i32 as yytype_int16,
     128i32 as yytype_int16, 129i32 as yytype_int16, 130i32 as yytype_int16,
     -1i32 as yytype_int16, 132i32 as yytype_int16, 133i32 as yytype_int16,
     51i32 as yytype_int16, 52i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 55i32 as yytype_int16, 139i32 as yytype_int16,
     140i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     69i32 as yytype_int16, 70i32 as yytype_int16, 71i32 as yytype_int16,
     72i32 as yytype_int16, 73i32 as yytype_int16, 74i32 as yytype_int16,
     75i32 as yytype_int16, 76i32 as yytype_int16, 77i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 80i32 as yytype_int16,
     81i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     84i32 as yytype_int16, 85i32 as yytype_int16, 86i32 as yytype_int16,
     87i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 98i32 as yytype_int16,
     99i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 121i32 as yytype_int16, 122i32 as yytype_int16,
     123i32 as yytype_int16, 124i32 as yytype_int16, 125i32 as yytype_int16,
     126i32 as yytype_int16, 127i32 as yytype_int16, 128i32 as yytype_int16,
     129i32 as yytype_int16, 130i32 as yytype_int16, -1i32 as yytype_int16,
     132i32 as yytype_int16, 133i32 as yytype_int16, 51i32 as yytype_int16,
     52i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     55i32 as yytype_int16, 139i32 as yytype_int16, 140i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 69i32 as yytype_int16,
     70i32 as yytype_int16, 71i32 as yytype_int16, 72i32 as yytype_int16,
     73i32 as yytype_int16, 74i32 as yytype_int16, 75i32 as yytype_int16,
     76i32 as yytype_int16, 77i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 80i32 as yytype_int16, 81i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 84i32 as yytype_int16,
     85i32 as yytype_int16, 86i32 as yytype_int16, 87i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 98i32 as yytype_int16, 99i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     121i32 as yytype_int16, 122i32 as yytype_int16, 123i32 as yytype_int16,
     124i32 as yytype_int16, 125i32 as yytype_int16, 126i32 as yytype_int16,
     127i32 as yytype_int16, 128i32 as yytype_int16, 129i32 as yytype_int16,
     130i32 as yytype_int16, -1i32 as yytype_int16, 132i32 as yytype_int16,
     133i32 as yytype_int16, 51i32 as yytype_int16, 52i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 55i32 as yytype_int16,
     139i32 as yytype_int16, 140i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 69i32 as yytype_int16, 70i32 as yytype_int16,
     71i32 as yytype_int16, 72i32 as yytype_int16, 73i32 as yytype_int16,
     74i32 as yytype_int16, 75i32 as yytype_int16, 76i32 as yytype_int16,
     77i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     80i32 as yytype_int16, 81i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 84i32 as yytype_int16, 85i32 as yytype_int16,
     86i32 as yytype_int16, 87i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     98i32 as yytype_int16, 99i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 121i32 as yytype_int16,
     122i32 as yytype_int16, 123i32 as yytype_int16, 124i32 as yytype_int16,
     125i32 as yytype_int16, 126i32 as yytype_int16, 127i32 as yytype_int16,
     128i32 as yytype_int16, 129i32 as yytype_int16, 130i32 as yytype_int16,
     -1i32 as yytype_int16, 132i32 as yytype_int16, 133i32 as yytype_int16,
     51i32 as yytype_int16, 52i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 55i32 as yytype_int16, 139i32 as yytype_int16,
     140i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     69i32 as yytype_int16, 70i32 as yytype_int16, 71i32 as yytype_int16,
     72i32 as yytype_int16, 73i32 as yytype_int16, 74i32 as yytype_int16,
     75i32 as yytype_int16, 76i32 as yytype_int16, 77i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 80i32 as yytype_int16,
     81i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     84i32 as yytype_int16, 85i32 as yytype_int16, 86i32 as yytype_int16,
     87i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 98i32 as yytype_int16,
     99i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 121i32 as yytype_int16, 122i32 as yytype_int16,
     123i32 as yytype_int16, 124i32 as yytype_int16, 125i32 as yytype_int16,
     126i32 as yytype_int16, 127i32 as yytype_int16, 128i32 as yytype_int16,
     129i32 as yytype_int16, 130i32 as yytype_int16, -1i32 as yytype_int16,
     132i32 as yytype_int16, 133i32 as yytype_int16, 51i32 as yytype_int16,
     52i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     55i32 as yytype_int16, 139i32 as yytype_int16, 140i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 69i32 as yytype_int16,
     70i32 as yytype_int16, 71i32 as yytype_int16, 72i32 as yytype_int16,
     73i32 as yytype_int16, 74i32 as yytype_int16, 75i32 as yytype_int16,
     76i32 as yytype_int16, 77i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 80i32 as yytype_int16, 81i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 84i32 as yytype_int16,
     85i32 as yytype_int16, 86i32 as yytype_int16, 87i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 98i32 as yytype_int16, 99i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     121i32 as yytype_int16, 122i32 as yytype_int16, 123i32 as yytype_int16,
     124i32 as yytype_int16, 125i32 as yytype_int16, 126i32 as yytype_int16,
     127i32 as yytype_int16, 128i32 as yytype_int16, 129i32 as yytype_int16,
     130i32 as yytype_int16, -1i32 as yytype_int16, 132i32 as yytype_int16,
     133i32 as yytype_int16, 51i32 as yytype_int16, 52i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 55i32 as yytype_int16,
     139i32 as yytype_int16, 140i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 69i32 as yytype_int16, 70i32 as yytype_int16,
     71i32 as yytype_int16, 72i32 as yytype_int16, 73i32 as yytype_int16,
     74i32 as yytype_int16, 75i32 as yytype_int16, 76i32 as yytype_int16,
     77i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     80i32 as yytype_int16, 81i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 84i32 as yytype_int16, 85i32 as yytype_int16,
     86i32 as yytype_int16, 87i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     98i32 as yytype_int16, 99i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 121i32 as yytype_int16,
     122i32 as yytype_int16, 123i32 as yytype_int16, 124i32 as yytype_int16,
     125i32 as yytype_int16, 126i32 as yytype_int16, 127i32 as yytype_int16,
     128i32 as yytype_int16, 129i32 as yytype_int16, 130i32 as yytype_int16,
     -1i32 as yytype_int16, 132i32 as yytype_int16, 133i32 as yytype_int16,
     51i32 as yytype_int16, 52i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 55i32 as yytype_int16, 139i32 as yytype_int16,
     140i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     69i32 as yytype_int16, 70i32 as yytype_int16, 71i32 as yytype_int16,
     72i32 as yytype_int16, 73i32 as yytype_int16, 74i32 as yytype_int16,
     75i32 as yytype_int16, 76i32 as yytype_int16, 77i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 80i32 as yytype_int16,
     81i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     84i32 as yytype_int16, 85i32 as yytype_int16, 86i32 as yytype_int16,
     87i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 98i32 as yytype_int16,
     99i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 121i32 as yytype_int16, 122i32 as yytype_int16,
     123i32 as yytype_int16, 124i32 as yytype_int16, 125i32 as yytype_int16,
     126i32 as yytype_int16, 127i32 as yytype_int16, 128i32 as yytype_int16,
     129i32 as yytype_int16, 130i32 as yytype_int16, -1i32 as yytype_int16,
     132i32 as yytype_int16, 133i32 as yytype_int16, 51i32 as yytype_int16,
     52i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     55i32 as yytype_int16, 139i32 as yytype_int16, 140i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 69i32 as yytype_int16,
     70i32 as yytype_int16, 71i32 as yytype_int16, 72i32 as yytype_int16,
     73i32 as yytype_int16, 74i32 as yytype_int16, 75i32 as yytype_int16,
     76i32 as yytype_int16, 77i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 80i32 as yytype_int16, 81i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 84i32 as yytype_int16,
     85i32 as yytype_int16, 86i32 as yytype_int16, 87i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 98i32 as yytype_int16, 99i32 as yytype_int16,
     71i32 as yytype_int16, 72i32 as yytype_int16, 73i32 as yytype_int16,
     74i32 as yytype_int16, 75i32 as yytype_int16, 76i32 as yytype_int16,
     77i32 as yytype_int16, 78i32 as yytype_int16, 79i32 as yytype_int16,
     80i32 as yytype_int16, 81i32 as yytype_int16, 82i32 as yytype_int16,
     83i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     86i32 as yytype_int16, 87i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     121i32 as yytype_int16, 122i32 as yytype_int16, 123i32 as yytype_int16,
     124i32 as yytype_int16, 125i32 as yytype_int16, 126i32 as yytype_int16,
     127i32 as yytype_int16, 128i32 as yytype_int16, 129i32 as yytype_int16,
     130i32 as yytype_int16, -1i32 as yytype_int16, 132i32 as yytype_int16,
     133i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     139i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     119i32 as yytype_int16, -1i32 as yytype_int16, 121i32 as yytype_int16,
     122i32 as yytype_int16, 123i32 as yytype_int16, 124i32 as yytype_int16,
     125i32 as yytype_int16, 126i32 as yytype_int16, 127i32 as yytype_int16,
     128i32 as yytype_int16, 129i32 as yytype_int16, 130i32 as yytype_int16,
     71i32 as yytype_int16, 72i32 as yytype_int16, 73i32 as yytype_int16,
     74i32 as yytype_int16, 75i32 as yytype_int16, 76i32 as yytype_int16,
     77i32 as yytype_int16, 78i32 as yytype_int16, 79i32 as yytype_int16,
     80i32 as yytype_int16, 81i32 as yytype_int16, 82i32 as yytype_int16,
     83i32 as yytype_int16, -1i32 as yytype_int16, 145i32 as yytype_int16,
     86i32 as yytype_int16, 87i32 as yytype_int16, -1i32 as yytype_int16,
     71i32 as yytype_int16, 72i32 as yytype_int16, 73i32 as yytype_int16,
     74i32 as yytype_int16, 75i32 as yytype_int16, 76i32 as yytype_int16,
     77i32 as yytype_int16, 78i32 as yytype_int16, 79i32 as yytype_int16,
     80i32 as yytype_int16, 81i32 as yytype_int16, 82i32 as yytype_int16,
     83i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     86i32 as yytype_int16, 87i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     119i32 as yytype_int16, -1i32 as yytype_int16, 121i32 as yytype_int16,
     122i32 as yytype_int16, 123i32 as yytype_int16, 124i32 as yytype_int16,
     125i32 as yytype_int16, 126i32 as yytype_int16, 127i32 as yytype_int16,
     128i32 as yytype_int16, 129i32 as yytype_int16, 130i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     119i32 as yytype_int16, 138i32 as yytype_int16, 121i32 as yytype_int16,
     122i32 as yytype_int16, 123i32 as yytype_int16, 124i32 as yytype_int16,
     125i32 as yytype_int16, 126i32 as yytype_int16, 127i32 as yytype_int16,
     128i32 as yytype_int16, 129i32 as yytype_int16, 130i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 138i32 as yytype_int16, 71i32 as yytype_int16,
     72i32 as yytype_int16, 73i32 as yytype_int16, 74i32 as yytype_int16,
     75i32 as yytype_int16, 76i32 as yytype_int16, 77i32 as yytype_int16,
     78i32 as yytype_int16, 79i32 as yytype_int16, 80i32 as yytype_int16,
     81i32 as yytype_int16, 82i32 as yytype_int16, 83i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 86i32 as yytype_int16,
     87i32 as yytype_int16, -1i32 as yytype_int16, 71i32 as yytype_int16,
     72i32 as yytype_int16, 73i32 as yytype_int16, 74i32 as yytype_int16,
     75i32 as yytype_int16, 76i32 as yytype_int16, 77i32 as yytype_int16,
     78i32 as yytype_int16, 79i32 as yytype_int16, 80i32 as yytype_int16,
     81i32 as yytype_int16, 82i32 as yytype_int16, 83i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 86i32 as yytype_int16,
     87i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 119i32 as yytype_int16,
     -1i32 as yytype_int16, 121i32 as yytype_int16, 122i32 as yytype_int16,
     123i32 as yytype_int16, 124i32 as yytype_int16, 125i32 as yytype_int16,
     126i32 as yytype_int16, 127i32 as yytype_int16, 128i32 as yytype_int16,
     129i32 as yytype_int16, 130i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, 119i32 as yytype_int16,
     138i32 as yytype_int16, 121i32 as yytype_int16, 122i32 as yytype_int16,
     123i32 as yytype_int16, 124i32 as yytype_int16, 125i32 as yytype_int16,
     126i32 as yytype_int16, 127i32 as yytype_int16, 128i32 as yytype_int16,
     129i32 as yytype_int16, 130i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     138i32 as yytype_int16, 71i32 as yytype_int16, 72i32 as yytype_int16,
     73i32 as yytype_int16, 74i32 as yytype_int16, 75i32 as yytype_int16,
     76i32 as yytype_int16, 77i32 as yytype_int16, 78i32 as yytype_int16,
     79i32 as yytype_int16, 80i32 as yytype_int16, 81i32 as yytype_int16,
     82i32 as yytype_int16, 83i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 86i32 as yytype_int16, 87i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     91i32 as yytype_int16, 71i32 as yytype_int16, 72i32 as yytype_int16,
     73i32 as yytype_int16, 74i32 as yytype_int16, 75i32 as yytype_int16,
     76i32 as yytype_int16, 77i32 as yytype_int16, 78i32 as yytype_int16,
     -1i32 as yytype_int16, 80i32 as yytype_int16, 81i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 86i32 as yytype_int16, 87i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, 119i32 as yytype_int16, -1i32 as yytype_int16,
     121i32 as yytype_int16, 122i32 as yytype_int16, 123i32 as yytype_int16,
     124i32 as yytype_int16, 125i32 as yytype_int16, 126i32 as yytype_int16,
     127i32 as yytype_int16, 128i32 as yytype_int16, 129i32 as yytype_int16,
     130i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     -1i32 as yytype_int16, -1i32 as yytype_int16, -1i32 as yytype_int16,
     121i32 as yytype_int16, 122i32 as yytype_int16, 123i32 as yytype_int16,
     124i32 as yytype_int16, 125i32 as yytype_int16, 126i32 as yytype_int16,
     127i32 as yytype_int16, 128i32 as yytype_int16, 129i32 as yytype_int16,
     130i32 as yytype_int16];
unsafe extern "C" fn pushback(mut p: *mut parser_state, mut c: libc::c_int) {
    if c >= 0i32 { (*p).column -= 1 }
    (*p).pb = cons_gen(p, c as intptr_t as *mut node, (*p).pb);
}
unsafe extern "C" fn skip(mut p: *mut parser_state, mut term: libc::c_char) {
    let mut c: libc::c_int = 0;
    loop  {
        c = nextc(p);
        if c < 0i32 { break ; }
        if c == term as libc::c_int { break ; }
    };
}
unsafe extern "C" fn peekc_n(mut p: *mut parser_state, mut n: libc::c_int)
 -> libc::c_int {
    let mut list: *mut node = 0 as *mut node;
    let mut c0: libc::c_int = 0;
    loop  {
        c0 = nextc(p);
        if c0 == -1i32 {
            /* do not skip partial EOF */
            return c0
        }
        if c0 >= 0i32 { (*p).column -= 1 }
        list = append_gen(p, list, list1_gen(p, c0 as intptr_t as *mut node));
        let fresh5 = n;
        n = n - 1;
        if !(0 != fresh5) { break ; }
    }
    if !(*p).pb.is_null() {
        (*p).pb = append_gen(p, list, (*p).pb)
    } else { (*p).pb = list }
    return c0;
}
unsafe extern "C" fn peek_n(mut p: *mut parser_state, mut c: libc::c_int,
                            mut n: libc::c_int) -> mrb_bool {
    return (peekc_n(p, n) == c && c >= 0i32) as libc::c_int as mrb_bool;
}
unsafe extern "C" fn peeks(mut p: *mut parser_state,
                           mut s: *const libc::c_char) -> mrb_bool {
    let mut len: size_t = strlen(s);
    if !(*p).s.is_null() && (*p).s.offset(len as isize) <= (*p).send {
        if memcmp((*p).s as *const libc::c_void, s as *const libc::c_void,
                  len) == 0i32 {
            return 1i32 as mrb_bool
        }
    }
    return 0i32 as mrb_bool;
}
unsafe extern "C" fn skips(mut p: *mut parser_state,
                           mut s: *const libc::c_char) -> mrb_bool {
    let mut c: libc::c_int = 0;
    loop  {
        /* skip until first char */
        loop  {
            c = nextc(p);
            if c < 0i32 { return 0i32 as mrb_bool }
            if c == '\n' as i32 {
                (*p).lineno = (*p).lineno.wrapping_add(1);
                (*p).column = 0i32
            }
            if c == *s as libc::c_int { break ; }
        }
        s = s.offset(1isize);
        if 0 != peeks(p, s) {
            let mut len: size_t = strlen(s);
            loop  {
                let fresh6 = len;
                len = len.wrapping_sub(1);
                if !(0 != fresh6) { break ; }
                if nextc(p) == '\n' as i32 {
                    (*p).lineno = (*p).lineno.wrapping_add(1);
                    (*p).column = 0i32
                }
            }
            return 1i32 as mrb_bool
        } else { s = s.offset(-1isize) }
    };
}
unsafe extern "C" fn newtok(mut p: *mut parser_state) -> libc::c_int {
    if (*p).tokbuf != (*p).buf.as_mut_ptr() {
        mrb_free((*p).mrb, (*p).tokbuf as *mut libc::c_void);
        (*p).tokbuf = (*p).buf.as_mut_ptr();
        (*p).tsiz = 256i32
    }
    (*p).tidx = 0i32;
    return (*p).column - 1i32;
}
/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */
unsafe extern "C" fn tokadd(mut p: *mut parser_state, mut c: int32_t) {
    let mut utf8: [libc::c_char; 4] = [0; 4];
    let mut i: libc::c_int = 0;
    let mut len: libc::c_int = 0;
    /* mrb_assert(-0x10FFFF <= c && c <= 0xFF); */
    if c >= 0i32 {
        /* Single byte from source or non-Unicode escape */
        utf8[0usize] = c as libc::c_char;
        len = 1i32
    } else {
        /* Unicode character */
        c = -c;
        if c < 0x80i32 {
            utf8[0usize] = c as libc::c_char;
            len = 1i32
        } else if c < 0x800i32 {
            utf8[0usize] = (0xc0i32 | c >> 6i32) as libc::c_char;
            utf8[1usize] = (0x80i32 | c & 0x3fi32) as libc::c_char;
            len = 2i32
        } else if c < 0x10000i32 {
            utf8[0usize] = (0xe0i32 | c >> 12i32) as libc::c_char;
            utf8[1usize] = (0x80i32 | c >> 6i32 & 0x3fi32) as libc::c_char;
            utf8[2usize] = (0x80i32 | c & 0x3fi32) as libc::c_char;
            len = 3i32
        } else {
            utf8[0usize] = (0xf0i32 | c >> 18i32) as libc::c_char;
            utf8[1usize] = (0x80i32 | c >> 12i32 & 0x3fi32) as libc::c_char;
            utf8[2usize] = (0x80i32 | c >> 6i32 & 0x3fi32) as libc::c_char;
            utf8[3usize] = (0x80i32 | c & 0x3fi32) as libc::c_char;
            len = 4i32
        }
    }
    if (*p).tidx + len >= (*p).tsiz {
        if (*p).tsiz >= 65535i32 - 1i32 { (*p).tidx += len; return }
        (*p).tsiz *= 2i32;
        if (*p).tokbuf == (*p).buf.as_mut_ptr() {
            (*p).tokbuf =
                mrb_malloc((*p).mrb, (*p).tsiz as size_t) as
                    *mut libc::c_char;
            memcpy((*p).tokbuf as *mut libc::c_void,
                   (*p).buf.as_mut_ptr() as *const libc::c_void,
                   256i32 as libc::c_ulong);
        } else {
            (*p).tokbuf =
                mrb_realloc((*p).mrb, (*p).tokbuf as *mut libc::c_void,
                            (*p).tsiz as size_t) as *mut libc::c_char
        }
    }
    i = 0i32;
    while i < len {
        let fresh7 = (*p).tidx;
        (*p).tidx = (*p).tidx + 1;
        *(*p).tokbuf.offset(fresh7 as isize) = utf8[i as usize];
        i += 1
    };
}
unsafe extern "C" fn toklast(mut p: *mut parser_state) -> libc::c_int {
    return *(*p).tokbuf.offset(((*p).tidx - 1i32) as isize) as libc::c_int;
}
unsafe extern "C" fn tokfix(mut p: *mut parser_state) {
    if (*p).tidx >= 65535i32 - 1i32 {
        (*p).tidx = 65535i32 - 1i32 - 1i32;
        yyerror(p,
                b"string too long (truncated)\x00" as *const u8 as
                    *const libc::c_char);
    }
    *(*p).tokbuf.offset((*p).tidx as isize) = '\u{0}' as i32 as libc::c_char;
}
unsafe extern "C" fn tok(mut p: *mut parser_state) -> *const libc::c_char {
    return (*p).tokbuf;
}
unsafe extern "C" fn toklen(mut p: *mut parser_state) -> libc::c_int {
    return (*p).tidx;
}
unsafe extern "C" fn scan_oct(mut start: *const libc::c_int,
                              mut len: libc::c_int,
                              mut retlen: *mut libc::c_int) -> int32_t {
    let mut s: *const libc::c_int = start;
    let mut retval: int32_t = 0i32;
    /* mrb_assert(len <= 3) */
    loop  {
        let fresh8 = len;
        len = len - 1;
        if !(0 != fresh8 && *s >= '0' as i32 && *s <= '7' as i32) { break ; }
        retval <<= 3i32;
        let fresh9 = s;
        s = s.offset(1);
        retval |= *fresh9 - '0' as i32
    }
    *retlen = s.wrapping_offset_from(start) as libc::c_long as libc::c_int;
    return retval;
}
unsafe extern "C" fn scan_hex(mut p: *mut parser_state,
                              mut start: *const libc::c_int,
                              mut len: libc::c_int,
                              mut retlen: *mut libc::c_int) -> int32_t {
    static mut hexdigit: [libc::c_char; 33] =
        [48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 97, 98, 99, 100, 101, 102,
         48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 70, 0];
    let mut s: *const libc::c_int = start;
    let mut retval: uint32_t = 0i32 as uint32_t;
    let mut tmp: *mut libc::c_char = 0 as *mut libc::c_char;
    /* mrb_assert(len <= 8) */
    loop  {
        let fresh10 = len;
        len = len - 1;
        if !(0 != fresh10 && 0 != *s &&
                 { tmp = strchr(hexdigit.as_ptr(), *s); !tmp.is_null() }) {
            break ;
        }
        retval <<= 4i32;
        retval =
            (retval as libc::c_long |
                 tmp.wrapping_offset_from(hexdigit.as_ptr()) as libc::c_long &
                     15i32 as libc::c_long) as uint32_t;
        s = s.offset(1isize)
    }
    *retlen = s.wrapping_offset_from(start) as libc::c_long as libc::c_int;
    return retval as int32_t;
}
unsafe extern "C" fn read_escape_unicode(mut p: *mut parser_state,
                                         mut limit: libc::c_int) -> int32_t {
    let mut current_block: u64;
    let mut buf: [libc::c_int; 9] = [0; 9];
    let mut i: libc::c_int = 0;
    let mut hex: int32_t = 0;
    /* Look for opening brace */
    i = 0i32;
    buf[0usize] = nextc(p);
    if !(buf[0usize] < 0i32) {
        if (buf[0usize] as
                libc::c_uint).wrapping_sub('0' as i32 as libc::c_uint) <
               10i32 as libc::c_uint ||
               (buf[0usize] as libc::c_uint |
                    0x20i32 as
                        libc::c_uint).wrapping_sub('a' as i32 as libc::c_uint)
                   < 6i32 as libc::c_uint {
            /* \uxxxx form */
            i = 1i32;
            loop  {
                if !(i < limit) {
                    current_block = 4956146061682418353;
                    break ;
                }
                buf[i as usize] = nextc(p);
                if buf[i as usize] < 0i32 {
                    current_block = 11581962825348496069;
                    break ;
                }
                if !((buf[i as usize] as
                          libc::c_uint).wrapping_sub('0' as i32 as
                                                         libc::c_uint) <
                         10i32 as libc::c_uint ||
                         (buf[i as usize] as libc::c_uint |
                              0x20i32 as
                                  libc::c_uint).wrapping_sub('a' as i32 as
                                                                 libc::c_uint)
                             < 6i32 as libc::c_uint) {
                    pushback(p, buf[i as usize]);
                    current_block = 4956146061682418353;
                    break ;
                } else { i += 1 }
            }
        } else {
            pushback(p, buf[0usize]);
            current_block = 4956146061682418353;
        }
        match current_block {
            11581962825348496069 => { }
            _ => {
                hex = scan_hex(p, buf.as_mut_ptr(), i, &mut i);
                if i == 0i32 || hex > 0x10ffffi32 ||
                       hex as libc::c_uint & 0xfffff800u32 ==
                           0xd800i32 as libc::c_uint {
                    yyerror(p,
                            b"invalid Unicode code point\x00" as *const u8 as
                                *const libc::c_char);
                    return -1i32
                }
                return hex
            }
        }
    }
    yyerror(p,
            b"invalid escape character syntax\x00" as *const u8 as
                *const libc::c_char);
    return -1i32;
}
/* Return negative to indicate Unicode code point */
unsafe extern "C" fn read_escape(mut p: *mut parser_state) -> int32_t {
    let mut current_block: u64;
    let mut c: int32_t = 0;
    c = nextc(p);
    match c {
        92 => { return c }
        110 => { return '\n' as i32 }
        116 => { return '\t' as i32 }
        114 => { return '\r' as i32 }
        102 => { return '\u{c}' as i32 }
        118 => { return '\u{b}' as i32 }
        97 => { return '\u{7}' as i32 }
        101 => { return 0o33i32 }
        48 | 49 | 50 => {
            /* octal constant */
            current_block = 10886091980245723256;
        }
        51 | 52 | 53 | 54 | 55 => { current_block = 10886091980245723256; }
        120 => {
            let mut buf_0: [libc::c_int; 2] = [0; 2];
            let mut i_0: libc::c_int = 0;
            i_0 = 0i32;
            loop  {
                if !(i_0 < 2i32) {
                    current_block = 17281240262373992796;
                    break ;
                }
                buf_0[i_0 as usize] = nextc(p);
                if buf_0[i_0 as usize] < 0i32 {
                    current_block = 7084151562375718680;
                    break ;
                }
                if !((buf_0[i_0 as usize] as
                          libc::c_uint).wrapping_sub('0' as i32 as
                                                         libc::c_uint) <
                         10i32 as libc::c_uint ||
                         (buf_0[i_0 as usize] as libc::c_uint |
                              0x20i32 as
                                  libc::c_uint).wrapping_sub('a' as i32 as
                                                                 libc::c_uint)
                             < 6i32 as libc::c_uint) {
                    pushback(p, buf_0[i_0 as usize]);
                    current_block = 17281240262373992796;
                    break ;
                } else { i_0 += 1 }
            }
            match current_block {
                7084151562375718680 => { }
                _ => {
                    if i_0 == 0i32 {
                        yyerror(p,
                                b"invalid hex escape\x00" as *const u8 as
                                    *const libc::c_char);
                        return -1i32
                    }
                    return scan_hex(p, buf_0.as_mut_ptr(), i_0, &mut i_0)
                }
            }
        }
        117 => {
            if 0 != peek_n(p, '{' as i32, 0i32) {
                /* \u{xxxxxxxx} form */
                nextc(p);
                c = read_escape_unicode(p, 8i32);
                if c < 0i32 { return 0i32 }
                if nextc(p) != '}' as i32 {
                    current_block = 7084151562375718680;
                } else { current_block = 16799951812150840583; }
            } else {
                c = read_escape_unicode(p, 4i32);
                if c < 0i32 { return 0i32 }
                current_block = 16799951812150840583;
            }
            match current_block {
                7084151562375718680 => { }
                _ => { return -c }
            }
        }
        98 => { return '\u{8}' as i32 }
        115 => { return ' ' as i32 }
        77 => {
            c = nextc(p);
            if c != '-' as i32 {
                yyerror(p,
                        b"Invalid escape character syntax\x00" as *const u8 as
                            *const libc::c_char);
                pushback(p, c);
                return '\u{0}' as i32
            }
            c = nextc(p);
            if c == '\\' as i32 {
                return read_escape(p) | 0x80i32
            } else if !(c < 0i32) { return c & 0xffi32 | 0x80i32 }
            current_block = 7084151562375718680;
        }
        67 => {
            c = nextc(p);
            if c != '-' as i32 {
                yyerror(p,
                        b"Invalid escape character syntax\x00" as *const u8 as
                            *const libc::c_char);
                pushback(p, c);
                return '\u{0}' as i32
            }
            current_block = 6822697005392291956;
        }
        99 => { current_block = 6822697005392291956; }
        -1 => { current_block = 7084151562375718680; }
        -2 => { current_block = 6219297073026562318; }
        _ => { return c }
    }
    match current_block {
        6822697005392291956 => {
            c = nextc(p);
            if c == '\\' as i32 {
                c = read_escape(p);
                current_block = 15970011996474399071;
            } else if c == '?' as i32 {
                return 0o177i32
            } else if c < 0i32 {
                current_block = 7084151562375718680;
            } else { current_block = 15970011996474399071; }
            match current_block {
                7084151562375718680 => { }
                _ => { return c & 0x9fi32 }
            }
        }
        10886091980245723256 => {
            let mut buf: [libc::c_int; 3] = [0; 3];
            let mut i: libc::c_int = 0;
            buf[0usize] = c;
            i = 1i32;
            loop  {
                if !(i < 3i32) {
                    current_block = 15652330335145281839;
                    break ;
                }
                buf[i as usize] = nextc(p);
                if buf[i as usize] < 0i32 {
                    current_block = 7084151562375718680;
                    break ;
                }
                if buf[i as usize] < '0' as i32 ||
                       ('7' as i32) < buf[i as usize] {
                    pushback(p, buf[i as usize]);
                    current_block = 15652330335145281839;
                    break ;
                } else { i += 1 }
            }
            match current_block {
                7084151562375718680 => { }
                _ => { c = scan_oct(buf.as_mut_ptr(), i, &mut i); return c }
            }
        }
        _ => { }
    }
    match current_block { 7084151562375718680 => { } _ => { } }
    /* end of a file */
    yyerror(p,
            b"Invalid escape character syntax\x00" as *const u8 as
                *const libc::c_char);
    return '\u{0}' as i32;
}
unsafe extern "C" fn parse_string(mut p: *mut parser_state) -> libc::c_int {
    let mut c: libc::c_int = 0;
    let mut type_0: string_type =
        (*(*p).lex_strterm).car as intptr_t as string_type;
    let mut nest_level: libc::c_int =
        (*(*(*p).lex_strterm).cdr).car as intptr_t as libc::c_int;
    let mut beg: libc::c_int =
        (*(*(*(*p).lex_strterm).cdr).cdr).car as intptr_t as libc::c_int;
    let mut end: libc::c_int =
        (*(*(*(*p).lex_strterm).cdr).cdr).cdr as intptr_t as libc::c_int;
    let mut hinf: *mut parser_heredoc_info =
        if 0 != type_0 as libc::c_uint & 0x40i32 as libc::c_uint {
            parsing_heredoc_inf(p)
        } else { 0 as *mut parser_heredoc_info };
    if beg == 0i32 {
        /* should never happen */
        beg = -3i32
    }
    if end == 0i32 { end = -3i32 }
    newtok(p);
    loop  {
        c = nextc(p);
        if !(c != end || nest_level != 0i32) { break ; }
        if !hinf.is_null() && (c == '\n' as i32 || c < 0i32) {
            let mut line_head: mrb_bool = 0;
            tokadd(p, '\n' as i32);
            tokfix(p);
            (*p).lineno = (*p).lineno.wrapping_add(1);
            (*p).column = 0i32;
            line_head = (*hinf).line_head();
            (*hinf).set_line_head(1i32 as mrb_bool);
            if 0 != line_head {
                /* check whether end of heredoc */
                let mut s: *const libc::c_char = tok(p);
                let mut len: libc::c_int = toklen(p);
                if 0 != (*hinf).allow_indent() {
                    while (*s as libc::c_int == ' ' as i32 ||
                               (*s as
                                    libc::c_uint).wrapping_sub('\t' as i32 as
                                                                   libc::c_uint)
                                   < 5i32 as libc::c_uint) && len > 0i32 {
                        s = s.offset(1isize);
                        len -= 1
                    }
                }
                if len - 1i32 == (*hinf).term_len &&
                       strncmp(s, (*hinf).term, (len - 1i32) as libc::c_ulong)
                           == 0i32 {
                    if c < 0i32 {
                        (*p).parsing_heredoc = 0 as *mut mrb_ast_node
                    } else { return 367i32 }
                }
            }
            if c < 0i32 {
                let mut buf: [libc::c_char; 256] = [0; 256];
                let s1: [libc::c_char; 31] =
                    *::std::mem::transmute::<&[u8; 31],
                                             &[libc::c_char; 31]>(b"can\'t find heredoc delimiter \"\x00");
                let s2: [libc::c_char; 22] =
                    *::std::mem::transmute::<&[u8; 22],
                                             &[libc::c_char; 22]>(b"\" anywhere before EOF\x00");
                if (::std::mem::size_of::<[libc::c_char; 31]>() as
                        libc::c_ulong).wrapping_add(::std::mem::size_of::<[libc::c_char; 22]>()
                                                        as
                                                        libc::c_ulong).wrapping_add(strlen((*hinf).term)).wrapping_add(1i32
                                                                                                                           as
                                                                                                                           libc::c_ulong)
                       >=
                       ::std::mem::size_of::<[libc::c_char; 256]>() as
                           libc::c_ulong {
                    yyerror(p,
                            b"can\'t find heredoc delimiter anywhere before EOF\x00"
                                as *const u8 as *const libc::c_char);
                } else {
                    strcpy(buf.as_mut_ptr(), s1.as_ptr());
                    strcat(buf.as_mut_ptr(), (*hinf).term);
                    strcat(buf.as_mut_ptr(), s2.as_ptr());
                    yyerror(p, buf.as_mut_ptr());
                }
                return 0i32
            }
            let ref mut fresh11 = (*((*p).ylval as *mut YYSTYPE)).nd;
            *fresh11 = new_str(p, tok(p), toklen(p) as size_t);
            return 371i32
        }
        if c < 0i32 {
            yyerror(p,
                    b"unterminated string meets end of file\x00" as *const u8
                        as *const libc::c_char);
            return 0i32
        } else {
            if c == beg {
                nest_level += 1;
                (*(*(*p).lex_strterm).cdr).car =
                    nest_level as intptr_t as *mut node
            } else if c == end {
                nest_level -= 1;
                (*(*(*p).lex_strterm).cdr).car =
                    nest_level as intptr_t as *mut node
            } else if c == '\\' as i32 {
                c = nextc(p);
                if 0 != type_0 as libc::c_uint & 0x2i32 as libc::c_uint {
                    if c == end || c == beg {
                        tokadd(p, c);
                    } else if c == '\n' as i32 {
                        (*p).lineno = (*p).lineno.wrapping_add(1);
                        (*p).column = 0i32;
                        if 0 !=
                               type_0 as libc::c_uint &
                                   0x20i32 as libc::c_uint {
                            tokadd(p, '\n' as i32);
                        }
                    } else if 0 !=
                                  type_0 as libc::c_uint &
                                      0x4i32 as libc::c_uint {
                        tokadd(p, '\\' as i32);
                        tokadd(p, c);
                    } else if c == 'u' as i32 &&
                                  0 !=
                                      peek_n(p, '{' as i32, 0i32) as
                                          libc::c_int {
                        /* \u{xxxx xxxx xxxx} form */
                        nextc(p);
                        loop  {
                            loop  {
                                c = nextc(p);
                                if !(c == ' ' as i32 ||
                                         (c as
                                              libc::c_uint).wrapping_sub('\t'
                                                                             as
                                                                             i32
                                                                             as
                                                                             libc::c_uint)
                                             < 5i32 as libc::c_uint) {
                                    break ;
                                }
                            }
                            if c == '}' as i32 { break ; }
                            pushback(p, c);
                            c = read_escape_unicode(p, 8i32);
                            if c < 0i32 { break ; }
                            tokadd(p, -c);
                        }
                        if !hinf.is_null() {
                            (*hinf).set_line_head(0i32 as mrb_bool)
                        }
                    } else {
                        pushback(p, c);
                        tokadd(p, read_escape(p));
                        if !hinf.is_null() {
                            (*hinf).set_line_head(0i32 as mrb_bool)
                        }
                    }
                } else {
                    if c != beg && c != end {
                        if c == '\n' as i32 {
                            (*p).lineno = (*p).lineno.wrapping_add(1);
                            (*p).column = 0i32
                        }
                        if !(c == '\\' as i32 ||
                                 0 !=
                                     type_0 as libc::c_uint &
                                         0x20i32 as libc::c_uint &&
                                     (c == ' ' as i32 ||
                                          (c as
                                               libc::c_uint).wrapping_sub('\t'
                                                                              as
                                                                              i32
                                                                              as
                                                                              libc::c_uint)
                                              < 5i32 as libc::c_uint)) {
                            tokadd(p, '\\' as i32);
                        }
                    }
                    tokadd(p, c);
                }
                continue ;
            } else if c == '#' as i32 &&
                          0 != type_0 as libc::c_uint & 0x2i32 as libc::c_uint
             {
                c = nextc(p);
                if c == '{' as i32 {
                    tokfix(p);
                    (*p).lstate = EXPR_BEG;
                    (*p).set_cmd_start(1i32 as mrb_bool);
                    let ref mut fresh12 = (*((*p).ylval as *mut YYSTYPE)).nd;
                    *fresh12 = new_str(p, tok(p), toklen(p) as size_t);
                    if !hinf.is_null() {
                        (*hinf).set_line_head(0i32 as mrb_bool);
                        return 370i32
                    }
                    return 319i32
                }
                tokadd(p, '#' as i32);
                pushback(p, c);
                continue ;
            }
            if 0 != type_0 as libc::c_uint & 0x20i32 as libc::c_uint &&
                   (c == ' ' as i32 ||
                        (c as
                             libc::c_uint).wrapping_sub('\t' as i32 as
                                                            libc::c_uint) <
                            5i32 as libc::c_uint) {
                if toklen(p) == 0i32 {
                    loop  {
                        if c == '\n' as i32 {
                            (*p).lineno = (*p).lineno.wrapping_add(1);
                            (*p).column = 0i32;
                            heredoc_treat_nextline(p);
                            if !(*p).parsing_heredoc.is_null() {
                                return 369i32
                            }
                        }
                        c = nextc(p);
                        if !(c == ' ' as i32 ||
                                 (c as
                                      libc::c_uint).wrapping_sub('\t' as i32
                                                                     as
                                                                     libc::c_uint)
                                     < 5i32 as libc::c_uint) {
                            break ;
                        }
                    }
                    pushback(p, c);
                    return 368i32
                } else {
                    pushback(p, c);
                    tokfix(p);
                    let ref mut fresh13 = (*((*p).ylval as *mut YYSTYPE)).nd;
                    *fresh13 = new_str(p, tok(p), toklen(p) as size_t);
                    return 320i32
                }
            }
            if c == '\n' as i32 {
                (*p).lineno = (*p).lineno.wrapping_add(1);
                (*p).column = 0i32
            }
            tokadd(p, c);
        }
    }
    tokfix(p);
    (*p).lstate = EXPR_ENDARG;
    end_strterm(p);
    if 0 != type_0 as libc::c_uint & 0x80i32 as libc::c_uint {
        let ref mut fresh14 = (*((*p).ylval as *mut YYSTYPE)).nd;
        *fresh14 = new_xstr(p, tok(p), toklen(p));
        return 316i32
    }
    if 0 != type_0 as libc::c_uint & 0x4i32 as libc::c_uint {
        let mut f: libc::c_int = 0i32;
        let mut re_opt: libc::c_int = 0;
        let mut s_0: *mut libc::c_char =
            parser_strndup(p, tok(p), toklen(p) as size_t);
        let mut flags: [libc::c_char; 3] = [0; 3];
        let mut flag: *mut libc::c_char = flags.as_mut_ptr();
        let mut enc: libc::c_char = '\u{0}' as i32 as libc::c_char;
        let mut encp: *mut libc::c_char = 0 as *mut libc::c_char;
        let mut dup: *mut libc::c_char = 0 as *mut libc::c_char;
        newtok(p);
        loop  {
            re_opt = nextc(p);
            if !(re_opt >= 0i32 &&
                     (re_opt as libc::c_uint |
                          0x20i32 as
                              libc::c_uint).wrapping_sub('a' as i32 as
                                                             libc::c_uint) <
                         26i32 as libc::c_uint) {
                break ;
            }
            match re_opt {
                105 => { f |= 1i32 }
                120 => { f |= 2i32 }
                109 => { f |= 4i32 }
                117 => { f |= 16i32 }
                101 => { f |= 16i32 }
                115 => { f |= 16i32 }
                110 => { f |= 32i32 }
                111 => { }
                _ => { tokadd(p, re_opt); }
            }
        }
        pushback(p, re_opt);
        if 0 != toklen(p) {
            let mut msg: [libc::c_char; 128] = [0; 128];
            strcpy(msg.as_mut_ptr(),
                   b"unknown regexp option\x00" as *const u8 as
                       *const libc::c_char);
            tokfix(p);
            if toklen(p) > 1i32 {
                strcat(msg.as_mut_ptr(),
                       b"s\x00" as *const u8 as *const libc::c_char);
            }
            strcat(msg.as_mut_ptr(),
                   b" - \x00" as *const u8 as *const libc::c_char);
            strncat(msg.as_mut_ptr(), tok(p),
                    (::std::mem::size_of::<[libc::c_char; 128]>() as
                         libc::c_ulong).wrapping_sub(strlen(msg.as_mut_ptr())).wrapping_sub(1i32
                                                                                                as
                                                                                                libc::c_ulong));
            yyerror(p, msg.as_mut_ptr());
        }
        if f != 0i32 {
            if 0 != f & 1i32 {
                let fresh15 = flag;
                flag = flag.offset(1);
                *fresh15 = 'i' as i32 as libc::c_char
            }
            if 0 != f & 2i32 {
                let fresh16 = flag;
                flag = flag.offset(1);
                *fresh16 = 'x' as i32 as libc::c_char
            }
            if 0 != f & 4i32 {
                let fresh17 = flag;
                flag = flag.offset(1);
                *fresh17 = 'm' as i32 as libc::c_char
            }
            if 0 != f & 16i32 { enc = 'u' as i32 as libc::c_char }
            if 0 != f & 32i32 { enc = 'n' as i32 as libc::c_char }
        }
        if flag > flags.as_mut_ptr() {
            dup =
                parser_strndup(p, flags.as_mut_ptr(),
                               flag.wrapping_offset_from(flags.as_mut_ptr())
                                   as libc::c_long as size_t)
        } else { dup = 0 as *mut libc::c_char }
        if 0 != enc {
            encp = parser_strndup(p, &mut enc, 1i32 as size_t)
        } else { encp = 0 as *mut libc::c_char }
        let ref mut fresh18 = (*((*p).ylval as *mut YYSTYPE)).nd;
        *fresh18 = new_regx(p, s_0, dup, encp);
        return 317i32
    }
    let ref mut fresh19 = (*((*p).ylval as *mut YYSTYPE)).nd;
    *fresh19 = new_str(p, tok(p), toklen(p) as size_t);
    return 318i32;
}
unsafe extern "C" fn number_literal_suffix(mut p: *mut parser_state,
                                           mut mask: libc::c_int)
 -> libc::c_int {
    let mut c: libc::c_int = 0;
    let mut result: libc::c_int = 0i32;
    let mut list: *mut node = 0 as *mut node;
    let mut column: libc::c_int = (*p).column;
    loop  {
        c = nextc(p);
        if !(c != -1i32) { break ; }
        list = append_gen(p, list, list1_gen(p, c as intptr_t as *mut node));
        if 0 != mask & 1i32 << 1i32 && c == 'i' as i32 {
            result |= mask & 1i32 << 1i32;
            mask &= !(1i32 << 1i32);
            /* r after i, rational of complex is disallowed */
            mask &= !(1i32 << 0i32)
        } else if 0 != mask & 1i32 << 0i32 && c == 'r' as i32 {
            result |= mask & 1i32 << 0i32;
            mask &= !(1i32 << 0i32)
        } else {
            if !(c as libc::c_uint <= 0x7fi32 as libc::c_uint) ||
                   (c as libc::c_uint |
                        0x20i32 as
                            libc::c_uint).wrapping_sub('a' as i32 as
                                                           libc::c_uint) <
                       26i32 as libc::c_uint || c == '_' as i32 {
                (*p).column = column;
                if !(*p).pb.is_null() {
                    (*p).pb = append_gen(p, list, (*p).pb)
                } else { (*p).pb = list }
                return 0i32
            }
            pushback(p, c);
            break ;
        }
    }
    return result;
}
unsafe extern "C" fn heredoc_identifier(mut p: *mut parser_state)
 -> libc::c_int {
    let mut c: libc::c_int = 0;
    let mut type_0: libc::c_int = str_heredoc as libc::c_int;
    let mut indent: mrb_bool = 0i32 as mrb_bool;
    let mut quote: mrb_bool = 0i32 as mrb_bool;
    let mut newnode: *mut node = 0 as *mut node;
    let mut info: *mut parser_heredoc_info = 0 as *mut parser_heredoc_info;
    c = nextc(p);
    if c == ' ' as i32 ||
           (c as libc::c_uint).wrapping_sub('\t' as i32 as libc::c_uint) <
               5i32 as libc::c_uint || c == '=' as i32 {
        pushback(p, c);
        return 0i32
    }
    if c == '-' as i32 { indent = 1i32 as mrb_bool; c = nextc(p) }
    if c == '\'' as i32 || c == '\"' as i32 {
        let mut term: libc::c_int = c;
        if c == '\'' as i32 { quote = 1i32 as mrb_bool }
        newtok(p);
        loop  {
            c = nextc(p);
            if !(c >= 0i32 && c != term) { break ; }
            if c == '\n' as i32 { c = -1i32; break ; } else { tokadd(p, c); }
        }
        if c < 0i32 {
            yyerror(p,
                    b"unterminated here document identifier\x00" as *const u8
                        as *const libc::c_char);
            return 0i32
        }
    } else {
        if c < 0i32 {
            /* missing here document identifier */
            return 0i32
        }
        if !((c as libc::c_uint |
                  0x20i32 as
                      libc::c_uint).wrapping_sub('a' as i32 as libc::c_uint) <
                 26i32 as libc::c_uint ||
                 (c as libc::c_uint).wrapping_sub('0' as i32 as libc::c_uint)
                     < 10i32 as libc::c_uint || c == '_' as i32 ||
                 !(c as libc::c_uint <= 0x7fi32 as libc::c_uint)) {
            pushback(p, c);
            if 0 != indent { pushback(p, '-' as i32); }
            return 0i32
        }
        newtok(p);
        loop  {
            tokadd(p, c);
            c = nextc(p);
            if !(c >= 0i32 &&
                     ((c as libc::c_uint |
                           0x20i32 as
                               libc::c_uint).wrapping_sub('a' as i32 as
                                                              libc::c_uint) <
                          26i32 as libc::c_uint ||
                          (c as
                               libc::c_uint).wrapping_sub('0' as i32 as
                                                              libc::c_uint) <
                              10i32 as libc::c_uint || c == '_' as i32 ||
                          !(c as libc::c_uint <= 0x7fi32 as libc::c_uint))) {
                break ;
            }
        }
        pushback(p, c);
    }
    tokfix(p);
    newnode = new_heredoc(p);
    info = (*newnode).cdr as *mut parser_heredoc_info;
    (*info).term = parser_strndup(p, tok(p), toklen(p) as size_t);
    (*info).term_len = toklen(p);
    if 0 == quote { type_0 |= 0x2i32 }
    (*info).type_0 = type_0 as string_type;
    (*info).set_allow_indent(indent);
    (*info).set_line_head(1i32 as mrb_bool);
    (*info).doc = 0 as *mut mrb_ast_node;
    (*p).heredocs_from_nextline =
        append_gen(p, (*p).heredocs_from_nextline, list1_gen(p, newnode));
    (*p).lstate = EXPR_END;
    let ref mut fresh20 = (*((*p).ylval as *mut YYSTYPE)).nd;
    *fresh20 = newnode;
    return 366i32;
}
unsafe extern "C" fn arg_ambiguous(mut p: *mut parser_state) -> libc::c_int {
    yywarning(p,
              b"ambiguous first argument; put parentheses or even spaces\x00"
                  as *const u8 as *const libc::c_char);
    return 1i32;
}
/* maximum key range = 43, duplicates = 0 */
#[inline]
unsafe extern "C" fn hash(mut str: *const libc::c_char, mut len: size_t)
 -> libc::c_uint {
    static mut asso_values: [libc::c_uchar; 256] =
        [51i32 as libc::c_uchar, 51i32 as libc::c_uchar,
         51i32 as libc::c_uchar, 51i32 as libc::c_uchar,
         51i32 as libc::c_uchar, 51i32 as libc::c_uchar,
         51i32 as libc::c_uchar, 51i32 as libc::c_uchar,
         51i32 as libc::c_uchar, 51i32 as libc::c_uchar,
         51i32 as libc::c_uchar, 51i32 as libc::c_uchar,
         51i32 as libc::c_uchar, 51i32 as libc::c_uchar,
         51i32 as libc::c_uchar, 51i32 as libc::c_uchar,
         51i32 as libc::c_uchar, 51i32 as libc::c_uchar,
         51i32 as libc::c_uchar, 51i32 as libc::c_uchar,
         51i32 as libc::c_uchar, 51i32 as libc::c_uchar,
         51i32 as libc::c_uchar, 51i32 as libc::c_uchar,
         51i32 as libc::c_uchar, 51i32 as libc::c_uchar,
         51i32 as libc::c_uchar, 51i32 as libc::c_uchar,
         51i32 as libc::c_uchar, 51i32 as libc::c_uchar,
         51i32 as libc::c_uchar, 51i32 as libc::c_uchar,
         51i32 as libc::c_uchar, 51i32 as libc::c_uchar,
         51i32 as libc::c_uchar, 51i32 as libc::c_uchar,
         51i32 as libc::c_uchar, 51i32 as libc::c_uchar,
         51i32 as libc::c_uchar, 51i32 as libc::c_uchar,
         51i32 as libc::c_uchar, 51i32 as libc::c_uchar,
         51i32 as libc::c_uchar, 51i32 as libc::c_uchar,
         51i32 as libc::c_uchar, 51i32 as libc::c_uchar,
         51i32 as libc::c_uchar, 51i32 as libc::c_uchar,
         51i32 as libc::c_uchar, 51i32 as libc::c_uchar,
         51i32 as libc::c_uchar, 51i32 as libc::c_uchar,
         51i32 as libc::c_uchar, 51i32 as libc::c_uchar,
         51i32 as libc::c_uchar, 51i32 as libc::c_uchar,
         51i32 as libc::c_uchar, 51i32 as libc::c_uchar,
         51i32 as libc::c_uchar, 51i32 as libc::c_uchar,
         51i32 as libc::c_uchar, 51i32 as libc::c_uchar,
         51i32 as libc::c_uchar, 51i32 as libc::c_uchar,
         51i32 as libc::c_uchar, 51i32 as libc::c_uchar,
         14i32 as libc::c_uchar, 51i32 as libc::c_uchar,
         16i32 as libc::c_uchar, 8i32 as libc::c_uchar,
         11i32 as libc::c_uchar, 13i32 as libc::c_uchar,
         51i32 as libc::c_uchar, 51i32 as libc::c_uchar,
         51i32 as libc::c_uchar, 51i32 as libc::c_uchar,
         10i32 as libc::c_uchar, 51i32 as libc::c_uchar,
         13i32 as libc::c_uchar, 51i32 as libc::c_uchar,
         51i32 as libc::c_uchar, 51i32 as libc::c_uchar,
         51i32 as libc::c_uchar, 51i32 as libc::c_uchar,
         51i32 as libc::c_uchar, 51i32 as libc::c_uchar,
         51i32 as libc::c_uchar, 51i32 as libc::c_uchar,
         51i32 as libc::c_uchar, 51i32 as libc::c_uchar,
         51i32 as libc::c_uchar, 51i32 as libc::c_uchar,
         51i32 as libc::c_uchar, 51i32 as libc::c_uchar,
         51i32 as libc::c_uchar, 11i32 as libc::c_uchar,
         51i32 as libc::c_uchar, 13i32 as libc::c_uchar,
         1i32 as libc::c_uchar, 26i32 as libc::c_uchar, 4i32 as libc::c_uchar,
         1i32 as libc::c_uchar, 8i32 as libc::c_uchar, 28i32 as libc::c_uchar,
         51i32 as libc::c_uchar, 23i32 as libc::c_uchar,
         51i32 as libc::c_uchar, 1i32 as libc::c_uchar, 1i32 as libc::c_uchar,
         27i32 as libc::c_uchar, 5i32 as libc::c_uchar,
         19i32 as libc::c_uchar, 21i32 as libc::c_uchar,
         51i32 as libc::c_uchar, 8i32 as libc::c_uchar, 3i32 as libc::c_uchar,
         3i32 as libc::c_uchar, 11i32 as libc::c_uchar,
         51i32 as libc::c_uchar, 21i32 as libc::c_uchar,
         24i32 as libc::c_uchar, 16i32 as libc::c_uchar,
         51i32 as libc::c_uchar, 51i32 as libc::c_uchar,
         51i32 as libc::c_uchar, 51i32 as libc::c_uchar,
         51i32 as libc::c_uchar, 51i32 as libc::c_uchar,
         51i32 as libc::c_uchar, 51i32 as libc::c_uchar,
         51i32 as libc::c_uchar, 51i32 as libc::c_uchar,
         51i32 as libc::c_uchar, 51i32 as libc::c_uchar,
         51i32 as libc::c_uchar, 51i32 as libc::c_uchar,
         51i32 as libc::c_uchar, 51i32 as libc::c_uchar,
         51i32 as libc::c_uchar, 51i32 as libc::c_uchar,
         51i32 as libc::c_uchar, 51i32 as libc::c_uchar,
         51i32 as libc::c_uchar, 51i32 as libc::c_uchar,
         51i32 as libc::c_uchar, 51i32 as libc::c_uchar,
         51i32 as libc::c_uchar, 51i32 as libc::c_uchar,
         51i32 as libc::c_uchar, 51i32 as libc::c_uchar,
         51i32 as libc::c_uchar, 51i32 as libc::c_uchar,
         51i32 as libc::c_uchar, 51i32 as libc::c_uchar,
         51i32 as libc::c_uchar, 51i32 as libc::c_uchar,
         51i32 as libc::c_uchar, 51i32 as libc::c_uchar,
         51i32 as libc::c_uchar, 51i32 as libc::c_uchar,
         51i32 as libc::c_uchar, 51i32 as libc::c_uchar,
         51i32 as libc::c_uchar, 51i32 as libc::c_uchar,
         51i32 as libc::c_uchar, 51i32 as libc::c_uchar,
         51i32 as libc::c_uchar, 51i32 as libc::c_uchar,
         51i32 as libc::c_uchar, 51i32 as libc::c_uchar,
         51i32 as libc::c_uchar, 51i32 as libc::c_uchar,
         51i32 as libc::c_uchar, 51i32 as libc::c_uchar,
         51i32 as libc::c_uchar, 51i32 as libc::c_uchar,
         51i32 as libc::c_uchar, 51i32 as libc::c_uchar,
         51i32 as libc::c_uchar, 51i32 as libc::c_uchar,
         51i32 as libc::c_uchar, 51i32 as libc::c_uchar,
         51i32 as libc::c_uchar, 51i32 as libc::c_uchar,
         51i32 as libc::c_uchar, 51i32 as libc::c_uchar,
         51i32 as libc::c_uchar, 51i32 as libc::c_uchar,
         51i32 as libc::c_uchar, 51i32 as libc::c_uchar,
         51i32 as libc::c_uchar, 51i32 as libc::c_uchar,
         51i32 as libc::c_uchar, 51i32 as libc::c_uchar,
         51i32 as libc::c_uchar, 51i32 as libc::c_uchar,
         51i32 as libc::c_uchar, 51i32 as libc::c_uchar,
         51i32 as libc::c_uchar, 51i32 as libc::c_uchar,
         51i32 as libc::c_uchar, 51i32 as libc::c_uchar,
         51i32 as libc::c_uchar, 51i32 as libc::c_uchar,
         51i32 as libc::c_uchar, 51i32 as libc::c_uchar,
         51i32 as libc::c_uchar, 51i32 as libc::c_uchar,
         51i32 as libc::c_uchar, 51i32 as libc::c_uchar,
         51i32 as libc::c_uchar, 51i32 as libc::c_uchar,
         51i32 as libc::c_uchar, 51i32 as libc::c_uchar,
         51i32 as libc::c_uchar, 51i32 as libc::c_uchar,
         51i32 as libc::c_uchar, 51i32 as libc::c_uchar,
         51i32 as libc::c_uchar, 51i32 as libc::c_uchar,
         51i32 as libc::c_uchar, 51i32 as libc::c_uchar,
         51i32 as libc::c_uchar, 51i32 as libc::c_uchar,
         51i32 as libc::c_uchar, 51i32 as libc::c_uchar,
         51i32 as libc::c_uchar, 51i32 as libc::c_uchar,
         51i32 as libc::c_uchar, 51i32 as libc::c_uchar,
         51i32 as libc::c_uchar, 51i32 as libc::c_uchar,
         51i32 as libc::c_uchar, 51i32 as libc::c_uchar,
         51i32 as libc::c_uchar, 51i32 as libc::c_uchar,
         51i32 as libc::c_uchar, 51i32 as libc::c_uchar,
         51i32 as libc::c_uchar, 51i32 as libc::c_uchar,
         51i32 as libc::c_uchar, 51i32 as libc::c_uchar,
         51i32 as libc::c_uchar, 51i32 as libc::c_uchar,
         51i32 as libc::c_uchar, 51i32 as libc::c_uchar,
         51i32 as libc::c_uchar, 51i32 as libc::c_uchar,
         51i32 as libc::c_uchar, 51i32 as libc::c_uchar,
         51i32 as libc::c_uchar, 51i32 as libc::c_uchar,
         51i32 as libc::c_uchar, 51i32 as libc::c_uchar,
         51i32 as libc::c_uchar, 51i32 as libc::c_uchar];
    let mut hval: libc::c_uint = len as libc::c_uint;
    match hval {
        2 | 1 => { }
        _ => {
            hval =
                hval.wrapping_add(asso_values[*str.offset(2isize) as
                                                  libc::c_uchar as usize] as
                                      libc::c_uint)
        }
    }
    hval =
        hval.wrapping_add(asso_values[*str.offset(0isize) as libc::c_uchar as
                                          usize] as libc::c_uint);
    return hval.wrapping_add(asso_values[*str.offset(len.wrapping_sub(1i32 as
                                                                          libc::c_ulong)
                                                         as isize) as
                                             libc::c_uchar as usize] as
                                 libc::c_uint);
}
#[no_mangle]
pub unsafe extern "C" fn mrb_reserved_word(mut str: *const libc::c_char,
                                           mut len: size_t)
 -> *const kwtable {
    static mut wordlist: [kwtable; 51] =
        [kwtable{name: b"\x00" as *const u8 as *const libc::c_char,
                 id: [0; 2],
                 state: EXPR_BEG,},
         kwtable{name: b"\x00" as *const u8 as *const libc::c_char,
                 id: [0; 2],
                 state: EXPR_BEG,},
         kwtable{name: b"\x00" as *const u8 as *const libc::c_char,
                 id: [0; 2],
                 state: EXPR_BEG,},
         kwtable{name: b"\x00" as *const u8 as *const libc::c_char,
                 id: [0; 2],
                 state: EXPR_BEG,},
         kwtable{name: b"\x00" as *const u8 as *const libc::c_char,
                 id: [0; 2],
                 state: EXPR_BEG,},
         kwtable{name: b"\x00" as *const u8 as *const libc::c_char,
                 id: [0; 2],
                 state: EXPR_BEG,},
         kwtable{name: b"\x00" as *const u8 as *const libc::c_char,
                 id: [0; 2],
                 state: EXPR_BEG,},
         kwtable{name: b"\x00" as *const u8 as *const libc::c_char,
                 id: [0; 2],
                 state: EXPR_BEG,},
         kwtable{name: b"break\x00" as *const u8 as *const libc::c_char,
                 id: [276i32, 276i32],
                 state: EXPR_MID,},
         kwtable{name: b"else\x00" as *const u8 as *const libc::c_char,
                 id: [273i32, 273i32],
                 state: EXPR_BEG,},
         kwtable{name: b"nil\x00" as *const u8 as *const libc::c_char,
                 id: [289i32, 289i32],
                 state: EXPR_END,},
         kwtable{name: b"ensure\x00" as *const u8 as *const libc::c_char,
                 id: [269i32, 269i32],
                 state: EXPR_BEG,},
         kwtable{name: b"end\x00" as *const u8 as *const libc::c_char,
                 id: [270i32, 270i32],
                 state: EXPR_END,},
         kwtable{name: b"then\x00" as *const u8 as *const libc::c_char,
                 id: [271i32, 271i32],
                 state: EXPR_BEG,},
         kwtable{name: b"not\x00" as *const u8 as *const libc::c_char,
                 id: [294i32, 294i32],
                 state: EXPR_ARG,},
         kwtable{name: b"false\x00" as *const u8 as *const libc::c_char,
                 id: [291i32, 291i32],
                 state: EXPR_END,},
         kwtable{name: b"self\x00" as *const u8 as *const libc::c_char,
                 id: [288i32, 288i32],
                 state: EXPR_END,},
         kwtable{name: b"elsif\x00" as *const u8 as *const libc::c_char,
                 id: [272i32, 272i32],
                 state: EXPR_VALUE,},
         kwtable{name: b"rescue\x00" as *const u8 as *const libc::c_char,
                 id: [268i32, 299i32],
                 state: EXPR_MID,},
         kwtable{name: b"true\x00" as *const u8 as *const libc::c_char,
                 id: [290i32, 290i32],
                 state: EXPR_END,},
         kwtable{name: b"until\x00" as *const u8 as *const libc::c_char,
                 id: [265i32, 298i32],
                 state: EXPR_VALUE,},
         kwtable{name: b"unless\x00" as *const u8 as *const libc::c_char,
                 id: [263i32, 296i32],
                 state: EXPR_VALUE,},
         kwtable{name: b"return\x00" as *const u8 as *const libc::c_char,
                 id: [285i32, 285i32],
                 state: EXPR_MID,},
         kwtable{name: b"def\x00" as *const u8 as *const libc::c_char,
                 id: [260i32, 260i32],
                 state: EXPR_FNAME,},
         kwtable{name: b"and\x00" as *const u8 as *const libc::c_char,
                 id: [292i32, 292i32],
                 state: EXPR_VALUE,},
         kwtable{name: b"do\x00" as *const u8 as *const libc::c_char,
                 id: [281i32, 281i32],
                 state: EXPR_BEG,},
         kwtable{name: b"yield\x00" as *const u8 as *const libc::c_char,
                 id: [286i32, 286i32],
                 state: EXPR_ARG,},
         kwtable{name: b"for\x00" as *const u8 as *const libc::c_char,
                 id: [266i32, 266i32],
                 state: EXPR_VALUE,},
         kwtable{name: b"undef\x00" as *const u8 as *const libc::c_char,
                 id: [267i32, 267i32],
                 state: EXPR_FNAME,},
         kwtable{name: b"or\x00" as *const u8 as *const libc::c_char,
                 id: [293i32, 293i32],
                 state: EXPR_VALUE,},
         kwtable{name: b"in\x00" as *const u8 as *const libc::c_char,
                 id: [280i32, 280i32],
                 state: EXPR_VALUE,},
         kwtable{name: b"when\x00" as *const u8 as *const libc::c_char,
                 id: [275i32, 275i32],
                 state: EXPR_VALUE,},
         kwtable{name: b"retry\x00" as *const u8 as *const libc::c_char,
                 id: [279i32, 279i32],
                 state: EXPR_END,},
         kwtable{name: b"if\x00" as *const u8 as *const libc::c_char,
                 id: [262i32, 295i32],
                 state: EXPR_VALUE,},
         kwtable{name: b"case\x00" as *const u8 as *const libc::c_char,
                 id: [274i32, 274i32],
                 state: EXPR_VALUE,},
         kwtable{name: b"redo\x00" as *const u8 as *const libc::c_char,
                 id: [278i32, 278i32],
                 state: EXPR_END,},
         kwtable{name: b"next\x00" as *const u8 as *const libc::c_char,
                 id: [277i32, 277i32],
                 state: EXPR_MID,},
         kwtable{name: b"super\x00" as *const u8 as *const libc::c_char,
                 id: [287i32, 287i32],
                 state: EXPR_ARG,},
         kwtable{name: b"module\x00" as *const u8 as *const libc::c_char,
                 id: [259i32, 259i32],
                 state: EXPR_VALUE,},
         kwtable{name: b"begin\x00" as *const u8 as *const libc::c_char,
                 id: [261i32, 261i32],
                 state: EXPR_BEG,},
         kwtable{name: b"__LINE__\x00" as *const u8 as *const libc::c_char,
                 id: [303i32, 303i32],
                 state: EXPR_END,},
         kwtable{name: b"__FILE__\x00" as *const u8 as *const libc::c_char,
                 id: [304i32, 304i32],
                 state: EXPR_END,},
         kwtable{name:
                     b"__ENCODING__\x00" as *const u8 as *const libc::c_char,
                 id: [305i32, 305i32],
                 state: EXPR_END,},
         kwtable{name: b"END\x00" as *const u8 as *const libc::c_char,
                 id: [302i32, 302i32],
                 state: EXPR_END,},
         kwtable{name: b"alias\x00" as *const u8 as *const libc::c_char,
                 id: [300i32, 300i32],
                 state: EXPR_FNAME,},
         kwtable{name: b"BEGIN\x00" as *const u8 as *const libc::c_char,
                 id: [301i32, 301i32],
                 state: EXPR_END,},
         kwtable{name: b"\x00" as *const u8 as *const libc::c_char,
                 id: [0; 2],
                 state: EXPR_BEG,},
         kwtable{name: b"class\x00" as *const u8 as *const libc::c_char,
                 id: [258i32, 258i32],
                 state: EXPR_CLASS,},
         kwtable{name: b"\x00" as *const u8 as *const libc::c_char,
                 id: [0; 2],
                 state: EXPR_BEG,},
         kwtable{name: b"\x00" as *const u8 as *const libc::c_char,
                 id: [0; 2],
                 state: EXPR_BEG,},
         kwtable{name: b"while\x00" as *const u8 as *const libc::c_char,
                 id: [264i32, 297i32],
                 state: EXPR_VALUE,}];
    if len <= 12i32 as libc::c_ulong && len >= 2i32 as libc::c_ulong {
        let mut key: libc::c_uint = hash(str, len);
        if key <= 50i32 as libc::c_uint {
            let mut s: *const libc::c_char = wordlist[key as usize].name;
            if *str as libc::c_int == *s as libc::c_int &&
                   0 == strcmp(str.offset(1isize), s.offset(1isize)) {
                return &*wordlist.as_ptr().offset(key as isize) as
                           *const kwtable
            }
        }
    }
    /*FALLTHROUGH*/
    return 0 as *const kwtable;
}
unsafe extern "C" fn parser_yylex(mut p: *mut parser_state) -> libc::c_int {
    let mut term: libc::c_int = 0;
    let mut paren: libc::c_int = 0;
    let mut current_block: u64;
    let mut c: int32_t = 0;
    let mut space_seen: libc::c_int = 0i32;
    let mut cmd_state: libc::c_int = 0;
    let mut last_state: mrb_lex_state_enum = EXPR_BEG;
    let mut token_column: libc::c_int = 0;
    if !(*p).lex_strterm.is_null() {
        if 0 != (*(*p).lex_strterm).car as intptr_t as libc::c_int & 0x40i32 {
            if !(*p).parsing_heredoc.is_null() { return parse_string(p) }
        } else { return parse_string(p) }
    }
    cmd_state = (*p).cmd_start() as libc::c_int;
    (*p).set_cmd_start(0i32 as mrb_bool);
    'c_94209:
        loop  {
            last_state = (*p).lstate;
            c = nextc(p);
            match c {
                4 => {
                    /* ^Z */
                    current_block = 13005003696698352011;
                }
                26 => { current_block = 13005003696698352011; }
                0 => { current_block = 14442101915723096593; }
                -1 => { current_block = 624397522599523623; }
                32 | 9 | 12 | 13 => {
                    /* '\v' */
                    current_block = 16751258855114573687;
                }
                11 => { current_block = 16751258855114573687; }
                35 => {
                    skip(p, '\n' as i32 as libc::c_char);
                    /* fall through */
                    /* end of a file */
                    current_block = 16839870468684346644;
                }
                -2 | 10 => { current_block = 16839870468684346644; }
                42 => {
                    c = nextc(p);
                    if c == '*' as i32 {
                        c = nextc(p);
                        if c == '=' as i32 {
                            (*((*p).ylval as *mut YYSTYPE)).id =
                                intern_gen(p,
                                           b"**\x00" as *const u8 as
                                               *const libc::c_char,
                                           2i32 as size_t);
                            (*p).lstate = EXPR_BEG;
                            return 345i32
                        }
                        pushback(p, c);
                        if ((*p).lstate as libc::c_uint ==
                                EXPR_ARG as libc::c_int as libc::c_uint ||
                                (*p).lstate as libc::c_uint ==
                                    EXPR_CMDARG as libc::c_int as
                                        libc::c_uint) && 0 != space_seen &&
                               !(c == ' ' as i32 ||
                                     (c as
                                          libc::c_uint).wrapping_sub('\t' as
                                                                         i32
                                                                         as
                                                                         libc::c_uint)
                                         < 5i32 as libc::c_uint) {
                            yywarning(p,
                                      b"\'**\' interpreted as argument prefix\x00"
                                          as *const u8 as
                                          *const libc::c_char);
                            c = 354i32
                        } else if (*p).lstate as libc::c_uint ==
                                      EXPR_BEG as libc::c_int as libc::c_uint
                                      ||
                                      (*p).lstate as libc::c_uint ==
                                          EXPR_MID as libc::c_int as
                                              libc::c_uint ||
                                      (*p).lstate as libc::c_uint ==
                                          EXPR_VALUE as libc::c_int as
                                              libc::c_uint ||
                                      (*p).lstate as libc::c_uint ==
                                          EXPR_CLASS as libc::c_int as
                                              libc::c_uint {
                            c = 354i32
                        } else { c = 326i32 }
                    } else {
                        if c == '=' as i32 {
                            (*((*p).ylval as *mut YYSTYPE)).id =
                                intern_gen_c(p, '*' as i32 as libc::c_char);
                            (*p).lstate = EXPR_BEG;
                            return 345i32
                        }
                        pushback(p, c);
                        if ((*p).lstate as libc::c_uint ==
                                EXPR_ARG as libc::c_int as libc::c_uint ||
                                (*p).lstate as libc::c_uint ==
                                    EXPR_CMDARG as libc::c_int as
                                        libc::c_uint) && 0 != space_seen &&
                               !(c == ' ' as i32 ||
                                     (c as
                                          libc::c_uint).wrapping_sub('\t' as
                                                                         i32
                                                                         as
                                                                         libc::c_uint)
                                         < 5i32 as libc::c_uint) {
                            yywarning(p,
                                      b"\'*\' interpreted as argument prefix\x00"
                                          as *const u8 as
                                          *const libc::c_char);
                            c = 353i32
                        } else if (*p).lstate as libc::c_uint ==
                                      EXPR_BEG as libc::c_int as libc::c_uint
                                      ||
                                      (*p).lstate as libc::c_uint ==
                                          EXPR_MID as libc::c_int as
                                              libc::c_uint ||
                                      (*p).lstate as libc::c_uint ==
                                          EXPR_VALUE as libc::c_int as
                                              libc::c_uint ||
                                      (*p).lstate as libc::c_uint ==
                                          EXPR_CLASS as libc::c_int as
                                              libc::c_uint {
                            c = 353i32
                        } else { c = '*' as i32 }
                    }
                    if (*p).lstate as libc::c_uint ==
                           EXPR_FNAME as libc::c_int as libc::c_uint ||
                           (*p).lstate as libc::c_uint ==
                               EXPR_DOT as libc::c_int as libc::c_uint {
                        (*p).lstate = EXPR_ARG
                    } else { (*p).lstate = EXPR_BEG }
                    return c
                }
                33 => {
                    c = nextc(p);
                    if (*p).lstate as libc::c_uint ==
                           EXPR_FNAME as libc::c_int as libc::c_uint ||
                           (*p).lstate as libc::c_uint ==
                               EXPR_DOT as libc::c_int as libc::c_uint {
                        (*p).lstate = EXPR_ARG;
                        if c == '@' as i32 { return '!' as i32 }
                    } else { (*p).lstate = EXPR_BEG }
                    if c == '=' as i32 { return 330i32 }
                    if c == '~' as i32 { return 336i32 }
                    pushback(p, c);
                    return '!' as i32
                }
                61 => {
                    if !((*p).column == 1i32) {
                        current_block = 3042404941205427226;
                        break ;
                    }
                    static mut begin: [libc::c_char; 6] =
                        [98, 101, 103, 105, 110, 0];
                    static mut end: [libc::c_char; 6] =
                        [10, 61, 101, 110, 100, 0];
                    if !(0 != peeks(p, begin.as_ptr())) {
                        current_block = 3042404941205427226;
                        break ;
                    }
                    c =
                        peekc_n(p,
                                (::std::mem::size_of::<[libc::c_char; 6]>() as
                                     libc::c_ulong).wrapping_sub(1i32 as
                                                                     libc::c_ulong)
                                    as libc::c_int);
                    if !(c < 0i32 ||
                             (c == ' ' as i32 ||
                                  (c as
                                       libc::c_uint).wrapping_sub('\t' as i32
                                                                      as
                                                                      libc::c_uint)
                                      < 5i32 as libc::c_uint)) {
                        current_block = 3042404941205427226;
                        break ;
                    }
                    loop  {
                        if 0 == skips(p, end.as_ptr()) {
                            yyerror(p,
                                    b"embedded document meets end of file\x00"
                                        as *const u8 as *const libc::c_char);
                            return 0i32
                        }
                        c = nextc(p);
                        if c < 0i32 ||
                               (c == ' ' as i32 ||
                                    (c as
                                         libc::c_uint).wrapping_sub('\t' as
                                                                        i32 as
                                                                        libc::c_uint)
                                        < 5i32 as libc::c_uint) {
                            break ;
                        }
                    }
                    if c != '\n' as i32 {
                        skip(p, '\n' as i32 as libc::c_char);
                    }
                    (*p).lineno = (*p).lineno.wrapping_add(1);
                    (*p).column = 0i32;
                    continue ;
                }
                60 => {
                    c = nextc(p);
                    if c == '<' as i32 &&
                           (*p).lstate as libc::c_uint !=
                               EXPR_DOT as libc::c_int as libc::c_uint &&
                           (*p).lstate as libc::c_uint !=
                               EXPR_CLASS as libc::c_int as libc::c_uint &&
                           !((*p).lstate as libc::c_uint ==
                                 EXPR_END as libc::c_int as libc::c_uint ||
                                 (*p).lstate as libc::c_uint ==
                                     EXPR_ENDARG as libc::c_int as
                                         libc::c_uint ||
                                 (*p).lstate as libc::c_uint ==
                                     EXPR_ENDFN as libc::c_int as
                                         libc::c_uint) &&
                           (!((*p).lstate as libc::c_uint ==
                                  EXPR_ARG as libc::c_int as libc::c_uint ||
                                  (*p).lstate as libc::c_uint ==
                                      EXPR_CMDARG as libc::c_int as
                                          libc::c_uint) || 0 != space_seen) {
                        let mut token: libc::c_int = heredoc_identifier(p);
                        if 0 != token { return token }
                    }
                    if (*p).lstate as libc::c_uint ==
                           EXPR_FNAME as libc::c_int as libc::c_uint ||
                           (*p).lstate as libc::c_uint ==
                               EXPR_DOT as libc::c_int as libc::c_uint {
                        (*p).lstate = EXPR_ARG
                    } else {
                        (*p).lstate = EXPR_BEG;
                        if (*p).lstate as libc::c_uint ==
                               EXPR_CLASS as libc::c_int as libc::c_uint {
                            (*p).set_cmd_start(1i32 as mrb_bool)
                        }
                    }
                    if c == '=' as i32 {
                        c = nextc(p);
                        if c == '>' as i32 { return 327i32 }
                        pushback(p, c);
                        return 332i32
                    }
                    if c == '<' as i32 {
                        c = nextc(p);
                        if c == '=' as i32 {
                            (*((*p).ylval as *mut YYSTYPE)).id =
                                intern_gen(p,
                                           b"<<\x00" as *const u8 as
                                               *const libc::c_char,
                                           2i32 as size_t);
                            (*p).lstate = EXPR_BEG;
                            return 345i32
                        }
                        pushback(p, c);
                        return 341i32
                    }
                    pushback(p, c);
                    return '<' as i32
                }
                62 => {
                    if (*p).lstate as libc::c_uint ==
                           EXPR_FNAME as libc::c_int as libc::c_uint ||
                           (*p).lstate as libc::c_uint ==
                               EXPR_DOT as libc::c_int as libc::c_uint {
                        (*p).lstate = EXPR_ARG
                    } else { (*p).lstate = EXPR_BEG }
                    c = nextc(p);
                    if c == '=' as i32 { return 331i32 }
                    if c == '>' as i32 {
                        c = nextc(p);
                        if c == '=' as i32 {
                            (*((*p).ylval as *mut YYSTYPE)).id =
                                intern_gen(p,
                                           b">>\x00" as *const u8 as
                                               *const libc::c_char,
                                           2i32 as size_t);
                            (*p).lstate = EXPR_BEG;
                            return 345i32
                        }
                        pushback(p, c);
                        return 342i32
                    }
                    pushback(p, c);
                    return '>' as i32
                }
                34 => {
                    (*p).lex_strterm =
                        new_strterm(p, str_dquote, '\"' as i32, 0i32);
                    return 362i32
                }
                39 => {
                    (*p).lex_strterm =
                        new_strterm(p, str_squote, '\'' as i32, 0i32);
                    return parse_string(p)
                }
                96 => {
                    if (*p).lstate as libc::c_uint ==
                           EXPR_FNAME as libc::c_int as libc::c_uint {
                        (*p).lstate = EXPR_ENDFN;
                        return '`' as i32
                    }
                    if (*p).lstate as libc::c_uint ==
                           EXPR_DOT as libc::c_int as libc::c_uint {
                        if 0 != cmd_state {
                            (*p).lstate = EXPR_CMDARG
                        } else { (*p).lstate = EXPR_ARG }
                        return '`' as i32
                    }
                    (*p).lex_strterm =
                        new_strterm(p, str_xquote, '`' as i32, 0i32);
                    return 363i32
                }
                63 => {
                    if (*p).lstate as libc::c_uint ==
                           EXPR_END as libc::c_int as libc::c_uint ||
                           (*p).lstate as libc::c_uint ==
                               EXPR_ENDARG as libc::c_int as libc::c_uint ||
                           (*p).lstate as libc::c_uint ==
                               EXPR_ENDFN as libc::c_int as libc::c_uint {
                        (*p).lstate = EXPR_VALUE;
                        return '?' as i32
                    }
                    c = nextc(p);
                    if c < 0i32 {
                        yyerror(p,
                                b"incomplete character syntax\x00" as
                                    *const u8 as *const libc::c_char);
                        return 0i32
                    }
                    if c == ' ' as i32 ||
                           (c as
                                libc::c_uint).wrapping_sub('\t' as i32 as
                                                               libc::c_uint) <
                               5i32 as libc::c_uint {
                        current_block = 13797367574128857302;
                        break ;
                    } else { current_block = 11364608634565542496; break ; }
                }
                38 => {
                    c = nextc(p);
                    if c == '&' as i32 {
                        (*p).lstate = EXPR_BEG;
                        c = nextc(p);
                        if c == '=' as i32 {
                            (*((*p).ylval as *mut YYSTYPE)).id =
                                intern_gen(p,
                                           b"&&\x00" as *const u8 as
                                               *const libc::c_char,
                                           2i32 as size_t);
                            (*p).lstate = EXPR_BEG;
                            return 345i32
                        }
                        pushback(p, c);
                        return 333i32
                    } else {
                        if c == '.' as i32 {
                            (*p).lstate = EXPR_DOT;
                            return 357i32
                        } else {
                            if c == '=' as i32 {
                                (*((*p).ylval as *mut YYSTYPE)).id =
                                    intern_gen_c(p,
                                                 '&' as i32 as libc::c_char);
                                (*p).lstate = EXPR_BEG;
                                return 345i32
                            }
                        }
                    }
                    pushback(p, c);
                    if ((*p).lstate as libc::c_uint ==
                            EXPR_ARG as libc::c_int as libc::c_uint ||
                            (*p).lstate as libc::c_uint ==
                                EXPR_CMDARG as libc::c_int as libc::c_uint) &&
                           0 != space_seen &&
                           !(c == ' ' as i32 ||
                                 (c as
                                      libc::c_uint).wrapping_sub('\t' as i32
                                                                     as
                                                                     libc::c_uint)
                                     < 5i32 as libc::c_uint) {
                        yywarning(p,
                                  b"\'&\' interpreted as argument prefix\x00"
                                      as *const u8 as *const libc::c_char);
                        c = 355i32
                    } else if (*p).lstate as libc::c_uint ==
                                  EXPR_BEG as libc::c_int as libc::c_uint ||
                                  (*p).lstate as libc::c_uint ==
                                      EXPR_MID as libc::c_int as libc::c_uint
                                  ||
                                  (*p).lstate as libc::c_uint ==
                                      EXPR_VALUE as libc::c_int as
                                          libc::c_uint ||
                                  (*p).lstate as libc::c_uint ==
                                      EXPR_CLASS as libc::c_int as
                                          libc::c_uint {
                        c = 355i32
                    } else { c = '&' as i32 }
                    if (*p).lstate as libc::c_uint ==
                           EXPR_FNAME as libc::c_int as libc::c_uint ||
                           (*p).lstate as libc::c_uint ==
                               EXPR_DOT as libc::c_int as libc::c_uint {
                        (*p).lstate = EXPR_ARG
                    } else { (*p).lstate = EXPR_BEG }
                    return c
                }
                124 => {
                    c = nextc(p);
                    if c == '|' as i32 {
                        (*p).lstate = EXPR_BEG;
                        c = nextc(p);
                        if c == '=' as i32 {
                            (*((*p).ylval as *mut YYSTYPE)).id =
                                intern_gen(p,
                                           b"||\x00" as *const u8 as
                                               *const libc::c_char,
                                           2i32 as size_t);
                            (*p).lstate = EXPR_BEG;
                            return 345i32
                        }
                        pushback(p, c);
                        return 334i32
                    }
                    if c == '=' as i32 {
                        (*((*p).ylval as *mut YYSTYPE)).id =
                            intern_gen_c(p, '|' as i32 as libc::c_char);
                        (*p).lstate = EXPR_BEG;
                        return 345i32
                    }
                    if (*p).lstate as libc::c_uint ==
                           EXPR_FNAME as libc::c_int as libc::c_uint ||
                           (*p).lstate as libc::c_uint ==
                               EXPR_DOT as libc::c_int as libc::c_uint {
                        (*p).lstate = EXPR_ARG
                    } else { (*p).lstate = EXPR_BEG }
                    pushback(p, c);
                    return '|' as i32
                }
                43 => {
                    c = nextc(p);
                    if (*p).lstate as libc::c_uint ==
                           EXPR_FNAME as libc::c_int as libc::c_uint ||
                           (*p).lstate as libc::c_uint ==
                               EXPR_DOT as libc::c_int as libc::c_uint {
                        (*p).lstate = EXPR_ARG;
                        if c == '@' as i32 { return 324i32 }
                        pushback(p, c);
                        return '+' as i32
                    }
                    if c == '=' as i32 {
                        (*((*p).ylval as *mut YYSTYPE)).id =
                            intern_gen_c(p, '+' as i32 as libc::c_char);
                        (*p).lstate = EXPR_BEG;
                        return 345i32
                    }
                    if (*p).lstate as libc::c_uint ==
                           EXPR_BEG as libc::c_int as libc::c_uint ||
                           (*p).lstate as libc::c_uint ==
                               EXPR_MID as libc::c_int as libc::c_uint ||
                           (*p).lstate as libc::c_uint ==
                               EXPR_VALUE as libc::c_int as libc::c_uint ||
                           (*p).lstate as libc::c_uint ==
                               EXPR_CLASS as libc::c_int as libc::c_uint ||
                           ((*p).lstate as libc::c_uint ==
                                EXPR_ARG as libc::c_int as libc::c_uint ||
                                (*p).lstate as libc::c_uint ==
                                    EXPR_CMDARG as libc::c_int as
                                        libc::c_uint) && 0 != space_seen &&
                               !(c == ' ' as i32 ||
                                     (c as
                                          libc::c_uint).wrapping_sub('\t' as
                                                                         i32
                                                                         as
                                                                         libc::c_uint)
                                         < 5i32 as libc::c_uint) &&
                               0 != arg_ambiguous(p) {
                        current_block = 10938639076553795114;
                        break ;
                    } else { current_block = 5600328731811258759; break ; }
                }
                45 => {
                    c = nextc(p);
                    if (*p).lstate as libc::c_uint ==
                           EXPR_FNAME as libc::c_int as libc::c_uint ||
                           (*p).lstate as libc::c_uint ==
                               EXPR_DOT as libc::c_int as libc::c_uint {
                        (*p).lstate = EXPR_ARG;
                        if c == '@' as i32 { return 325i32 }
                        pushback(p, c);
                        return '-' as i32
                    }
                    if c == '=' as i32 {
                        (*((*p).ylval as *mut YYSTYPE)).id =
                            intern_gen_c(p, '-' as i32 as libc::c_char);
                        (*p).lstate = EXPR_BEG;
                        return 345i32
                    }
                    if c == '>' as i32 {
                        (*p).lstate = EXPR_ENDFN;
                        /* Like YYERROR except do call yyerror.  This remains here temporarily
   to ease the transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
                        return 356i32
                    }
                    if (*p).lstate as libc::c_uint ==
                           EXPR_BEG as libc::c_int as libc::c_uint ||
                           (*p).lstate as libc::c_uint ==
                               EXPR_MID as libc::c_int as libc::c_uint ||
                           (*p).lstate as libc::c_uint ==
                               EXPR_VALUE as libc::c_int as libc::c_uint ||
                           (*p).lstate as libc::c_uint ==
                               EXPR_CLASS as libc::c_int as libc::c_uint ||
                           ((*p).lstate as libc::c_uint ==
                                EXPR_ARG as libc::c_int as libc::c_uint ||
                                (*p).lstate as libc::c_uint ==
                                    EXPR_CMDARG as libc::c_int as
                                        libc::c_uint) && 0 != space_seen &&
                               !(c == ' ' as i32 ||
                                     (c as
                                          libc::c_uint).wrapping_sub('\t' as
                                                                         i32
                                                                         as
                                                                         libc::c_uint)
                                         < 5i32 as libc::c_uint) &&
                               0 != arg_ambiguous(p) {
                        (*p).lstate = EXPR_BEG;
                        pushback(p, c);
                        if c >= 0i32 &&
                               (c as
                                    libc::c_uint).wrapping_sub('0' as i32 as
                                                                   libc::c_uint)
                                   < 10i32 as libc::c_uint {
                            return 373i32
                        }
                        return 325i32
                    }
                    (*p).lstate = EXPR_BEG;
                    pushback(p, c);
                    return '-' as i32
                }
                46 => {
                    (*p).lstate = EXPR_BEG;
                    c = nextc(p);
                    if c == '.' as i32 {
                        c = nextc(p);
                        if c == '.' as i32 { return 338i32 }
                        pushback(p, c);
                        return 337i32
                    }
                    pushback(p, c);
                    if c >= 0i32 &&
                           (c as
                                libc::c_uint).wrapping_sub('0' as i32 as
                                                               libc::c_uint) <
                               10i32 as libc::c_uint {
                        yyerror(p,
                                b"no .<digit> floating literal anymore; put 0 before dot\x00"
                                    as *const u8 as *const libc::c_char);
                    }
                    (*p).lstate = EXPR_DOT;
                    return '.' as i32
                }
                48 | 49 | 50 | 51 | 52 | 53 | 54 | 55 | 56 | 57 => {
                    current_block = 6412618891452676311;
                    break ;
                }
                41 | 93 => {
                    (*p).paren_nest -= 1;
                    /* fall through */
                    current_block = 14220190534523911614;
                    break ;
                }
                125 => { current_block = 14220190534523911614; break ; }
                58 => {
                    c = nextc(p);
                    if c == ':' as i32 {
                        if (*p).lstate as libc::c_uint ==
                               EXPR_BEG as libc::c_int as libc::c_uint ||
                               (*p).lstate as libc::c_uint ==
                                   EXPR_MID as libc::c_int as libc::c_uint ||
                               (*p).lstate as libc::c_uint ==
                                   EXPR_VALUE as libc::c_int as libc::c_uint
                               ||
                               (*p).lstate as libc::c_uint ==
                                   EXPR_CLASS as libc::c_int as libc::c_uint
                               ||
                               (*p).lstate as libc::c_uint ==
                                   EXPR_CLASS as libc::c_int as libc::c_uint
                               ||
                               ((*p).lstate as libc::c_uint ==
                                    EXPR_ARG as libc::c_int as libc::c_uint ||
                                    (*p).lstate as libc::c_uint ==
                                        EXPR_CMDARG as libc::c_int as
                                            libc::c_uint) && 0 != space_seen
                                   &&
                                   !(-1i32 == ' ' as i32 ||
                                         (-1i32 as
                                              libc::c_uint).wrapping_sub('\t'
                                                                             as
                                                                             i32
                                                                             as
                                                                             libc::c_uint)
                                             < 5i32 as libc::c_uint) {
                            (*p).lstate = EXPR_BEG;
                            return 344i32
                        }
                        (*p).lstate = EXPR_DOT;
                        return 343i32
                    }
                    if 0 == space_seen &&
                           ((*p).lstate as libc::c_uint ==
                                EXPR_END as libc::c_int as libc::c_uint ||
                                (*p).lstate as libc::c_uint ==
                                    EXPR_ENDARG as libc::c_int as libc::c_uint
                                ||
                                (*p).lstate as libc::c_uint ==
                                    EXPR_ENDFN as libc::c_int as libc::c_uint)
                       {
                        pushback(p, c);
                        (*p).lstate = EXPR_BEG;
                        return 312i32
                    }
                    if !(c == ' ' as i32 ||
                             (c as
                                  libc::c_uint).wrapping_sub('\t' as i32 as
                                                                 libc::c_uint)
                                 < 5i32 as libc::c_uint) ||
                           ((*p).lstate as libc::c_uint ==
                                EXPR_BEG as libc::c_int as libc::c_uint ||
                                (*p).lstate as libc::c_uint ==
                                    EXPR_MID as libc::c_int as libc::c_uint ||
                                (*p).lstate as libc::c_uint ==
                                    EXPR_VALUE as libc::c_int as libc::c_uint
                                ||
                                (*p).lstate as libc::c_uint ==
                                    EXPR_CLASS as libc::c_int as libc::c_uint)
                       {
                        pushback(p, c);
                        (*p).lstate = EXPR_FNAME;
                        return 358i32
                    }
                    /* Copy to YYRES the contents of YYSTR after stripping away unnecessary
   quotes and backslashes, so that it's suitable for yyerror.  The
   heuristic is that double-quoting is unnecessary unless the string
   contains an apostrophe, a comma, or backslash (other than
   backslash-backslash).  YYSTR is taken from yytname.  If YYRES is
   null, do not copy; instead, return the length of what the result
   would have been.  */
                    pushback(p, c);
                    (*p).lstate = EXPR_BEG;
                    return ':' as i32
                }
                47 => {
                    if (*p).lstate as libc::c_uint ==
                           EXPR_BEG as libc::c_int as libc::c_uint ||
                           (*p).lstate as libc::c_uint ==
                               EXPR_MID as libc::c_int as libc::c_uint ||
                           (*p).lstate as libc::c_uint ==
                               EXPR_VALUE as libc::c_int as libc::c_uint ||
                           (*p).lstate as libc::c_uint ==
                               EXPR_CLASS as libc::c_int as libc::c_uint {
                        (*p).lex_strterm =
                            new_strterm(p, str_regexp, '/' as i32, 0i32);
                        return 359i32
                    }
                    c = nextc(p);
                    if c == '=' as i32 {
                        (*((*p).ylval as *mut YYSTYPE)).id =
                            intern_gen_c(p, '/' as i32 as libc::c_char);
                        (*p).lstate = EXPR_BEG;
                        return 345i32
                    }
                    pushback(p, c);
                    if ((*p).lstate as libc::c_uint ==
                            EXPR_ARG as libc::c_int as libc::c_uint ||
                            (*p).lstate as libc::c_uint ==
                                EXPR_CMDARG as libc::c_int as libc::c_uint) &&
                           0 != space_seen &&
                           !(c == ' ' as i32 ||
                                 (c as
                                      libc::c_uint).wrapping_sub('\t' as i32
                                                                     as
                                                                     libc::c_uint)
                                     < 5i32 as libc::c_uint) {
                        (*p).lex_strterm =
                            new_strterm(p, str_regexp, '/' as i32, 0i32);
                        return 359i32
                    }
                    if (*p).lstate as libc::c_uint ==
                           EXPR_FNAME as libc::c_int as libc::c_uint ||
                           (*p).lstate as libc::c_uint ==
                               EXPR_DOT as libc::c_int as libc::c_uint {
                        (*p).lstate = EXPR_ARG
                    } else { (*p).lstate = EXPR_BEG }
                    return '/' as i32
                }
                94 => {
                    c = nextc(p);
                    if c == '=' as i32 {
                        (*((*p).ylval as *mut YYSTYPE)).id =
                            intern_gen_c(p, '^' as i32 as libc::c_char);
                        (*p).lstate = EXPR_BEG;
                        return 345i32
                    }
                    if (*p).lstate as libc::c_uint ==
                           EXPR_FNAME as libc::c_int as libc::c_uint ||
                           (*p).lstate as libc::c_uint ==
                               EXPR_DOT as libc::c_int as libc::c_uint {
                        (*p).lstate = EXPR_ARG
                    } else { (*p).lstate = EXPR_BEG }
                    pushback(p, c);
                    return '^' as i32
                }
                59 => { (*p).lstate = EXPR_BEG; return ';' as i32 }
                44 => { (*p).lstate = EXPR_BEG; return ',' as i32 }
                126 => {
                    if (*p).lstate as libc::c_uint ==
                           EXPR_FNAME as libc::c_int as libc::c_uint ||
                           (*p).lstate as libc::c_uint ==
                               EXPR_DOT as libc::c_int as libc::c_uint {
                        c = nextc(p);
                        if c != '@' as i32 { pushback(p, c); }
                        (*p).lstate = EXPR_ARG
                    } else { (*p).lstate = EXPR_BEG }
                    return '~' as i32
                }
                40 => {
                    if (*p).lstate as libc::c_uint ==
                           EXPR_BEG as libc::c_int as libc::c_uint ||
                           (*p).lstate as libc::c_uint ==
                               EXPR_MID as libc::c_int as libc::c_uint ||
                           (*p).lstate as libc::c_uint ==
                               EXPR_VALUE as libc::c_int as libc::c_uint ||
                           (*p).lstate as libc::c_uint ==
                               EXPR_CLASS as libc::c_int as libc::c_uint {
                        c = 347i32
                    } else if ((*p).lstate as libc::c_uint ==
                                   EXPR_ARG as libc::c_int as libc::c_uint ||
                                   (*p).lstate as libc::c_uint ==
                                       EXPR_CMDARG as libc::c_int as
                                           libc::c_uint) && 0 != space_seen &&
                                  !(-1i32 == ' ' as i32 ||
                                        (-1i32 as
                                             libc::c_uint).wrapping_sub('\t'
                                                                            as
                                                                            i32
                                                                            as
                                                                            libc::c_uint)
                                            < 5i32 as libc::c_uint) {
                        c = 348i32
                    } else if (*p).lstate as libc::c_uint ==
                                  EXPR_END as libc::c_int as libc::c_uint &&
                                  0 != space_seen {
                        c = 348i32
                    }
                    (*p).paren_nest += 1;
                    (*p).cond_stack =
                        (*p).cond_stack << 1i32 |
                            (0i32 & 1i32) as libc::c_uint;
                    (*p).cmdarg_stack =
                        (*p).cmdarg_stack << 1i32 |
                            (0i32 & 1i32) as libc::c_uint;
                    (*p).lstate = EXPR_BEG;
                    return c
                }
                91 => {
                    (*p).paren_nest += 1;
                    if (*p).lstate as libc::c_uint ==
                           EXPR_FNAME as libc::c_int as libc::c_uint ||
                           (*p).lstate as libc::c_uint ==
                               EXPR_DOT as libc::c_int as libc::c_uint {
                        (*p).lstate = EXPR_ARG;
                        c = nextc(p);
                        if c == ']' as i32 {
                            c = nextc(p);
                            if c == '=' as i32 { return 340i32 }
                            pushback(p, c);
                            return 339i32
                        }
                        pushback(p, c);
                        return '[' as i32
                    } else {
                        /* Start YYX at -YYN if negative to avoid negative indexes in
	 YYCHECK.  */
                        if (*p).lstate as libc::c_uint ==
                               EXPR_BEG as libc::c_int as libc::c_uint ||
                               (*p).lstate as libc::c_uint ==
                                   EXPR_MID as libc::c_int as libc::c_uint ||
                               (*p).lstate as libc::c_uint ==
                                   EXPR_VALUE as libc::c_int as libc::c_uint
                               ||
                               (*p).lstate as libc::c_uint ==
                                   EXPR_CLASS as libc::c_int as libc::c_uint {
                            c = 350i32
                        } else if ((*p).lstate as libc::c_uint ==
                                       EXPR_ARG as libc::c_int as libc::c_uint
                                       ||
                                       (*p).lstate as libc::c_uint ==
                                           EXPR_CMDARG as libc::c_int as
                                               libc::c_uint) &&
                                      0 != space_seen {
                            /* Stay within bounds of both yycheck and yytname.  */
                            c = 350i32
                        }
                    }
                    (*p).lstate = EXPR_BEG;
                    (*p).cond_stack =
                        (*p).cond_stack << 1i32 |
                            (0i32 & 1i32) as libc::c_uint;
                    (*p).cmdarg_stack =
                        (*p).cmdarg_stack << 1i32 |
                            (0i32 & 1i32) as libc::c_uint;
                    return c
                }
                123 => {
                    if 0 != (*p).lpar_beg && (*p).lpar_beg == (*p).paren_nest
                       {
                        (*p).lstate = EXPR_BEG;
                        (*p).lpar_beg = 0i32;
                        (*p).paren_nest -= 1;
                        (*p).cond_stack =
                            (*p).cond_stack << 1i32 |
                                (0i32 & 1i32) as libc::c_uint;
                        (*p).cmdarg_stack =
                            (*p).cmdarg_stack << 1i32 |
                                (0i32 & 1i32) as libc::c_uint;
                        return 365i32
                    }
                    if (*p).lstate as libc::c_uint ==
                           EXPR_ARG as libc::c_int as libc::c_uint ||
                           (*p).lstate as libc::c_uint ==
                               EXPR_CMDARG as libc::c_int as libc::c_uint ||
                           (*p).lstate as libc::c_uint ==
                               EXPR_END as libc::c_int as libc::c_uint ||
                           (*p).lstate as libc::c_uint ==
                               EXPR_ENDFN as libc::c_int as libc::c_uint {
                        /* block (primary) */
                        c = '{' as i32
                    } else if (*p).lstate as libc::c_uint ==
                                  EXPR_ENDARG as libc::c_int as libc::c_uint {
                        /* block (expr) */
                        c = 352i32
                    } else { c = 351i32 }
                    (*p).cond_stack =
                        (*p).cond_stack << 1i32 |
                            (0i32 & 1i32) as libc::c_uint;
                    (*p).cmdarg_stack =
                        (*p).cmdarg_stack << 1i32 |
                            (0i32 & 1i32) as libc::c_uint;
                    (*p).lstate = EXPR_BEG;
                    return c
                }
                92 => {
                    c = nextc(p);
                    if c == '\n' as i32 {
                        (*p).lineno = (*p).lineno.wrapping_add(1);
                        (*p).column = 0i32;
                        space_seen = 1i32;
                        /* skip \\n */
                        continue ;
                    } else {
                        /* Avoid sprintf, as that infringes on the user's name space.
	     Don't have undefined behavior even if the translation
	     produced a string with the wrong number of "%s"s.  */
                        pushback(p, c);
                        return '\\' as i32
                    }
                }
                37 => {
                    if (*p).lstate as libc::c_uint ==
                           EXPR_BEG as libc::c_int as libc::c_uint ||
                           (*p).lstate as libc::c_uint ==
                               EXPR_MID as libc::c_int as libc::c_uint ||
                           (*p).lstate as libc::c_uint ==
                               EXPR_VALUE as libc::c_int as libc::c_uint ||
                           (*p).lstate as libc::c_uint ==
                               EXPR_CLASS as libc::c_int as libc::c_uint {
                        current_block = 12902494717465941658;
                        break ;
                    } else { current_block = 11977086252334878030; break ; }
                }
                36 => {
                    (*p).lstate = EXPR_END;
                    token_column = newtok(p);
                    /* ! YYPARSE_PARAM */
                    c = nextc(p);
                    if c < 0i32 {
                        yyerror(p,
                                b"incomplete global variable syntax\x00" as
                                    *const u8 as *const libc::c_char);
                        return 0i32
                    }
                    match c {
                        95 => { current_block = 9788622379662710906; break ; }
                        126 => {
                            current_block = 6730730451454485637;
                            break ;
                        }
                        42 => { current_block = 5350134378931703287; break ; }
                        36 | 63 => {
                            current_block = 15373261056328880654;
                            break ;
                        }
                        33 => { current_block = 4479470245541939736; break ; }
                        64 => { current_block = 9563549857889416738; break ; }
                        47 => {
                            current_block = 17988390420433690458;
                            break ;
                        }
                        92 => { current_block = 6773730138789497468; break ; }
                        59 => { current_block = 8607439262380887446; break ; }
                        44 => {
                            current_block = 14755719952959066985;
                            break ;
                        }
                        46 => {
                            current_block = 10155863893342675314;
                            break ;
                        }
                        61 => {
                            current_block = 10760593051861821346;
                            break ;
                        }
                        58 => { current_block = 701105375540096061; break ; }
                        60 => { current_block = 5521344687656319167; break ; }
                        62 => { current_block = 3739515766133103849; break ; }
                        34 => {
                            current_block = 10427542153506805158;
                            break ;
                        }
                        45 => { current_block = 1177398548293064630; break ; }
                        38 => {
                            current_block = 11330825509842201578;
                            break ;
                        }
                        96 => { current_block = 9505358669346684699; break ; }
                        39 => { current_block = 2285721198630451445; break ; }
                        43 => { current_block = 3050566506979708023; break ; }
                        49 | 50 | 51 | 52 | 53 | 54 | 55 | 56 | 57 => {
                            current_block = 8418764804377934979;
                            break ;
                        }
                        48 => {
                            current_block = 11526031490997343858;
                            break ;
                        }
                        _ => { current_block = 12319291253827161607; break ; }
                    }
                }
                64 => {
                    c = nextc(p);
                    token_column = newtok(p);
                    tokadd(p, '@' as i32);
                    if c == '@' as i32 { tokadd(p, '@' as i32); c = nextc(p) }
                    /* Get the current used size of the three stacks, in elements.  */
                    if c < 0i32 {
                        if (*p).tidx == 1i32 {
                            yyerror(p,
                                    b"incomplete instance variable syntax\x00"
                                        as *const u8 as *const libc::c_char);
                        } else {
                            yyerror(p,
                                    b"incomplete class variable syntax\x00" as
                                        *const u8 as *const libc::c_char);
                        }
                        return 0i32
                    } else {
                        if (c as
                                libc::c_uint).wrapping_sub('0' as i32 as
                                                               libc::c_uint) <
                               10i32 as libc::c_uint {
                            if (*p).tidx == 1i32 {
                                yyerror_c(p,
                                          b"wrong instance variable name: @\x00"
                                              as *const u8 as
                                              *const libc::c_char,
                                          c as libc::c_char);
                            } else {
                                yyerror_c(p,
                                          b"wrong class variable name: @@\x00"
                                              as *const u8 as
                                              *const libc::c_char,
                                          c as libc::c_char);
                            }
                            return 0i32
                        }
                    }
                    if !((c as libc::c_uint |
                              0x20i32 as
                                  libc::c_uint).wrapping_sub('a' as i32 as
                                                                 libc::c_uint)
                             < 26i32 as libc::c_uint ||
                             (c as
                                  libc::c_uint).wrapping_sub('0' as i32 as
                                                                 libc::c_uint)
                                 < 10i32 as libc::c_uint || c == '_' as i32 ||
                             !(c as libc::c_uint <= 0x7fi32 as libc::c_uint))
                       {
                        pushback(p, c);
                        return '@' as i32
                    }
                    current_block = 16782213842982696595;
                    break ;
                }
                95 => {
                    token_column = newtok(p);
                    current_block = 16782213842982696595;
                    break ;
                }
                _ => {
                    if !((c as libc::c_uint |
                              0x20i32 as
                                  libc::c_uint).wrapping_sub('a' as i32 as
                                                                 libc::c_uint)
                             < 26i32 as libc::c_uint ||
                             (c as
                                  libc::c_uint).wrapping_sub('0' as i32 as
                                                                 libc::c_uint)
                                 < 10i32 as libc::c_uint || c == '_' as i32 ||
                             !(c as libc::c_uint <= 0x7fi32 as libc::c_uint))
                       {
                        let mut buf_0: [libc::c_char; 36] = [0; 36];
                        let s: [libc::c_char; 31] =
                            *::std::mem::transmute::<&[u8; 31],
                                                     &[libc::c_char; 31]>(b"Invalid char in expression: 0x\x00");
                        let hexdigits: [libc::c_char; 17] =
                            *::std::mem::transmute::<&[u8; 17],
                                                     &[libc::c_char; 17]>(b"0123456789ABCDEF\x00");
                        strcpy(buf_0.as_mut_ptr(), s.as_ptr());
                        buf_0[(::std::mem::size_of::<[libc::c_char; 31]>() as
                                   libc::c_ulong).wrapping_sub(1i32 as
                                                                   libc::c_ulong)
                                  as usize] =
                            hexdigits[((c & 0xf0i32) >> 4i32) as usize];
                        buf_0[::std::mem::size_of::<[libc::c_char; 31]>() as
                                  libc::c_ulong as usize] =
                            hexdigits[(c & 0xfi32) as usize];
                        buf_0[(::std::mem::size_of::<[libc::c_char; 31]>() as
                                   libc::c_ulong).wrapping_add(1i32 as
                                                                   libc::c_ulong)
                                  as usize] = 0i32 as libc::c_char;
                        yyerror(p, buf_0.as_mut_ptr());
                        continue ;
                    } else {
                        token_column = newtok(p);
                        current_block = 16782213842982696595;
                        break ;
                    }
                }
            }
            match current_block {
                13005003696698352011 => {
                    /* NUL */
                    current_block = 14442101915723096593;
                }
                16751258855114573687 => { space_seen = 1i32; continue ; }
                _ => { }
            }
            match current_block {
                14442101915723096593 => {
                    /* end of script. */
                    current_block = 624397522599523623;
                }
                _ => { }
            }
            match current_block {
                624397522599523623 => {
                    if (*p).heredocs_from_nextline.is_null() { return 0i32 }
                }
                _ => { }
            }
            heredoc_treat_nextline(p);
            (*p).column = 0i32;
            match (*p).lstate as libc::c_uint {
                0 | 7 | 8 | 9 | 10 => {
                    (*p).lineno = (*p).lineno.wrapping_add(1);
                    if !(*p).parsing_heredoc.is_null() {
                        if !(*p).lex_strterm.is_null() {
                            return parse_string(p)
                        }
                    }
                }
                _ => {
                    if !(*p).parsing_heredoc.is_null() { return '\n' as i32 }
                    loop  {
                        c = nextc(p);
                        if !(0 != c) {
                            current_block = 13968304908445284178;
                            break 'c_94209 ;
                        }
                        match c {
                            32 | 9 | 12 | 13 => { }
                            11 => { }
                            35 => {
                                /* '\v' */
                                pushback(p, '#' as i32);
                                (*p).lineno = (*p).lineno.wrapping_add(1);
                                break ;
                            }
                            46 => {
                                if 0 == peek_n(p, '.' as i32, 0i32) {
                                    pushback(p, '.' as i32);
                                    (*p).lineno = (*p).lineno.wrapping_add(1);
                                    break ;
                                } else {
                                    pushback(p, c);
                                    current_block = 13968304908445284178;
                                    break 'c_94209 ;
                                }
                            }
                            38 => {
                                if 0 != peek_n(p, '.' as i32, 0i32) {
                                    pushback(p, '&' as i32);
                                    (*p).lineno = (*p).lineno.wrapping_add(1);
                                    break ;
                                } else {
                                    pushback(p, c);
                                    current_block = 13968304908445284178;
                                    break 'c_94209 ;
                                }
                            }
                            -1 => {
                                /* end of a file */
                                current_block = 13968304908445284178;
                                break 'c_94209 ;
                            }
                            -2 => {
                                current_block = 13968304908445284178;
                                break 'c_94209 ;
                            }
                            _ => {
                                pushback(p, c);
                                current_block = 13968304908445284178;
                                break 'c_94209 ;
                            }
                        }
                        space_seen = 1i32
                    }
                }
            }
        }
    match current_block {
        14220190534523911614 => {
            (*p).cond_stack =
                (*p).cond_stack >> 1i32 |
                    (*p).cond_stack & 1i32 as libc::c_uint;
            (*p).cmdarg_stack =
                (*p).cmdarg_stack >> 1i32 |
                    (*p).cmdarg_stack & 1i32 as libc::c_uint;
            /* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
            if c == ')' as i32 {
                (*p).lstate = EXPR_ENDFN
            } else { (*p).lstate = EXPR_END }
            return c
        }
        12902494717465941658 => {
            term = 0;
            paren = 0;
            c = nextc(p);
            current_block = 11105359979385890573;
        }
        9788622379662710906 => {
            c = nextc(p);
            if c >= 0i32 &&
                   ((c as libc::c_uint |
                         0x20i32 as
                             libc::c_uint).wrapping_sub('a' as i32 as
                                                            libc::c_uint) <
                        26i32 as libc::c_uint ||
                        (c as
                             libc::c_uint).wrapping_sub('0' as i32 as
                                                            libc::c_uint) <
                            10i32 as libc::c_uint || c == '_' as i32 ||
                        !(c as libc::c_uint <= 0x7fi32 as libc::c_uint)) {
                /* if there is more after _ it is a variable */
                tokadd(p, '$' as i32);
                tokadd(p, c);
                current_block = 15525361373945359231;
            } else {
                pushback(p, c);
                c = '_' as i32;
                /* $~: match-data */
                current_block = 6730730451454485637;
            }
        }
        5600328731811258759 => {
            (*p).lstate = EXPR_BEG;
            pushback(p, c);
            return '+' as i32
        }
        10938639076553795114 => {
            (*p).lstate = EXPR_BEG;
            pushback(p, c);
            if c >= 0i32 &&
                   (c as
                        libc::c_uint).wrapping_sub('0' as i32 as libc::c_uint)
                       < 10i32 as libc::c_uint {
                c = '+' as i32
            } else { return 324i32 }
            current_block = 6412618891452676311;
        }
        11364608634565542496 => {
            newtok(p);
            /* need support UTF-8 if configured */
            if (c as libc::c_uint |
                    0x20i32 as
                        libc::c_uint).wrapping_sub('a' as i32 as libc::c_uint)
                   < 26i32 as libc::c_uint ||
                   (c as
                        libc::c_uint).wrapping_sub('0' as i32 as libc::c_uint)
                       < 10i32 as libc::c_uint || c == '_' as i32 {
                let mut c2_0: libc::c_int = nextc(p);
                pushback(p, c2_0);
                if (c2_0 as libc::c_uint |
                        0x20i32 as
                            libc::c_uint).wrapping_sub('a' as i32 as
                                                           libc::c_uint) <
                       26i32 as libc::c_uint ||
                       (c2_0 as
                            libc::c_uint).wrapping_sub('0' as i32 as
                                                           libc::c_uint) <
                           10i32 as libc::c_uint || c2_0 == '_' as i32 {
                    current_block = 8157785715177030788;
                } else { current_block = 7539340762994337730; }
            } else { current_block = 7539340762994337730; }
            match current_block {
                8157785715177030788 => { }
                _ => {
                    if c == '\\' as i32 {
                        c = read_escape(p);
                        /* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
   symbol of state STATE-NUM.  */
                        tokadd(p, c);
                    } else { tokadd(p, c); }
                    tokfix(p);
                    let ref mut fresh21 = (*((*p).ylval as *mut YYSTYPE)).nd;
                    *fresh21 = new_str(p, tok(p), toklen(p) as size_t);
                    (*p).lstate = EXPR_ENDARG;
                    return 315i32
                }
            }
        }
        1177398548293064630 => {
            tokadd(p, '$' as i32);
            tokadd(p, c);
            c = nextc(p);
            pushback(p, c);
            /* The state stack.  */
            current_block = 14605591309277955022;
        }
        8418764804377934979 => {
            loop  {
                /* The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.  */
                tokadd(p, c);
                c = nextc(p);
                if !(c >= 0i32 &&
                         (c as
                              libc::c_uint).wrapping_sub('0' as i32 as
                                                             libc::c_uint) <
                             10i32 as libc::c_uint) {
                    break ;
                }
            }
            pushback(p, c);
            if last_state as libc::c_uint ==
                   EXPR_FNAME as libc::c_int as libc::c_uint {
                current_block = 14605591309277955022;
            } else {
                tokfix(p);
                let mut n: libc::c_ulong =
                    strtoul(tok(p), 0 as *mut *mut libc::c_char, 10i32);
                if n > 2147483647i32 as libc::c_ulong {
                    /* Cause a token to be read.  */
                    yyerror(p,
                            b"capture group index must be <= 2147483647\x00"
                                as *const u8 as *const libc::c_char);
                    return 0i32
                }
                /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */
                let ref mut fresh30 = (*((*p).ylval as *mut YYSTYPE)).nd;
                *fresh30 = new_nth_ref(p, n as libc::c_int);
                return 321i32
            }
        }
        12319291253827161607 => {
            if !((c as libc::c_uint |
                      0x20i32 as
                          libc::c_uint).wrapping_sub('a' as i32 as
                                                         libc::c_uint) <
                     26i32 as libc::c_uint ||
                     (c as
                          libc::c_uint).wrapping_sub('0' as i32 as
                                                         libc::c_uint) <
                         10i32 as libc::c_uint || c == '_' as i32 ||
                     !(c as libc::c_uint <= 0x7fi32 as libc::c_uint)) {
                pushback(p, c);
                return '$' as i32
            }
            /*------------------------------------------------------------.
| yynewstate -- Push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
            /* fall through */
            current_block = 11526031490997343858;
        }
        3042404941205427226 => {
            if (*p).lstate as libc::c_uint ==
                   EXPR_FNAME as libc::c_int as libc::c_uint ||
                   (*p).lstate as libc::c_uint ==
                       EXPR_DOT as libc::c_int as libc::c_uint {
                (*p).lstate = EXPR_ARG
            } else { (*p).lstate = EXPR_BEG }
            c = nextc(p);
            if c == '=' as i32 {
                c = nextc(p);
                if c == '=' as i32 { return 329i32 }
                pushback(p, c);
                return 328i32
            }
            if c == '~' as i32 {
                return 335i32
            } else { if c == '>' as i32 { return 346i32 } }
            pushback(p, c);
            return '=' as i32
        }
        11977086252334878030 => {
            /* ! YYPARSE_PARAM */
            c = nextc(p);
            if c == '=' as i32 {
                (*((*p).ylval as *mut YYSTYPE)).id =
                    intern_gen_c(p, '%' as i32 as libc::c_char);
                (*p).lstate = EXPR_BEG;
                return 345i32
            }
            if !(((*p).lstate as libc::c_uint ==
                      EXPR_ARG as libc::c_int as libc::c_uint ||
                      (*p).lstate as libc::c_uint ==
                          EXPR_CMDARG as libc::c_int as libc::c_uint) &&
                     0 != space_seen &&
                     !(c == ' ' as i32 ||
                           (c as
                                libc::c_uint).wrapping_sub('\t' as i32 as
                                                               libc::c_uint) <
                               5i32 as libc::c_uint)) {
                /*----------.
| yyparse.  |
`----------*/
                if (*p).lstate as libc::c_uint ==
                       EXPR_FNAME as libc::c_int as libc::c_uint ||
                       (*p).lstate as libc::c_uint ==
                           EXPR_DOT as libc::c_int as libc::c_uint {
                    (*p).lstate = EXPR_ARG
                } else { (*p).lstate = EXPR_BEG }
                pushback(p, c);
                return '%' as i32
            }
            current_block = 11105359979385890573;
        }
        13968304908445284178 => {
            (*p).set_cmd_start(1i32 as mrb_bool);
            (*p).lstate = EXPR_BEG;
            return '\n' as i32
        }
        11330825509842201578 => {
            /* $`: string before last match */
            current_block = 9505358669346684699;
        }
        13797367574128857302 => {
            if !((*p).lstate as libc::c_uint ==
                     EXPR_ARG as libc::c_int as libc::c_uint ||
                     (*p).lstate as libc::c_uint ==
                         EXPR_CMDARG as libc::c_int as libc::c_uint) {
                let mut c2: libc::c_int = 0;
                match c {
                    32 => { c2 = 's' as i32 }
                    10 => { c2 = 'n' as i32 }
                    9 => { c2 = 't' as i32 }
                    11 => { c2 = 'v' as i32 }
                    13 => { c2 = 'r' as i32 }
                    12 => { c2 = 'f' as i32 }
                    _ => { c2 = 0i32 }
                }
                if 0 != c2 {
                    let mut buf: [libc::c_char; 256] = [0; 256];
                    let mut cc: libc::c_char = c2 as libc::c_char;
                    strcpy(buf.as_mut_ptr(),
                           b"invalid character syntax; use ?\\\x00" as
                               *const u8 as *const libc::c_char);
                    strncat(buf.as_mut_ptr(), &mut cc, 1i32 as libc::c_ulong);
                    yyerror(p, buf.as_mut_ptr());
                }
            }
            current_block = 8157785715177030788;
        }
        _ => { }
    }
    match current_block {
        6412618891452676311 => {
            let mut is_float: libc::c_int = 0;
            let mut seen_point: libc::c_int = 0;
            let mut seen_e: libc::c_int = 0;
            let mut nondigit: libc::c_int = 0;
            let mut suffix: libc::c_int = 0i32;
            nondigit = 0i32;
            seen_e = nondigit;
            seen_point = seen_e;
            is_float = seen_point;
            (*p).lstate = EXPR_ENDARG;
            newtok(p);
            if c == '-' as i32 || c == '+' as i32 {
                tokadd(p, c);
                c = nextc(p)
            }
            if c == '0' as i32 {
                let mut start: libc::c_int = toklen(p);
                c = nextc(p);
                if c == 'x' as i32 || c == 'X' as i32 {
                    /* hexadecimal */
                    c = nextc(p);
                    if c >= 0i32 &&
                           ((c as
                                 libc::c_uint).wrapping_sub('0' as i32 as
                                                                libc::c_uint)
                                < 10i32 as libc::c_uint ||
                                (c as libc::c_uint |
                                     0x20i32 as
                                         libc::c_uint).wrapping_sub('a' as i32
                                                                        as
                                                                        libc::c_uint)
                                    < 6i32 as libc::c_uint) {
                        loop  {
                            if c == '_' as i32 {
                                if 0 != nondigit { break ; }
                                nondigit = c
                            } else {
                                /* YY_LOCATION_PRINT -- Print the location on the stream.
   This macro was not mandated originally: define only if we know
   we won't break user code: when these are the locations we know.  */
                                if !((c as
                                          libc::c_uint).wrapping_sub('0' as
                                                                         i32
                                                                         as
                                                                         libc::c_uint)
                                         < 10i32 as libc::c_uint ||
                                         (c as libc::c_uint |
                                              0x20i32 as
                                                  libc::c_uint).wrapping_sub('a'
                                                                                 as
                                                                                 i32
                                                                                 as
                                                                                 libc::c_uint)
                                             < 6i32 as libc::c_uint) {
                                    break ;
                                }
                                nondigit = 0i32;
                                tokadd(p, tolower(c));
                            }
                            c = nextc(p);
                            if !(c >= 0i32) { break ; }
                        }
                    }
                    pushback(p, c);
                    tokfix(p);
                    if toklen(p) == start {
                        yyerror(p,
                                b"numeric literal without digits\x00" as
                                    *const u8 as *const libc::c_char);
                        return 0i32
                    } else if !(0 != nondigit) {
                        suffix =
                            number_literal_suffix(p,
                                                  1i32 << 0i32 |
                                                      1i32 << 1i32);
                        /* YYLEX -- calling `yylex' with the right arguments.  */
                        let ref mut fresh22 =
                            (*((*p).ylval as *mut YYSTYPE)).nd;
                        *fresh22 = new_int(p, tok(p), 16i32, suffix);
                        return 313i32
                    }
                    current_block = 14428803759125761182;
                } else if c == 'b' as i32 || c == 'B' as i32 {
                    /* binary */
                    c = nextc(p);
                    if c == '0' as i32 || c == '1' as i32 {
                        loop  {
                            if c == '_' as i32 {
                                /* Enable debugging if requested.  */
                                if 0 != nondigit { break ; }
                                nondigit = c
                            } else {
                                if c != '0' as i32 && c != '1' as i32 {
                                    break ;
                                }
                                nondigit = 0i32;
                                tokadd(p, c);
                            }
                            c = nextc(p);
                            if !(c >= 0i32) { break ; }
                        }
                    }
                    pushback(p, c);
                    tokfix(p);
                    if toklen(p) == start {
                        yyerror(p,
                                b"numeric literal without digits\x00" as
                                    *const u8 as *const libc::c_char);
                        return 0i32
                    } else if !(0 != nondigit) {
                        suffix =
                            number_literal_suffix(p,
                                                  1i32 << 0i32 |
                                                      1i32 << 1i32);
                        let ref mut fresh23 =
                            (*((*p).ylval as *mut YYSTYPE)).nd;
                        *fresh23 = new_int(p, tok(p), 2i32, suffix);
                        return 313i32
                    }
                    current_block = 14428803759125761182;
                } else if c == 'd' as i32 || c == 'D' as i32 {
                    /* decimal */
                    c = nextc(p);
                    if c >= 0i32 &&
                           (c as
                                libc::c_uint).wrapping_sub('0' as i32 as
                                                               libc::c_uint) <
                               10i32 as libc::c_uint {
                        loop  {
                            if c == '_' as i32 {
                                if 0 != nondigit { break ; }
                                nondigit = c
                            } else {
                                if !((c as
                                          libc::c_uint).wrapping_sub('0' as
                                                                         i32
                                                                         as
                                                                         libc::c_uint)
                                         < 10i32 as libc::c_uint) {
                                    break ;
                                }
                                nondigit = 0i32;
                                tokadd(p, c);
                            }
                            c = nextc(p);
                            if !(c >= 0i32) { break ; }
                        }
                    }
                    pushback(p, c);
                    tokfix(p);
                    if toklen(p) == start {
                        yyerror(p,
                                b"numeric literal without digits\x00" as
                                    *const u8 as *const libc::c_char);
                        return 0i32
                    } else if !(0 != nondigit) {
                        suffix =
                            number_literal_suffix(p,
                                                  1i32 << 0i32 |
                                                      1i32 << 1i32);
                        let ref mut fresh24 =
                            (*((*p).ylval as *mut YYSTYPE)).nd;
                        *fresh24 = new_int(p, tok(p), 10i32, suffix);
                        return 313i32
                    }
                    current_block = 14428803759125761182;
                } else {
                    if c == '_' as i32 {
                        /* 0_0 */
                        current_block = 14135407831403722309;
                    } else {
                        if c == 'o' as i32 || c == 'O' as i32 {
                            /* prefixed octal */
                            c = nextc(p);
                            if c < 0i32 || c == '_' as i32 ||
                                   !((c as
                                          libc::c_uint).wrapping_sub('0' as
                                                                         i32
                                                                         as
                                                                         libc::c_uint)
                                         < 10i32 as libc::c_uint) {
                                yyerror(p,
                                        b"numeric literal without digits\x00"
                                            as *const u8 as
                                            *const libc::c_char);
                                return 0i32
                            }
                        }
                        if c >= '0' as i32 && c <= '7' as i32 {
                            /* octal */
                            current_block = 14135407831403722309;
                        } else { current_block = 11938456150870930062; }
                    }
                    loop  {
                        match current_block {
                            11938456150870930062 => {
                                if c > '7' as i32 && c <= '9' as i32 {
                                    current_block = 8330959088791260693;
                                    break ;
                                }
                                if c == '.' as i32 || c == 'e' as i32 ||
                                       c == 'E' as i32 {
                                    tokadd(p, '0' as i32);
                                } else {
                                    pushback(p, c);
                                    suffix =
                                        number_literal_suffix(p,
                                                              1i32 << 0i32 |
                                                                  1i32 <<
                                                                      1i32);
                                    let ref mut fresh26 =
                                        (*((*p).ylval as *mut YYSTYPE)).nd;
                                    *fresh26 =
                                        new_int(p,
                                                b"0\x00" as *const u8 as
                                                    *const libc::c_char,
                                                10i32, suffix);
                                    return 313i32
                                }
                                current_block = 18029556747650706958;
                                break ;
                            }
                            _ => {
                                if c == '_' as i32 {
                                    if 0 != nondigit {
                                        current_block = 12369472161353711912;
                                    } else {
                                        nondigit = c;
                                        current_block = 3988218931164863998;
                                    }
                                } else if c < '0' as i32 || c > '9' as i32 {
                                    current_block = 12369472161353711912;
                                } else {
                                    if c > '7' as i32 {
                                        current_block = 8330959088791260693;
                                        break ;
                                    }
                                    nondigit = 0i32;
                                    tokadd(p, c);
                                    current_block = 3988218931164863998;
                                }
                                match current_block {
                                    3988218931164863998 => {
                                        c = nextc(p);
                                        if c >= 0i32 {
                                            current_block =
                                                14135407831403722309;
                                            continue ;
                                        }
                                    }
                                    _ => { }
                                }
                                if toklen(p) > start {
                                    pushback(p, c);
                                    tokfix(p);
                                    if 0 != nondigit {
                                        current_block = 14428803759125761182;
                                        break ;
                                    } else {
                                        current_block = 17698050424025817215;
                                        break ;
                                    }
                                } else {
                                    if !(0 != nondigit) {
                                        current_block = 11938456150870930062;
                                        continue ;
                                    }
                                    pushback(p, c);
                                    current_block = 14428803759125761182;
                                    break ;
                                }
                            }
                        }
                    }
                    match current_block {
                        14428803759125761182 => { }
                        18029556747650706958 => { }
                        _ => {
                            match current_block {
                                8330959088791260693 => {
                                    yyerror(p,
                                            b"Invalid octal digit\x00" as
                                                *const u8 as
                                                *const libc::c_char);
                                }
                                _ => {
                                    suffix =
                                        number_literal_suffix(p,
                                                              1i32 << 0i32 |
                                                                  1i32 <<
                                                                      1i32);
                                    let ref mut fresh25 =
                                        (*((*p).ylval as *mut YYSTYPE)).nd;
                                    *fresh25 =
                                        new_int(p, tok(p), 8i32, suffix);
                                    return 313i32
                                }
                            }
                            current_block = 18029556747650706958;
                        }
                    }
                }
            } else { current_block = 18029556747650706958; }
            loop  {
                match current_block {
                    14428803759125761182 => {
                        /* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */
                        yyerror_c(p,
                                  b"trailing non digit in number: \x00" as
                                      *const u8 as *const libc::c_char,
                                  nondigit as libc::c_char);
                        break ;
                    }
                    _ => {
                        match c {
                            48 | 49 | 50 | 51 | 52 | 53 | 54 | 55 | 56 | 57 =>
                            {
                                nondigit = 0i32;
                                tokadd(p, c);
                                current_block = 4388820289944313376;
                            }
                            46 => {
                                if 0 != nondigit {
                                    current_block = 14428803759125761182;
                                    continue ;
                                }
                                if 0 != seen_point || 0 != seen_e {
                                    current_block = 13908332489505320466;
                                } else {
                                    let mut c0: libc::c_int = nextc(p);
                                    if c0 < 0i32 ||
                                           !((c0 as
                                                  libc::c_uint).wrapping_sub('0'
                                                                                 as
                                                                                 i32
                                                                                 as
                                                                                 libc::c_uint)
                                                 < 10i32 as libc::c_uint) {
                                        pushback(p, c0);
                                        current_block = 13908332489505320466;
                                    } else {
                                        c = c0;
                                        tokadd(p, '.' as i32);
                                        tokadd(p, c);
                                        is_float += 1;
                                        seen_point += 1;
                                        nondigit = 0i32;
                                        current_block = 4388820289944313376;
                                    }
                                }
                            }
                            101 | 69 => {
                                if 0 != nondigit {
                                    pushback(p, c);
                                    c = nondigit;
                                    current_block = 13908332489505320466;
                                } else if 0 != seen_e {
                                    current_block = 13908332489505320466;
                                } else {
                                    tokadd(p, c);
                                    seen_e += 1;
                                    is_float += 1;
                                    nondigit = c;
                                    c = nextc(p);
                                    if c != '-' as i32 && c != '+' as i32 {
                                        current_block = 18029556747650706958;
                                        continue ;
                                    }
                                    tokadd(p, c);
                                    nondigit = c;
                                    current_block = 4388820289944313376;
                                }
                            }
                            95 => {
                                if 0 != nondigit {
                                    current_block = 13908332489505320466;
                                } else {
                                    /* !YYDEBUG */
                                    nondigit = c;
                                    current_block = 4388820289944313376;
                                }
                            }
                            _ => { current_block = 13908332489505320466; }
                        }
                        match current_block {
                            4388820289944313376 => {
                                /* !YYDEBUG */
                                c = nextc(p);
                                current_block = 18029556747650706958;
                            }
                            _ => {
                                pushback(p, c);
                                if 0 != nondigit {
                                    current_block = 14428803759125761182;
                                } else { break ; }
                            }
                        }
                    }
                }
            }
            tokfix(p);
            if 0 != is_float {
                let mut d: libc::c_double = 0.;
                let mut endp: *mut libc::c_char = 0 as *mut libc::c_char;
                *__error() = 0i32;
                d = mrb_float_read(tok(p), &mut endp);
                if d == 0i32 as libc::c_double &&
                       endp == tok(p) as *mut libc::c_char {
                    yywarning_s(p,
                                b"corrupted float value\x00" as *const u8 as
                                    *const libc::c_char, tok(p));
                } else if *__error() == 34i32 {
                    yywarning_s(p,
                                b"float out of range\x00" as *const u8 as
                                    *const libc::c_char, tok(p));
                    /* Return the length of YYSTR.  */
                    *__error() = 0i32
                }
                suffix =
                    number_literal_suffix(p, 1i32 << 0i32 | 1i32 << 1i32);
                let ref mut fresh27 = (*((*p).ylval as *mut YYSTYPE)).nd;
                *fresh27 = new_float(p, tok(p), suffix);
                return 314i32
            }
            suffix = number_literal_suffix(p, 1i32 << 0i32 | 1i32 << 1i32);
            let ref mut fresh28 = (*((*p).ylval as *mut YYSTYPE)).nd;
            *fresh28 = new_int(p, tok(p), 10i32, suffix);
            return 313i32
        }
        8157785715177030788 => {
            pushback(p, c);
            (*p).lstate = EXPR_VALUE;
            return '?' as i32
        }
        11105359979385890573 => {
            if c < 0i32 ||
                   !((c as libc::c_uint |
                          0x20i32 as
                              libc::c_uint).wrapping_sub('a' as i32 as
                                                             libc::c_uint) <
                         26i32 as libc::c_uint ||
                         (c as
                              libc::c_uint).wrapping_sub('0' as i32 as
                                                             libc::c_uint) <
                             10i32 as libc::c_uint) {
                term = c;
                c = 'Q' as i32
            } else {
                term = nextc(p);
                if (term as libc::c_uint |
                        0x20i32 as
                            libc::c_uint).wrapping_sub('a' as i32 as
                                                           libc::c_uint) <
                       26i32 as libc::c_uint ||
                       (term as
                            libc::c_uint).wrapping_sub('0' as i32 as
                                                           libc::c_uint) <
                           10i32 as libc::c_uint {
                    yyerror(p,
                            b"unknown type of %string\x00" as *const u8 as
                                *const libc::c_char);
                    return 0i32
                }
            }
            if c < 0i32 || term < 0i32 {
                /* YYERROR_VERBOSE */
                yyerror(p,
                        b"unterminated quoted string meets end of file\x00" as
                            *const u8 as *const libc::c_char);
                return 0i32
            }
            /*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/
            paren = term;
            if term == '(' as i32 {
                term = ')' as i32
            } else if term == '[' as i32 {
                term = ']' as i32
            } else if term == '{' as i32 {
                term = '}' as i32
            } else if term == '<' as i32 {
                /*ARGSUSED*/
                term = '>' as i32
            } else { paren = 0i32 }
            match c {
                81 => {
                    (*p).lex_strterm =
                        new_strterm(p, str_dquote, term, paren);
                    return 362i32
                }
                113 => {
                    (*p).lex_strterm =
                        new_strterm(p, str_squote, term, paren);
                    return parse_string(p)
                }
                87 => {
                    (*p).lex_strterm = new_strterm(p, str_dword, term, paren);
                    return 360i32
                }
                119 => {
                    (*p).lex_strterm = new_strterm(p, str_sword, term, paren);
                    return 360i32
                }
                120 => {
                    (*p).lex_strterm =
                        new_strterm(p, str_xquote, term, paren);
                    return 363i32
                }
                114 => {
                    (*p).lex_strterm =
                        new_strterm(p, str_regexp, term, paren);
                    return 359i32
                }
                115 => {
                    (*p).lex_strterm = new_strterm(p, str_ssym, term, paren);
                    /* Prevent warnings from -Wmissing-prototypes.  */
                    return 358i32
                }
                73 => {
                    (*p).lex_strterm =
                        new_strterm(p, str_dsymbols, term, paren);
                    return 361i32
                }
                105 => {
                    (*p).lex_strterm =
                        new_strterm(p, str_ssymbols, term, paren);
                    /* ! YYPARSE_PARAM */
                    return 361i32
                }
                _ => {
                    yyerror(p,
                            b"unknown type of %string\x00" as *const u8 as
                                *const libc::c_char);
                    return 0i32
                }
            }
        }
        9505358669346684699 => {
            /* $': string after last match */
            current_block = 2285721198630451445;
        }
        11526031490997343858 => {
            tokadd(p, '$' as i32);
            current_block = 15525361373945359231;
        }
        6730730451454485637 => {
            /* $*: argv */
            current_block = 5350134378931703287;
        }
        _ => { }
    }
    match current_block {
        2285721198630451445 => {
            /* $+: string matches last pattern */
            current_block = 3050566506979708023;
        }
        5350134378931703287 => {
            /* Number of syntax errors so far.  */
            /* $$: pid */
            current_block = 15373261056328880654;
        }
        15525361373945359231 => {
            /* In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.  */
            current_block = 16782213842982696595;
        }
        _ => { }
    }
    match current_block {
        3050566506979708023 => {
            if last_state as libc::c_uint ==
                   EXPR_FNAME as libc::c_int as libc::c_uint {
                tokadd(p, '$' as i32);
                tokadd(p, c);
            } else {
                let ref mut fresh29 = (*((*p).ylval as *mut YYSTYPE)).nd;
                *fresh29 = new_back_ref(p, c);
                return 322i32
            }
            current_block = 14605591309277955022;
        }
        16782213842982696595 => {
            loop  {
                tokadd(p, c);
                c = nextc(p);
                if c < 0i32 {
                    /* no yyoverflow */
                    break ;
                } else if !((c as libc::c_uint |
                                 0x20i32 as
                                     libc::c_uint).wrapping_sub('a' as i32 as
                                                                    libc::c_uint)
                                < 26i32 as libc::c_uint ||
                                (c as
                                     libc::c_uint).wrapping_sub('0' as i32 as
                                                                    libc::c_uint)
                                    < 10i32 as libc::c_uint || c == '_' as i32
                                ||
                                !(c as libc::c_uint <=
                                      0x7fi32 as libc::c_uint)) {
                    break ;
                }
            }
            if token_column == 0i32 && toklen(p) == 7i32 &&
                   (c < 0i32 || c == '\n' as i32) &&
                   strncmp(tok(p),
                           b"__END__\x00" as *const u8 as *const libc::c_char,
                           toklen(p) as libc::c_ulong) == 0i32 {
                return -1i32
            }
            match *tok(p).offset(0isize) as libc::c_int {
                64 | 36 => { pushback(p, c); }
                _ => {
                    if (c == '!' as i32 || c == '?' as i32) &&
                           0 == peek_n(p, '=' as i32, 0i32) {
                        tokadd(p, c);
                    } else { pushback(p, c); }
                }
            }
            /*-----------.
| yybackup.  |
`-----------*/
            tokfix(p);
            let mut result: libc::c_int = 0i32;
            match *tok(p).offset(0isize) as libc::c_int {
                36 => {
                    (*p).lstate = EXPR_END;
                    /* First try to decide what to do without reference to look-ahead token.  */
                    result = 308i32
                }
                64 => {
                    (*p).lstate = EXPR_END;
                    if *tok(p).offset(1isize) as libc::c_int == '@' as i32 {
                        /* Not known => get a look-ahead token if don't already have one.  */
                        result = 311i32
                    } else { result = 309i32 }
                }
                _ => {
                    if toklast(p) == '!' as i32 || toklast(p) == '?' as i32 {
                        result = 307i32
                    } else {
                        if (*p).lstate as libc::c_uint ==
                               EXPR_FNAME as libc::c_int as libc::c_uint {
                            c = nextc(p);
                            if c == '=' as i32 &&
                                   0 == peek_n(p, '~' as i32, 0i32) &&
                                   0 == peek_n(p, '>' as i32, 0i32) &&
                                   (0 == peek_n(p, '=' as i32, 0i32) ||
                                        0 !=
                                            peek_n(p, '>' as i32, 1i32) as
                                                libc::c_int) {
                                result = 306i32;
                                tokadd(p, c);
                                tokfix(p);
                            } else { pushback(p, c); }
                        }
                        /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
                        if result == 0i32 &&
                               (*tok(p).offset(0isize) as
                                    libc::c_uint).wrapping_sub('A' as i32 as
                                                                   libc::c_uint)
                                   < 26i32 as libc::c_uint {
                            result = 310i32
                        } else { result = 306i32 }
                    }
                    if (*p).lstate as libc::c_uint ==
                           EXPR_BEG as libc::c_int as libc::c_uint &&
                           0 == cmd_state ||
                           ((*p).lstate as libc::c_uint ==
                                EXPR_ARG as libc::c_int as libc::c_uint ||
                                (*p).lstate as libc::c_uint ==
                                    EXPR_CMDARG as libc::c_int as
                                        libc::c_uint) {
                        if 0 != peek_n(p, ':' as i32, 0i32) as libc::c_int &&
                               0 == peek_n(p, ':' as i32, 0i32 + 1i32) {
                            (*p).lstate = EXPR_END;
                            tokfix(p);
                            (*((*p).ylval as *mut YYSTYPE)).id =
                                intern_cstr_gen(p, tok(p));
                            return 306i32
                        }
                    }
                    if (*p).lstate as libc::c_uint !=
                           EXPR_DOT as libc::c_int as libc::c_uint {
                        /* Count tokens shifted since error; after three, turn off error
     status.  */
                        let mut kw: *const kwtable = 0 as *const kwtable;
                        kw = mrb_reserved_word(tok(p), toklen(p) as size_t);
                        if !kw.is_null() {
                            /* Shift the look-ahead token.  */
                            let mut state: mrb_lex_state_enum = (*p).lstate;
                            (*((*p).ylval as *mut YYSTYPE)).num =
                                (*p).lineno as libc::c_int;
                            /* Discard the shifted token unless it is eof.  */
                            (*p).lstate = (*kw).state;
                            if state as libc::c_uint ==
                                   EXPR_FNAME as libc::c_int as libc::c_uint {
                                (*((*p).ylval as *mut YYSTYPE)).id =
                                    intern_cstr_gen(p, (*kw).name);
                                return (*kw).id[0usize]
                            }
                            if (*p).lstate as libc::c_uint ==
                                   EXPR_BEG as libc::c_int as libc::c_uint {
                                (*p).set_cmd_start(1i32 as mrb_bool)
                            }
                            if (*kw).id[0usize] == 281i32 {
                                if 0 != (*p).lpar_beg &&
                                       (*p).lpar_beg == (*p).paren_nest {
                                    /*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
                                    (*p).lpar_beg = 0i32;
                                    (*p).paren_nest -= 1;
                                    return 284i32
                                }
                                if 0 != (*p).cond_stack & 1i32 as libc::c_uint
                                   {
                                    return 282i32
                                }
                                if 0 !=
                                       (*p).cmdarg_stack &
                                           1i32 as libc::c_uint &&
                                       state as libc::c_uint !=
                                           EXPR_CMDARG as libc::c_int as
                                               libc::c_uint {
                                    return 283i32
                                }
                                if state as libc::c_uint ==
                                       EXPR_ENDARG as libc::c_int as
                                           libc::c_uint ||
                                       state as libc::c_uint ==
                                           EXPR_BEG as libc::c_int as
                                               libc::c_uint {
                                    return 283i32
                                }
                                return 281i32
                            }
                            /*-----------------------------.
| yyreduce -- Do a reduction.  |
`-----------------------------*/
                            if state as libc::c_uint ==
                                   EXPR_BEG as libc::c_int as libc::c_uint ||
                                   state as libc::c_uint ==
                                       EXPR_VALUE as libc::c_int as
                                           libc::c_uint {
                                return (*kw).id[0usize]
                            } else {
                                /* yyn is the number of a rule to reduce with.  */
                                if (*kw).id[0usize] != (*kw).id[1usize] {
                                    (*p).lstate = EXPR_BEG
                                }
                                return (*kw).id[1usize]
                            }
                        }
                    }
                    /* If YYLEN is nonzero, implement the default value of the action:
     `$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
                    if (*p).lstate as libc::c_uint ==
                           EXPR_BEG as libc::c_int as libc::c_uint ||
                           (*p).lstate as libc::c_uint ==
                               EXPR_MID as libc::c_int as libc::c_uint ||
                           (*p).lstate as libc::c_uint ==
                               EXPR_VALUE as libc::c_int as libc::c_uint ||
                           (*p).lstate as libc::c_uint ==
                               EXPR_CLASS as libc::c_int as libc::c_uint ||
                           (*p).lstate as libc::c_uint ==
                               EXPR_DOT as libc::c_int as libc::c_uint ||
                           ((*p).lstate as libc::c_uint ==
                                EXPR_ARG as libc::c_int as libc::c_uint ||
                                (*p).lstate as libc::c_uint ==
                                    EXPR_CMDARG as libc::c_int as
                                        libc::c_uint) {
                        if 0 != cmd_state {
                            (*p).lstate = EXPR_CMDARG
                        } else { (*p).lstate = EXPR_ARG }
                    } else if (*p).lstate as libc::c_uint ==
                                  EXPR_FNAME as libc::c_int as libc::c_uint {
                        (*p).lstate = EXPR_ENDFN
                    } else { (*p).lstate = EXPR_END }
                }
            }
            let mut ident: mrb_sym = intern_cstr_gen(p, tok(p));
            (*((*p).ylval as *mut YYSTYPE)).id = ident;
            if last_state as libc::c_uint !=
                   EXPR_DOT as libc::c_int as libc::c_uint &&
                   (*tok(p).offset(0isize) as
                        libc::c_uint).wrapping_sub('a' as i32 as libc::c_uint)
                       < 26i32 as libc::c_uint &&
                   0 != local_var_p(p, ident) as libc::c_int {
                (*p).lstate = EXPR_END
            }
            return result
        }
        15373261056328880654 => {
            /* $!: error string */
            current_block = 4479470245541939736;
        }
        _ => { }
    }
    match current_block {
        14605591309277955022 => {
            tokfix(p);
            (*((*p).ylval as *mut YYSTYPE)).id = intern_cstr_gen(p, tok(p));
            return 308i32
        }
        4479470245541939736 => {
            /* $@: error position */
            current_block = 9563549857889416738;
        }
        _ => { }
    }
    match current_block {
        9563549857889416738 => {
            /* $/: input record separator */
            current_block = 17988390420433690458;
        }
        _ => { }
    }
    match current_block {
        17988390420433690458 => {
            /* $\: output record separator */
            current_block = 6773730138789497468;
        }
        _ => { }
    }
    match current_block {
        6773730138789497468 => {
            /* Number of tokens to shift before error messages enabled.  */
            /* $;: field separator */
            current_block = 8607439262380887446;
        }
        _ => { }
    }
    match current_block {
        8607439262380887446 => {
            /* $,: output field separator */
            current_block = 14755719952959066985;
        }
        _ => { }
    }
    match current_block {
        14755719952959066985 => {
            /* Look-ahead token as an internal (translated) token number.  */
            /* $.: last read line number */
            current_block = 10155863893342675314;
        }
        _ => { }
    }
    match current_block {
        10155863893342675314 => {
            /* $=: ignorecase */
            current_block = 10760593051861821346;
        }
        _ => { }
    }
    match current_block {
        10760593051861821346 => {
            /* $:: load path */
            current_block = 701105375540096061;
        }
        _ => { }
    }
    match current_block {
        701105375540096061 => {
            /* Buffer for error messages, and its allocated size.  */
            /* $<: reading filename */
            current_block = 5521344687656319167;
        }
        _ => { }
    }
    match current_block {
        5521344687656319167 => {
            /* $>: default output handle */
            current_block = 3739515766133103849;
        }
        _ => { }
    }
    match current_block { 3739515766133103849 => { } _ => { } }
    /* $": already loaded files */
    tokadd(p, '$' as i32);
    tokadd(p, c);
    tokfix(p);
    /* Three stacks and their tools:
     `yyss': related to states,
     `yyvs': related to semantic values,
     `yyls': related to locations.

     Refer to the stacks thru separate pointers, to allow yyoverflow
     to reallocate them elsewhere.  */
    (*((*p).ylval as *mut YYSTYPE)).id = intern_cstr_gen(p, tok(p));
    return 308i32;
}
static mut yystos: [yytype_uint16; 1026] =
    [0i32 as yytype_uint16, 147i32 as yytype_uint16, 148i32 as yytype_uint16,
     0i32 as yytype_uint16, 1i32 as yytype_uint16, 3i32 as yytype_uint16,
     4i32 as yytype_uint16, 5i32 as yytype_uint16, 6i32 as yytype_uint16,
     7i32 as yytype_uint16, 8i32 as yytype_uint16, 9i32 as yytype_uint16,
     10i32 as yytype_uint16, 11i32 as yytype_uint16, 12i32 as yytype_uint16,
     19i32 as yytype_uint16, 21i32 as yytype_uint16, 22i32 as yytype_uint16,
     23i32 as yytype_uint16, 24i32 as yytype_uint16, 30i32 as yytype_uint16,
     31i32 as yytype_uint16, 32i32 as yytype_uint16, 33i32 as yytype_uint16,
     34i32 as yytype_uint16, 35i32 as yytype_uint16, 36i32 as yytype_uint16,
     39i32 as yytype_uint16, 45i32 as yytype_uint16, 46i32 as yytype_uint16,
     47i32 as yytype_uint16, 48i32 as yytype_uint16, 49i32 as yytype_uint16,
     50i32 as yytype_uint16, 51i32 as yytype_uint16, 52i32 as yytype_uint16,
     53i32 as yytype_uint16, 54i32 as yytype_uint16, 55i32 as yytype_uint16,
     56i32 as yytype_uint16, 58i32 as yytype_uint16, 59i32 as yytype_uint16,
     60i32 as yytype_uint16, 63i32 as yytype_uint16, 66i32 as yytype_uint16,
     67i32 as yytype_uint16, 69i32 as yytype_uint16, 70i32 as yytype_uint16,
     89i32 as yytype_uint16, 92i32 as yytype_uint16, 93i32 as yytype_uint16,
     95i32 as yytype_uint16, 96i32 as yytype_uint16, 98i32 as yytype_uint16,
     101i32 as yytype_uint16, 103i32 as yytype_uint16,
     104i32 as yytype_uint16, 105i32 as yytype_uint16,
     106i32 as yytype_uint16, 107i32 as yytype_uint16,
     108i32 as yytype_uint16, 111i32 as yytype_uint16,
     131i32 as yytype_uint16, 132i32 as yytype_uint16,
     133i32 as yytype_uint16, 149i32 as yytype_uint16,
     150i32 as yytype_uint16, 151i32 as yytype_uint16,
     156i32 as yytype_uint16, 158i32 as yytype_uint16,
     160i32 as yytype_uint16, 162i32 as yytype_uint16,
     163i32 as yytype_uint16, 166i32 as yytype_uint16,
     167i32 as yytype_uint16, 169i32 as yytype_uint16,
     170i32 as yytype_uint16, 171i32 as yytype_uint16,
     173i32 as yytype_uint16, 174i32 as yytype_uint16,
     183i32 as yytype_uint16, 197i32 as yytype_uint16,
     218i32 as yytype_uint16, 239i32 as yytype_uint16,
     240i32 as yytype_uint16, 250i32 as yytype_uint16,
     251i32 as yytype_uint16, 252i32 as yytype_uint16,
     256i32 as yytype_uint16, 257i32 as yytype_uint16,
     258i32 as yytype_uint16, 264i32 as yytype_uint16,
     265i32 as yytype_uint16, 266i32 as yytype_uint16,
     268i32 as yytype_uint16, 269i32 as yytype_uint16,
     270i32 as yytype_uint16, 271i32 as yytype_uint16,
     272i32 as yytype_uint16, 273i32 as yytype_uint16,
     307i32 as yytype_uint16, 321i32 as yytype_uint16,
     151i32 as yytype_uint16, 21i32 as yytype_uint16, 22i32 as yytype_uint16,
     30i32 as yytype_uint16, 31i32 as yytype_uint16, 32i32 as yytype_uint16,
     39i32 as yytype_uint16, 51i32 as yytype_uint16, 55i32 as yytype_uint16,
     86i32 as yytype_uint16, 89i32 as yytype_uint16, 92i32 as yytype_uint16,
     131i32 as yytype_uint16, 175i32 as yytype_uint16,
     176i32 as yytype_uint16, 197i32 as yytype_uint16,
     218i32 as yytype_uint16, 270i32 as yytype_uint16,
     273i32 as yytype_uint16, 307i32 as yytype_uint16,
     176i32 as yytype_uint16, 3i32 as yytype_uint16, 4i32 as yytype_uint16,
     5i32 as yytype_uint16, 6i32 as yytype_uint16, 7i32 as yytype_uint16,
     8i32 as yytype_uint16, 9i32 as yytype_uint16, 10i32 as yytype_uint16,
     11i32 as yytype_uint16, 12i32 as yytype_uint16, 13i32 as yytype_uint16,
     14i32 as yytype_uint16, 15i32 as yytype_uint16, 16i32 as yytype_uint16,
     17i32 as yytype_uint16, 18i32 as yytype_uint16, 19i32 as yytype_uint16,
     20i32 as yytype_uint16, 21i32 as yytype_uint16, 22i32 as yytype_uint16,
     23i32 as yytype_uint16, 24i32 as yytype_uint16, 25i32 as yytype_uint16,
     26i32 as yytype_uint16, 30i32 as yytype_uint16, 31i32 as yytype_uint16,
     32i32 as yytype_uint16, 33i32 as yytype_uint16, 34i32 as yytype_uint16,
     35i32 as yytype_uint16, 36i32 as yytype_uint16, 37i32 as yytype_uint16,
     38i32 as yytype_uint16, 39i32 as yytype_uint16, 45i32 as yytype_uint16,
     46i32 as yytype_uint16, 47i32 as yytype_uint16, 48i32 as yytype_uint16,
     49i32 as yytype_uint16, 50i32 as yytype_uint16, 51i32 as yytype_uint16,
     52i32 as yytype_uint16, 55i32 as yytype_uint16, 69i32 as yytype_uint16,
     70i32 as yytype_uint16, 71i32 as yytype_uint16, 72i32 as yytype_uint16,
     73i32 as yytype_uint16, 74i32 as yytype_uint16, 75i32 as yytype_uint16,
     76i32 as yytype_uint16, 77i32 as yytype_uint16, 80i32 as yytype_uint16,
     81i32 as yytype_uint16, 84i32 as yytype_uint16, 85i32 as yytype_uint16,
     86i32 as yytype_uint16, 87i32 as yytype_uint16, 98i32 as yytype_uint16,
     99i32 as yytype_uint16, 121i32 as yytype_uint16, 122i32 as yytype_uint16,
     123i32 as yytype_uint16, 124i32 as yytype_uint16,
     125i32 as yytype_uint16, 126i32 as yytype_uint16,
     127i32 as yytype_uint16, 128i32 as yytype_uint16,
     129i32 as yytype_uint16, 130i32 as yytype_uint16,
     132i32 as yytype_uint16, 133i32 as yytype_uint16,
     139i32 as yytype_uint16, 140i32 as yytype_uint16,
     177i32 as yytype_uint16, 181i32 as yytype_uint16,
     182i32 as yytype_uint16, 272i32 as yytype_uint16,
     302i32 as yytype_uint16, 198i32 as yytype_uint16, 89i32 as yytype_uint16,
     160i32 as yytype_uint16, 161i32 as yytype_uint16,
     174i32 as yytype_uint16, 218i32 as yytype_uint16,
     270i32 as yytype_uint16, 271i32 as yytype_uint16,
     273i32 as yytype_uint16, 161i32 as yytype_uint16,
     204i32 as yytype_uint16, 206i32 as yytype_uint16, 89i32 as yytype_uint16,
     167i32 as yytype_uint16, 174i32 as yytype_uint16,
     218i32 as yytype_uint16, 223i32 as yytype_uint16,
     270i32 as yytype_uint16, 273i32 as yytype_uint16, 33i32 as yytype_uint16,
     34i32 as yytype_uint16, 35i32 as yytype_uint16, 36i32 as yytype_uint16,
     48i32 as yytype_uint16, 49i32 as yytype_uint16, 50i32 as yytype_uint16,
     51i32 as yytype_uint16, 55i32 as yytype_uint16, 103i32 as yytype_uint16,
     177i32 as yytype_uint16, 178i32 as yytype_uint16,
     179i32 as yytype_uint16, 266i32 as yytype_uint16,
     112i32 as yytype_uint16, 115i32 as yytype_uint16,
     116i32 as yytype_uint16, 143i32 as yytype_uint16,
     145i32 as yytype_uint16, 161i32 as yytype_uint16,
     260i32 as yytype_uint16, 261i32 as yytype_uint16,
     262i32 as yytype_uint16, 313i32 as yytype_uint16,
     318i32 as yytype_uint16, 319i32 as yytype_uint16,
     320i32 as yytype_uint16, 51i32 as yytype_uint16, 98i32 as yytype_uint16,
     99i32 as yytype_uint16, 100i32 as yytype_uint16, 132i32 as yytype_uint16,
     166i32 as yytype_uint16, 183i32 as yytype_uint16,
     189i32 as yytype_uint16, 192i32 as yytype_uint16,
     195i32 as yytype_uint16, 252i32 as yytype_uint16,
     305i32 as yytype_uint16, 306i32 as yytype_uint16,
     189i32 as yytype_uint16, 189i32 as yytype_uint16,
     140i32 as yytype_uint16, 186i32 as yytype_uint16,
     187i32 as yytype_uint16, 190i32 as yytype_uint16,
     191i32 as yytype_uint16, 321i32 as yytype_uint16,
     186i32 as yytype_uint16, 190i32 as yytype_uint16,
     140i32 as yytype_uint16, 314i32 as yytype_uint16,
     319i32 as yytype_uint16, 178i32 as yytype_uint16,
     152i32 as yytype_uint16, 135i32 as yytype_uint16,
     183i32 as yytype_uint16, 218i32 as yytype_uint16,
     183i32 as yytype_uint16, 55i32 as yytype_uint16, 1i32 as yytype_uint16,
     92i32 as yytype_uint16, 154i32 as yytype_uint16, 155i32 as yytype_uint16,
     156i32 as yytype_uint16, 168i32 as yytype_uint16,
     169i32 as yytype_uint16, 321i32 as yytype_uint16,
     199i32 as yytype_uint16, 201i32 as yytype_uint16,
     184i32 as yytype_uint16, 195i32 as yytype_uint16,
     305i32 as yytype_uint16, 321i32 as yytype_uint16,
     183i32 as yytype_uint16, 304i32 as yytype_uint16,
     305i32 as yytype_uint16, 321i32 as yytype_uint16, 89i32 as yytype_uint16,
     138i32 as yytype_uint16, 173i32 as yytype_uint16,
     218i32 as yytype_uint16, 270i32 as yytype_uint16,
     273i32 as yytype_uint16, 202i32 as yytype_uint16, 53i32 as yytype_uint16,
     54i32 as yytype_uint16, 56i32 as yytype_uint16, 63i32 as yytype_uint16,
     107i32 as yytype_uint16, 177i32 as yytype_uint16,
     267i32 as yytype_uint16, 62i32 as yytype_uint16, 64i32 as yytype_uint16,
     65i32 as yytype_uint16, 113i32 as yytype_uint16, 114i32 as yytype_uint16,
     253i32 as yytype_uint16, 254i32 as yytype_uint16, 63i32 as yytype_uint16,
     253i32 as yytype_uint16, 63i32 as yytype_uint16, 253i32 as yytype_uint16,
     63i32 as yytype_uint16, 253i32 as yytype_uint16, 61i32 as yytype_uint16,
     253i32 as yytype_uint16, 58i32 as yytype_uint16, 59i32 as yytype_uint16,
     162i32 as yytype_uint16, 183i32 as yytype_uint16,
     183i32 as yytype_uint16, 313i32 as yytype_uint16,
     320i32 as yytype_uint16, 40i32 as yytype_uint16, 41i32 as yytype_uint16,
     42i32 as yytype_uint16, 43i32 as yytype_uint16, 44i32 as yytype_uint16,
     37i32 as yytype_uint16, 38i32 as yytype_uint16, 28i32 as yytype_uint16,
     237i32 as yytype_uint16, 118i32 as yytype_uint16,
     138i32 as yytype_uint16, 92i32 as yytype_uint16, 98i32 as yytype_uint16,
     170i32 as yytype_uint16, 118i32 as yytype_uint16, 71i32 as yytype_uint16,
     72i32 as yytype_uint16, 73i32 as yytype_uint16, 74i32 as yytype_uint16,
     75i32 as yytype_uint16, 76i32 as yytype_uint16, 77i32 as yytype_uint16,
     78i32 as yytype_uint16, 79i32 as yytype_uint16, 80i32 as yytype_uint16,
     81i32 as yytype_uint16, 82i32 as yytype_uint16, 83i32 as yytype_uint16,
     86i32 as yytype_uint16, 87i32 as yytype_uint16, 119i32 as yytype_uint16,
     121i32 as yytype_uint16, 122i32 as yytype_uint16,
     123i32 as yytype_uint16, 124i32 as yytype_uint16,
     125i32 as yytype_uint16, 126i32 as yytype_uint16,
     127i32 as yytype_uint16, 128i32 as yytype_uint16,
     129i32 as yytype_uint16, 130i32 as yytype_uint16, 88i32 as yytype_uint16,
     102i32 as yytype_uint16, 137i32 as yytype_uint16,
     144i32 as yytype_uint16, 311i32 as yytype_uint16, 88i32 as yytype_uint16,
     311i32 as yytype_uint16, 312i32 as yytype_uint16, 26i32 as yytype_uint16,
     135i32 as yytype_uint16, 241i32 as yytype_uint16,
     252i32 as yytype_uint16, 90i32 as yytype_uint16, 90i32 as yytype_uint16,
     186i32 as yytype_uint16, 190i32 as yytype_uint16,
     241i32 as yytype_uint16, 160i32 as yytype_uint16, 51i32 as yytype_uint16,
     55i32 as yytype_uint16, 175i32 as yytype_uint16, 58i32 as yytype_uint16,
     59i32 as yytype_uint16, 122i32 as yytype_uint16, 274i32 as yytype_uint16,
     88i32 as yytype_uint16, 137i32 as yytype_uint16, 311i32 as yytype_uint16,
     213i32 as yytype_uint16, 303i32 as yytype_uint16,
     214i32 as yytype_uint16, 88i32 as yytype_uint16, 144i32 as yytype_uint16,
     310i32 as yytype_uint16, 153i32 as yytype_uint16,
     154i32 as yytype_uint16, 55i32 as yytype_uint16, 16i32 as yytype_uint16,
     219i32 as yytype_uint16, 318i32 as yytype_uint16,
     118i32 as yytype_uint16, 88i32 as yytype_uint16, 137i32 as yytype_uint16,
     311i32 as yytype_uint16, 90i32 as yytype_uint16, 90i32 as yytype_uint16,
     219i32 as yytype_uint16, 161i32 as yytype_uint16,
     161i32 as yytype_uint16, 55i32 as yytype_uint16, 88i32 as yytype_uint16,
     137i32 as yytype_uint16, 311i32 as yytype_uint16, 25i32 as yytype_uint16,
     107i32 as yytype_uint16, 138i32 as yytype_uint16,
     263i32 as yytype_uint16, 313i32 as yytype_uint16,
     112i32 as yytype_uint16, 262i32 as yytype_uint16, 20i32 as yytype_uint16,
     244i32 as yytype_uint16, 318i32 as yytype_uint16, 57i32 as yytype_uint16,
     183i32 as yytype_uint16, 183i32 as yytype_uint16,
     183i32 as yytype_uint16, 91i32 as yytype_uint16, 138i32 as yytype_uint16,
     193i32 as yytype_uint16, 194i32 as yytype_uint16,
     321i32 as yytype_uint16, 57i32 as yytype_uint16, 138i32 as yytype_uint16,
     193i32 as yytype_uint16, 194i32 as yytype_uint16,
     188i32 as yytype_uint16, 189i32 as yytype_uint16,
     195i32 as yytype_uint16, 305i32 as yytype_uint16,
     321i32 as yytype_uint16, 189i32 as yytype_uint16,
     160i32 as yytype_uint16, 314i32 as yytype_uint16,
     315i32 as yytype_uint16, 160i32 as yytype_uint16,
     157i32 as yytype_uint16, 135i32 as yytype_uint16,
     154i32 as yytype_uint16, 88i32 as yytype_uint16, 311i32 as yytype_uint16,
     90i32 as yytype_uint16, 156i32 as yytype_uint16, 168i32 as yytype_uint16,
     141i32 as yytype_uint16, 313i32 as yytype_uint16,
     320i32 as yytype_uint16, 315i32 as yytype_uint16,
     156i32 as yytype_uint16, 315i32 as yytype_uint16,
     142i32 as yytype_uint16, 194i32 as yytype_uint16,
     317i32 as yytype_uint16, 319i32 as yytype_uint16,
     194i32 as yytype_uint16, 317i32 as yytype_uint16,
     136i32 as yytype_uint16, 317i32 as yytype_uint16, 55i32 as yytype_uint16,
     170i32 as yytype_uint16, 171i32 as yytype_uint16,
     172i32 as yytype_uint16, 138i32 as yytype_uint16, 88i32 as yytype_uint16,
     137i32 as yytype_uint16, 311i32 as yytype_uint16, 51i32 as yytype_uint16,
     53i32 as yytype_uint16, 54i32 as yytype_uint16, 55i32 as yytype_uint16,
     56i32 as yytype_uint16, 71i32 as yytype_uint16, 92i32 as yytype_uint16,
     98i32 as yytype_uint16, 99i32 as yytype_uint16, 100i32 as yytype_uint16,
     125i32 as yytype_uint16, 128i32 as yytype_uint16,
     140i32 as yytype_uint16, 235i32 as yytype_uint16,
     277i32 as yytype_uint16, 278i32 as yytype_uint16,
     281i32 as yytype_uint16, 282i32 as yytype_uint16,
     283i32 as yytype_uint16, 284i32 as yytype_uint16,
     286i32 as yytype_uint16, 287i32 as yytype_uint16,
     288i32 as yytype_uint16, 289i32 as yytype_uint16,
     291i32 as yytype_uint16, 292i32 as yytype_uint16,
     293i32 as yytype_uint16, 296i32 as yytype_uint16,
     297i32 as yytype_uint16, 298i32 as yytype_uint16,
     299i32 as yytype_uint16, 300i32 as yytype_uint16, 63i32 as yytype_uint16,
     253i32 as yytype_uint16, 255i32 as yytype_uint16,
     259i32 as yytype_uint16, 260i32 as yytype_uint16, 62i32 as yytype_uint16,
     254i32 as yytype_uint16, 63i32 as yytype_uint16, 63i32 as yytype_uint16,
     63i32 as yytype_uint16, 61i32 as yytype_uint16, 71i32 as yytype_uint16,
     71i32 as yytype_uint16, 151i32 as yytype_uint16, 161i32 as yytype_uint16,
     161i32 as yytype_uint16, 161i32 as yytype_uint16,
     161i32 as yytype_uint16, 156i32 as yytype_uint16,
     160i32 as yytype_uint16, 160i32 as yytype_uint16,
     238i32 as yytype_uint16, 98i32 as yytype_uint16, 162i32 as yytype_uint16,
     183i32 as yytype_uint16, 195i32 as yytype_uint16,
     196i32 as yytype_uint16, 168i32 as yytype_uint16,
     138i32 as yytype_uint16, 173i32 as yytype_uint16,
     138i32 as yytype_uint16, 158i32 as yytype_uint16,
     159i32 as yytype_uint16, 162i32 as yytype_uint16,
     174i32 as yytype_uint16, 183i32 as yytype_uint16,
     185i32 as yytype_uint16, 196i32 as yytype_uint16,
     218i32 as yytype_uint16, 273i32 as yytype_uint16,
     183i32 as yytype_uint16, 183i32 as yytype_uint16,
     183i32 as yytype_uint16, 183i32 as yytype_uint16,
     183i32 as yytype_uint16, 183i32 as yytype_uint16,
     183i32 as yytype_uint16, 183i32 as yytype_uint16,
     183i32 as yytype_uint16, 183i32 as yytype_uint16,
     183i32 as yytype_uint16, 183i32 as yytype_uint16,
     183i32 as yytype_uint16, 183i32 as yytype_uint16,
     183i32 as yytype_uint16, 183i32 as yytype_uint16,
     183i32 as yytype_uint16, 183i32 as yytype_uint16,
     183i32 as yytype_uint16, 183i32 as yytype_uint16,
     183i32 as yytype_uint16, 183i32 as yytype_uint16,
     183i32 as yytype_uint16, 183i32 as yytype_uint16,
     183i32 as yytype_uint16, 183i32 as yytype_uint16, 51i32 as yytype_uint16,
     52i32 as yytype_uint16, 55i32 as yytype_uint16, 181i32 as yytype_uint16,
     186i32 as yytype_uint16, 308i32 as yytype_uint16,
     309i32 as yytype_uint16, 188i32 as yytype_uint16, 51i32 as yytype_uint16,
     52i32 as yytype_uint16, 55i32 as yytype_uint16, 181i32 as yytype_uint16,
     186i32 as yytype_uint16, 308i32 as yytype_uint16, 51i32 as yytype_uint16,
     55i32 as yytype_uint16, 308i32 as yytype_uint16, 243i32 as yytype_uint16,
     242i32 as yytype_uint16, 159i32 as yytype_uint16,
     183i32 as yytype_uint16, 185i32 as yytype_uint16,
     159i32 as yytype_uint16, 185i32 as yytype_uint16, 97i32 as yytype_uint16,
     164i32 as yytype_uint16, 211i32 as yytype_uint16,
     275i32 as yytype_uint16, 210i32 as yytype_uint16, 51i32 as yytype_uint16,
     55i32 as yytype_uint16, 175i32 as yytype_uint16, 308i32 as yytype_uint16,
     188i32 as yytype_uint16, 308i32 as yytype_uint16,
     153i32 as yytype_uint16, 160i32 as yytype_uint16,
     215i32 as yytype_uint16, 216i32 as yytype_uint16, 15i32 as yytype_uint16,
     13i32 as yytype_uint16, 246i32 as yytype_uint16, 321i32 as yytype_uint16,
     154i32 as yytype_uint16, 16i32 as yytype_uint16, 51i32 as yytype_uint16,
     55i32 as yytype_uint16, 188i32 as yytype_uint16, 51i32 as yytype_uint16,
     55i32 as yytype_uint16, 154i32 as yytype_uint16, 27i32 as yytype_uint16,
     220i32 as yytype_uint16, 318i32 as yytype_uint16,
     220i32 as yytype_uint16, 51i32 as yytype_uint16, 55i32 as yytype_uint16,
     188i32 as yytype_uint16, 51i32 as yytype_uint16, 55i32 as yytype_uint16,
     208i32 as yytype_uint16, 180i32 as yytype_uint16,
     154i32 as yytype_uint16, 244i32 as yytype_uint16,
     183i32 as yytype_uint16, 195i32 as yytype_uint16, 15i32 as yytype_uint16,
     183i32 as yytype_uint16, 183i32 as yytype_uint16,
     259i32 as yytype_uint16, 98i32 as yytype_uint16, 183i32 as yytype_uint16,
     192i32 as yytype_uint16, 305i32 as yytype_uint16,
     183i32 as yytype_uint16, 306i32 as yytype_uint16,
     315i32 as yytype_uint16, 138i32 as yytype_uint16,
     194i32 as yytype_uint16, 138i32 as yytype_uint16,
     315i32 as yytype_uint16, 141i32 as yytype_uint16,
     178i32 as yytype_uint16, 149i32 as yytype_uint16,
     136i32 as yytype_uint16, 185i32 as yytype_uint16,
     315i32 as yytype_uint16, 156i32 as yytype_uint16,
     200i32 as yytype_uint16, 305i32 as yytype_uint16,
     170i32 as yytype_uint16, 172i32 as yytype_uint16, 51i32 as yytype_uint16,
     55i32 as yytype_uint16, 188i32 as yytype_uint16, 51i32 as yytype_uint16,
     55i32 as yytype_uint16, 57i32 as yytype_uint16, 118i32 as yytype_uint16,
     290i32 as yytype_uint16, 286i32 as yytype_uint16,
     203i32 as yytype_uint16, 183i32 as yytype_uint16,
     138i32 as yytype_uint16, 301i32 as yytype_uint16,
     321i32 as yytype_uint16, 51i32 as yytype_uint16, 138i32 as yytype_uint16,
     301i32 as yytype_uint16, 138i32 as yytype_uint16,
     285i32 as yytype_uint16, 183i32 as yytype_uint16,
     138i32 as yytype_uint16, 285i32 as yytype_uint16, 51i32 as yytype_uint16,
     138i32 as yytype_uint16, 285i32 as yytype_uint16, 51i32 as yytype_uint16,
     63i32 as yytype_uint16, 154i32 as yytype_uint16, 260i32 as yytype_uint16,
     183i32 as yytype_uint16, 183i32 as yytype_uint16, 79i32 as yytype_uint16,
     123i32 as yytype_uint16, 229i32 as yytype_uint16,
     230i32 as yytype_uint16, 321i32 as yytype_uint16,
     183i32 as yytype_uint16, 194i32 as yytype_uint16,
     315i32 as yytype_uint16, 172i32 as yytype_uint16,
     138i32 as yytype_uint16, 44i32 as yytype_uint16, 118i32 as yytype_uint16,
     44i32 as yytype_uint16, 88i32 as yytype_uint16, 137i32 as yytype_uint16,
     311i32 as yytype_uint16, 314i32 as yytype_uint16, 90i32 as yytype_uint16,
     90i32 as yytype_uint16, 186i32 as yytype_uint16, 190i32 as yytype_uint16,
     314i32 as yytype_uint16, 316i32 as yytype_uint16, 90i32 as yytype_uint16,
     90i32 as yytype_uint16, 187i32 as yytype_uint16, 190i32 as yytype_uint16,
     187i32 as yytype_uint16, 190i32 as yytype_uint16,
     229i32 as yytype_uint16, 229i32 as yytype_uint16,
     165i32 as yytype_uint16, 318i32 as yytype_uint16,
     161i32 as yytype_uint16, 153i32 as yytype_uint16,
     316i32 as yytype_uint16, 15i32 as yytype_uint16, 315i32 as yytype_uint16,
     140i32 as yytype_uint16, 276i32 as yytype_uint16,
     286i32 as yytype_uint16, 177i32 as yytype_uint16,
     183i32 as yytype_uint16, 196i32 as yytype_uint16,
     247i32 as yytype_uint16, 321i32 as yytype_uint16, 18i32 as yytype_uint16,
     222i32 as yytype_uint16, 321i32 as yytype_uint16, 17i32 as yytype_uint16,
     221i32 as yytype_uint16, 222i32 as yytype_uint16, 90i32 as yytype_uint16,
     90i32 as yytype_uint16, 316i32 as yytype_uint16, 90i32 as yytype_uint16,
     90i32 as yytype_uint16, 222i32 as yytype_uint16, 205i32 as yytype_uint16,
     207i32 as yytype_uint16, 316i32 as yytype_uint16,
     161i32 as yytype_uint16, 178i32 as yytype_uint16,
     136i32 as yytype_uint16, 15i32 as yytype_uint16, 194i32 as yytype_uint16,
     219i32 as yytype_uint16, 183i32 as yytype_uint16,
     193i32 as yytype_uint16, 305i32 as yytype_uint16,
     136i32 as yytype_uint16, 315i32 as yytype_uint16,
     317i32 as yytype_uint16, 316i32 as yytype_uint16, 51i32 as yytype_uint16,
     98i32 as yytype_uint16, 224i32 as yytype_uint16, 291i32 as yytype_uint16,
     232i32 as yytype_uint16, 314i32 as yytype_uint16, 29i32 as yytype_uint16,
     110i32 as yytype_uint16, 236i32 as yytype_uint16, 51i32 as yytype_uint16,
     278i32 as yytype_uint16, 283i32 as yytype_uint16,
     300i32 as yytype_uint16, 284i32 as yytype_uint16,
     289i32 as yytype_uint16, 296i32 as yytype_uint16,
     298i32 as yytype_uint16, 291i32 as yytype_uint16,
     293i32 as yytype_uint16, 298i32 as yytype_uint16, 51i32 as yytype_uint16,
     291i32 as yytype_uint16, 136i32 as yytype_uint16,
     226i32 as yytype_uint16, 228i32 as yytype_uint16,
     231i32 as yytype_uint16, 277i32 as yytype_uint16,
     279i32 as yytype_uint16, 280i32 as yytype_uint16,
     283i32 as yytype_uint16, 291i32 as yytype_uint16,
     292i32 as yytype_uint16, 294i32 as yytype_uint16,
     295i32 as yytype_uint16, 298i32 as yytype_uint16,
     300i32 as yytype_uint16, 153i32 as yytype_uint16, 98i32 as yytype_uint16,
     183i32 as yytype_uint16, 172i32 as yytype_uint16,
     156i32 as yytype_uint16, 183i32 as yytype_uint16, 51i32 as yytype_uint16,
     55i32 as yytype_uint16, 188i32 as yytype_uint16, 51i32 as yytype_uint16,
     55i32 as yytype_uint16, 57i32 as yytype_uint16, 120i32 as yytype_uint16,
     159i32 as yytype_uint16, 185i32 as yytype_uint16,
     162i32 as yytype_uint16, 185i32 as yytype_uint16,
     164i32 as yytype_uint16, 142i32 as yytype_uint16, 90i32 as yytype_uint16,
     159i32 as yytype_uint16, 185i32 as yytype_uint16,
     159i32 as yytype_uint16, 185i32 as yytype_uint16,
     164i32 as yytype_uint16, 241i32 as yytype_uint16,
     237i32 as yytype_uint16, 153i32 as yytype_uint16,
     154i32 as yytype_uint16, 229i32 as yytype_uint16,
     212i32 as yytype_uint16, 318i32 as yytype_uint16, 15i32 as yytype_uint16,
     286i32 as yytype_uint16, 153i32 as yytype_uint16,
     318i32 as yytype_uint16, 217i32 as yytype_uint16, 91i32 as yytype_uint16,
     248i32 as yytype_uint16, 321i32 as yytype_uint16,
     154i32 as yytype_uint16, 14i32 as yytype_uint16, 249i32 as yytype_uint16,
     321i32 as yytype_uint16, 161i32 as yytype_uint16, 15i32 as yytype_uint16,
     90i32 as yytype_uint16, 15i32 as yytype_uint16, 154i32 as yytype_uint16,
     154i32 as yytype_uint16, 220i32 as yytype_uint16,
     183i32 as yytype_uint16, 154i32 as yytype_uint16,
     138i32 as yytype_uint16, 138i32 as yytype_uint16,
     288i32 as yytype_uint16, 315i32 as yytype_uint16,
     138i32 as yytype_uint16, 141i32 as yytype_uint16,
     143i32 as yytype_uint16, 153i32 as yytype_uint16,
     154i32 as yytype_uint16, 301i32 as yytype_uint16,
     138i32 as yytype_uint16, 285i32 as yytype_uint16,
     138i32 as yytype_uint16, 285i32 as yytype_uint16,
     138i32 as yytype_uint16, 285i32 as yytype_uint16,
     138i32 as yytype_uint16, 285i32 as yytype_uint16,
     285i32 as yytype_uint16, 232i32 as yytype_uint16,
     232i32 as yytype_uint16, 89i32 as yytype_uint16, 218i32 as yytype_uint16,
     138i32 as yytype_uint16, 301i32 as yytype_uint16,
     301i32 as yytype_uint16, 138i32 as yytype_uint16,
     227i32 as yytype_uint16, 218i32 as yytype_uint16,
     138i32 as yytype_uint16, 227i32 as yytype_uint16,
     138i32 as yytype_uint16, 227i32 as yytype_uint16, 15i32 as yytype_uint16,
     183i32 as yytype_uint16, 316i32 as yytype_uint16,
     183i32 as yytype_uint16, 183i32 as yytype_uint16,
     159i32 as yytype_uint16, 185i32 as yytype_uint16, 15i32 as yytype_uint16,
     136i32 as yytype_uint16, 154i32 as yytype_uint16,
     153i32 as yytype_uint16, 315i32 as yytype_uint16, 15i32 as yytype_uint16,
     276i32 as yytype_uint16, 89i32 as yytype_uint16, 174i32 as yytype_uint16,
     218i32 as yytype_uint16, 270i32 as yytype_uint16,
     273i32 as yytype_uint16, 219i32 as yytype_uint16,
     154i32 as yytype_uint16, 219i32 as yytype_uint16, 15i32 as yytype_uint16,
     15i32 as yytype_uint16, 209i32 as yytype_uint16, 222i32 as yytype_uint16,
     244i32 as yytype_uint16, 245i32 as yytype_uint16,
     225i32 as yytype_uint16, 138i32 as yytype_uint16, 98i32 as yytype_uint16,
     51i32 as yytype_uint16, 233i32 as yytype_uint16, 234i32 as yytype_uint16,
     287i32 as yytype_uint16, 15i32 as yytype_uint16, 136i32 as yytype_uint16,
     291i32 as yytype_uint16, 298i32 as yytype_uint16,
     291i32 as yytype_uint16, 291i32 as yytype_uint16,
     123i32 as yytype_uint16, 123i32 as yytype_uint16, 55i32 as yytype_uint16,
     88i32 as yytype_uint16, 279i32 as yytype_uint16, 283i32 as yytype_uint16,
     138i32 as yytype_uint16, 226i32 as yytype_uint16,
     227i32 as yytype_uint16, 295i32 as yytype_uint16,
     298i32 as yytype_uint16, 291i32 as yytype_uint16,
     294i32 as yytype_uint16, 298i32 as yytype_uint16,
     291i32 as yytype_uint16, 136i32 as yytype_uint16, 15i32 as yytype_uint16,
     153i32 as yytype_uint16, 55i32 as yytype_uint16, 88i32 as yytype_uint16,
     137i32 as yytype_uint16, 311i32 as yytype_uint16,
     154i32 as yytype_uint16, 154i32 as yytype_uint16,
     154i32 as yytype_uint16, 291i32 as yytype_uint16,
     291i32 as yytype_uint16, 138i32 as yytype_uint16,
     288i32 as yytype_uint16, 138i32 as yytype_uint16,
     314i32 as yytype_uint16, 285i32 as yytype_uint16,
     138i32 as yytype_uint16, 285i32 as yytype_uint16,
     285i32 as yytype_uint16, 285i32 as yytype_uint16, 51i32 as yytype_uint16,
     55i32 as yytype_uint16, 301i32 as yytype_uint16, 138i32 as yytype_uint16,
     227i32 as yytype_uint16, 138i32 as yytype_uint16,
     227i32 as yytype_uint16, 138i32 as yytype_uint16,
     227i32 as yytype_uint16, 138i32 as yytype_uint16,
     227i32 as yytype_uint16, 227i32 as yytype_uint16, 15i32 as yytype_uint16,
     51i32 as yytype_uint16, 55i32 as yytype_uint16, 188i32 as yytype_uint16,
     51i32 as yytype_uint16, 55i32 as yytype_uint16, 246i32 as yytype_uint16,
     221i32 as yytype_uint16, 15i32 as yytype_uint16, 138i32 as yytype_uint16,
     291i32 as yytype_uint16, 138i32 as yytype_uint16,
     234i32 as yytype_uint16, 291i32 as yytype_uint16,
     291i32 as yytype_uint16, 298i32 as yytype_uint16,
     291i32 as yytype_uint16, 291i32 as yytype_uint16,
     316i32 as yytype_uint16, 291i32 as yytype_uint16,
     285i32 as yytype_uint16, 227i32 as yytype_uint16,
     138i32 as yytype_uint16, 227i32 as yytype_uint16,
     227i32 as yytype_uint16, 227i32 as yytype_uint16,
     291i32 as yytype_uint16, 227i32 as yytype_uint16];
unsafe extern "C" fn yystrlen(mut yystr: *const libc::c_char)
 -> libc::c_ulong {
    let mut yylen: libc::c_ulong = 0;
    yylen = 0i32 as libc::c_ulong;
    while 0 != *yystr.offset(yylen as isize) { yylen = yylen.wrapping_add(1) }
    return yylen;
}
unsafe extern "C" fn yystpcpy(mut yydest: *mut libc::c_char,
                              mut yysrc: *const libc::c_char)
 -> *mut libc::c_char {
    let mut yyd: *mut libc::c_char = yydest;
    let mut yys: *const libc::c_char = yysrc;
    loop  {
        let fresh32 = yyd;
        yyd = yyd.offset(1);
        let fresh31 = yys;
        yys = yys.offset(1);
        *fresh32 = *fresh31;
        if !(*fresh32 as libc::c_int != '\u{0}' as i32) { break ; }
    }
    return yyd.offset(-1isize);
}
unsafe extern "C" fn yytnamerr(mut yyres: *mut libc::c_char,
                               mut yystr: *const libc::c_char)
 -> libc::c_ulong {
    if *yystr as libc::c_int == '\"' as i32 {
        let mut yyn: libc::c_ulong = 0i32 as libc::c_ulong;
        let mut yyp: *const libc::c_char = yystr;
        loop  {
            yyp = yyp.offset(1isize);
            match *yyp as libc::c_int {
                39 | 44 => { break ; }
                92 => {
                    yyp = yyp.offset(1isize);
                    if *yyp as libc::c_int != '\\' as i32 { break ; }
                }
                34 => {
                    /* Fall through.  */
                    if !yyres.is_null() {
                        *yyres.offset(yyn as isize) =
                            '\u{0}' as i32 as libc::c_char
                    }
                    return yyn
                }
                _ => { }
            }
            if !yyres.is_null() { *yyres.offset(yyn as isize) = *yyp }
            yyn = yyn.wrapping_add(1)
        }
    }
    if yyres.is_null() { return yystrlen(yystr) }
    return yystpcpy(yyres, yystr).wrapping_offset_from(yyres) as libc::c_long
               as libc::c_ulong;
}
unsafe extern "C" fn yysyntax_error(mut yyresult: *mut libc::c_char,
                                    mut yystate: libc::c_int,
                                    mut yychar: libc::c_int)
 -> libc::c_ulong {
    let mut yyn: libc::c_int = yypact[yystate as usize] as libc::c_int;
    if !(-826i32 < yyn && yyn <= 11645i32) {
        return 0i32 as libc::c_ulong
    } else {
        let mut yytype: libc::c_int =
            if yychar as libc::c_uint <= 374i32 as libc::c_uint {
                yytranslate[yychar as usize] as libc::c_int
            } else { 2i32 };
        let mut yysize0: libc::c_ulong =
            yytnamerr(0 as *mut libc::c_char, yytname[yytype as usize]);
        let mut yysize: libc::c_ulong = yysize0;
        let mut yysize1: libc::c_ulong = 0;
        let mut yysize_overflow: libc::c_int = 0i32;
        let mut yyarg: [*const libc::c_char; 5] =
            [0 as *const libc::c_char; 5];
        let mut yyx: libc::c_int = 0;
        let mut yyfmt: *mut libc::c_char = 0 as *mut libc::c_char;
        let mut yyf: *const libc::c_char = 0 as *const libc::c_char;
        static mut yyunexpected: [libc::c_char; 28] =
            [115, 121, 110, 116, 97, 120, 32, 101, 114, 114, 111, 114, 44, 32,
             117, 110, 101, 120, 112, 101, 99, 116, 101, 100, 32, 37, 115, 0];
        static mut yyexpecting: [libc::c_char; 15] =
            [44, 32, 101, 120, 112, 101, 99, 116, 105, 110, 103, 32, 37, 115,
             0];
        static mut yyor: [libc::c_char; 7] = [32, 111, 114, 32, 37, 115, 0];
        let mut yyformat: [libc::c_char; 60] = [0; 60];
        let mut yyprefix: *const libc::c_char = yyexpecting.as_ptr();
        let mut yyxbegin: libc::c_int = if yyn < 0i32 { -yyn } else { 0i32 };
        let mut yychecklim: libc::c_int = 11645i32 - yyn + 1i32;
        let mut yyxend: libc::c_int =
            if yychecklim < 146i32 { yychecklim } else { 146i32 };
        let mut yycount: libc::c_int = 1i32;
        yyarg[0usize] = yytname[yytype as usize];
        yyfmt = yystpcpy(yyformat.as_mut_ptr(), yyunexpected.as_ptr());
        yyx = yyxbegin;
        while yyx < yyxend {
            if yycheck[(yyx + yyn) as usize] as libc::c_int == yyx &&
                   yyx != 1i32 {
                if yycount == YYERROR_VERBOSE_ARGS_MAXIMUM as libc::c_int {
                    yycount = 1i32;
                    yysize = yysize0;
                    yyformat[(::std::mem::size_of::<[libc::c_char; 28]>() as
                                  libc::c_ulong).wrapping_sub(1i32 as
                                                                  libc::c_ulong)
                                 as usize] = '\u{0}' as i32 as libc::c_char;
                    break ;
                } else {
                    let fresh33 = yycount;
                    yycount = yycount + 1;
                    yyarg[fresh33 as usize] = yytname[yyx as usize];
                    yysize1 =
                        yysize.wrapping_add(yytnamerr(0 as *mut libc::c_char,
                                                      yytname[yyx as usize]));
                    yysize_overflow |= (yysize1 < yysize) as libc::c_int;
                    yysize = yysize1;
                    yyfmt = yystpcpy(yyfmt, yyprefix);
                    yyprefix = yyor.as_ptr()
                }
            }
            yyx += 1
        }
        yyf = yyformat.as_mut_ptr();
        yysize1 = yysize.wrapping_add(yystrlen(yyf));
        yysize_overflow |= (yysize1 < yysize) as libc::c_int;
        yysize = yysize1;
        if 0 != yysize_overflow { return -1i32 as libc::c_ulong }
        if !yyresult.is_null() {
            let mut yyp: *mut libc::c_char = yyresult;
            let mut yyi: libc::c_int = 0i32;
            loop  {
                *yyp = *yyf;
                if !(*yyp as libc::c_int != '\u{0}' as i32) { break ; }
                if *yyp as libc::c_int == '%' as i32 &&
                       *yyf.offset(1isize) as libc::c_int == 's' as i32 &&
                       yyi < yycount {
                    let fresh34 = yyi;
                    yyi = yyi + 1;
                    yyp =
                        yyp.offset(yytnamerr(yyp, yyarg[fresh34 as usize]) as
                                       isize);
                    yyf = yyf.offset(2isize)
                } else { yyp = yyp.offset(1isize); yyf = yyf.offset(1isize) }
            }
        }
        return yysize
    };
}
unsafe extern "C" fn yydestruct(mut yymsg: *const libc::c_char,
                                mut yytype: libc::c_int,
                                mut yyvaluep: *mut YYSTYPE,
                                mut p: *mut parser_state) {
    if yymsg.is_null() {
        yymsg = b"Deleting\x00" as *const u8 as *const libc::c_char
    }
    match yytype { _ => { } };
}
unsafe extern "C" fn yyparse(mut p: *mut parser_state) -> libc::c_int {
    let mut current_block: u64;
    /* The look-ahead symbol.  */
    let mut yychar: libc::c_int = 0;
    /* The semantic value of the look-ahead symbol.  */
    /* fall through */
    let mut yylval: YYSTYPE = YYSTYPE{nd: 0 as *mut node,};
    /* $?: last status */
    let mut yynerrs: libc::c_int = 0;
    let mut yystate: libc::c_int = 0;
    let mut yyn: libc::c_int = 0;
    let mut yyresult: libc::c_int = 0;
    let mut yyerrstatus: libc::c_int = 0;
    let mut yytoken: libc::c_int = 0i32;
    let mut yymsgbuf: [libc::c_char; 128] = [0; 128];
    let mut yymsg: *mut libc::c_char = yymsgbuf.as_mut_ptr();
    let mut yymsg_alloc: libc::c_ulong =
        ::std::mem::size_of::<[libc::c_char; 128]>() as libc::c_ulong;
    let mut yyssa: [yytype_int16; 200] = [0; 200];
    let mut yyss: *mut yytype_int16 = yyssa.as_mut_ptr();
    let mut yyssp: *mut yytype_int16 = 0 as *mut yytype_int16;
    let mut yyvsa: [YYSTYPE; 200] = [YYSTYPE{nd: 0 as *mut node,}; 200];
    let mut yyvs: *mut YYSTYPE = yyvsa.as_mut_ptr();
    let mut yyvsp: *mut YYSTYPE = 0 as *mut YYSTYPE;
    let mut yystacksize: libc::c_ulong = 200i32 as libc::c_ulong;
    let mut yyval: YYSTYPE = YYSTYPE{nd: 0 as *mut node,};
    let mut yylen: libc::c_int = 0i32;
    yystate = 0i32;
    yyerrstatus = 0i32;
    yynerrs = 0i32;
    yychar = -2i32;
    yyssp = yyss;
    yyvsp = yyvs;
    'c_5321:
        loop  {
            *yyssp = yystate as yytype_int16;
            if yyss.offset(yystacksize as isize).offset(-1isize) <= yyssp {
                let mut yysize: libc::c_ulong =
                    (yyssp.wrapping_offset_from(yyss) as libc::c_long +
                         1i32 as libc::c_long) as libc::c_ulong;
                if 10000i32 as libc::c_ulong <= yystacksize {
                    current_block = 15663857331018810243;
                    break ;
                }
                yystacksize = yystacksize.wrapping_mul(2i32 as libc::c_ulong);
                if (10000i32 as libc::c_ulong) < yystacksize {
                    yystacksize = 10000i32 as libc::c_ulong
                }
                let mut yyss1: *mut yytype_int16 = yyss;
                let mut fresh35 =
                    ::std::vec::from_elem(0,
                                          yystacksize.wrapping_mul((::std::mem::size_of::<yytype_int16>()
                                                                        as
                                                                        libc::c_ulong).wrapping_add(::std::mem::size_of::<YYSTYPE>()
                                                                                                        as
                                                                                                        libc::c_ulong)).wrapping_add((::std::mem::size_of::<yyalloc>()
                                                                                                                                          as
                                                                                                                                          libc::c_ulong).wrapping_sub(1i32
                                                                                                                                                                          as
                                                                                                                                                                          libc::c_ulong))
                                              as usize);
                let mut yyptr: *mut yyalloc =
                    fresh35.as_mut_ptr() as *mut yyalloc;
                if yyptr.is_null() {
                    current_block = 15663857331018810243;
                    break ;
                }
                let mut yynewbytes: libc::c_ulong = 0;
                libc::memcpy(&mut (*yyptr).yyss as *mut yytype_int16 as
                                 *mut libc::c_void,
                             yyss as *const libc::c_void,
                             yysize.wrapping_mul(::std::mem::size_of::<yytype_int16>()
                                                     as libc::c_ulong) as
                                 libc::size_t);
                yyss = &mut (*yyptr).yyss;
                yynewbytes =
                    yystacksize.wrapping_mul(::std::mem::size_of::<yytype_int16>()
                                                 as
                                                 libc::c_ulong).wrapping_add((::std::mem::size_of::<yyalloc>()
                                                                                  as
                                                                                  libc::c_ulong).wrapping_sub(1i32
                                                                                                                  as
                                                                                                                  libc::c_ulong));
                yyptr =
                    yyptr.offset(yynewbytes.wrapping_div(::std::mem::size_of::<yyalloc>()
                                                             as libc::c_ulong)
                                     as isize);
                let mut yynewbytes_0: libc::c_ulong = 0;
                libc::memcpy(&mut (*yyptr).yyvs as *mut YYSTYPE as
                                 *mut libc::c_void,
                             yyvs as *const libc::c_void,
                             yysize.wrapping_mul(::std::mem::size_of::<YYSTYPE>()
                                                     as libc::c_ulong) as
                                 libc::size_t);
                yyvs = &mut (*yyptr).yyvs;
                yynewbytes_0 =
                    yystacksize.wrapping_mul(::std::mem::size_of::<YYSTYPE>()
                                                 as
                                                 libc::c_ulong).wrapping_add((::std::mem::size_of::<yyalloc>()
                                                                                  as
                                                                                  libc::c_ulong).wrapping_sub(1i32
                                                                                                                  as
                                                                                                                  libc::c_ulong));
                yyptr =
                    yyptr.offset(yynewbytes_0.wrapping_div(::std::mem::size_of::<yyalloc>()
                                                               as
                                                               libc::c_ulong)
                                     as isize);
                yyss1 != yyssa.as_mut_ptr();
                yyssp = yyss.offset(yysize as isize).offset(-1isize);
                yyvsp = yyvs.offset(yysize as isize).offset(-1isize);
                if yyss.offset(yystacksize as isize).offset(-1isize) <= yyssp
                   {
                    current_block = 6879604579906898719;
                    break ;
                }
            }
            yyn = yypact[yystate as usize] as libc::c_int;
            if yyn == -826i32 {
                current_block = 9232367579450660359;
            } else {
                if yychar == -2i32 {
                    yychar =
                        yylex(&mut yylval as *mut YYSTYPE as
                                  *mut libc::c_void, p)
                }
                if yychar <= 0i32 {
                    yytoken = 0i32;
                    yychar = yytoken
                } else {
                    yytoken =
                        if yychar as libc::c_uint <= 374i32 as libc::c_uint {
                            yytranslate[yychar as usize] as libc::c_int
                        } else { 2i32 }
                }
                yyn += yytoken;
                if yyn < 0i32 || 11645i32 < yyn ||
                       yycheck[yyn as usize] as libc::c_int != yytoken {
                    current_block = 9232367579450660359;
                } else {
                    yyn = yytable[yyn as usize] as libc::c_int;
                    if yyn <= 0i32 {
                        if yyn == 0i32 || yyn == -588i32 {
                            current_block = 14677634444826911261;
                        } else {
                            yyn = -yyn;
                            current_block = 7380507024035654442;
                        }
                    } else {
                        if yyn == 3i32 {
                            current_block = 2136884818828959983;
                            break ;
                        }
                        if 0 != yyerrstatus {
                            /* See if it is a reserved word.  */
                            yyerrstatus -= 1
                        }
                        if yychar != 0i32 { yychar = -2i32 }
                        yystate = yyn;
                        yyvsp = yyvsp.offset(1isize);
                        *yyvsp = yylval;
                        current_block = 17662379048890589436;
                    }
                }
            }
            match current_block {
                9232367579450660359 => {
                    yyn = yydefact[yystate as usize] as libc::c_int;
                    if yyn == 0i32 {
                        current_block = 14677634444826911261;
                    } else { current_block = 7380507024035654442; }
                }
                _ => { }
            }
            match current_block {
                14677634444826911261 => {
                    /* If not already recovering from an error, report this error.  */
                    if 0 == yyerrstatus {
                        yynerrs += 1;
                        let mut yysize_0: libc::c_ulong =
                            yysyntax_error(0 as *mut libc::c_char, yystate,
                                           yychar);
                        if yymsg_alloc < yysize_0 &&
                               yymsg_alloc < 4032i32 as libc::c_ulong {
                            let mut yyalloc: libc::c_ulong =
                                (2i32 as
                                     libc::c_ulong).wrapping_mul(yysize_0);
                            if !(yysize_0 <= yyalloc &&
                                     yyalloc <= 4032i32 as libc::c_ulong) {
                                yyalloc = 4032i32 as libc::c_ulong
                            }
                            yymsg != yymsgbuf.as_mut_ptr();
                            let mut fresh36 =
                                ::std::vec::from_elem(0, yyalloc as usize);
                            yymsg = fresh36.as_mut_ptr() as *mut libc::c_char;
                            if !yymsg.is_null() {
                                yymsg_alloc = yyalloc
                            } else {
                                yymsg = yymsgbuf.as_mut_ptr();
                                yymsg_alloc =
                                    ::std::mem::size_of::<[libc::c_char; 128]>()
                                        as libc::c_ulong
                            }
                        }
                        if (0i32 as libc::c_ulong) < yysize_0 &&
                               yysize_0 <= yymsg_alloc {
                            yysyntax_error(yymsg, yystate, yychar);
                            yyerror(p, yymsg);
                        } else {
                            yyerror(p,
                                    b"syntax error\x00" as *const u8 as
                                        *const libc::c_char);
                            if yysize_0 != 0i32 as libc::c_ulong {
                                current_block = 15663857331018810243;
                                break ;
                            }
                        }
                    }
                    if yyerrstatus == 3i32 {
                        /* If just tried and failed to reuse look-ahead token after an
	 error, discard it.  */
                        if yychar <= 0i32 {
                            /* Return failure if at end of input.  */
                            if yychar == 0i32 {
                                current_block = 6879604579906898719;
                                break ;
                            }
                        } else {
                            yydestruct(b"Error: discarding\x00" as *const u8
                                           as *const libc::c_char, yytoken,
                                       &mut yylval, p);
                            yychar = -2i32
                        }
                    }
                    /* Else will try to reuse look-ahead token after shifting the error
     token.  */
                    yyerrstatus = 3i32;
                    loop  {
                        yyn = yypact[yystate as usize] as libc::c_int;
                        if yyn != -826i32 {
                            yyn += 1i32;
                            if 0i32 <= yyn && yyn <= 11645i32 &&
                                   yycheck[yyn as usize] as libc::c_int ==
                                       1i32 {
                                yyn = yytable[yyn as usize] as libc::c_int;
                                if 0i32 < yyn { break ; }
                            }
                        }
                        /* Pop the current state because it cannot handle the error token.  */
                        if yyssp == yyss {
                            current_block = 6879604579906898719;
                            break 'c_5321 ;
                        }
                        yydestruct(b"Error: popping\x00" as *const u8 as
                                       *const libc::c_char,
                                   yystos[yystate as usize] as libc::c_int,
                                   yyvsp, p);
                        yyvsp = yyvsp.offset(-1isize);
                        yyssp = yyssp.offset(-1isize);
                        yystate = *yyssp as libc::c_int
                    }
                    if yyn == 3i32 {
                        current_block = 2136884818828959983;
                        break ;
                    }
                    yyvsp = yyvsp.offset(1isize);
                    *yyvsp = yylval;
                    yystate = yyn
                }
                7380507024035654442 => {
                    yylen = yyr2[yyn as usize] as libc::c_int;
                    yyval = *yyvsp.offset((1i32 - yylen) as isize);
                    match yyn {
                        2 => {
                            (*p).lstate = EXPR_BEG;
                            if (*p).locals.is_null() {
                                (*p).locals =
                                    cons_gen(p, 0 as *mut node,
                                             0 as *mut node)
                            }
                        }
                        3 => {
                            (*p).tree =
                                new_scope(p,
                                          (*yyvsp.offset((2i32 - 2i32) as
                                                             isize)).nd);
                            if !(*yyvsp.offset((2i32 - 2i32) as
                                                   isize)).nd.is_null() {
                                (*(*p).tree).filename_index =
                                    (*(*yyvsp.offset((2i32 - 2i32) as
                                                         isize)).nd).filename_index;
                                (*(*p).tree).lineno =
                                    (*(*yyvsp.offset((2i32 - 2i32) as
                                                         isize)).nd).lineno
                            }
                        }
                        4 => {
                            yyval.nd =
                                (*yyvsp.offset((1i32 - 2i32) as isize)).nd
                        }
                        5 => { yyval.nd = new_begin(p, 0 as *mut node) }
                        6 => {
                            yyval.nd =
                                new_begin(p,
                                          (*yyvsp.offset((1i32 - 1i32) as
                                                             isize)).nd);
                            if !(*yyvsp.offset((1i32 - 1i32) as
                                                   isize)).nd.is_null() {
                                (*yyval.nd).filename_index =
                                    (*(*yyvsp.offset((1i32 - 1i32) as
                                                         isize)).nd).filename_index;
                                (*yyval.nd).lineno =
                                    (*(*yyvsp.offset((1i32 - 1i32) as
                                                         isize)).nd).lineno
                            }
                        }
                        7 => {
                            yyval.nd =
                                append_gen(p,
                                           (*yyvsp.offset((1i32 - 3i32) as
                                                              isize)).nd,
                                           list1_gen(p,
                                                     (*yyvsp.offset((3i32 -
                                                                         3i32)
                                                                        as
                                                                        isize)).nd))
                        }
                        8 => { yyval.nd = new_begin(p, 0 as *mut node) }
                        10 => { yyval.nd = local_switch(p) }
                        11 => {
                            yyerror(p,
                                    b"BEGIN not supported\x00" as *const u8 as
                                        *const libc::c_char);
                            local_resume(p,
                                         (*yyvsp.offset((2i32 - 5i32) as
                                                            isize)).nd);
                            yyval.nd = 0 as *mut node
                        }
                        12 => {
                            if !(*yyvsp.offset((2i32 - 4i32) as
                                                   isize)).nd.is_null() {
                                yyval.nd =
                                    new_rescue(p,
                                               (*yyvsp.offset((1i32 - 4i32) as
                                                                  isize)).nd,
                                               (*yyvsp.offset((2i32 - 4i32) as
                                                                  isize)).nd,
                                               (*yyvsp.offset((3i32 - 4i32) as
                                                                  isize)).nd);
                                if !(*yyvsp.offset((1i32 - 4i32) as
                                                       isize)).nd.is_null() {
                                    (*yyval.nd).filename_index =
                                        (*(*yyvsp.offset((1i32 - 4i32) as
                                                             isize)).nd).filename_index;
                                    (*yyval.nd).lineno =
                                        (*(*yyvsp.offset((1i32 - 4i32) as
                                                             isize)).nd).lineno
                                }
                            } else if !(*yyvsp.offset((3i32 - 4i32) as
                                                          isize)).nd.is_null()
                             {
                                yywarn(p,
                                       b"else without rescue is useless\x00"
                                           as *const u8 as
                                           *const libc::c_char);
                                yyval.nd =
                                    append_gen(p,
                                               (*yyvsp.offset((1i32 - 4i32) as
                                                                  isize)).nd,
                                               list1_gen(p,
                                                         (*yyvsp.offset((3i32
                                                                             -
                                                                             4i32)
                                                                            as
                                                                            isize)).nd))
                            } else {
                                yyval.nd =
                                    (*yyvsp.offset((1i32 - 4i32) as isize)).nd
                            }
                            if !(*yyvsp.offset((4i32 - 4i32) as
                                                   isize)).nd.is_null() {
                                if !yyval.nd.is_null() {
                                    yyval.nd =
                                        new_ensure(p, yyval.nd,
                                                   (*yyvsp.offset((4i32 -
                                                                       4i32)
                                                                      as
                                                                      isize)).nd)
                                } else {
                                    yyval.nd =
                                        append_gen(p,
                                                   (*yyvsp.offset((4i32 -
                                                                       4i32)
                                                                      as
                                                                      isize)).nd,
                                                   list1_gen(p, new_nil(p)))
                                }
                            }
                        }
                        13 => {
                            yyval.nd =
                                (*yyvsp.offset((1i32 - 2i32) as isize)).nd
                        }
                        14 => { yyval.nd = new_begin(p, 0 as *mut node) }
                        15 => {
                            yyval.nd =
                                new_begin(p,
                                          (*yyvsp.offset((1i32 - 1i32) as
                                                             isize)).nd);
                            if !(*yyvsp.offset((1i32 - 1i32) as
                                                   isize)).nd.is_null() {
                                (*yyval.nd).filename_index =
                                    (*(*yyvsp.offset((1i32 - 1i32) as
                                                         isize)).nd).filename_index;
                                (*yyval.nd).lineno =
                                    (*(*yyvsp.offset((1i32 - 1i32) as
                                                         isize)).nd).lineno
                            }
                        }
                        16 => {
                            yyval.nd =
                                append_gen(p,
                                           (*yyvsp.offset((1i32 - 3i32) as
                                                              isize)).nd,
                                           list1_gen(p,
                                                     (*yyvsp.offset((3i32 -
                                                                         3i32)
                                                                        as
                                                                        isize)).nd))
                        }
                        17 => {
                            yyval.nd =
                                new_begin(p,
                                          (*yyvsp.offset((2i32 - 2i32) as
                                                             isize)).nd)
                        }
                        18 => { (*p).lstate = EXPR_FNAME }
                        19 => {
                            yyval.nd =
                                new_alias(p,
                                          (*yyvsp.offset((2i32 - 4i32) as
                                                             isize)).id,
                                          (*yyvsp.offset((4i32 - 4i32) as
                                                             isize)).id)
                        }
                        20 => {
                            yyval.nd =
                                (*yyvsp.offset((2i32 - 2i32) as isize)).nd
                        }
                        21 => {
                            yyval.nd =
                                new_if(p,
                                       cond((*yyvsp.offset((3i32 - 3i32) as
                                                               isize)).nd),
                                       (*yyvsp.offset((1i32 - 3i32) as
                                                          isize)).nd,
                                       0 as *mut node)
                        }
                        22 => {
                            yyval.nd =
                                new_unless(p,
                                           cond((*yyvsp.offset((3i32 - 3i32)
                                                                   as
                                                                   isize)).nd),
                                           (*yyvsp.offset((1i32 - 3i32) as
                                                              isize)).nd,
                                           0 as *mut node)
                        }
                        23 => {
                            yyval.nd =
                                new_while(p,
                                          cond((*yyvsp.offset((3i32 - 3i32) as
                                                                  isize)).nd),
                                          (*yyvsp.offset((1i32 - 3i32) as
                                                             isize)).nd)
                        }
                        24 => {
                            yyval.nd =
                                new_until(p,
                                          cond((*yyvsp.offset((3i32 - 3i32) as
                                                                  isize)).nd),
                                          (*yyvsp.offset((1i32 - 3i32) as
                                                             isize)).nd)
                        }
                        25 => {
                            yyval.nd =
                                new_mod_rescue(p,
                                               (*yyvsp.offset((1i32 - 3i32) as
                                                                  isize)).nd,
                                               (*yyvsp.offset((3i32 - 3i32) as
                                                                  isize)).nd)
                        }
                        26 => {
                            yyerror(p,
                                    b"END not supported\x00" as *const u8 as
                                        *const libc::c_char);
                            yyval.nd =
                                new_postexe(p,
                                            (*yyvsp.offset((3i32 - 4i32) as
                                                               isize)).nd)
                        }
                        28 => {
                            yyval.nd =
                                new_masgn(p,
                                          (*yyvsp.offset((1i32 - 3i32) as
                                                             isize)).nd,
                                          (*yyvsp.offset((3i32 - 3i32) as
                                                             isize)).nd)
                        }
                        29 => {
                            yyval.nd =
                                new_asgn(p,
                                         (*yyvsp.offset((1i32 - 3i32) as
                                                            isize)).nd,
                                         new_array(p,
                                                   (*yyvsp.offset((3i32 -
                                                                       3i32)
                                                                      as
                                                                      isize)).nd))
                        }
                        30 => {
                            yyval.nd =
                                new_masgn(p,
                                          (*yyvsp.offset((1i32 - 3i32) as
                                                             isize)).nd,
                                          (*yyvsp.offset((3i32 - 3i32) as
                                                             isize)).nd)
                        }
                        31 => {
                            yyval.nd =
                                new_masgn(p,
                                          (*yyvsp.offset((1i32 - 3i32) as
                                                             isize)).nd,
                                          new_array(p,
                                                    (*yyvsp.offset((3i32 -
                                                                        3i32)
                                                                       as
                                                                       isize)).nd))
                        }
                        33 => {
                            yyval.nd =
                                new_asgn(p,
                                         (*yyvsp.offset((1i32 - 3i32) as
                                                            isize)).nd,
                                         (*yyvsp.offset((3i32 - 3i32) as
                                                            isize)).nd)
                        }
                        34 => {
                            yyval.nd =
                                new_op_asgn(p,
                                            (*yyvsp.offset((1i32 - 3i32) as
                                                               isize)).nd,
                                            (*yyvsp.offset((2i32 - 3i32) as
                                                               isize)).id,
                                            (*yyvsp.offset((3i32 - 3i32) as
                                                               isize)).nd)
                        }
                        35 => {
                            yyval.nd =
                                new_op_asgn(p,
                                            new_call(p,
                                                     (*yyvsp.offset((1i32 -
                                                                         6i32)
                                                                        as
                                                                        isize)).nd,
                                                     intern_gen(p,
                                                                b"[]\x00" as
                                                                    *const u8
                                                                    as
                                                                    *const libc::c_char,
                                                                2i32 as
                                                                    size_t),
                                                     (*yyvsp.offset((3i32 -
                                                                         6i32)
                                                                        as
                                                                        isize)).nd,
                                                     '.' as i32),
                                            (*yyvsp.offset((5i32 - 6i32) as
                                                               isize)).id,
                                            (*yyvsp.offset((6i32 - 6i32) as
                                                               isize)).nd)
                        }
                        36 => {
                            yyval.nd =
                                new_op_asgn(p,
                                            new_call(p,
                                                     (*yyvsp.offset((1i32 -
                                                                         5i32)
                                                                        as
                                                                        isize)).nd,
                                                     (*yyvsp.offset((3i32 -
                                                                         5i32)
                                                                        as
                                                                        isize)).id,
                                                     0 as *mut node,
                                                     (*yyvsp.offset((2i32 -
                                                                         5i32)
                                                                        as
                                                                        isize)).num),
                                            (*yyvsp.offset((4i32 - 5i32) as
                                                               isize)).id,
                                            (*yyvsp.offset((5i32 - 5i32) as
                                                               isize)).nd)
                        }
                        37 => {
                            yyval.nd =
                                new_op_asgn(p,
                                            new_call(p,
                                                     (*yyvsp.offset((1i32 -
                                                                         5i32)
                                                                        as
                                                                        isize)).nd,
                                                     (*yyvsp.offset((3i32 -
                                                                         5i32)
                                                                        as
                                                                        isize)).id,
                                                     0 as *mut node,
                                                     (*yyvsp.offset((2i32 -
                                                                         5i32)
                                                                        as
                                                                        isize)).num),
                                            (*yyvsp.offset((4i32 - 5i32) as
                                                               isize)).id,
                                            (*yyvsp.offset((5i32 - 5i32) as
                                                               isize)).nd)
                        }
                        38 => {
                            /* obsolescent; will be withdrawn */
                            yyerror(p,
                                    b"constant re-assignment\x00" as *const u8
                                        as *const libc::c_char);
                            yyval.nd = 0 as *mut node
                        }
                        39 => {
                            yyval.nd =
                                new_op_asgn(p,
                                            new_call(p,
                                                     (*yyvsp.offset((1i32 -
                                                                         5i32)
                                                                        as
                                                                        isize)).nd,
                                                     (*yyvsp.offset((3i32 -
                                                                         5i32)
                                                                        as
                                                                        isize)).id,
                                                     0 as *mut node, 343i32),
                                            (*yyvsp.offset((4i32 - 5i32) as
                                                               isize)).id,
                                            (*yyvsp.offset((5i32 - 5i32) as
                                                               isize)).nd)
                        }
                        40 => {
                            /* Line 216 of yacc.c.  */
                            backref_error(p,
                                          (*yyvsp.offset((1i32 - 3i32) as
                                                             isize)).nd);
                            yyval.nd = new_begin(p, 0 as *mut node)
                        }
                        42 => {
                            yyval.nd =
                                new_mod_rescue(p,
                                               (*yyvsp.offset((1i32 - 3i32) as
                                                                  isize)).nd,
                                               (*yyvsp.offset((3i32 - 3i32) as
                                                                  isize)).nd)
                        }
                        45 => {
                            yyval.nd =
                                new_and(p,
                                        (*yyvsp.offset((1i32 - 3i32) as
                                                           isize)).nd,
                                        (*yyvsp.offset((3i32 - 3i32) as
                                                           isize)).nd)
                        }
                        46 => {
                            yyval.nd =
                                new_or(p,
                                       (*yyvsp.offset((1i32 - 3i32) as
                                                          isize)).nd,
                                       (*yyvsp.offset((3i32 - 3i32) as
                                                          isize)).nd)
                        }
                        47 => {
                            yyval.nd =
                                call_uni_op(p,
                                            cond((*yyvsp.offset((3i32 - 3i32)
                                                                    as
                                                                    isize)).nd),
                                            b"!\x00" as *const u8 as
                                                *const libc::c_char)
                        }
                        48 => {
                            yyval.nd =
                                call_uni_op(p,
                                            cond((*yyvsp.offset((2i32 - 2i32)
                                                                    as
                                                                    isize)).nd),
                                            b"!\x00" as *const u8 as
                                                *const libc::c_char)
                        }
                        50 => {
                            if (*yyvsp.offset((1i32 - 1i32) as
                                                  isize)).nd.is_null() {
                                yyval.nd = new_nil(p)
                            } else {
                                yyval.nd =
                                    (*yyvsp.offset((1i32 - 1i32) as isize)).nd
                            }
                        }
                        54 => {
                            yyval.nd =
                                new_call(p,
                                         (*yyvsp.offset((1i32 - 4i32) as
                                                            isize)).nd,
                                         (*yyvsp.offset((3i32 - 4i32) as
                                                            isize)).id,
                                         (*yyvsp.offset((4i32 - 4i32) as
                                                            isize)).nd,
                                         (*yyvsp.offset((2i32 - 4i32) as
                                                            isize)).num)
                        }
                        55 => { local_nest(p); }
                        56 => {
                            /* Suppress unused-variable warnings by "using" E.  */
                            yyval.nd =
                                new_block(p,
                                          (*yyvsp.offset((3i32 - 5i32) as
                                                             isize)).nd,
                                          (*yyvsp.offset((4i32 - 5i32) as
                                                             isize)).nd);
                            local_unnest(p);
                        }
                        57 => {
                            /* Identity function, used to suppress warnings about constant conditions.  */
                            yyval.nd =
                                new_fcall(p,
                                          (*yyvsp.offset((1i32 - 2i32) as
                                                             isize)).id,
                                          (*yyvsp.offset((2i32 - 2i32) as
                                                             isize)).nd)
                        }
                        58 => {
                            args_with_block(p,
                                            (*yyvsp.offset((2i32 - 3i32) as
                                                               isize)).nd,
                                            (*yyvsp.offset((3i32 - 3i32) as
                                                               isize)).nd);
                            yyval.nd =
                                new_fcall(p,
                                          (*yyvsp.offset((1i32 - 3i32) as
                                                             isize)).id,
                                          (*yyvsp.offset((2i32 - 3i32) as
                                                             isize)).nd)
                        }
                        59 => {
                            yyval.nd =
                                new_call(p,
                                         (*yyvsp.offset((1i32 - 4i32) as
                                                            isize)).nd,
                                         (*yyvsp.offset((3i32 - 4i32) as
                                                            isize)).id,
                                         (*yyvsp.offset((4i32 - 4i32) as
                                                            isize)).nd,
                                         (*yyvsp.offset((2i32 - 4i32) as
                                                            isize)).num)
                        }
                        60 => {
                            args_with_block(p,
                                            (*yyvsp.offset((4i32 - 5i32) as
                                                               isize)).nd,
                                            (*yyvsp.offset((5i32 - 5i32) as
                                                               isize)).nd);
                            yyval.nd =
                                new_call(p,
                                         (*yyvsp.offset((1i32 - 5i32) as
                                                            isize)).nd,
                                         (*yyvsp.offset((3i32 - 5i32) as
                                                            isize)).id,
                                         (*yyvsp.offset((4i32 - 5i32) as
                                                            isize)).nd,
                                         (*yyvsp.offset((2i32 - 5i32) as
                                                            isize)).num)
                        }
                        61 => {
                            yyval.nd =
                                new_call(p,
                                         (*yyvsp.offset((1i32 - 4i32) as
                                                            isize)).nd,
                                         (*yyvsp.offset((3i32 - 4i32) as
                                                            isize)).id,
                                         (*yyvsp.offset((4i32 - 4i32) as
                                                            isize)).nd,
                                         343i32)
                        }
                        62 => {
                            /* The parser invokes alloca or malloc; define the necessary symbols.  */
                            args_with_block(p,
                                            (*yyvsp.offset((4i32 - 5i32) as
                                                               isize)).nd,
                                            (*yyvsp.offset((5i32 - 5i32) as
                                                               isize)).nd);
                            yyval.nd =
                                new_call(p,
                                         (*yyvsp.offset((1i32 - 5i32) as
                                                            isize)).nd,
                                         (*yyvsp.offset((3i32 - 5i32) as
                                                            isize)).id,
                                         (*yyvsp.offset((4i32 - 5i32) as
                                                            isize)).nd,
                                         343i32)
                        }
                        63 => {
                            yyval.nd =
                                new_super(p,
                                          (*yyvsp.offset((2i32 - 2i32) as
                                                             isize)).nd)
                        }
                        64 => {
                            yyval.nd =
                                new_yield(p,
                                          (*yyvsp.offset((2i32 - 2i32) as
                                                             isize)).nd)
                        }
                        65 => {
                            yyval.nd =
                                new_return(p,
                                           ret_args(p,
                                                    (*yyvsp.offset((2i32 -
                                                                        2i32)
                                                                       as
                                                                       isize)).nd))
                        }
                        66 => {
                            yyval.nd =
                                new_break(p,
                                          ret_args(p,
                                                   (*yyvsp.offset((2i32 -
                                                                       2i32)
                                                                      as
                                                                      isize)).nd))
                        }
                        67 => {
                            yyval.nd =
                                new_next(p,
                                         ret_args(p,
                                                  (*yyvsp.offset((2i32 - 2i32)
                                                                     as
                                                                     isize)).nd))
                        }
                        68 => {
                            /* empty */
                            yyval.nd =
                                (*yyvsp.offset((1i32 - 1i32) as isize)).nd
                        }
                        69 => {
                            yyval.nd =
                                (*yyvsp.offset((2i32 - 3i32) as isize)).nd
                        }
                        71 => {
                            yyval.nd =
                                (*yyvsp.offset((2i32 - 3i32) as isize)).nd
                        }
                        72 => {
                            yyval.nd =
                                list1_gen(p,
                                          (*yyvsp.offset((1i32 - 1i32) as
                                                             isize)).nd)
                        }
                        73 => {
                            yyval.nd =
                                list1_gen(p,
                                          append_gen(p,
                                                     (*yyvsp.offset((1i32 -
                                                                         2i32)
                                                                        as
                                                                        isize)).nd,
                                                     list1_gen(p,
                                                               (*yyvsp.offset((2i32
                                                                                   -
                                                                                   2i32)
                                                                                  as
                                                                                  isize)).nd)))
                        }
                        74 => {
                            yyval.nd =
                                list2_gen(p,
                                          (*yyvsp.offset((1i32 - 3i32) as
                                                             isize)).nd,
                                          (*yyvsp.offset((3i32 - 3i32) as
                                                             isize)).nd)
                        }
                        75 => {
                            yyval.nd =
                                list3_gen(p,
                                          (*yyvsp.offset((1i32 - 5i32) as
                                                             isize)).nd,
                                          (*yyvsp.offset((3i32 - 5i32) as
                                                             isize)).nd,
                                          (*yyvsp.offset((5i32 - 5i32) as
                                                             isize)).nd)
                        }
                        76 => {
                            yyval.nd =
                                list2_gen(p,
                                          (*yyvsp.offset((1i32 - 2i32) as
                                                             isize)).nd,
                                          new_nil(p))
                        }
                        77 => {
                            /* ! defined yyoverflow || YYERROR_VERBOSE */
                            yyval.nd =
                                list3_gen(p,
                                          (*yyvsp.offset((1i32 - 4i32) as
                                                             isize)).nd,
                                          new_nil(p),
                                          (*yyvsp.offset((4i32 - 4i32) as
                                                             isize)).nd)
                        }
                        78 => {
                            yyval.nd =
                                list2_gen(p, 0 as *mut node,
                                          (*yyvsp.offset((2i32 - 2i32) as
                                                             isize)).nd)
                        }
                        79 => {
                            /* A type that is properly aligned for any stack member.  */
                            yyval.nd =
                                list3_gen(p, 0 as *mut node,
                                          (*yyvsp.offset((2i32 - 4i32) as
                                                             isize)).nd,
                                          (*yyvsp.offset((4i32 - 4i32) as
                                                             isize)).nd)
                        }
                        80 => {
                            yyval.nd =
                                list2_gen(p, 0 as *mut node, new_nil(p))
                        }
                        81 => {
                            /* The size of an array large to enough to hold all stacks, each with
   N elements.  */
                            yyval.nd =
                                list3_gen(p, 0 as *mut node, new_nil(p),
                                          (*yyvsp.offset((3i32 - 3i32) as
                                                             isize)).nd)
                        }
                        83 => {
                            /* Copy COUNT objects from FROM to TO.  The source and destination do
   not overlap.  */
                            yyval.nd =
                                new_masgn(p,
                                          (*yyvsp.offset((2i32 - 3i32) as
                                                             isize)).nd,
                                          0 as *mut node)
                        }
                        84 => {
                            yyval.nd =
                                list1_gen(p,
                                          (*yyvsp.offset((1i32 - 2i32) as
                                                             isize)).nd)
                        }
                        85 => {
                            yyval.nd =
                                append_gen(p,
                                           (*yyvsp.offset((1i32 - 3i32) as
                                                              isize)).nd,
                                           list1_gen(p,
                                                     (*yyvsp.offset((2i32 -
                                                                         3i32)
                                                                        as
                                                                        isize)).nd))
                        }
                        86 => {
                            yyval.nd =
                                list1_gen(p,
                                          (*yyvsp.offset((1i32 - 1i32) as
                                                             isize)).nd)
                        }
                        87 => {
                            yyval.nd =
                                append_gen(p,
                                           (*yyvsp.offset((1i32 - 2i32) as
                                                              isize)).nd,
                                           list1_gen(p,
                                                     (*yyvsp.offset((2i32 -
                                                                         2i32)
                                                                        as
                                                                        isize)).nd))
                        }
                        88 => {
                            assignable(p,
                                       (*yyvsp.offset((1i32 - 1i32) as
                                                          isize)).nd);
                        }
                        89 => {
                            yyval.nd =
                                new_call(p,
                                         (*yyvsp.offset((1i32 - 4i32) as
                                                            isize)).nd,
                                         intern_gen(p,
                                                    b"[]\x00" as *const u8 as
                                                        *const libc::c_char,
                                                    2i32 as size_t),
                                         (*yyvsp.offset((3i32 - 4i32) as
                                                            isize)).nd,
                                         '.' as i32)
                        }
                        90 => {
                            yyval.nd =
                                new_call(p,
                                         (*yyvsp.offset((1i32 - 3i32) as
                                                            isize)).nd,
                                         (*yyvsp.offset((3i32 - 3i32) as
                                                            isize)).id,
                                         0 as *mut node,
                                         (*yyvsp.offset((2i32 - 3i32) as
                                                            isize)).num)
                        }
                        91 => {
                            /* YYLAST -- Last index in YYTABLE.  */
                            yyval.nd =
                                new_call(p,
                                         (*yyvsp.offset((1i32 - 3i32) as
                                                            isize)).nd,
                                         (*yyvsp.offset((3i32 - 3i32) as
                                                            isize)).id,
                                         0 as *mut node, 343i32)
                        }
                        92 => {
                            /* YYNTOKENS -- Number of terminals.  */
                            yyval.nd =
                                new_call(p,
                                         (*yyvsp.offset((1i32 - 3i32) as
                                                            isize)).nd,
                                         (*yyvsp.offset((3i32 - 3i32) as
                                                            isize)).id,
                                         0 as *mut node,
                                         (*yyvsp.offset((2i32 - 3i32) as
                                                            isize)).num)
                        }
                        93 => {
                            /* YYNRULES -- Number of rules.  */
                            if 0 != (*p).in_def || 0 != (*p).in_single {
                                yyerror(p,
                                        b"dynamic constant assignment\x00" as
                                            *const u8 as *const libc::c_char);
                            }
                            yyval.nd =
                                new_colon2(p,
                                           (*yyvsp.offset((1i32 - 3i32) as
                                                              isize)).nd,
                                           (*yyvsp.offset((3i32 - 3i32) as
                                                              isize)).id)
                        }
                        94 => {
                            if 0 != (*p).in_def || 0 != (*p).in_single {
                                yyerror(p,
                                        b"dynamic constant assignment\x00" as
                                            *const u8 as *const libc::c_char);
                            }
                            yyval.nd =
                                new_colon3(p,
                                           (*yyvsp.offset((2i32 - 2i32) as
                                                              isize)).id)
                        }
                        95 => {
                            /* YYTRANSLATE[YYLEX] -- Bison symbol number corresponding to YYLEX.  */
                            backref_error(p,
                                          (*yyvsp.offset((1i32 - 1i32) as
                                                             isize)).nd);
                            yyval.nd = 0 as *mut node
                        }
                        96 => {
                            assignable(p,
                                       (*yyvsp.offset((1i32 - 1i32) as
                                                          isize)).nd);
                        }
                        97 => {
                            yyval.nd =
                                new_call(p,
                                         (*yyvsp.offset((1i32 - 4i32) as
                                                            isize)).nd,
                                         intern_gen(p,
                                                    b"[]\x00" as *const u8 as
                                                        *const libc::c_char,
                                                    2i32 as size_t),
                                         (*yyvsp.offset((3i32 - 4i32) as
                                                            isize)).nd,
                                         '.' as i32)
                        }
                        98 => {
                            yyval.nd =
                                new_call(p,
                                         (*yyvsp.offset((1i32 - 3i32) as
                                                            isize)).nd,
                                         (*yyvsp.offset((3i32 - 3i32) as
                                                            isize)).id,
                                         0 as *mut node,
                                         (*yyvsp.offset((2i32 - 3i32) as
                                                            isize)).num)
                        }
                        99 => {
                            yyval.nd =
                                new_call(p,
                                         (*yyvsp.offset((1i32 - 3i32) as
                                                            isize)).nd,
                                         (*yyvsp.offset((3i32 - 3i32) as
                                                            isize)).id,
                                         0 as *mut node, 343i32)
                        }
                        100 => {
                            yyval.nd =
                                new_call(p,
                                         (*yyvsp.offset((1i32 - 3i32) as
                                                            isize)).nd,
                                         (*yyvsp.offset((3i32 - 3i32) as
                                                            isize)).id,
                                         0 as *mut node,
                                         (*yyvsp.offset((2i32 - 3i32) as
                                                            isize)).num)
                        }
                        101 => {
                            if 0 != (*p).in_def || 0 != (*p).in_single {
                                yyerror(p,
                                        b"dynamic constant assignment\x00" as
                                            *const u8 as *const libc::c_char);
                            }
                            yyval.nd =
                                new_colon2(p,
                                           (*yyvsp.offset((1i32 - 3i32) as
                                                              isize)).nd,
                                           (*yyvsp.offset((3i32 - 3i32) as
                                                              isize)).id)
                        }
                        102 => {
                            if 0 != (*p).in_def || 0 != (*p).in_single {
                                yyerror(p,
                                        b"dynamic constant assignment\x00" as
                                            *const u8 as *const libc::c_char);
                            }
                            yyval.nd =
                                new_colon3(p,
                                           (*yyvsp.offset((2i32 - 2i32) as
                                                              isize)).id)
                        }
                        103 => {
                            backref_error(p,
                                          (*yyvsp.offset((1i32 - 1i32) as
                                                             isize)).nd);
                            yyval.nd = 0 as *mut node
                        }
                        104 => {
                            yyerror(p,
                                    b"class/module name must be CONSTANT\x00"
                                        as *const u8 as *const libc::c_char);
                        }
                        106 => {
                            yyval.nd =
                                cons_gen(p, 1i32 as *mut node,
                                         (*yyvsp.offset((2i32 - 2i32) as
                                                            isize)).id as
                                             intptr_t as *mut node)
                        }
                        107 => {
                            yyval.nd =
                                cons_gen(p, 0 as *mut node,
                                         (*yyvsp.offset((1i32 - 1i32) as
                                                            isize)).id as
                                             intptr_t as *mut node)
                        }
                        108 => {
                            void_expr_error(p,
                                            (*yyvsp.offset((1i32 - 3i32) as
                                                               isize)).nd);
                            yyval.nd =
                                cons_gen(p,
                                         (*yyvsp.offset((1i32 - 3i32) as
                                                            isize)).nd,
                                         (*yyvsp.offset((3i32 - 3i32) as
                                                            isize)).id as
                                             intptr_t as *mut node)
                        }
                        112 => {
                            (*p).lstate = EXPR_ENDFN;
                            yyval.id =
                                (*yyvsp.offset((1i32 - 1i32) as isize)).id
                        }
                        113 => {
                            (*p).lstate = EXPR_ENDFN;
                            yyval.id =
                                (*yyvsp.offset((1i32 - 1i32) as isize)).id
                        }
                        116 => {
                            yyval.nd =
                                new_undef(p,
                                          (*yyvsp.offset((1i32 - 1i32) as
                                                             isize)).id)
                        }
                        117 => { (*p).lstate = EXPR_FNAME }
                        118 => {
                            yyval.nd =
                                append_gen(p,
                                           (*yyvsp.offset((1i32 - 4i32) as
                                                              isize)).nd,
                                           list1_gen(p,
                                                     (*yyvsp.offset((4i32 -
                                                                         4i32)
                                                                        as
                                                                        isize)).id
                                                         as intptr_t as
                                                         *mut node))
                        }
                        119 => {
                            yyval.id =
                                intern_gen_c(p, '|' as i32 as libc::c_char)
                        }
                        120 => {
                            yyval.id =
                                intern_gen_c(p, '^' as i32 as libc::c_char)
                        }
                        121 => {
                            yyval.id =
                                intern_gen_c(p, '&' as i32 as libc::c_char)
                        }
                        122 => {
                            yyval.id =
                                intern_gen(p,
                                           b"<=>\x00" as *const u8 as
                                               *const libc::c_char,
                                           3i32 as size_t)
                        }
                        123 => {
                            yyval.id =
                                intern_gen(p,
                                           b"==\x00" as *const u8 as
                                               *const libc::c_char,
                                           2i32 as size_t)
                        }
                        124 => {
                            yyval.id =
                                intern_gen(p,
                                           b"===\x00" as *const u8 as
                                               *const libc::c_char,
                                           3i32 as size_t)
                        }
                        125 => {
                            yyval.id =
                                intern_gen(p,
                                           b"=~\x00" as *const u8 as
                                               *const libc::c_char,
                                           2i32 as size_t)
                        }
                        126 => {
                            yyval.id =
                                intern_gen(p,
                                           b"!~\x00" as *const u8 as
                                               *const libc::c_char,
                                           2i32 as size_t)
                        }
                        127 => {
                            yyval.id =
                                intern_gen_c(p, '>' as i32 as libc::c_char)
                        }
                        128 => {
                            yyval.id =
                                intern_gen(p,
                                           b">=\x00" as *const u8 as
                                               *const libc::c_char,
                                           2i32 as size_t)
                        }
                        129 => {
                            yyval.id =
                                intern_gen_c(p, '<' as i32 as libc::c_char)
                        }
                        130 => {
                            yyval.id =
                                intern_gen(p,
                                           b"<=\x00" as *const u8 as
                                               *const libc::c_char,
                                           2i32 as size_t)
                        }
                        131 => {
                            yyval.id =
                                intern_gen(p,
                                           b"!=\x00" as *const u8 as
                                               *const libc::c_char,
                                           2i32 as size_t)
                        }
                        132 => {
                            yyval.id =
                                intern_gen(p,
                                           b"<<\x00" as *const u8 as
                                               *const libc::c_char,
                                           2i32 as size_t)
                        }
                        133 => {
                            yyval.id =
                                intern_gen(p,
                                           b">>\x00" as *const u8 as
                                               *const libc::c_char,
                                           2i32 as size_t)
                        }
                        134 => {
                            yyval.id =
                                intern_gen_c(p, '+' as i32 as libc::c_char)
                        }
                        135 => {
                            yyval.id =
                                intern_gen_c(p, '-' as i32 as libc::c_char)
                        }
                        136 => {
                            yyval.id =
                                intern_gen_c(p, '*' as i32 as libc::c_char)
                        }
                        137 => {
                            yyval.id =
                                intern_gen_c(p, '*' as i32 as libc::c_char)
                        }
                        138 => {
                            yyval.id =
                                intern_gen_c(p, '/' as i32 as libc::c_char)
                        }
                        139 => {
                            yyval.id =
                                intern_gen_c(p, '%' as i32 as libc::c_char)
                        }
                        140 => {
                            yyval.id =
                                intern_gen(p,
                                           b"**\x00" as *const u8 as
                                               *const libc::c_char,
                                           2i32 as size_t)
                        }
                        141 => {
                            yyval.id =
                                intern_gen(p,
                                           b"**\x00" as *const u8 as
                                               *const libc::c_char,
                                           2i32 as size_t)
                        }
                        142 => {
                            yyval.id =
                                intern_gen_c(p, '!' as i32 as libc::c_char)
                        }
                        143 => {
                            yyval.id =
                                intern_gen_c(p, '~' as i32 as libc::c_char)
                        }
                        144 => {
                            yyval.id =
                                intern_gen(p,
                                           b"+@\x00" as *const u8 as
                                               *const libc::c_char,
                                           2i32 as size_t)
                        }
                        145 => {
                            yyval.id =
                                intern_gen(p,
                                           b"-@\x00" as *const u8 as
                                               *const libc::c_char,
                                           2i32 as size_t)
                        }
                        146 => {
                            yyval.id =
                                intern_gen(p,
                                           b"[]\x00" as *const u8 as
                                               *const libc::c_char,
                                           2i32 as size_t)
                        }
                        147 => {
                            yyval.id =
                                intern_gen(p,
                                           b"[]=\x00" as *const u8 as
                                               *const libc::c_char,
                                           3i32 as size_t)
                        }
                        148 => {
                            yyval.id =
                                intern_gen_c(p, '`' as i32 as libc::c_char)
                        }
                        189 => {
                            yyval.nd =
                                new_asgn(p,
                                         (*yyvsp.offset((1i32 - 3i32) as
                                                            isize)).nd,
                                         (*yyvsp.offset((3i32 - 3i32) as
                                                            isize)).nd)
                        }
                        190 => {
                            yyval.nd =
                                new_op_asgn(p,
                                            (*yyvsp.offset((1i32 - 3i32) as
                                                               isize)).nd,
                                            (*yyvsp.offset((2i32 - 3i32) as
                                                               isize)).id,
                                            (*yyvsp.offset((3i32 - 3i32) as
                                                               isize)).nd)
                        }
                        191 => {
                            yyval.nd =
                                new_op_asgn(p,
                                            new_call(p,
                                                     (*yyvsp.offset((1i32 -
                                                                         6i32)
                                                                        as
                                                                        isize)).nd,
                                                     intern_gen(p,
                                                                b"[]\x00" as
                                                                    *const u8
                                                                    as
                                                                    *const libc::c_char,
                                                                2i32 as
                                                                    size_t),
                                                     (*yyvsp.offset((3i32 -
                                                                         6i32)
                                                                        as
                                                                        isize)).nd,
                                                     '.' as i32),
                                            (*yyvsp.offset((5i32 - 6i32) as
                                                               isize)).id,
                                            (*yyvsp.offset((6i32 - 6i32) as
                                                               isize)).nd)
                        }
                        192 => {
                            yyval.nd =
                                new_op_asgn(p,
                                            new_call(p,
                                                     (*yyvsp.offset((1i32 -
                                                                         5i32)
                                                                        as
                                                                        isize)).nd,
                                                     (*yyvsp.offset((3i32 -
                                                                         5i32)
                                                                        as
                                                                        isize)).id,
                                                     0 as *mut node,
                                                     (*yyvsp.offset((2i32 -
                                                                         5i32)
                                                                        as
                                                                        isize)).num),
                                            (*yyvsp.offset((4i32 - 5i32) as
                                                               isize)).id,
                                            (*yyvsp.offset((5i32 - 5i32) as
                                                               isize)).nd)
                        }
                        193 => {
                            yyval.nd =
                                new_op_asgn(p,
                                            new_call(p,
                                                     (*yyvsp.offset((1i32 -
                                                                         5i32)
                                                                        as
                                                                        isize)).nd,
                                                     (*yyvsp.offset((3i32 -
                                                                         5i32)
                                                                        as
                                                                        isize)).id,
                                                     0 as *mut node,
                                                     (*yyvsp.offset((2i32 -
                                                                         5i32)
                                                                        as
                                                                        isize)).num),
                                            (*yyvsp.offset((4i32 - 5i32) as
                                                               isize)).id,
                                            (*yyvsp.offset((5i32 - 5i32) as
                                                               isize)).nd)
                        }
                        194 => {
                            yyval.nd =
                                new_op_asgn(p,
                                            new_call(p,
                                                     (*yyvsp.offset((1i32 -
                                                                         5i32)
                                                                        as
                                                                        isize)).nd,
                                                     (*yyvsp.offset((3i32 -
                                                                         5i32)
                                                                        as
                                                                        isize)).id,
                                                     0 as *mut node, 343i32),
                                            (*yyvsp.offset((4i32 - 5i32) as
                                                               isize)).id,
                                            (*yyvsp.offset((5i32 - 5i32) as
                                                               isize)).nd)
                        }
                        195 => {
                            yyerror(p,
                                    b"constant re-assignment\x00" as *const u8
                                        as *const libc::c_char);
                            yyval.nd = new_begin(p, 0 as *mut node)
                        }
                        196 => {
                            yyerror(p,
                                    b"constant re-assignment\x00" as *const u8
                                        as *const libc::c_char);
                            yyval.nd = new_begin(p, 0 as *mut node)
                        }
                        197 => {
                            backref_error(p,
                                          (*yyvsp.offset((1i32 - 3i32) as
                                                             isize)).nd);
                            yyval.nd = new_begin(p, 0 as *mut node)
                        }
                        198 => {
                            yyval.nd =
                                new_dot2(p,
                                         (*yyvsp.offset((1i32 - 3i32) as
                                                            isize)).nd,
                                         (*yyvsp.offset((3i32 - 3i32) as
                                                            isize)).nd)
                        }
                        199 => {
                            yyval.nd =
                                new_dot3(p,
                                         (*yyvsp.offset((1i32 - 3i32) as
                                                            isize)).nd,
                                         (*yyvsp.offset((3i32 - 3i32) as
                                                            isize)).nd)
                        }
                        200 => {
                            yyval.nd =
                                call_bin_op(p,
                                            (*yyvsp.offset((1i32 - 3i32) as
                                                               isize)).nd,
                                            b"+\x00" as *const u8 as
                                                *const libc::c_char,
                                            (*yyvsp.offset((3i32 - 3i32) as
                                                               isize)).nd)
                        }
                        201 => {
                            yyval.nd =
                                call_bin_op(p,
                                            (*yyvsp.offset((1i32 - 3i32) as
                                                               isize)).nd,
                                            b"-\x00" as *const u8 as
                                                *const libc::c_char,
                                            (*yyvsp.offset((3i32 - 3i32) as
                                                               isize)).nd)
                        }
                        202 => {
                            yyval.nd =
                                call_bin_op(p,
                                            (*yyvsp.offset((1i32 - 3i32) as
                                                               isize)).nd,
                                            b"*\x00" as *const u8 as
                                                *const libc::c_char,
                                            (*yyvsp.offset((3i32 - 3i32) as
                                                               isize)).nd)
                        }
                        203 => {
                            yyval.nd =
                                call_bin_op(p,
                                            (*yyvsp.offset((1i32 - 3i32) as
                                                               isize)).nd,
                                            b"/\x00" as *const u8 as
                                                *const libc::c_char,
                                            (*yyvsp.offset((3i32 - 3i32) as
                                                               isize)).nd)
                        }
                        204 => {
                            yyval.nd =
                                call_bin_op(p,
                                            (*yyvsp.offset((1i32 - 3i32) as
                                                               isize)).nd,
                                            b"%\x00" as *const u8 as
                                                *const libc::c_char,
                                            (*yyvsp.offset((3i32 - 3i32) as
                                                               isize)).nd)
                        }
                        205 => {
                            yyval.nd =
                                call_bin_op(p,
                                            (*yyvsp.offset((1i32 - 3i32) as
                                                               isize)).nd,
                                            b"**\x00" as *const u8 as
                                                *const libc::c_char,
                                            (*yyvsp.offset((3i32 - 3i32) as
                                                               isize)).nd)
                        }
                        206 => {
                            yyval.nd =
                                call_uni_op(p,
                                            call_bin_op(p,
                                                        (*yyvsp.offset((2i32 -
                                                                            4i32)
                                                                           as
                                                                           isize)).nd,
                                                        b"**\x00" as *const u8
                                                            as
                                                            *const libc::c_char,
                                                        (*yyvsp.offset((4i32 -
                                                                            4i32)
                                                                           as
                                                                           isize)).nd),
                                            b"-@\x00" as *const u8 as
                                                *const libc::c_char)
                        }
                        207 => {
                            yyval.nd =
                                call_uni_op(p,
                                            call_bin_op(p,
                                                        (*yyvsp.offset((2i32 -
                                                                            4i32)
                                                                           as
                                                                           isize)).nd,
                                                        b"**\x00" as *const u8
                                                            as
                                                            *const libc::c_char,
                                                        (*yyvsp.offset((4i32 -
                                                                            4i32)
                                                                           as
                                                                           isize)).nd),
                                            b"-@\x00" as *const u8 as
                                                *const libc::c_char)
                        }
                        208 => {
                            yyval.nd =
                                call_uni_op(p,
                                            (*yyvsp.offset((2i32 - 2i32) as
                                                               isize)).nd,
                                            b"+@\x00" as *const u8 as
                                                *const libc::c_char)
                        }
                        209 => {
                            yyval.nd =
                                call_uni_op(p,
                                            (*yyvsp.offset((2i32 - 2i32) as
                                                               isize)).nd,
                                            b"-@\x00" as *const u8 as
                                                *const libc::c_char)
                        }
                        210 => {
                            yyval.nd =
                                call_bin_op(p,
                                            (*yyvsp.offset((1i32 - 3i32) as
                                                               isize)).nd,
                                            b"|\x00" as *const u8 as
                                                *const libc::c_char,
                                            (*yyvsp.offset((3i32 - 3i32) as
                                                               isize)).nd)
                        }
                        211 => {
                            yyval.nd =
                                call_bin_op(p,
                                            (*yyvsp.offset((1i32 - 3i32) as
                                                               isize)).nd,
                                            b"^\x00" as *const u8 as
                                                *const libc::c_char,
                                            (*yyvsp.offset((3i32 - 3i32) as
                                                               isize)).nd)
                        }
                        212 => {
                            yyval.nd =
                                call_bin_op(p,
                                            (*yyvsp.offset((1i32 - 3i32) as
                                                               isize)).nd,
                                            b"&\x00" as *const u8 as
                                                *const libc::c_char,
                                            (*yyvsp.offset((3i32 - 3i32) as
                                                               isize)).nd)
                        }
                        213 => {
                            yyval.nd =
                                call_bin_op(p,
                                            (*yyvsp.offset((1i32 - 3i32) as
                                                               isize)).nd,
                                            b"<=>\x00" as *const u8 as
                                                *const libc::c_char,
                                            (*yyvsp.offset((3i32 - 3i32) as
                                                               isize)).nd)
                        }
                        214 => {
                            yyval.nd =
                                call_bin_op(p,
                                            (*yyvsp.offset((1i32 - 3i32) as
                                                               isize)).nd,
                                            b">\x00" as *const u8 as
                                                *const libc::c_char,
                                            (*yyvsp.offset((3i32 - 3i32) as
                                                               isize)).nd)
                        }
                        215 => {
                            yyval.nd =
                                call_bin_op(p,
                                            (*yyvsp.offset((1i32 - 3i32) as
                                                               isize)).nd,
                                            b">=\x00" as *const u8 as
                                                *const libc::c_char,
                                            (*yyvsp.offset((3i32 - 3i32) as
                                                               isize)).nd)
                        }
                        216 => {
                            yyval.nd =
                                call_bin_op(p,
                                            (*yyvsp.offset((1i32 - 3i32) as
                                                               isize)).nd,
                                            b"<\x00" as *const u8 as
                                                *const libc::c_char,
                                            (*yyvsp.offset((3i32 - 3i32) as
                                                               isize)).nd)
                        }
                        217 => {
                            yyval.nd =
                                call_bin_op(p,
                                            (*yyvsp.offset((1i32 - 3i32) as
                                                               isize)).nd,
                                            b"<=\x00" as *const u8 as
                                                *const libc::c_char,
                                            (*yyvsp.offset((3i32 - 3i32) as
                                                               isize)).nd)
                        }
                        218 => {
                            yyval.nd =
                                call_bin_op(p,
                                            (*yyvsp.offset((1i32 - 3i32) as
                                                               isize)).nd,
                                            b"==\x00" as *const u8 as
                                                *const libc::c_char,
                                            (*yyvsp.offset((3i32 - 3i32) as
                                                               isize)).nd)
                        }
                        219 => {
                            yyval.nd =
                                call_bin_op(p,
                                            (*yyvsp.offset((1i32 - 3i32) as
                                                               isize)).nd,
                                            b"===\x00" as *const u8 as
                                                *const libc::c_char,
                                            (*yyvsp.offset((3i32 - 3i32) as
                                                               isize)).nd)
                        }
                        220 => {
                            yyval.nd =
                                call_bin_op(p,
                                            (*yyvsp.offset((1i32 - 3i32) as
                                                               isize)).nd,
                                            b"!=\x00" as *const u8 as
                                                *const libc::c_char,
                                            (*yyvsp.offset((3i32 - 3i32) as
                                                               isize)).nd)
                        }
                        221 => {
                            yyval.nd =
                                call_bin_op(p,
                                            (*yyvsp.offset((1i32 - 3i32) as
                                                               isize)).nd,
                                            b"=~\x00" as *const u8 as
                                                *const libc::c_char,
                                            (*yyvsp.offset((3i32 - 3i32) as
                                                               isize)).nd)
                        }
                        222 => {
                            yyval.nd =
                                call_bin_op(p,
                                            (*yyvsp.offset((1i32 - 3i32) as
                                                               isize)).nd,
                                            b"!~\x00" as *const u8 as
                                                *const libc::c_char,
                                            (*yyvsp.offset((3i32 - 3i32) as
                                                               isize)).nd)
                        }
                        223 => {
                            yyval.nd =
                                call_uni_op(p,
                                            cond((*yyvsp.offset((2i32 - 2i32)
                                                                    as
                                                                    isize)).nd),
                                            b"!\x00" as *const u8 as
                                                *const libc::c_char)
                        }
                        224 => {
                            yyval.nd =
                                call_uni_op(p,
                                            cond((*yyvsp.offset((2i32 - 2i32)
                                                                    as
                                                                    isize)).nd),
                                            b"~\x00" as *const u8 as
                                                *const libc::c_char)
                        }
                        225 => {
                            yyval.nd =
                                call_bin_op(p,
                                            (*yyvsp.offset((1i32 - 3i32) as
                                                               isize)).nd,
                                            b"<<\x00" as *const u8 as
                                                *const libc::c_char,
                                            (*yyvsp.offset((3i32 - 3i32) as
                                                               isize)).nd)
                        }
                        226 => {
                            yyval.nd =
                                call_bin_op(p,
                                            (*yyvsp.offset((1i32 - 3i32) as
                                                               isize)).nd,
                                            b">>\x00" as *const u8 as
                                                *const libc::c_char,
                                            (*yyvsp.offset((3i32 - 3i32) as
                                                               isize)).nd)
                        }
                        227 => {
                            yyval.nd =
                                new_and(p,
                                        (*yyvsp.offset((1i32 - 3i32) as
                                                           isize)).nd,
                                        (*yyvsp.offset((3i32 - 3i32) as
                                                           isize)).nd)
                        }
                        228 => {
                            yyval.nd =
                                new_or(p,
                                       (*yyvsp.offset((1i32 - 3i32) as
                                                          isize)).nd,
                                       (*yyvsp.offset((3i32 - 3i32) as
                                                          isize)).nd)
                        }
                        229 => {
                            yyval.nd =
                                new_if(p,
                                       cond((*yyvsp.offset((1i32 - 6i32) as
                                                               isize)).nd),
                                       (*yyvsp.offset((3i32 - 6i32) as
                                                          isize)).nd,
                                       (*yyvsp.offset((6i32 - 6i32) as
                                                          isize)).nd)
                        }
                        230 => {
                            yyval.nd =
                                new_if(p,
                                       cond((*yyvsp.offset((1i32 - 6i32) as
                                                               isize)).nd),
                                       (*yyvsp.offset((3i32 - 6i32) as
                                                          isize)).nd,
                                       (*yyvsp.offset((6i32 - 6i32) as
                                                          isize)).nd)
                        }
                        231 => {
                            yyval.nd =
                                (*yyvsp.offset((1i32 - 1i32) as isize)).nd
                        }
                        233 => {
                            yyval.nd =
                                (*yyvsp.offset((1i32 - 2i32) as isize)).nd;
                            if !(*yyvsp.offset((1i32 - 2i32) as
                                                   isize)).nd.is_null() {
                                (*yyval.nd).filename_index =
                                    (*(*yyvsp.offset((1i32 - 2i32) as
                                                         isize)).nd).filename_index;
                                (*yyval.nd).lineno =
                                    (*(*yyvsp.offset((1i32 - 2i32) as
                                                         isize)).nd).lineno
                            }
                        }
                        234 => {
                            yyval.nd =
                                append_gen(p,
                                           (*yyvsp.offset((1i32 - 4i32) as
                                                              isize)).nd,
                                           list1_gen(p,
                                                     new_kw_hash(p,
                                                                 (*yyvsp.offset((3i32
                                                                                     -
                                                                                     4i32)
                                                                                    as
                                                                                    isize)).nd)))
                        }
                        235 => {
                            yyval.nd =
                                cons_gen(p,
                                         new_kw_hash(p,
                                                     (*yyvsp.offset((1i32 -
                                                                         2i32)
                                                                        as
                                                                        isize)).nd),
                                         0 as *mut node);
                            if !(*yyvsp.offset((1i32 - 2i32) as
                                                   isize)).nd.is_null() {
                                (*yyval.nd).filename_index =
                                    (*(*yyvsp.offset((1i32 - 2i32) as
                                                         isize)).nd).filename_index;
                                (*yyval.nd).lineno =
                                    (*(*yyvsp.offset((1i32 - 2i32) as
                                                         isize)).nd).lineno
                            }
                        }
                        236 => {
                            yyval.nd =
                                (*yyvsp.offset((1i32 - 1i32) as isize)).nd
                        }
                        237 => {
                            void_expr_error(p,
                                            (*yyvsp.offset((1i32 - 3i32) as
                                                               isize)).nd);
                            void_expr_error(p,
                                            (*yyvsp.offset((3i32 - 3i32) as
                                                               isize)).nd);
                            yyval.nd =
                                new_mod_rescue(p,
                                               (*yyvsp.offset((1i32 - 3i32) as
                                                                  isize)).nd,
                                               (*yyvsp.offset((3i32 - 3i32) as
                                                                  isize)).nd)
                        }
                        238 => {
                            yyval.nd =
                                (*yyvsp.offset((2i32 - 3i32) as isize)).nd
                        }
                        243 => {
                            /* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
                            yyval.nd =
                                cons_gen(p,
                                         (*yyvsp.offset((1i32 - 2i32) as
                                                            isize)).nd,
                                         0 as *mut node);
                            if !(*yyvsp.offset((1i32 - 2i32) as
                                                   isize)).nd.is_null() {
                                (*yyval.nd).filename_index =
                                    (*(*yyvsp.offset((1i32 - 2i32) as
                                                         isize)).nd).filename_index;
                                (*yyval.nd).lineno =
                                    (*(*yyvsp.offset((1i32 - 2i32) as
                                                         isize)).nd).lineno
                            }
                        }
                        244 => {
                            yyval.nd =
                                cons_gen(p,
                                         append_gen(p,
                                                    (*yyvsp.offset((1i32 -
                                                                        4i32)
                                                                       as
                                                                       isize)).nd,
                                                    list1_gen(p,
                                                              new_kw_hash(p,
                                                                          (*yyvsp.offset((3i32
                                                                                              -
                                                                                              4i32)
                                                                                             as
                                                                                             isize)).nd))),
                                         0 as *mut node);
                            if !(*yyvsp.offset((1i32 - 4i32) as
                                                   isize)).nd.is_null() {
                                (*yyval.nd).filename_index =
                                    (*(*yyvsp.offset((1i32 - 4i32) as
                                                         isize)).nd).filename_index;
                                (*yyval.nd).lineno =
                                    (*(*yyvsp.offset((1i32 - 4i32) as
                                                         isize)).nd).lineno
                            }
                        }
                        245 => {
                            yyval.nd =
                                cons_gen(p,
                                         list1_gen(p,
                                                   new_kw_hash(p,
                                                               (*yyvsp.offset((1i32
                                                                                   -
                                                                                   2i32)
                                                                                  as
                                                                                  isize)).nd)),
                                         0 as *mut node);
                            if !(*yyvsp.offset((1i32 - 2i32) as
                                                   isize)).nd.is_null() {
                                (*yyval.nd).filename_index =
                                    (*(*yyvsp.offset((1i32 - 2i32) as
                                                         isize)).nd).filename_index;
                                (*yyval.nd).lineno =
                                    (*(*yyvsp.offset((1i32 - 2i32) as
                                                         isize)).nd).lineno
                            }
                        }
                        246 => {
                            void_expr_error(p,
                                            (*yyvsp.offset((1i32 - 1i32) as
                                                               isize)).nd);
                            yyval.nd =
                                cons_gen(p,
                                         list1_gen(p,
                                                   (*yyvsp.offset((1i32 -
                                                                       1i32)
                                                                      as
                                                                      isize)).nd),
                                         0 as *mut node);
                            if !(*yyvsp.offset((1i32 - 1i32) as
                                                   isize)).nd.is_null() {
                                (*yyval.nd).filename_index =
                                    (*(*yyvsp.offset((1i32 - 1i32) as
                                                         isize)).nd).filename_index;
                                (*yyval.nd).lineno =
                                    (*(*yyvsp.offset((1i32 - 1i32) as
                                                         isize)).nd).lineno
                            }
                        }
                        247 => {
                            yyval.nd =
                                cons_gen(p,
                                         (*yyvsp.offset((1i32 - 2i32) as
                                                            isize)).nd,
                                         (*yyvsp.offset((2i32 - 2i32) as
                                                            isize)).nd);
                            if !(*yyvsp.offset((1i32 - 2i32) as
                                                   isize)).nd.is_null() {
                                (*yyval.nd).filename_index =
                                    (*(*yyvsp.offset((1i32 - 2i32) as
                                                         isize)).nd).filename_index;
                                (*yyval.nd).lineno =
                                    (*(*yyvsp.offset((1i32 - 2i32) as
                                                         isize)).nd).lineno
                            }
                        }
                        248 => {
                            yyval.nd =
                                cons_gen(p,
                                         list1_gen(p,
                                                   new_kw_hash(p,
                                                               (*yyvsp.offset((1i32
                                                                                   -
                                                                                   2i32)
                                                                                  as
                                                                                  isize)).nd)),
                                         (*yyvsp.offset((2i32 - 2i32) as
                                                            isize)).nd);
                            if !(*yyvsp.offset((1i32 - 2i32) as
                                                   isize)).nd.is_null() {
                                (*yyval.nd).filename_index =
                                    (*(*yyvsp.offset((1i32 - 2i32) as
                                                         isize)).nd).filename_index;
                                (*yyval.nd).lineno =
                                    (*(*yyvsp.offset((1i32 - 2i32) as
                                                         isize)).nd).lineno
                            }
                        }
                        249 => {
                            yyval.nd =
                                cons_gen(p,
                                         append_gen(p,
                                                    (*yyvsp.offset((1i32 -
                                                                        4i32)
                                                                       as
                                                                       isize)).nd,
                                                    list1_gen(p,
                                                              new_kw_hash(p,
                                                                          (*yyvsp.offset((3i32
                                                                                              -
                                                                                              4i32)
                                                                                             as
                                                                                             isize)).nd))),
                                         (*yyvsp.offset((4i32 - 4i32) as
                                                            isize)).nd);
                            if !(*yyvsp.offset((1i32 - 4i32) as
                                                   isize)).nd.is_null() {
                                (*yyval.nd).filename_index =
                                    (*(*yyvsp.offset((1i32 - 4i32) as
                                                         isize)).nd).filename_index;
                                (*yyval.nd).lineno =
                                    (*(*yyvsp.offset((1i32 - 4i32) as
                                                         isize)).nd).lineno
                            }
                        }
                        250 => {
                            yyval.nd =
                                cons_gen(p, 0 as *mut node,
                                         (*yyvsp.offset((1i32 - 1i32) as
                                                            isize)).nd);
                            if !(*yyvsp.offset((1i32 - 1i32) as
                                                   isize)).nd.is_null() {
                                (*yyval.nd).filename_index =
                                    (*(*yyvsp.offset((1i32 - 1i32) as
                                                         isize)).nd).filename_index;
                                (*yyval.nd).lineno =
                                    (*(*yyvsp.offset((1i32 - 1i32) as
                                                         isize)).nd).lineno
                            }
                        }
                        251 => {
                            yyval.stack = (*p).cmdarg_stack;
                            (*p).cmdarg_stack =
                                (*p).cmdarg_stack << 1i32 |
                                    (1i32 & 1i32) as libc::c_uint
                        }
                        252 => {
                            (*p).cmdarg_stack =
                                (*yyvsp.offset((1i32 - 2i32) as isize)).stack;
                            yyval.nd =
                                (*yyvsp.offset((2i32 - 2i32) as isize)).nd
                        }
                        253 => {
                            yyval.nd =
                                new_block_arg(p,
                                              (*yyvsp.offset((2i32 - 2i32) as
                                                                 isize)).nd)
                        }
                        254 => {
                            yyval.nd =
                                (*yyvsp.offset((2i32 - 2i32) as isize)).nd
                        }
                        255 => { yyval.nd = 0 as *mut node }
                        258 => {
                            void_expr_error(p,
                                            (*yyvsp.offset((1i32 - 1i32) as
                                                               isize)).nd);
                            yyval.nd =
                                cons_gen(p,
                                         (*yyvsp.offset((1i32 - 1i32) as
                                                            isize)).nd,
                                         0 as *mut node);
                            if !(*yyvsp.offset((1i32 - 1i32) as
                                                   isize)).nd.is_null() {
                                (*yyval.nd).filename_index =
                                    (*(*yyvsp.offset((1i32 - 1i32) as
                                                         isize)).nd).filename_index;
                                (*yyval.nd).lineno =
                                    (*(*yyvsp.offset((1i32 - 1i32) as
                                                         isize)).nd).lineno
                            }
                        }
                        259 => {
                            void_expr_error(p,
                                            (*yyvsp.offset((2i32 - 2i32) as
                                                               isize)).nd);
                            yyval.nd =
                                cons_gen(p,
                                         new_splat(p,
                                                   (*yyvsp.offset((2i32 -
                                                                       2i32)
                                                                      as
                                                                      isize)).nd),
                                         0 as *mut node);
                            if !(*yyvsp.offset((2i32 - 2i32) as
                                                   isize)).nd.is_null() {
                                (*yyval.nd).filename_index =
                                    (*(*yyvsp.offset((2i32 - 2i32) as
                                                         isize)).nd).filename_index;
                                (*yyval.nd).lineno =
                                    (*(*yyvsp.offset((2i32 - 2i32) as
                                                         isize)).nd).lineno
                            }
                        }
                        260 => {
                            /* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
                            void_expr_error(p,
                                            (*yyvsp.offset((3i32 - 3i32) as
                                                               isize)).nd);
                            yyval.nd =
                                append_gen(p,
                                           (*yyvsp.offset((1i32 - 3i32) as
                                                              isize)).nd,
                                           list1_gen(p,
                                                     (*yyvsp.offset((3i32 -
                                                                         3i32)
                                                                        as
                                                                        isize)).nd))
                        }
                        261 => {
                            void_expr_error(p,
                                            (*yyvsp.offset((4i32 - 4i32) as
                                                               isize)).nd);
                            yyval.nd =
                                append_gen(p,
                                           (*yyvsp.offset((1i32 - 4i32) as
                                                              isize)).nd,
                                           list1_gen(p,
                                                     new_splat(p,
                                                               (*yyvsp.offset((4i32
                                                                                   -
                                                                                   4i32)
                                                                                  as
                                                                                  isize)).nd)))
                        }
                        262 => {
                            void_expr_error(p,
                                            (*yyvsp.offset((3i32 - 3i32) as
                                                               isize)).nd);
                            yyval.nd =
                                append_gen(p,
                                           (*yyvsp.offset((1i32 - 3i32) as
                                                              isize)).nd,
                                           list1_gen(p,
                                                     (*yyvsp.offset((3i32 -
                                                                         3i32)
                                                                        as
                                                                        isize)).nd))
                        }
                        263 => {
                            void_expr_error(p,
                                            (*yyvsp.offset((4i32 - 4i32) as
                                                               isize)).nd);
                            yyval.nd =
                                append_gen(p,
                                           (*yyvsp.offset((1i32 - 4i32) as
                                                              isize)).nd,
                                           list1_gen(p,
                                                     new_splat(p,
                                                               (*yyvsp.offset((4i32
                                                                                   -
                                                                                   4i32)
                                                                                  as
                                                                                  isize)).nd)))
                        }
                        264 => {
                            void_expr_error(p,
                                            (*yyvsp.offset((2i32 - 2i32) as
                                                               isize)).nd);
                            yyval.nd =
                                list1_gen(p,
                                          new_splat(p,
                                                    (*yyvsp.offset((2i32 -
                                                                        2i32)
                                                                       as
                                                                       isize)).nd))
                        }
                        272 => {
                            yyval.nd =
                                new_fcall(p,
                                          (*yyvsp.offset((1i32 - 1i32) as
                                                             isize)).id,
                                          0 as *mut node)
                        }
                        273 => {
                            yyval.stack = (*p).cmdarg_stack;
                            (*p).cmdarg_stack = 0i32 as libc::c_uint
                        }
                        274 => {
                            (*p).cmdarg_stack =
                                (*yyvsp.offset((2i32 - 4i32) as isize)).stack;
                            yyval.nd =
                                (*yyvsp.offset((3i32 - 4i32) as isize)).nd
                        }
                        275 => {
                            yyval.stack = (*p).cmdarg_stack;
                            (*p).cmdarg_stack = 0i32 as libc::c_uint
                        }
                        276 => { (*p).lstate = EXPR_ENDARG }
                        277 => {
                            (*p).cmdarg_stack =
                                (*yyvsp.offset((2i32 - 5i32) as isize)).stack;
                            yyval.nd =
                                (*yyvsp.offset((3i32 - 5i32) as isize)).nd
                        }
                        278 => { (*p).lstate = EXPR_ENDARG }
                        279 => { yyval.nd = new_nil(p) }
                        280 => {
                            yyval.nd =
                                (*yyvsp.offset((2i32 - 3i32) as isize)).nd
                        }
                        281 => {
                            yyval.nd =
                                new_colon2(p,
                                           (*yyvsp.offset((1i32 - 3i32) as
                                                              isize)).nd,
                                           (*yyvsp.offset((3i32 - 3i32) as
                                                              isize)).id)
                        }
                        282 => {
                            yyval.nd =
                                new_colon3(p,
                                           (*yyvsp.offset((2i32 - 2i32) as
                                                              isize)).id)
                        }
                        283 => {
                            yyval.nd =
                                new_array(p,
                                          (*yyvsp.offset((2i32 - 3i32) as
                                                             isize)).nd);
                            if !(*yyvsp.offset((2i32 - 3i32) as
                                                   isize)).nd.is_null() {
                                (*yyval.nd).filename_index =
                                    (*(*yyvsp.offset((2i32 - 3i32) as
                                                         isize)).nd).filename_index;
                                (*yyval.nd).lineno =
                                    (*(*yyvsp.offset((2i32 - 3i32) as
                                                         isize)).nd).lineno
                            }
                        }
                        284 => {
                            yyval.nd =
                                new_hash(p,
                                         (*yyvsp.offset((2i32 - 3i32) as
                                                            isize)).nd);
                            if !(*yyvsp.offset((2i32 - 3i32) as
                                                   isize)).nd.is_null() {
                                (*yyval.nd).filename_index =
                                    (*(*yyvsp.offset((2i32 - 3i32) as
                                                         isize)).nd).filename_index;
                                (*yyval.nd).lineno =
                                    (*(*yyvsp.offset((2i32 - 3i32) as
                                                         isize)).nd).lineno
                            }
                        }
                        285 => { yyval.nd = new_return(p, 0 as *mut node) }
                        286 => {
                            yyval.nd =
                                new_yield(p,
                                          (*yyvsp.offset((2i32 - 2i32) as
                                                             isize)).nd)
                        }
                        287 => {
                            yyval.nd =
                                call_uni_op(p,
                                            cond((*yyvsp.offset((3i32 - 4i32)
                                                                    as
                                                                    isize)).nd),
                                            b"!\x00" as *const u8 as
                                                *const libc::c_char)
                        }
                        288 => {
                            yyval.nd =
                                call_uni_op(p, new_nil(p),
                                            b"!\x00" as *const u8 as
                                                *const libc::c_char)
                        }
                        289 => {
                            yyval.nd =
                                new_fcall(p,
                                          (*yyvsp.offset((1i32 - 2i32) as
                                                             isize)).id,
                                          cons_gen(p, 0 as *mut node,
                                                   (*yyvsp.offset((2i32 -
                                                                       2i32)
                                                                      as
                                                                      isize)).nd))
                        }
                        291 => {
                            call_with_block(p,
                                            (*yyvsp.offset((1i32 - 2i32) as
                                                               isize)).nd,
                                            (*yyvsp.offset((2i32 - 2i32) as
                                                               isize)).nd);
                            yyval.nd =
                                (*yyvsp.offset((1i32 - 2i32) as isize)).nd
                        }
                        292 => {
                            local_nest(p);
                            yyval.num = (*p).lpar_beg;
                            (*p).paren_nest += 1;
                            (*p).lpar_beg = (*p).paren_nest
                        }
                        293 => {
                            yyval.stack = (*p).cmdarg_stack;
                            (*p).cmdarg_stack = 0i32 as libc::c_uint
                        }
                        294 => {
                            (*p).lpar_beg =
                                (*yyvsp.offset((2i32 - 5i32) as isize)).num;
                            yyval.nd =
                                new_lambda(p,
                                           (*yyvsp.offset((3i32 - 5i32) as
                                                              isize)).nd,
                                           (*yyvsp.offset((5i32 - 5i32) as
                                                              isize)).nd);
                            /* YYDEFACT[STATE-NAME] -- Default rule to reduce with in state
   STATE-NUM when YYTABLE doesn't specify something else to do.  Zero
   means the default is an error.  */
                            local_unnest(p);
                            (*p).cmdarg_stack =
                                (*yyvsp.offset((4i32 - 5i32) as isize)).stack;
                            (*p).cmdarg_stack =
                                (*p).cmdarg_stack >> 1i32 |
                                    (*p).cmdarg_stack & 1i32 as libc::c_uint
                        }
                        295 => {
                            yyval.nd =
                                new_if(p,
                                       cond((*yyvsp.offset((2i32 - 6i32) as
                                                               isize)).nd),
                                       (*yyvsp.offset((4i32 - 6i32) as
                                                          isize)).nd,
                                       (*yyvsp.offset((5i32 - 6i32) as
                                                          isize)).nd);
                            (*yyval.nd).lineno =
                                (*yyvsp.offset((1i32 - 6i32) as isize)).num as
                                    uint16_t
                        }
                        296 => {
                            yyval.nd =
                                new_unless(p,
                                           cond((*yyvsp.offset((2i32 - 6i32)
                                                                   as
                                                                   isize)).nd),
                                           (*yyvsp.offset((4i32 - 6i32) as
                                                              isize)).nd,
                                           (*yyvsp.offset((5i32 - 6i32) as
                                                              isize)).nd);
                            (*yyval.nd).lineno =
                                (*yyvsp.offset((1i32 - 6i32) as isize)).num as
                                    uint16_t
                        }
                        297 => {
                            (*p).cond_stack =
                                (*p).cond_stack << 1i32 |
                                    (1i32 & 1i32) as libc::c_uint
                        }
                        298 => { (*p).cond_stack = (*p).cond_stack >> 1i32 }
                        299 => {
                            yyval.nd =
                                new_while(p,
                                          cond((*yyvsp.offset((3i32 - 7i32) as
                                                                  isize)).nd),
                                          (*yyvsp.offset((6i32 - 7i32) as
                                                             isize)).nd);
                            (*yyval.nd).lineno =
                                (*yyvsp.offset((1i32 - 7i32) as isize)).num as
                                    uint16_t
                        }
                        300 => {
                            (*p).cond_stack =
                                (*p).cond_stack << 1i32 |
                                    (1i32 & 1i32) as libc::c_uint
                        }
                        301 => { (*p).cond_stack = (*p).cond_stack >> 1i32 }
                        302 => {
                            yyval.nd =
                                new_until(p,
                                          cond((*yyvsp.offset((3i32 - 7i32) as
                                                                  isize)).nd),
                                          (*yyvsp.offset((6i32 - 7i32) as
                                                             isize)).nd);
                            (*yyval.nd).lineno =
                                (*yyvsp.offset((1i32 - 7i32) as isize)).num as
                                    uint16_t
                        }
                        303 => {
                            yyval.nd =
                                new_case(p,
                                         (*yyvsp.offset((2i32 - 5i32) as
                                                            isize)).nd,
                                         (*yyvsp.offset((4i32 - 5i32) as
                                                            isize)).nd)
                        }
                        304 => {
                            yyval.nd =
                                new_case(p, 0 as *mut node,
                                         (*yyvsp.offset((3i32 - 4i32) as
                                                            isize)).nd)
                        }
                        305 => {
                            (*p).cond_stack =
                                (*p).cond_stack << 1i32 |
                                    (1i32 & 1i32) as libc::c_uint
                        }
                        306 => { (*p).cond_stack = (*p).cond_stack >> 1i32 }
                        307 => {
                            yyval.nd =
                                new_for(p,
                                        (*yyvsp.offset((2i32 - 9i32) as
                                                           isize)).nd,
                                        (*yyvsp.offset((5i32 - 9i32) as
                                                           isize)).nd,
                                        (*yyvsp.offset((8i32 - 9i32) as
                                                           isize)).nd);
                            (*yyval.nd).lineno =
                                (*yyvsp.offset((1i32 - 9i32) as isize)).num as
                                    uint16_t
                        }
                        308 => {
                            if 0 != (*p).in_def || 0 != (*p).in_single {
                                yyerror(p,
                                        b"class definition in method body\x00"
                                            as *const u8 as
                                            *const libc::c_char);
                            }
                            yyval.nd = local_switch(p)
                        }
                        309 => {
                            yyval.nd =
                                new_class(p,
                                          (*yyvsp.offset((2i32 - 6i32) as
                                                             isize)).nd,
                                          (*yyvsp.offset((3i32 - 6i32) as
                                                             isize)).nd,
                                          (*yyvsp.offset((5i32 - 6i32) as
                                                             isize)).nd);
                            (*yyval.nd).lineno =
                                (*yyvsp.offset((1i32 - 6i32) as isize)).num as
                                    uint16_t;
                            local_resume(p,
                                         (*yyvsp.offset((4i32 - 6i32) as
                                                            isize)).nd);
                        }
                        310 => { yyval.num = (*p).in_def; (*p).in_def = 0i32 }
                        311 => {
                            yyval.nd =
                                cons_gen(p, local_switch(p),
                                         (*p).in_single as intptr_t as
                                             *mut node);
                            (*p).in_single = 0i32
                        }
                        312 => {
                            yyval.nd =
                                new_sclass(p,
                                           (*yyvsp.offset((3i32 - 8i32) as
                                                              isize)).nd,
                                           (*yyvsp.offset((7i32 - 8i32) as
                                                              isize)).nd);
                            (*yyval.nd).lineno =
                                (*yyvsp.offset((1i32 - 8i32) as isize)).num as
                                    uint16_t;
                            local_resume(p,
                                         (*(*yyvsp.offset((6i32 - 8i32) as
                                                              isize)).nd).car);
                            (*p).in_def =
                                (*yyvsp.offset((4i32 - 8i32) as isize)).num;
                            (*p).in_single =
                                (*(*yyvsp.offset((6i32 - 8i32) as
                                                     isize)).nd).cdr as
                                    intptr_t as libc::c_int
                        }
                        313 => {
                            if 0 != (*p).in_def || 0 != (*p).in_single {
                                yyerror(p,
                                        b"module definition in method body\x00"
                                            as *const u8 as
                                            *const libc::c_char);
                            }
                            yyval.nd = local_switch(p)
                        }
                        314 => {
                            yyval.nd =
                                new_module(p,
                                           (*yyvsp.offset((2i32 - 5i32) as
                                                              isize)).nd,
                                           (*yyvsp.offset((4i32 - 5i32) as
                                                              isize)).nd);
                            (*yyval.nd).lineno =
                                (*yyvsp.offset((1i32 - 5i32) as isize)).num as
                                    uint16_t;
                            local_resume(p,
                                         (*yyvsp.offset((3i32 - 5i32) as
                                                            isize)).nd);
                        }
                        315 => {
                            yyval.stack = (*p).cmdarg_stack;
                            (*p).cmdarg_stack = 0i32 as libc::c_uint
                        }
                        316 => {
                            (*p).in_def += 1;
                            yyval.nd = local_switch(p)
                        }
                        317 => {
                            yyval.nd =
                                new_def(p,
                                        (*yyvsp.offset((2i32 - 7i32) as
                                                           isize)).id,
                                        (*yyvsp.offset((5i32 - 7i32) as
                                                           isize)).nd,
                                        (*yyvsp.offset((6i32 - 7i32) as
                                                           isize)).nd);
                            (*yyval.nd).lineno =
                                (*yyvsp.offset((1i32 - 7i32) as isize)).num as
                                    uint16_t;
                            local_resume(p,
                                         (*yyvsp.offset((4i32 - 7i32) as
                                                            isize)).nd);
                            (*p).in_def -= 1;
                            (*p).cmdarg_stack =
                                (*yyvsp.offset((3i32 - 7i32) as isize)).stack
                        }
                        318 => {
                            (*p).lstate = EXPR_FNAME;
                            yyval.stack = (*p).cmdarg_stack;
                            (*p).cmdarg_stack = 0i32 as libc::c_uint
                        }
                        319 => {
                            (*p).in_single += 1;
                            /* force for args */
                            (*p).lstate = EXPR_ENDFN;
                            yyval.nd = local_switch(p)
                        }
                        320 => {
                            /* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
   STATE-NUM.  */
                            yyval.nd =
                                new_sdef(p,
                                         (*yyvsp.offset((2i32 - 9i32) as
                                                            isize)).nd,
                                         (*yyvsp.offset((5i32 - 9i32) as
                                                            isize)).id,
                                         (*yyvsp.offset((7i32 - 9i32) as
                                                            isize)).nd,
                                         (*yyvsp.offset((8i32 - 9i32) as
                                                            isize)).nd);
                            (*yyval.nd).lineno =
                                (*yyvsp.offset((1i32 - 9i32) as isize)).num as
                                    uint16_t;
                            local_resume(p,
                                         (*yyvsp.offset((6i32 - 9i32) as
                                                            isize)).nd);
                            (*p).in_single -= 1;
                            (*p).cmdarg_stack =
                                (*yyvsp.offset((4i32 - 9i32) as isize)).stack
                        }
                        321 => { yyval.nd = new_break(p, 0 as *mut node) }
                        322 => { yyval.nd = new_next(p, 0 as *mut node) }
                        323 => { yyval.nd = new_redo(p) }
                        324 => { yyval.nd = new_retry(p) }
                        325 => {
                            yyval.nd =
                                (*yyvsp.offset((1i32 - 1i32) as isize)).nd;
                            if yyval.nd.is_null() { yyval.nd = new_nil(p) }
                        }
                        332 => {
                            yyval.nd =
                                new_if(p,
                                       cond((*yyvsp.offset((2i32 - 5i32) as
                                                               isize)).nd),
                                       (*yyvsp.offset((4i32 - 5i32) as
                                                          isize)).nd,
                                       (*yyvsp.offset((5i32 - 5i32) as
                                                          isize)).nd)
                        }
                        334 => {
                            yyval.nd =
                                (*yyvsp.offset((2i32 - 2i32) as isize)).nd
                        }
                        335 => {
                            yyval.nd =
                                list1_gen(p,
                                          list1_gen(p,
                                                    (*yyvsp.offset((1i32 -
                                                                        1i32)
                                                                       as
                                                                       isize)).nd))
                        }
                        337 => {
                            yyval.nd =
                                list3_gen(p,
                                          (*yyvsp.offset((1i32 - 1i32) as
                                                             isize)).nd,
                                          0 as *mut node, 0 as *mut node)
                        }
                        338 => {
                            yyval.nd =
                                list3_gen(p,
                                          (*yyvsp.offset((1i32 - 4i32) as
                                                             isize)).nd,
                                          new_arg(p,
                                                  (*yyvsp.offset((4i32 - 4i32)
                                                                     as
                                                                     isize)).id),
                                          0 as *mut node)
                        }
                        339 => {
                            yyval.nd =
                                list3_gen(p,
                                          (*yyvsp.offset((1i32 - 6i32) as
                                                             isize)).nd,
                                          new_arg(p,
                                                  (*yyvsp.offset((4i32 - 6i32)
                                                                     as
                                                                     isize)).id),
                                          (*yyvsp.offset((6i32 - 6i32) as
                                                             isize)).nd)
                        }
                        340 => {
                            local_add_f(p, 0i32 as mrb_sym);
                            yyval.nd =
                                list3_gen(p,
                                          (*yyvsp.offset((1i32 - 3i32) as
                                                             isize)).nd,
                                          -1i32 as *mut node, 0 as *mut node)
                        }
                        341 => {
                            yyval.nd =
                                list3_gen(p,
                                          (*yyvsp.offset((1i32 - 5i32) as
                                                             isize)).nd,
                                          -1i32 as *mut node,
                                          (*yyvsp.offset((5i32 - 5i32) as
                                                             isize)).nd)
                        }
                        342 => {
                            yyval.nd =
                                list3_gen(p, 0 as *mut node,
                                          new_arg(p,
                                                  (*yyvsp.offset((2i32 - 2i32)
                                                                     as
                                                                     isize)).id),
                                          0 as *mut node)
                        }
                        343 => {
                            yyval.nd =
                                list3_gen(p, 0 as *mut node,
                                          new_arg(p,
                                                  (*yyvsp.offset((2i32 - 4i32)
                                                                     as
                                                                     isize)).id),
                                          (*yyvsp.offset((4i32 - 4i32) as
                                                             isize)).nd)
                        }
                        344 => {
                            local_add_f(p, 0i32 as mrb_sym);
                            yyval.nd =
                                list3_gen(p, 0 as *mut node,
                                          -1i32 as *mut node, 0 as *mut node)
                        }
                        345 => { local_add_f(p, 0i32 as mrb_sym); }
                        346 => {
                            yyval.nd =
                                list3_gen(p, 0 as *mut node,
                                          -1i32 as *mut node,
                                          (*yyvsp.offset((4i32 - 4i32) as
                                                             isize)).nd)
                        }
                        347 => {
                            yyval.nd =
                                new_args_tail(p,
                                              (*yyvsp.offset((1i32 - 4i32) as
                                                                 isize)).nd,
                                              (*yyvsp.offset((3i32 - 4i32) as
                                                                 isize)).nd,
                                              (*yyvsp.offset((4i32 - 4i32) as
                                                                 isize)).id)
                        }
                        348 => {
                            yyval.nd =
                                new_args_tail(p,
                                              (*yyvsp.offset((1i32 - 2i32) as
                                                                 isize)).nd,
                                              0 as *mut node,
                                              (*yyvsp.offset((2i32 - 2i32) as
                                                                 isize)).id)
                        }
                        349 => {
                            yyval.nd =
                                new_args_tail(p, 0 as *mut node,
                                              (*yyvsp.offset((1i32 - 2i32) as
                                                                 isize)).nd,
                                              (*yyvsp.offset((2i32 - 2i32) as
                                                                 isize)).id)
                        }
                        350 => {
                            yyval.nd =
                                new_args_tail(p, 0 as *mut node,
                                              0 as *mut node,
                                              (*yyvsp.offset((1i32 - 1i32) as
                                                                 isize)).id)
                        }
                        351 => {
                            yyval.nd =
                                (*yyvsp.offset((2i32 - 2i32) as isize)).nd
                        }
                        352 => {
                            /* YYTABLE[YYPACT[STATE-NUM]].  What to do in state STATE-NUM.  If
   positive, shift that token.  If negative, reduce the rule which
   number is the opposite.  If zero, do what YYDEFACT says.
   If YYTABLE_NINF, syntax error.  */
                            yyval.nd =
                                new_args_tail(p, 0 as *mut node,
                                              0 as *mut node, 0i32 as mrb_sym)
                        }
                        353 => {
                            yyval.nd =
                                new_args(p,
                                         (*yyvsp.offset((1i32 - 6i32) as
                                                            isize)).nd,
                                         (*yyvsp.offset((3i32 - 6i32) as
                                                            isize)).nd,
                                         (*yyvsp.offset((5i32 - 6i32) as
                                                            isize)).id,
                                         0 as *mut node,
                                         (*yyvsp.offset((6i32 - 6i32) as
                                                            isize)).nd)
                        }
                        354 => {
                            yyval.nd =
                                new_args(p,
                                         (*yyvsp.offset((1i32 - 8i32) as
                                                            isize)).nd,
                                         (*yyvsp.offset((3i32 - 8i32) as
                                                            isize)).nd,
                                         (*yyvsp.offset((5i32 - 8i32) as
                                                            isize)).id,
                                         (*yyvsp.offset((7i32 - 8i32) as
                                                            isize)).nd,
                                         (*yyvsp.offset((8i32 - 8i32) as
                                                            isize)).nd)
                        }
                        355 => {
                            yyval.nd =
                                new_args(p,
                                         (*yyvsp.offset((1i32 - 4i32) as
                                                            isize)).nd,
                                         (*yyvsp.offset((3i32 - 4i32) as
                                                            isize)).nd,
                                         0i32 as mrb_sym, 0 as *mut node,
                                         (*yyvsp.offset((4i32 - 4i32) as
                                                            isize)).nd)
                        }
                        356 => {
                            yyval.nd =
                                new_args(p,
                                         (*yyvsp.offset((1i32 - 6i32) as
                                                            isize)).nd,
                                         (*yyvsp.offset((3i32 - 6i32) as
                                                            isize)).nd,
                                         0i32 as mrb_sym,
                                         (*yyvsp.offset((5i32 - 6i32) as
                                                            isize)).nd,
                                         (*yyvsp.offset((6i32 - 6i32) as
                                                            isize)).nd)
                        }
                        357 => {
                            yyval.nd =
                                new_args(p,
                                         (*yyvsp.offset((1i32 - 4i32) as
                                                            isize)).nd,
                                         0 as *mut node,
                                         (*yyvsp.offset((3i32 - 4i32) as
                                                            isize)).id,
                                         0 as *mut node,
                                         (*yyvsp.offset((4i32 - 4i32) as
                                                            isize)).nd)
                        }
                        358 => {
                            yyval.nd =
                                new_args(p,
                                         (*yyvsp.offset((1i32 - 3i32) as
                                                            isize)).nd,
                                         0 as *mut node, 0i32 as mrb_sym,
                                         0 as *mut node,
                                         (*yyvsp.offset((3i32 - 3i32) as
                                                            isize)).nd)
                        }
                        359 => {
                            yyval.nd =
                                new_args(p,
                                         (*yyvsp.offset((1i32 - 6i32) as
                                                            isize)).nd,
                                         0 as *mut node,
                                         (*yyvsp.offset((3i32 - 6i32) as
                                                            isize)).id,
                                         (*yyvsp.offset((5i32 - 6i32) as
                                                            isize)).nd,
                                         (*yyvsp.offset((6i32 - 6i32) as
                                                            isize)).nd)
                        }
                        360 => {
                            yyval.nd =
                                new_args(p,
                                         (*yyvsp.offset((1i32 - 2i32) as
                                                            isize)).nd,
                                         0 as *mut node, 0i32 as mrb_sym,
                                         0 as *mut node,
                                         (*yyvsp.offset((2i32 - 2i32) as
                                                            isize)).nd)
                        }
                        361 => {
                            yyval.nd =
                                new_args(p, 0 as *mut node,
                                         (*yyvsp.offset((1i32 - 4i32) as
                                                            isize)).nd,
                                         (*yyvsp.offset((3i32 - 4i32) as
                                                            isize)).id,
                                         0 as *mut node,
                                         (*yyvsp.offset((4i32 - 4i32) as
                                                            isize)).nd)
                        }
                        362 => {
                            yyval.nd =
                                new_args(p, 0 as *mut node,
                                         (*yyvsp.offset((1i32 - 6i32) as
                                                            isize)).nd,
                                         (*yyvsp.offset((3i32 - 6i32) as
                                                            isize)).id,
                                         (*yyvsp.offset((5i32 - 6i32) as
                                                            isize)).nd,
                                         (*yyvsp.offset((6i32 - 6i32) as
                                                            isize)).nd)
                        }
                        363 => {
                            yyval.nd =
                                new_args(p, 0 as *mut node,
                                         (*yyvsp.offset((1i32 - 2i32) as
                                                            isize)).nd,
                                         0i32 as mrb_sym, 0 as *mut node,
                                         (*yyvsp.offset((2i32 - 2i32) as
                                                            isize)).nd)
                        }
                        364 => {
                            yyval.nd =
                                new_args(p, 0 as *mut node,
                                         (*yyvsp.offset((1i32 - 4i32) as
                                                            isize)).nd,
                                         0i32 as mrb_sym,
                                         (*yyvsp.offset((3i32 - 4i32) as
                                                            isize)).nd,
                                         (*yyvsp.offset((4i32 - 4i32) as
                                                            isize)).nd)
                        }
                        365 => {
                            yyval.nd =
                                new_args(p, 0 as *mut node, 0 as *mut node,
                                         (*yyvsp.offset((1i32 - 2i32) as
                                                            isize)).id,
                                         0 as *mut node,
                                         (*yyvsp.offset((2i32 - 2i32) as
                                                            isize)).nd)
                        }
                        366 => {
                            yyval.nd =
                                new_args(p, 0 as *mut node, 0 as *mut node,
                                         (*yyvsp.offset((1i32 - 4i32) as
                                                            isize)).id,
                                         (*yyvsp.offset((3i32 - 4i32) as
                                                            isize)).nd,
                                         (*yyvsp.offset((4i32 - 4i32) as
                                                            isize)).nd)
                        }
                        367 => {
                            yyval.nd =
                                new_args(p, 0 as *mut node, 0 as *mut node,
                                         0i32 as mrb_sym, 0 as *mut node,
                                         (*yyvsp.offset((1i32 - 1i32) as
                                                            isize)).nd)
                        }
                        368 => {
                            local_add_blk(p, 0i32 as mrb_sym);
                            yyval.nd = 0 as *mut node
                        }
                        369 => {
                            (*p).set_cmd_start(1i32 as mrb_bool);
                            yyval.nd =
                                (*yyvsp.offset((1i32 - 1i32) as isize)).nd
                        }
                        370 => { local_add_blk(p, 0i32 as mrb_sym); }
                        371 => { yyval.nd = 0 as *mut node }
                        372 => {
                            local_add_blk(p, 0i32 as mrb_sym);
                            yyval.nd = 0 as *mut node
                        }
                        373 => {
                            yyval.nd =
                                (*yyvsp.offset((2i32 - 4i32) as isize)).nd
                        }
                        374 => { yyval.nd = 0 as *mut node }
                        375 => { yyval.nd = 0 as *mut node }
                        378 => {
                            local_add_f(p,
                                        (*yyvsp.offset((1i32 - 1i32) as
                                                           isize)).id);
                            new_bv(p,
                                   (*yyvsp.offset((1i32 - 1i32) as
                                                      isize)).id);
                        }
                        380 => {
                            yyval.nd =
                                (*yyvsp.offset((2i32 - 4i32) as isize)).nd
                        }
                        381 => {
                            yyval.nd =
                                (*yyvsp.offset((1i32 - 1i32) as isize)).nd
                        }
                        382 => {
                            yyval.nd =
                                (*yyvsp.offset((2i32 - 3i32) as isize)).nd
                        }
                        383 => {
                            yyval.nd =
                                (*yyvsp.offset((2i32 - 3i32) as isize)).nd
                        }
                        384 => { local_nest(p); }
                        385 => {
                            yyval.nd =
                                new_block(p,
                                          (*yyvsp.offset((3i32 - 5i32) as
                                                             isize)).nd,
                                          (*yyvsp.offset((4i32 - 5i32) as
                                                             isize)).nd);
                            local_unnest(p);
                        }
                        386 => {
                            if (*(*yyvsp.offset((1i32 - 2i32) as
                                                    isize)).nd).car ==
                                   NODE_YIELD as libc::c_int as *mut node {
                                yyerror(p,
                                        b"block given to yield\x00" as
                                            *const u8 as *const libc::c_char);
                            } else {
                                call_with_block(p,
                                                (*yyvsp.offset((1i32 - 2i32)
                                                                   as
                                                                   isize)).nd,
                                                (*yyvsp.offset((2i32 - 2i32)
                                                                   as
                                                                   isize)).nd);
                            }
                            yyval.nd =
                                (*yyvsp.offset((1i32 - 2i32) as isize)).nd
                        }
                        387 => {
                            yyval.nd =
                                new_call(p,
                                         (*yyvsp.offset((1i32 - 4i32) as
                                                            isize)).nd,
                                         (*yyvsp.offset((3i32 - 4i32) as
                                                            isize)).id,
                                         (*yyvsp.offset((4i32 - 4i32) as
                                                            isize)).nd,
                                         (*yyvsp.offset((2i32 - 4i32) as
                                                            isize)).num)
                        }
                        388 => {
                            yyval.nd =
                                new_call(p,
                                         (*yyvsp.offset((1i32 - 5i32) as
                                                            isize)).nd,
                                         (*yyvsp.offset((3i32 - 5i32) as
                                                            isize)).id,
                                         (*yyvsp.offset((4i32 - 5i32) as
                                                            isize)).nd,
                                         (*yyvsp.offset((2i32 - 5i32) as
                                                            isize)).num);
                            call_with_block(p, yyval.nd,
                                            (*yyvsp.offset((5i32 - 5i32) as
                                                               isize)).nd);
                        }
                        389 => {
                            yyval.nd =
                                new_call(p,
                                         (*yyvsp.offset((1i32 - 5i32) as
                                                            isize)).nd,
                                         (*yyvsp.offset((3i32 - 5i32) as
                                                            isize)).id,
                                         (*yyvsp.offset((4i32 - 5i32) as
                                                            isize)).nd,
                                         (*yyvsp.offset((2i32 - 5i32) as
                                                            isize)).num);
                            call_with_block(p, yyval.nd,
                                            (*yyvsp.offset((5i32 - 5i32) as
                                                               isize)).nd);
                        }
                        390 => {
                            yyval.nd =
                                new_fcall(p,
                                          (*yyvsp.offset((1i32 - 2i32) as
                                                             isize)).id,
                                          (*yyvsp.offset((2i32 - 2i32) as
                                                             isize)).nd)
                        }
                        391 => {
                            yyval.nd =
                                new_call(p,
                                         (*yyvsp.offset((1i32 - 4i32) as
                                                            isize)).nd,
                                         (*yyvsp.offset((3i32 - 4i32) as
                                                            isize)).id,
                                         (*yyvsp.offset((4i32 - 4i32) as
                                                            isize)).nd,
                                         (*yyvsp.offset((2i32 - 4i32) as
                                                            isize)).num)
                        }
                        392 => {
                            yyval.nd =
                                new_call(p,
                                         (*yyvsp.offset((1i32 - 4i32) as
                                                            isize)).nd,
                                         (*yyvsp.offset((3i32 - 4i32) as
                                                            isize)).id,
                                         (*yyvsp.offset((4i32 - 4i32) as
                                                            isize)).nd,
                                         343i32)
                        }
                        393 => {
                            yyval.nd =
                                new_call(p,
                                         (*yyvsp.offset((1i32 - 3i32) as
                                                            isize)).nd,
                                         (*yyvsp.offset((3i32 - 3i32) as
                                                            isize)).id,
                                         0 as *mut node, 343i32)
                        }
                        394 => {
                            yyval.nd =
                                new_call(p,
                                         (*yyvsp.offset((1i32 - 3i32) as
                                                            isize)).nd,
                                         intern_gen(p,
                                                    b"call\x00" as *const u8
                                                        as
                                                        *const libc::c_char,
                                                    4i32 as size_t),
                                         (*yyvsp.offset((3i32 - 3i32) as
                                                            isize)).nd,
                                         (*yyvsp.offset((2i32 - 3i32) as
                                                            isize)).num)
                        }
                        395 => {
                            yyval.nd =
                                new_call(p,
                                         (*yyvsp.offset((1i32 - 3i32) as
                                                            isize)).nd,
                                         intern_gen(p,
                                                    b"call\x00" as *const u8
                                                        as
                                                        *const libc::c_char,
                                                    4i32 as size_t),
                                         (*yyvsp.offset((3i32 - 3i32) as
                                                            isize)).nd,
                                         343i32)
                        }
                        396 => {
                            yyval.nd =
                                new_super(p,
                                          (*yyvsp.offset((2i32 - 2i32) as
                                                             isize)).nd)
                        }
                        397 => { yyval.nd = new_zsuper(p) }
                        398 => {
                            yyval.nd =
                                new_call(p,
                                         (*yyvsp.offset((1i32 - 4i32) as
                                                            isize)).nd,
                                         intern_gen(p,
                                                    b"[]\x00" as *const u8 as
                                                        *const libc::c_char,
                                                    2i32 as size_t),
                                         (*yyvsp.offset((3i32 - 4i32) as
                                                            isize)).nd,
                                         '.' as i32)
                        }
                        399 => {
                            local_nest(p);
                            yyval.num = (*p).lineno as libc::c_int
                        }
                        400 => {
                            yyval.nd =
                                new_block(p,
                                          (*yyvsp.offset((3i32 - 5i32) as
                                                             isize)).nd,
                                          (*yyvsp.offset((4i32 - 5i32) as
                                                             isize)).nd);
                            (*yyval.nd).lineno =
                                (*yyvsp.offset((2i32 - 5i32) as isize)).num as
                                    uint16_t;
                            local_unnest(p);
                        }
                        401 => {
                            local_nest(p);
                            yyval.num = (*p).lineno as libc::c_int
                        }
                        402 => {
                            yyval.nd =
                                new_block(p,
                                          (*yyvsp.offset((3i32 - 5i32) as
                                                             isize)).nd,
                                          (*yyvsp.offset((4i32 - 5i32) as
                                                             isize)).nd);
                            (*yyval.nd).lineno =
                                (*yyvsp.offset((2i32 - 5i32) as isize)).num as
                                    uint16_t;
                            local_unnest(p);
                        }
                        403 => {
                            yyval.nd =
                                cons_gen(p,
                                         cons_gen(p,
                                                  (*yyvsp.offset((2i32 - 5i32)
                                                                     as
                                                                     isize)).nd,
                                                  (*yyvsp.offset((4i32 - 5i32)
                                                                     as
                                                                     isize)).nd),
                                         (*yyvsp.offset((5i32 - 5i32) as
                                                            isize)).nd)
                        }
                        404 => {
                            if !(*yyvsp.offset((1i32 - 1i32) as
                                                   isize)).nd.is_null() {
                                yyval.nd =
                                    cons_gen(p,
                                             cons_gen(p, 0 as *mut node,
                                                      (*yyvsp.offset((1i32 -
                                                                          1i32)
                                                                         as
                                                                         isize)).nd),
                                             0 as *mut node)
                            } else { yyval.nd = 0 as *mut node }
                        }
                        406 => {
                            yyval.nd =
                                list1_gen(p,
                                          list3_gen(p,
                                                    (*yyvsp.offset((2i32 -
                                                                        6i32)
                                                                       as
                                                                       isize)).nd,
                                                    (*yyvsp.offset((3i32 -
                                                                        6i32)
                                                                       as
                                                                       isize)).nd,
                                                    (*yyvsp.offset((5i32 -
                                                                        6i32)
                                                                       as
                                                                       isize)).nd));
                            if !(*yyvsp.offset((6i32 - 6i32) as
                                                   isize)).nd.is_null() {
                                yyval.nd =
                                    append_gen(p, yyval.nd,
                                               (*yyvsp.offset((6i32 - 6i32) as
                                                                  isize)).nd)
                            }
                        }
                        408 => {
                            yyval.nd =
                                list1_gen(p,
                                          (*yyvsp.offset((1i32 - 1i32) as
                                                             isize)).nd)
                        }
                        411 => {
                            yyval.nd =
                                (*yyvsp.offset((2i32 - 2i32) as isize)).nd
                        }
                        413 => {
                            yyval.nd =
                                (*yyvsp.offset((2i32 - 2i32) as isize)).nd
                        }
                        420 => {
                            yyval.nd =
                                concat_string(p,
                                              (*yyvsp.offset((1i32 - 2i32) as
                                                                 isize)).nd,
                                              (*yyvsp.offset((2i32 - 2i32) as
                                                                 isize)).nd)
                        }
                        423 => {
                            yyval.nd =
                                (*yyvsp.offset((2i32 - 2i32) as isize)).nd
                        }
                        424 => {
                            yyval.nd =
                                new_dstr(p,
                                         append_gen(p,
                                                    (*yyvsp.offset((2i32 -
                                                                        3i32)
                                                                       as
                                                                       isize)).nd,
                                                    list1_gen(p,
                                                              (*yyvsp.offset((3i32
                                                                                  -
                                                                                  3i32)
                                                                                 as
                                                                                 isize)).nd)))
                        }
                        426 => {
                            yyval.nd =
                                append_gen(p,
                                           (*yyvsp.offset((1i32 - 2i32) as
                                                              isize)).nd,
                                           (*yyvsp.offset((2i32 - 2i32) as
                                                              isize)).nd)
                        }
                        427 => {
                            yyval.nd =
                                list1_gen(p,
                                          (*yyvsp.offset((1i32 - 1i32) as
                                                             isize)).nd)
                        }
                        428 => {
                            yyval.nd = (*p).lex_strterm;
                            (*p).lex_strterm = 0 as *mut mrb_ast_node
                        }
                        429 => {
                            (*p).lex_strterm =
                                (*yyvsp.offset((2i32 - 4i32) as isize)).nd;
                            yyval.nd =
                                list2_gen(p,
                                          (*yyvsp.offset((1i32 - 4i32) as
                                                             isize)).nd,
                                          (*yyvsp.offset((3i32 - 4i32) as
                                                             isize)).nd)
                        }
                        430 => {
                            yyval.nd = list1_gen(p, new_literal_delim(p))
                        }
                        431 => {
                            yyval.nd = list1_gen(p, new_literal_delim(p))
                        }
                        432 => {
                            yyval.nd =
                                (*yyvsp.offset((2i32 - 2i32) as isize)).nd
                        }
                        433 => {
                            yyval.nd =
                                new_dxstr(p,
                                          append_gen(p,
                                                     (*yyvsp.offset((2i32 -
                                                                         3i32)
                                                                        as
                                                                        isize)).nd,
                                                     list1_gen(p,
                                                               (*yyvsp.offset((3i32
                                                                                   -
                                                                                   3i32)
                                                                                  as
                                                                                  isize)).nd)))
                        }
                        434 => {
                            yyval.nd =
                                (*yyvsp.offset((2i32 - 2i32) as isize)).nd
                        }
                        435 => {
                            yyval.nd =
                                new_dregx(p,
                                          (*yyvsp.offset((2i32 - 3i32) as
                                                             isize)).nd,
                                          (*yyvsp.offset((3i32 - 3i32) as
                                                             isize)).nd)
                        }
                        439 => {
                            let mut inf: *mut parser_heredoc_info =
                                parsing_heredoc_inf(p);
                            (*inf).doc =
                                append_gen(p, (*inf).doc,
                                           list1_gen(p,
                                                     new_str(p,
                                                             b"\x00" as
                                                                 *const u8 as
                                                                 *const libc::c_char,
                                                             0i32 as
                                                                 size_t)));
                            heredoc_end(p);
                        }
                        440 => { heredoc_end(p); }
                        443 => {
                            let mut inf_0: *mut parser_heredoc_info =
                                parsing_heredoc_inf(p);
                            (*inf_0).doc =
                                append_gen(p, (*inf_0).doc,
                                           list1_gen(p,
                                                     (*yyvsp.offset((1i32 -
                                                                         1i32)
                                                                        as
                                                                        isize)).nd));
                            heredoc_treat_nextline(p);
                        }
                        444 => {
                            yyval.nd = (*p).lex_strterm;
                            (*p).lex_strterm = 0 as *mut mrb_ast_node
                        }
                        445 => {
                            let mut inf_1: *mut parser_heredoc_info =
                                parsing_heredoc_inf(p);
                            (*p).lex_strterm =
                                (*yyvsp.offset((2i32 - 4i32) as isize)).nd;
                            (*inf_1).doc =
                                append_gen(p,
                                           append_gen(p, (*inf_1).doc,
                                                      list1_gen(p,
                                                                (*yyvsp.offset((1i32
                                                                                    -
                                                                                    4i32)
                                                                                   as
                                                                                   isize)).nd)),
                                           list1_gen(p,
                                                     (*yyvsp.offset((3i32 -
                                                                         4i32)
                                                                        as
                                                                        isize)).nd))
                        }
                        446 => {
                            yyval.nd =
                                new_words(p,
                                          list1_gen(p,
                                                    (*yyvsp.offset((2i32 -
                                                                        2i32)
                                                                       as
                                                                       isize)).nd))
                        }
                        447 => {
                            yyval.nd =
                                new_words(p,
                                          append_gen(p,
                                                     (*yyvsp.offset((2i32 -
                                                                         3i32)
                                                                        as
                                                                        isize)).nd,
                                                     list1_gen(p,
                                                               (*yyvsp.offset((3i32
                                                                                   -
                                                                                   3i32)
                                                                                  as
                                                                                  isize)).nd)))
                        }
                        448 => {
                            (*p).lstate = EXPR_ENDARG;
                            yyval.nd =
                                new_sym(p,
                                        (*yyvsp.offset((1i32 - 1i32) as
                                                           isize)).id)
                        }
                        449 => {
                            (*p).lstate = EXPR_ENDARG;
                            yyval.nd =
                                new_dsym(p,
                                         new_dstr(p,
                                                  append_gen(p,
                                                             (*yyvsp.offset((3i32
                                                                                 -
                                                                                 4i32)
                                                                                as
                                                                                isize)).nd,
                                                             list1_gen(p,
                                                                       (*yyvsp.offset((4i32
                                                                                           -
                                                                                           4i32)
                                                                                          as
                                                                                          isize)).nd))))
                        }
                        450 => {
                            yyval.id =
                                (*yyvsp.offset((2i32 - 2i32) as isize)).id
                        }
                        455 => {
                            yyval.id =
                                new_strsym(p,
                                           (*yyvsp.offset((1i32 - 1i32) as
                                                              isize)).nd)
                        }
                        456 => {
                            yyval.id =
                                new_strsym(p,
                                           (*yyvsp.offset((2i32 - 2i32) as
                                                              isize)).nd)
                        }
                        457 => {
                            yyval.nd =
                                new_symbols(p,
                                            list1_gen(p,
                                                      (*yyvsp.offset((2i32 -
                                                                          2i32)
                                                                         as
                                                                         isize)).nd))
                        }
                        458 => {
                            yyval.nd =
                                new_symbols(p,
                                            append_gen(p,
                                                       (*yyvsp.offset((2i32 -
                                                                           3i32)
                                                                          as
                                                                          isize)).nd,
                                                       list1_gen(p,
                                                                 (*yyvsp.offset((3i32
                                                                                     -
                                                                                     3i32)
                                                                                    as
                                                                                    isize)).nd)))
                        }
                        461 => {
                            yyval.nd =
                                negate_lit(p,
                                           (*yyvsp.offset((2i32 - 2i32) as
                                                              isize)).nd)
                        }
                        462 => {
                            yyval.nd =
                                negate_lit(p,
                                           (*yyvsp.offset((2i32 - 2i32) as
                                                              isize)).nd)
                        }
                        463 => {
                            yyval.nd =
                                new_lvar(p,
                                         (*yyvsp.offset((1i32 - 1i32) as
                                                            isize)).id)
                        }
                        464 => {
                            yyval.nd =
                                new_ivar(p,
                                         (*yyvsp.offset((1i32 - 1i32) as
                                                            isize)).id)
                        }
                        465 => {
                            yyval.nd =
                                new_gvar(p,
                                         (*yyvsp.offset((1i32 - 1i32) as
                                                            isize)).id)
                        }
                        466 => {
                            yyval.nd =
                                new_cvar(p,
                                         (*yyvsp.offset((1i32 - 1i32) as
                                                            isize)).id)
                        }
                        467 => {
                            yyval.nd =
                                new_const(p,
                                          (*yyvsp.offset((1i32 - 1i32) as
                                                             isize)).id)
                        }
                        468 => {
                            assignable(p,
                                       (*yyvsp.offset((1i32 - 1i32) as
                                                          isize)).nd);
                        }
                        469 => {
                            yyval.nd =
                                var_reference(p,
                                              (*yyvsp.offset((1i32 - 1i32) as
                                                                 isize)).nd)
                        }
                        470 => { yyval.nd = new_nil(p) }
                        471 => { yyval.nd = new_self(p) }
                        472 => { yyval.nd = new_true(p) }
                        473 => { yyval.nd = new_false(p) }
                        474 => {
                            let mut fn_0: *const libc::c_char =
                                mrb_sym2name_len((*p).mrb, (*p).filename_sym,
                                                 0 as *mut mrb_int);
                            if fn_0.is_null() {
                                fn_0 =
                                    b"(null)\x00" as *const u8 as
                                        *const libc::c_char
                            }
                            yyval.nd = new_str(p, fn_0, strlen(fn_0))
                        }
                        475 => {
                            let mut buf: [libc::c_char; 16] = [0; 16];
                            dump_int((*p).lineno, buf.as_mut_ptr());
                            yyval.nd =
                                new_int(p, buf.as_mut_ptr(), 10i32, 0i32)
                        }
                        476 => {
                            let mut enc: *const libc::c_char =
                                b"UTF-8\x00" as *const u8 as
                                    *const libc::c_char;
                            yyval.nd = new_str(p, enc, strlen(enc))
                        }
                        479 => { yyval.nd = 0 as *mut node }
                        480 => {
                            (*p).lstate = EXPR_BEG;
                            (*p).set_cmd_start(1i32 as mrb_bool)
                        }
                        481 => {
                            yyval.nd =
                                (*yyvsp.offset((3i32 - 4i32) as isize)).nd
                        }
                        482 => {
                            yyval.nd =
                                (*yyvsp.offset((2i32 - 3i32) as isize)).nd;
                            (*p).lstate = EXPR_BEG;
                            (*p).set_cmd_start(1i32 as mrb_bool)
                        }
                        483 => {
                            yyval.nd =
                                (*yyvsp.offset((1i32 - 2i32) as isize)).nd
                        }
                        485 => {
                            void_expr_error(p,
                                            (*yyvsp.offset((2i32 - 2i32) as
                                                               isize)).nd);
                            yyval.nd =
                                new_kw_arg(p,
                                           (*yyvsp.offset((1i32 - 2i32) as
                                                              isize)).id,
                                           (*yyvsp.offset((2i32 - 2i32) as
                                                              isize)).nd)
                        }
                        486 => {
                            yyval.nd =
                                new_kw_arg(p,
                                           (*yyvsp.offset((1i32 - 1i32) as
                                                              isize)).id,
                                           0 as *mut node)
                        }
                        487 => {
                            yyval.nd =
                                new_kw_arg(p,
                                           (*yyvsp.offset((1i32 - 2i32) as
                                                              isize)).id,
                                           (*yyvsp.offset((2i32 - 2i32) as
                                                              isize)).nd)
                        }
                        488 => {
                            yyval.nd =
                                new_kw_arg(p,
                                           (*yyvsp.offset((1i32 - 1i32) as
                                                              isize)).id,
                                           0 as *mut node)
                        }
                        489 => {
                            yyval.nd =
                                list1_gen(p,
                                          (*yyvsp.offset((1i32 - 1i32) as
                                                             isize)).nd)
                        }
                        490 => {
                            yyval.nd =
                                append_gen(p,
                                           (*yyvsp.offset((1i32 - 3i32) as
                                                              isize)).nd,
                                           list1_gen(p,
                                                     (*yyvsp.offset((3i32 -
                                                                         3i32)
                                                                        as
                                                                        isize)).nd))
                        }
                        491 => {
                            yyval.nd =
                                list1_gen(p,
                                          (*yyvsp.offset((1i32 - 1i32) as
                                                             isize)).nd)
                        }
                        492 => {
                            yyval.nd =
                                append_gen(p,
                                           (*yyvsp.offset((1i32 - 3i32) as
                                                              isize)).nd,
                                           list1_gen(p,
                                                     (*yyvsp.offset((3i32 -
                                                                         3i32)
                                                                        as
                                                                        isize)).nd))
                        }
                        495 => {
                            yyval.nd =
                                cons_gen(p,
                                         NODE_KW_REST_ARGS as libc::c_int as
                                             *mut node,
                                         (*yyvsp.offset((2i32 - 2i32) as
                                                            isize)).id as
                                             intptr_t as *mut node)
                        }
                        496 => {
                            yyval.nd =
                                cons_gen(p,
                                         NODE_KW_REST_ARGS as libc::c_int as
                                             *mut node, 0 as *mut node)
                        }
                        497 => {
                            yyval.nd =
                                new_args_tail(p,
                                              (*yyvsp.offset((1i32 - 4i32) as
                                                                 isize)).nd,
                                              (*yyvsp.offset((3i32 - 4i32) as
                                                                 isize)).nd,
                                              (*yyvsp.offset((4i32 - 4i32) as
                                                                 isize)).id)
                        }
                        498 => {
                            yyval.nd =
                                new_args_tail(p,
                                              (*yyvsp.offset((1i32 - 2i32) as
                                                                 isize)).nd,
                                              0 as *mut node,
                                              (*yyvsp.offset((2i32 - 2i32) as
                                                                 isize)).id)
                        }
                        499 => {
                            yyval.nd =
                                new_args_tail(p, 0 as *mut node,
                                              (*yyvsp.offset((1i32 - 2i32) as
                                                                 isize)).nd,
                                              (*yyvsp.offset((2i32 - 2i32) as
                                                                 isize)).id)
                        }
                        500 => {
                            yyval.nd =
                                new_args_tail(p, 0 as *mut node,
                                              0 as *mut node,
                                              (*yyvsp.offset((1i32 - 1i32) as
                                                                 isize)).id)
                        }
                        501 => {
                            yyval.nd =
                                (*yyvsp.offset((2i32 - 2i32) as isize)).nd
                        }
                        502 => {
                            yyval.nd =
                                new_args_tail(p, 0 as *mut node,
                                              0 as *mut node, 0i32 as mrb_sym)
                        }
                        503 => {
                            yyval.nd =
                                new_args(p,
                                         (*yyvsp.offset((1i32 - 6i32) as
                                                            isize)).nd,
                                         (*yyvsp.offset((3i32 - 6i32) as
                                                            isize)).nd,
                                         (*yyvsp.offset((5i32 - 6i32) as
                                                            isize)).id,
                                         0 as *mut node,
                                         (*yyvsp.offset((6i32 - 6i32) as
                                                            isize)).nd)
                        }
                        504 => {
                            yyval.nd =
                                new_args(p,
                                         (*yyvsp.offset((1i32 - 8i32) as
                                                            isize)).nd,
                                         (*yyvsp.offset((3i32 - 8i32) as
                                                            isize)).nd,
                                         (*yyvsp.offset((5i32 - 8i32) as
                                                            isize)).id,
                                         (*yyvsp.offset((7i32 - 8i32) as
                                                            isize)).nd,
                                         (*yyvsp.offset((8i32 - 8i32) as
                                                            isize)).nd)
                        }
                        505 => {
                            yyval.nd =
                                new_args(p,
                                         (*yyvsp.offset((1i32 - 4i32) as
                                                            isize)).nd,
                                         (*yyvsp.offset((3i32 - 4i32) as
                                                            isize)).nd,
                                         0i32 as mrb_sym, 0 as *mut node,
                                         (*yyvsp.offset((4i32 - 4i32) as
                                                            isize)).nd)
                        }
                        506 => {
                            yyval.nd =
                                new_args(p,
                                         (*yyvsp.offset((1i32 - 6i32) as
                                                            isize)).nd,
                                         (*yyvsp.offset((3i32 - 6i32) as
                                                            isize)).nd,
                                         0i32 as mrb_sym,
                                         (*yyvsp.offset((5i32 - 6i32) as
                                                            isize)).nd,
                                         (*yyvsp.offset((6i32 - 6i32) as
                                                            isize)).nd)
                        }
                        507 => {
                            yyval.nd =
                                new_args(p,
                                         (*yyvsp.offset((1i32 - 4i32) as
                                                            isize)).nd,
                                         0 as *mut node,
                                         (*yyvsp.offset((3i32 - 4i32) as
                                                            isize)).id,
                                         0 as *mut node,
                                         (*yyvsp.offset((4i32 - 4i32) as
                                                            isize)).nd)
                        }
                        508 => {
                            yyval.nd =
                                new_args(p,
                                         (*yyvsp.offset((1i32 - 6i32) as
                                                            isize)).nd,
                                         0 as *mut node,
                                         (*yyvsp.offset((3i32 - 6i32) as
                                                            isize)).id,
                                         (*yyvsp.offset((5i32 - 6i32) as
                                                            isize)).nd,
                                         (*yyvsp.offset((6i32 - 6i32) as
                                                            isize)).nd)
                        }
                        509 => {
                            yyval.nd =
                                new_args(p,
                                         (*yyvsp.offset((1i32 - 2i32) as
                                                            isize)).nd,
                                         0 as *mut node, 0i32 as mrb_sym,
                                         0 as *mut node,
                                         (*yyvsp.offset((2i32 - 2i32) as
                                                            isize)).nd)
                        }
                        510 => {
                            yyval.nd =
                                new_args(p, 0 as *mut node,
                                         (*yyvsp.offset((1i32 - 4i32) as
                                                            isize)).nd,
                                         (*yyvsp.offset((3i32 - 4i32) as
                                                            isize)).id,
                                         0 as *mut node,
                                         (*yyvsp.offset((4i32 - 4i32) as
                                                            isize)).nd)
                        }
                        511 => {
                            yyval.nd =
                                new_args(p, 0 as *mut node,
                                         (*yyvsp.offset((1i32 - 6i32) as
                                                            isize)).nd,
                                         (*yyvsp.offset((3i32 - 6i32) as
                                                            isize)).id,
                                         (*yyvsp.offset((5i32 - 6i32) as
                                                            isize)).nd,
                                         (*yyvsp.offset((6i32 - 6i32) as
                                                            isize)).nd)
                        }
                        512 => {
                            yyval.nd =
                                new_args(p, 0 as *mut node,
                                         (*yyvsp.offset((1i32 - 2i32) as
                                                            isize)).nd,
                                         0i32 as mrb_sym, 0 as *mut node,
                                         (*yyvsp.offset((2i32 - 2i32) as
                                                            isize)).nd)
                        }
                        513 => {
                            yyval.nd =
                                new_args(p, 0 as *mut node,
                                         (*yyvsp.offset((1i32 - 4i32) as
                                                            isize)).nd,
                                         0i32 as mrb_sym,
                                         (*yyvsp.offset((3i32 - 4i32) as
                                                            isize)).nd,
                                         (*yyvsp.offset((4i32 - 4i32) as
                                                            isize)).nd)
                        }
                        514 => {
                            yyval.nd =
                                new_args(p, 0 as *mut node, 0 as *mut node,
                                         (*yyvsp.offset((1i32 - 2i32) as
                                                            isize)).id,
                                         0 as *mut node,
                                         (*yyvsp.offset((2i32 - 2i32) as
                                                            isize)).nd)
                        }
                        515 => {
                            yyval.nd =
                                new_args(p, 0 as *mut node, 0 as *mut node,
                                         (*yyvsp.offset((1i32 - 4i32) as
                                                            isize)).id,
                                         (*yyvsp.offset((3i32 - 4i32) as
                                                            isize)).nd,
                                         (*yyvsp.offset((4i32 - 4i32) as
                                                            isize)).nd)
                        }
                        516 => {
                            yyval.nd =
                                new_args(p, 0 as *mut node, 0 as *mut node,
                                         0i32 as mrb_sym, 0 as *mut node,
                                         (*yyvsp.offset((1i32 - 1i32) as
                                                            isize)).nd)
                        }
                        517 => {
                            local_add_f(p,
                                        mrb_intern_static((*p).mrb,
                                                          b"&\x00" as
                                                              *const u8 as
                                                              *const libc::c_char,
                                                          (::std::mem::size_of::<[libc::c_char; 2]>()
                                                               as
                                                               libc::c_ulong).wrapping_sub(1i32
                                                                                               as
                                                                                               libc::c_ulong)));
                            yyval.nd =
                                new_args(p, 0 as *mut node, 0 as *mut node,
                                         0i32 as mrb_sym, 0 as *mut node,
                                         0 as *mut node)
                        }
                        518 => {
                            yyerror(p,
                                    b"formal argument cannot be a constant\x00"
                                        as *const u8 as *const libc::c_char);
                            yyval.nd = 0 as *mut node
                        }
                        519 => {
                            yyerror(p,
                                    b"formal argument cannot be an instance variable\x00"
                                        as *const u8 as *const libc::c_char);
                            yyval.nd = 0 as *mut node
                        }
                        520 => {
                            yyerror(p,
                                    b"formal argument cannot be a global variable\x00"
                                        as *const u8 as *const libc::c_char);
                            yyval.nd = 0 as *mut node
                        }
                        521 => {
                            yyerror(p,
                                    b"formal argument cannot be a class variable\x00"
                                        as *const u8 as *const libc::c_char);
                            yyval.nd = 0 as *mut node
                        }
                        522 => { yyval.id = 0i32 as mrb_sym }
                        523 => {
                            local_add_f(p,
                                        (*yyvsp.offset((1i32 - 1i32) as
                                                           isize)).id);
                            yyval.id =
                                (*yyvsp.offset((1i32 - 1i32) as isize)).id
                        }
                        524 => {
                            yyval.nd =
                                new_arg(p,
                                        (*yyvsp.offset((1i32 - 1i32) as
                                                           isize)).id)
                        }
                        525 => { yyval.nd = local_switch(p) }
                        526 => {
                            yyval.nd =
                                new_masgn_param(p,
                                                (*yyvsp.offset((3i32 - 4i32)
                                                                   as
                                                                   isize)).nd,
                                                (*(*p).locals).car);
                            local_resume(p,
                                         (*yyvsp.offset((2i32 - 4i32) as
                                                            isize)).nd);
                            local_add_f(p, 0i32 as mrb_sym);
                        }
                        527 => {
                            yyval.nd =
                                list1_gen(p,
                                          (*yyvsp.offset((1i32 - 1i32) as
                                                             isize)).nd)
                        }
                        528 => {
                            yyval.nd =
                                append_gen(p,
                                           (*yyvsp.offset((1i32 - 3i32) as
                                                              isize)).nd,
                                           list1_gen(p,
                                                     (*yyvsp.offset((3i32 -
                                                                         3i32)
                                                                        as
                                                                        isize)).nd))
                        }
                        529 => {
                            local_add_f(p,
                                        (*yyvsp.offset((1i32 - 2i32) as
                                                           isize)).id);
                            yyval.id =
                                (*yyvsp.offset((1i32 - 2i32) as isize)).id
                        }
                        530 => {
                            void_expr_error(p,
                                            (*yyvsp.offset((2i32 - 2i32) as
                                                               isize)).nd);
                            yyval.nd =
                                cons_gen(p,
                                         (*yyvsp.offset((1i32 - 2i32) as
                                                            isize)).id as
                                             intptr_t as *mut node,
                                         (*yyvsp.offset((2i32 - 2i32) as
                                                            isize)).nd)
                        }
                        531 => {
                            void_expr_error(p,
                                            (*yyvsp.offset((2i32 - 2i32) as
                                                               isize)).nd);
                            yyval.nd =
                                cons_gen(p,
                                         (*yyvsp.offset((1i32 - 2i32) as
                                                            isize)).id as
                                             intptr_t as *mut node,
                                         (*yyvsp.offset((2i32 - 2i32) as
                                                            isize)).nd)
                        }
                        532 => {
                            yyval.nd =
                                list1_gen(p,
                                          (*yyvsp.offset((1i32 - 1i32) as
                                                             isize)).nd)
                        }
                        533 => {
                            yyval.nd =
                                append_gen(p,
                                           (*yyvsp.offset((1i32 - 3i32) as
                                                              isize)).nd,
                                           list1_gen(p,
                                                     (*yyvsp.offset((3i32 -
                                                                         3i32)
                                                                        as
                                                                        isize)).nd))
                        }
                        534 => {
                            yyval.nd =
                                list1_gen(p,
                                          (*yyvsp.offset((1i32 - 1i32) as
                                                             isize)).nd)
                        }
                        535 => {
                            yyval.nd =
                                append_gen(p,
                                           (*yyvsp.offset((1i32 - 3i32) as
                                                              isize)).nd,
                                           list1_gen(p,
                                                     (*yyvsp.offset((3i32 -
                                                                         3i32)
                                                                        as
                                                                        isize)).nd))
                        }
                        538 => {
                            local_add_f(p,
                                        (*yyvsp.offset((2i32 - 2i32) as
                                                           isize)).id);
                            yyval.id =
                                (*yyvsp.offset((2i32 - 2i32) as isize)).id
                        }
                        539 => {
                            local_add_f(p,
                                        mrb_intern_static((*p).mrb,
                                                          b"*\x00" as
                                                              *const u8 as
                                                              *const libc::c_char,
                                                          (::std::mem::size_of::<[libc::c_char; 2]>()
                                                               as
                                                               libc::c_ulong).wrapping_sub(1i32
                                                                                               as
                                                                                               libc::c_ulong)));
                            yyval.id = -1i32 as mrb_sym
                        }
                        542 => {
                            yyval.id =
                                (*yyvsp.offset((2i32 - 2i32) as isize)).id
                        }
                        543 => {
                            yyval.id =
                                (*yyvsp.offset((2i32 - 2i32) as isize)).id
                        }
                        544 => { yyval.id = 0i32 as mrb_sym }
                        545 => {
                            yyval.nd =
                                (*yyvsp.offset((1i32 - 1i32) as isize)).nd;
                            if yyval.nd.is_null() { yyval.nd = new_nil(p) }
                        }
                        546 => { (*p).lstate = EXPR_BEG }
                        547 => {
                            if (*yyvsp.offset((3i32 - 4i32) as
                                                  isize)).nd.is_null() {
                                yyerror(p,
                                        b"can\'t define singleton method for ().\x00"
                                            as *const u8 as
                                            *const libc::c_char);
                            } else {
                                match (*(*yyvsp.offset((3i32 - 4i32) as
                                                           isize)).nd).car as
                                          intptr_t as libc::c_int as node_type
                                          as libc::c_uint {
                                    51 | 52 | 53 | 54 | 56 | 45 | 47 | 31 | 84
                                    => {
                                        yyerror(p,
                                                b"can\'t define singleton method for literals\x00"
                                                    as *const u8 as
                                                    *const libc::c_char);
                                    }
                                    _ => { }
                                }
                            }
                            yyval.nd =
                                (*yyvsp.offset((3i32 - 4i32) as isize)).nd
                        }
                        549 => {
                            yyval.nd =
                                (*yyvsp.offset((1i32 - 2i32) as isize)).nd
                        }
                        550 => {
                            yyval.nd =
                                list1_gen(p,
                                          (*yyvsp.offset((1i32 - 1i32) as
                                                             isize)).nd);
                            if !(*yyvsp.offset((1i32 - 1i32) as
                                                   isize)).nd.is_null() {
                                (*yyval.nd).filename_index =
                                    (*(*yyvsp.offset((1i32 - 1i32) as
                                                         isize)).nd).filename_index;
                                (*yyval.nd).lineno =
                                    (*(*yyvsp.offset((1i32 - 1i32) as
                                                         isize)).nd).lineno
                            }
                        }
                        551 => {
                            yyval.nd =
                                append_gen(p,
                                           (*yyvsp.offset((1i32 - 3i32) as
                                                              isize)).nd,
                                           list1_gen(p,
                                                     (*yyvsp.offset((3i32 -
                                                                         3i32)
                                                                        as
                                                                        isize)).nd))
                        }
                        552 => {
                            void_expr_error(p,
                                            (*yyvsp.offset((1i32 - 3i32) as
                                                               isize)).nd);
                            void_expr_error(p,
                                            (*yyvsp.offset((3i32 - 3i32) as
                                                               isize)).nd);
                            yyval.nd =
                                cons_gen(p,
                                         (*yyvsp.offset((1i32 - 3i32) as
                                                            isize)).nd,
                                         (*yyvsp.offset((3i32 - 3i32) as
                                                            isize)).nd)
                        }
                        553 => {
                            void_expr_error(p,
                                            (*yyvsp.offset((3i32 - 3i32) as
                                                               isize)).nd);
                            yyval.nd =
                                cons_gen(p,
                                         new_sym(p,
                                                 (*yyvsp.offset((1i32 - 3i32)
                                                                    as
                                                                    isize)).id),
                                         (*yyvsp.offset((3i32 - 3i32) as
                                                            isize)).nd)
                        }
                        554 => {
                            void_expr_error(p,
                                            (*yyvsp.offset((3i32 - 3i32) as
                                                               isize)).nd);
                            if (*(*yyvsp.offset((1i32 - 3i32) as
                                                    isize)).nd).car ==
                                   NODE_DSTR as libc::c_int as *mut node {
                                yyval.nd =
                                    cons_gen(p,
                                             new_dsym(p,
                                                      (*yyvsp.offset((1i32 -
                                                                          3i32)
                                                                         as
                                                                         isize)).nd),
                                             (*yyvsp.offset((3i32 - 3i32) as
                                                                isize)).nd)
                            } else {
                                yyval.nd =
                                    cons_gen(p,
                                             new_sym(p,
                                                     new_strsym(p,
                                                                (*yyvsp.offset((1i32
                                                                                    -
                                                                                    3i32)
                                                                                   as
                                                                                   isize)).nd)),
                                             (*yyvsp.offset((3i32 - 3i32) as
                                                                isize)).nd)
                            }
                        }
                        555 => {
                            void_expr_error(p,
                                            (*yyvsp.offset((2i32 - 2i32) as
                                                               isize)).nd);
                            yyval.nd =
                                cons_gen(p,
                                         cons_gen(p,
                                                  NODE_KW_REST_ARGS as
                                                      libc::c_int as
                                                      *mut node,
                                                  0 as *mut node),
                                         (*yyvsp.offset((2i32 - 2i32) as
                                                            isize)).nd)
                        }
                        568 => { yyval.num = '.' as i32 }
                        569 => { yyval.num = 0i32 }
                        571 => { yyval.num = 343i32 }
                        581 => { yyerrstatus = 0i32 }
                        584 => {
                            (*p).lineno = (*p).lineno.wrapping_add(1);
                            (*p).column = 0i32
                        }
                        587 => { yyval.nd = 0 as *mut node }
                        _ => { }
                    }
                    yyvsp = yyvsp.offset(-(yylen as isize));
                    yyssp = yyssp.offset(-(yylen as isize));
                    yylen = 0i32;
                    yyvsp = yyvsp.offset(1isize);
                    *yyvsp = yyval;
                    /* Now `shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */
                    yyn = yyr1[yyn as usize] as libc::c_int;
                    yystate =
                        yypgoto[(yyn - 146i32) as usize] as libc::c_int +
                            *yyssp as libc::c_int;
                    if 0i32 <= yystate && yystate <= 11645i32 &&
                           yycheck[yystate as usize] as libc::c_int ==
                               *yyssp as libc::c_int {
                        yystate = yytable[yystate as usize] as libc::c_int
                    } else {
                        yystate =
                            yydefgoto[(yyn - 146i32) as usize] as libc::c_int
                    }
                }
                _ => { }
            }
            yyssp = yyssp.offset(1isize)
        }
    match current_block {
        6879604579906898719 => { yyresult = 1i32 }
        2136884818828959983 => { yyresult = 0i32 }
        _ => {
            yyerror(p,
                    b"memory exhausted\x00" as *const u8 as
                        *const libc::c_char);
            yyresult = 2i32
        }
    }
    /* Fall through.  */
    if yychar != 0i32 && yychar != -2i32 {
        yydestruct(b"Cleanup: discarding lookahead\x00" as *const u8 as
                       *const libc::c_char, yytoken, &mut yylval, p);
    }
    /* Do not reclaim the symbols of the rule which action triggered
     this YYABORT or YYACCEPT.  */
    yyvsp = yyvsp.offset(-(yylen as isize));
    yyssp = yyssp.offset(-(yylen as isize));
    while yyssp != yyss {
        yydestruct(b"Cleanup: popping\x00" as *const u8 as
                       *const libc::c_char,
                   yystos[*yyssp as usize] as libc::c_int, yyvsp, p);
        yyvsp = yyvsp.offset(-1isize);
        yyssp = yyssp.offset(-1isize)
    }
    yyss != yyssa.as_mut_ptr();
    yymsg != yymsgbuf.as_mut_ptr();
    /* Make sure YYID is used.  */
    return yyresult;
}
unsafe extern "C" fn yylex(mut lval: *mut libc::c_void,
                           mut p: *mut parser_state) -> libc::c_int {
    (*p).ylval = lval;
    return parser_yylex(p);
}
unsafe extern "C" fn parser_init_cxt(mut p: *mut parser_state,
                                     mut cxt: *mut mrbc_context) {
    if cxt.is_null() { return }
    if !(*cxt).filename.is_null() {
        mrb_parser_set_filename(p, (*cxt).filename);
    }
    if 0 != (*cxt).lineno { (*p).lineno = (*cxt).lineno }
    if !(*cxt).syms.is_null() {
        let mut i: libc::c_int = 0;
        (*p).locals = cons_gen(p, 0 as *mut node, 0 as *mut node);
        i = 0i32;
        while i < (*cxt).slen {
            local_add_f(p, *(*cxt).syms.offset(i as isize));
            i += 1
        }
    }
    (*p).set_capture_errors((*cxt).capture_errors());
    (*p).set_no_optimize((*cxt).no_optimize());
    (*p).set_on_eval((*cxt).on_eval());
    if (*cxt).partial_hook.is_some() { (*p).cxt = cxt };
}
unsafe extern "C" fn parser_update_cxt(mut p: *mut parser_state,
                                       mut cxt: *mut mrbc_context) {
    let mut n: *mut node = 0 as *mut node;
    let mut n0: *mut node = 0 as *mut node;
    let mut i: libc::c_int = 0i32;
    if cxt.is_null() { return }
    if (*(*p).tree).car as intptr_t as libc::c_int !=
           NODE_SCOPE as libc::c_int {
        return
    }
    n = (*(*(*p).tree).cdr).car;
    n0 = n;
    while !n.is_null() { i += 1; n = (*n).cdr }
    (*cxt).syms =
        mrb_realloc((*p).mrb, (*cxt).syms as *mut libc::c_void,
                    (i as
                         libc::c_ulong).wrapping_mul(::std::mem::size_of::<mrb_sym>()
                                                         as libc::c_ulong)) as
            *mut mrb_sym;
    (*cxt).slen = i;
    i = 0i32;
    n = n0;
    while !n.is_null() {
        *(*cxt).syms.offset(i as isize) = (*n).car as intptr_t as mrb_sym;
        i += 1;
        n = (*n).cdr
    };
}
#[no_mangle]
pub unsafe extern "C" fn mrb_parser_parse(mut p: *mut parser_state,
                                          mut c: *mut mrbc_context) {
    let mut buf1: mrb_jmpbuf = mrb_jmpbuf{impl_0: [0; 37],};
    (*p).jmp = &mut buf1;
    if _setjmp((*(*p).jmp).impl_0.as_mut_ptr()) == 0i32 {
        let mut n: libc::c_int = 1i32;
        (*p).set_cmd_start(1i32 as mrb_bool);
        (*p).in_single = 0i32;
        (*p).in_def = (*p).in_single;
        (*p).nwarn = 0i32 as size_t;
        (*p).nerr = (*p).nwarn;
        (*p).lex_strterm = 0 as *mut mrb_ast_node;
        parser_init_cxt(p, c);
        if !(*(*p).mrb).jmp.is_null() {
            n = yyparse(p)
        } else {
            let mut buf2: mrb_jmpbuf = mrb_jmpbuf{impl_0: [0; 37],};
            (*(*p).mrb).jmp = &mut buf2;
            if _setjmp((*(*(*p).mrb).jmp).impl_0.as_mut_ptr()) == 0i32 {
                n = yyparse(p)
            } else { (*p).nerr = (*p).nerr.wrapping_add(1) }
            (*(*p).mrb).jmp = 0 as *mut mrb_jmpbuf
        }
        if n != 0i32 || (*p).nerr > 0i32 as libc::c_ulong {
            (*p).tree = 0 as *mut mrb_ast_node;
            return
        }
        if (*p).tree.is_null() { (*p).tree = new_nil(p) }
        parser_update_cxt(p, c);
        if !c.is_null() && 0 != (*c).dump_result() as libc::c_int {
            mrb_parser_dump((*p).mrb, (*p).tree, 0i32);
        }
    } else {
        yyerror(p,
                b"memory allocation error\x00" as *const u8 as
                    *const libc::c_char);
        (*p).nerr = (*p).nerr.wrapping_add(1);
        (*p).tree = 0 as *mut mrb_ast_node;
        return
    };
}
// Initialized in run_static_initializers
static mut parser_state_zero: parser_state =
    parser_state{mrb: 0 as *const mrb_state as *mut mrb_state,
                 pool: 0 as *const mrb_pool as *mut mrb_pool,
                 cells: 0 as *const mrb_ast_node as *mut mrb_ast_node,
                 s: 0 as *const libc::c_char,
                 send: 0 as *const libc::c_char,
                 cxt: 0 as *const mrbc_context as *mut mrbc_context,
                 filename_sym: 0,
                 lineno: 0,
                 _pad: [0; 2],
                 column: 0,
                 lstate: EXPR_BEG,
                 lex_strterm: 0 as *const mrb_ast_node as *mut mrb_ast_node,
                 cond_stack: 0,
                 cmdarg_stack: 0,
                 paren_nest: 0,
                 lpar_beg: 0,
                 in_def: 0,
                 in_single: 0,
                 cmd_start: [0; 1],
                 _pad2: [0; 7],
                 locals: 0 as *const mrb_ast_node as *mut mrb_ast_node,
                 pb: 0 as *const mrb_ast_node as *mut mrb_ast_node,
                 tokbuf: 0 as *const libc::c_char as *mut libc::c_char,
                 buf: [0; 256],
                 tidx: 0,
                 tsiz: 0,
                 all_heredocs: 0 as *const mrb_ast_node as *mut mrb_ast_node,
                 heredocs_from_nextline:
                     0 as *const mrb_ast_node as *mut mrb_ast_node,
                 parsing_heredoc:
                     0 as *const mrb_ast_node as *mut mrb_ast_node,
                 lex_strterm_before_heredoc:
                     0 as *const mrb_ast_node as *mut mrb_ast_node,
                 ylval: 0 as *const libc::c_void as *mut libc::c_void,
                 nerr: 0,
                 nwarn: 0,
                 tree: 0 as *const mrb_ast_node as *mut mrb_ast_node,
                 no_optimize_on_eval_capture_errors: [0; 1],
                 _pad3: [0; 7],
                 error_buffer:
                     [mrb_parser_message{lineno: 0,
                                         column: 0,
                                         message:
                                             0 as *const libc::c_char as
                                                 *mut libc::c_char,}; 10],
                 warn_buffer:
                     [mrb_parser_message{lineno: 0,
                                         column: 0,
                                         message:
                                             0 as *const libc::c_char as
                                                 *mut libc::c_char,}; 10],
                 filename_table: 0 as *const mrb_sym as *mut mrb_sym,
                 filename_table_length: 0,
                 current_filename_index: 0,
                 _pad4: [0; 4],
                 jmp: 0 as *const mrb_jmpbuf as *mut mrb_jmpbuf,};
#[no_mangle]
pub unsafe extern "C" fn mrb_parser_new(mut mrb: *mut mrb_state)
 -> *mut mrb_parser_state {
    let mut pool: *mut mrb_pool = 0 as *mut mrb_pool;
    let mut p: *mut parser_state = 0 as *mut parser_state;
    pool = mrb_pool_open(mrb);
    if pool.is_null() { return 0 as *mut mrb_parser_state }
    p =
        mrb_pool_alloc(pool,
                       ::std::mem::size_of::<parser_state>() as libc::c_ulong)
            as *mut parser_state;
    if p.is_null() { return 0 as *mut mrb_parser_state }
    *p = parser_state_zero;
    (*p).mrb = mrb;
    (*p).pool = pool;
    (*p).send = 0 as *const libc::c_char;
    (*p).s = (*p).send;
    (*p).set_cmd_start(1i32 as mrb_bool);
    (*p).in_single = 0i32;
    (*p).in_def = (*p).in_single;
    (*p).set_capture_errors(0i32 as mrb_bool);
    (*p).lineno = 1i32 as uint16_t;
    (*p).column = 0i32;
    (*p).tsiz = 256i32;
    (*p).tokbuf = (*p).buf.as_mut_ptr();
    (*p).lex_strterm = 0 as *mut mrb_ast_node;
    (*p).parsing_heredoc = 0 as *mut mrb_ast_node;
    (*p).all_heredocs = (*p).parsing_heredoc;
    (*p).lex_strterm_before_heredoc = 0 as *mut mrb_ast_node;
    (*p).current_filename_index = -1i32 as uint16_t;
    (*p).filename_table = 0 as *mut mrb_sym;
    (*p).filename_table_length = 0i32 as uint16_t;
    return p;
}
#[no_mangle]
pub unsafe extern "C" fn mrb_parser_free(mut p: *mut parser_state) {
    if (*p).tokbuf != (*p).buf.as_mut_ptr() {
        mrb_free((*p).mrb, (*p).tokbuf as *mut libc::c_void);
    }
    mrb_pool_close((*p).pool);
}
#[no_mangle]
pub unsafe extern "C" fn mrbc_context_new(mut mrb: *mut mrb_state)
 -> *mut mrbc_context {
    return mrb_calloc(mrb, 1i32 as size_t,
                      ::std::mem::size_of::<mrbc_context>() as libc::c_ulong)
               as *mut mrbc_context;
}
#[no_mangle]
pub unsafe extern "C" fn mrbc_context_free(mut mrb: *mut mrb_state,
                                           mut cxt: *mut mrbc_context) {
    mrb_free(mrb, (*cxt).filename as *mut libc::c_void);
    mrb_free(mrb, (*cxt).syms as *mut libc::c_void);
    mrb_free(mrb, cxt as *mut libc::c_void);
}
#[no_mangle]
pub unsafe extern "C" fn mrbc_filename(mut mrb: *mut mrb_state,
                                       mut c: *mut mrbc_context,
                                       mut s: *const libc::c_char)
 -> *const libc::c_char {
    if !s.is_null() {
        let mut len: size_t = strlen(s);
        let mut p: *mut libc::c_char =
            mrb_malloc(mrb, len.wrapping_add(1i32 as libc::c_ulong)) as
                *mut libc::c_char;
        memcpy(p as *mut libc::c_void, s as *const libc::c_void,
               len.wrapping_add(1i32 as libc::c_ulong));
        if !(*c).filename.is_null() {
            mrb_free(mrb, (*c).filename as *mut libc::c_void);
        }
        (*c).filename = p
    }
    return (*c).filename;
}
#[no_mangle]
pub unsafe extern "C" fn mrbc_partial_hook(mut mrb: *mut mrb_state,
                                           mut c: *mut mrbc_context,
                                           mut func:
                                               Option<unsafe extern "C" fn(_:
                                                                               *mut mrb_parser_state)
                                                          -> libc::c_int>,
                                           mut data: *mut libc::c_void) {
    (*c).partial_hook = func;
    (*c).partial_data = data;
}
#[no_mangle]
pub unsafe extern "C" fn mrb_parser_set_filename(mut p: *mut mrb_parser_state,
                                                 mut f: *const libc::c_char) {
    let mut sym: mrb_sym = 0;
    let mut i: size_t = 0;
    let mut new_table: *mut mrb_sym = 0 as *mut mrb_sym;
    sym = mrb_intern_cstr((*p).mrb, f);
    (*p).filename_sym = sym;
    (*p).lineno =
        (if (*p).filename_table_length as libc::c_int > 0i32 {
             0i32
         } else { 1i32 }) as uint16_t;
    i = 0i32 as size_t;
    while i < (*p).filename_table_length as libc::c_ulong {
        if *(*p).filename_table.offset(i as isize) == sym {
            (*p).current_filename_index = i as libc::c_int as uint16_t;
            return
        }
        i = i.wrapping_add(1)
    }
    if (*p).filename_table_length as libc::c_int == 65535i32 {
        yyerror(p,
                b"too many files to compile\x00" as *const u8 as
                    *const libc::c_char);
        return
    }
    let fresh37 = (*p).filename_table_length;
    (*p).filename_table_length = (*p).filename_table_length.wrapping_add(1);
    (*p).current_filename_index = fresh37;
    new_table =
        parser_palloc(p,
                      (::std::mem::size_of::<mrb_sym>() as
                           libc::c_ulong).wrapping_mul((*p).filename_table_length
                                                           as libc::c_ulong))
            as *mut mrb_sym;
    if !(*p).filename_table.is_null() {
        memmove(new_table as *mut libc::c_void,
                (*p).filename_table as *const libc::c_void,
                (::std::mem::size_of::<mrb_sym>() as
                     libc::c_ulong).wrapping_mul((*p).current_filename_index
                                                     as libc::c_ulong));
    }
    (*p).filename_table = new_table;
    *(*p).filename_table.offset(((*p).filename_table_length as libc::c_int -
                                     1i32) as isize) = sym;
}
#[no_mangle]
pub unsafe extern "C" fn mrb_parser_get_filename(mut p: *mut mrb_parser_state,
                                                 mut idx: uint16_t)
 -> mrb_sym {
    if idx as libc::c_int >= (*p).filename_table_length as libc::c_int {
        return 0i32 as mrb_sym
    } else { return *(*p).filename_table.offset(idx as isize) };
}
#[no_mangle]
pub unsafe extern "C" fn mrb_parse_nstring(mut mrb: *mut mrb_state,
                                           mut s: *const libc::c_char,
                                           mut len: size_t,
                                           mut c: *mut mrbc_context)
 -> *mut mrb_parser_state {
    let mut p: *mut parser_state = 0 as *mut parser_state;
    p = mrb_parser_new(mrb);
    if p.is_null() { return 0 as *mut mrb_parser_state }
    (*p).s = s;
    (*p).send = s.offset(len as isize);
    mrb_parser_parse(p, c);
    return p;
}
/* utility functions */
#[no_mangle]
pub unsafe extern "C" fn mrb_parse_string(mut mrb: *mut mrb_state,
                                          mut s: *const libc::c_char,
                                          mut c: *mut mrbc_context)
 -> *mut mrb_parser_state {
    return mrb_parse_nstring(mrb, s, strlen(s), c);
}
#[no_mangle]
pub unsafe extern "C" fn mrb_load_exec(mut mrb: *mut mrb_state,
                                       mut p: *mut mrb_parser_state,
                                       mut c: *mut mrbc_context)
 -> mrb_value {
    let mut target: *mut RClass = (*mrb).object_class;
    let mut proc_0: *mut RProc = 0 as *mut RProc;
    let mut v: mrb_value =
        mrb_value{value: C2RustUnnamed_0{f: 0.,}, tt: MRB_TT_FALSE,};
    let mut keep: libc::c_uint = 0i32 as libc::c_uint;
    if p.is_null() { return mrb_undef_value() }
    if (*p).tree.is_null() || 0 != (*p).nerr {
        if !c.is_null() { (*c).parser_nerr = (*p).nerr }
        if 0 != (*p).capture_errors() {
            let mut buf: [libc::c_char; 256] = [0; 256];
            strcpy(buf.as_mut_ptr(),
                   b"line \x00" as *const u8 as *const libc::c_char);
            dump_int((*p).error_buffer[0usize].lineno,
                     buf.as_mut_ptr().offset(5isize));
            strcat(buf.as_mut_ptr(),
                   b": \x00" as *const u8 as *const libc::c_char);
            strncat(buf.as_mut_ptr(), (*p).error_buffer[0usize].message,
                    (::std::mem::size_of::<[libc::c_char; 256]>() as
                         libc::c_ulong).wrapping_sub(strlen(buf.as_mut_ptr())).wrapping_sub(1i32
                                                                                                as
                                                                                                libc::c_ulong));
            (*mrb).exc =
                mrb_exc_new(mrb,
                            mrb_exc_get(mrb,
                                        b"SyntaxError\x00" as *const u8 as
                                            *const libc::c_char),
                            buf.as_mut_ptr(),
                            strlen(buf.as_mut_ptr())).value.p as *mut RObject;
            mrb_parser_free(p);
            return mrb_undef_value()
        } else {
            if (*mrb).exc.is_null() {
                (*mrb).exc =
                    mrb_exc_new_str(mrb,
                                    mrb_exc_get(mrb,
                                                b"SyntaxError\x00" as
                                                    *const u8 as
                                                    *const libc::c_char),
                                    mrb_str_new_static(mrb,
                                                       b"syntax error\x00" as
                                                           *const u8 as
                                                           *const libc::c_char,
                                                       (::std::mem::size_of::<[libc::c_char; 13]>()
                                                            as
                                                            libc::c_ulong).wrapping_sub(1i32
                                                                                            as
                                                                                            libc::c_ulong))).value.p
                        as *mut RObject
            }
            mrb_parser_free(p);
            return mrb_undef_value()
        }
    }
    proc_0 = mrb_generate_code(mrb, p);
    mrb_parser_free(p);
    if proc_0.is_null() {
        if (*mrb).exc.is_null() {
            (*mrb).exc =
                mrb_exc_new_str(mrb,
                                mrb_exc_get(mrb,
                                            b"ScriptError\x00" as *const u8 as
                                                *const libc::c_char),
                                mrb_str_new_static(mrb,
                                                   b"codegen error\x00" as
                                                       *const u8 as
                                                       *const libc::c_char,
                                                   (::std::mem::size_of::<[libc::c_char; 14]>()
                                                        as
                                                        libc::c_ulong).wrapping_sub(1i32
                                                                                        as
                                                                                        libc::c_ulong))).value.p
                    as *mut RObject
        }
        return mrb_undef_value()
    }
    if !c.is_null() {
        if 0 != (*c).dump_result() { mrb_codedump_all(mrb, proc_0); }
        if 0 != (*c).no_exec() {
            return mrb_obj_value(proc_0 as *mut libc::c_void)
        }
        if !(*c).target_class.is_null() { target = (*c).target_class }
        if 0 != (*c).keep_lv() {
            keep = ((*c).slen + 1i32) as libc::c_uint
        } else { (*c).set_keep_lv(1i32 as mrb_bool) }
    }
    if (*proc_0).flags() as libc::c_int & 1024i32 != 0i32 {
        (*(*proc_0).e.env).c = target;
        mrb_field_write_barrier(mrb, (*proc_0).e.env as *mut RBasic,
                                target as *mut RBasic);
    } else {
        (*proc_0).e.target_class = target;
        mrb_field_write_barrier(mrb, proc_0 as *mut RBasic,
                                target as *mut RBasic);
    }
    if !(*(*mrb).c).ci.is_null() { (*(*(*mrb).c).ci).target_class = target }
    v = mrb_top_run(mrb, proc_0, mrb_top_self(mrb), keep);
    if !(*mrb).exc.is_null() { return mrb_nil_value() }
    return v;
}
#[no_mangle]
pub unsafe extern "C" fn mrb_load_nstring_cxt(mut mrb: *mut mrb_state,
                                              mut s: *const libc::c_char,
                                              mut len: size_t,
                                              mut c: *mut mrbc_context)
 -> mrb_value {
    return mrb_load_exec(mrb, mrb_parse_nstring(mrb, s, len, c), c);
}
#[no_mangle]
pub unsafe extern "C" fn mrb_load_nstring(mut mrb: *mut mrb_state,
                                          mut s: *const libc::c_char,
                                          mut len: size_t) -> mrb_value {
    return mrb_load_nstring_cxt(mrb, s, len, 0 as *mut mrbc_context);
}
#[no_mangle]
pub unsafe extern "C" fn mrb_load_string_cxt(mut mrb: *mut mrb_state,
                                             mut s: *const libc::c_char,
                                             mut c: *mut mrbc_context)
 -> mrb_value {
    return mrb_load_nstring_cxt(mrb, s, strlen(s), c);
}
/* program load functions */
#[no_mangle]
pub unsafe extern "C" fn mrb_load_string(mut mrb: *mut mrb_state,
                                         mut s: *const libc::c_char)
 -> mrb_value {
    return mrb_load_string_cxt(mrb, s, 0 as *mut mrbc_context);
}
#[no_mangle]
pub unsafe extern "C" fn mrb_parser_dump(mut mrb: *mut mrb_state,
                                         mut tree: *mut node,
                                         mut offset: libc::c_int) {
}
unsafe extern "C" fn run_static_initializers() {
    parser_state_zero =
        {
            let mut init =
                mrb_parser_state{_pad: [0; 2],
                                 cmd_start: [0; 1],
                                 _pad2: [0; 7],
                                 no_optimize_on_eval_capture_errors: [0; 1],
                                 _pad3: [0; 7],
                                 _pad4: [0; 4],
                                 mrb: 0 as *const mrb_state as *mut mrb_state,
                                 pool: 0 as *const mrb_pool as *mut mrb_pool,
                                 cells:
                                     0 as *const mrb_ast_node as
                                         *mut mrb_ast_node,
                                 s: 0 as *const libc::c_char,
                                 send: 0 as *const libc::c_char,
                                 cxt:
                                     0 as *const mrbc_context as
                                         *mut mrbc_context,
                                 filename_sym: 0,
                                 lineno: 0,
                                 column: 0,
                                 lstate: EXPR_BEG,
                                 lex_strterm:
                                     0 as *const mrb_ast_node as
                                         *mut mrb_ast_node,
                                 cond_stack: 0,
                                 cmdarg_stack: 0,
                                 paren_nest: 0,
                                 lpar_beg: 0,
                                 in_def: 0,
                                 in_single: 0,
                                 locals:
                                     0 as *const mrb_ast_node as
                                         *mut mrb_ast_node,
                                 pb:
                                     0 as *const mrb_ast_node as
                                         *mut mrb_ast_node,
                                 tokbuf:
                                     0 as *const libc::c_char as
                                         *mut libc::c_char,
                                 buf: [0; 256],
                                 tidx: 0,
                                 tsiz: 0,
                                 all_heredocs:
                                     0 as *const mrb_ast_node as
                                         *mut mrb_ast_node,
                                 heredocs_from_nextline:
                                     0 as *const mrb_ast_node as
                                         *mut mrb_ast_node,
                                 parsing_heredoc:
                                     0 as *const mrb_ast_node as
                                         *mut mrb_ast_node,
                                 lex_strterm_before_heredoc:
                                     0 as *const mrb_ast_node as
                                         *mut mrb_ast_node,
                                 ylval:
                                     0 as *const libc::c_void as
                                         *mut libc::c_void,
                                 nerr: 0,
                                 nwarn: 0,
                                 tree:
                                     0 as *const mrb_ast_node as
                                         *mut mrb_ast_node,
                                 error_buffer:
                                     [mrb_parser_message{lineno: 0,
                                                         column: 0,
                                                         message:
                                                             0 as
                                                                 *const libc::c_char
                                                                 as
                                                                 *mut libc::c_char,};
                                         10],
                                 warn_buffer:
                                     [mrb_parser_message{lineno: 0,
                                                         column: 0,
                                                         message:
                                                             0 as
                                                                 *const libc::c_char
                                                                 as
                                                                 *mut libc::c_char,};
                                         10],
                                 filename_table:
                                     0 as *const mrb_sym as *mut mrb_sym,
                                 filename_table_length: 0,
                                 current_filename_index: 0,
                                 jmp:
                                     0 as *const mrb_jmpbuf as
                                         *mut mrb_jmpbuf,};
            init.set_cmd_start(0);
            init.set_no_optimize(0);
            init.set_on_eval(0);
            init.set_capture_errors(0);
            init
        }
}
#[used]
#[cfg_attr ( target_os = "linux" , link_section = ".init_array" )]
#[cfg_attr ( target_os = "windows" , link_section = ".CRT$XIB" )]
#[cfg_attr ( target_os = "macos" , link_section = "__DATA,__mod_init_func" )]
static INIT_ARRAY: [unsafe extern "C" fn(); 1] = [run_static_initializers];